package client

import caliban.client.CalibanClientError.DecodingError
import caliban.client.FieldBuilder._
import caliban.client._
import caliban.client.__Value._




object Client {

  type Base64String = String
        
type Date = String
        
type DateTime = String
        
type GitObjectID = String
        
type GitRefname = String
        
type GitSSHRemote = String
        
type GitTimestamp = String
        
type HTML = String
        
type PreciseDateTime = String
        
type URI = String
        
type X509Certificate = String
        
  sealed trait ActorType extends scala.Product with scala.Serializable { def value: String }
        object ActorType {
          case object TEAM extends ActorType { val value: String = "TEAM" }
case object USER extends ActorType { val value: String = "USER" }

          implicit val decoder: ScalarDecoder[ActorType] = {
            case __StringValue ("TEAM") => Right(ActorType.TEAM)
case __StringValue ("USER") => Right(ActorType.USER)
            case other => Left(DecodingError(s"Can't build ActorType from input $other"))
          }
          implicit val encoder: ArgEncoder[ActorType] = {
            case ActorType.TEAM => __EnumValue("TEAM")
case ActorType.USER => __EnumValue("USER")
          }

          val values: scala.collection.immutable.Vector[ActorType] = scala.collection.immutable.Vector(TEAM, USER)
        }
       
sealed trait AuditLogOrderField extends scala.Product with scala.Serializable { def value: String }
        object AuditLogOrderField {
          case object CREATED_AT extends AuditLogOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[AuditLogOrderField] = {
            case __StringValue ("CREATED_AT") => Right(AuditLogOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build AuditLogOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[AuditLogOrderField] = {
            case AuditLogOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[AuditLogOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait CheckAnnotationLevel extends scala.Product with scala.Serializable { def value: String }
        object CheckAnnotationLevel {
          case object FAILURE extends CheckAnnotationLevel { val value: String = "FAILURE" }
case object NOTICE extends CheckAnnotationLevel { val value: String = "NOTICE" }
case object WARNING extends CheckAnnotationLevel { val value: String = "WARNING" }

          implicit val decoder: ScalarDecoder[CheckAnnotationLevel] = {
            case __StringValue ("FAILURE") => Right(CheckAnnotationLevel.FAILURE)
case __StringValue ("NOTICE") => Right(CheckAnnotationLevel.NOTICE)
case __StringValue ("WARNING") => Right(CheckAnnotationLevel.WARNING)
            case other => Left(DecodingError(s"Can't build CheckAnnotationLevel from input $other"))
          }
          implicit val encoder: ArgEncoder[CheckAnnotationLevel] = {
            case CheckAnnotationLevel.FAILURE => __EnumValue("FAILURE")
case CheckAnnotationLevel.NOTICE => __EnumValue("NOTICE")
case CheckAnnotationLevel.WARNING => __EnumValue("WARNING")
          }

          val values: scala.collection.immutable.Vector[CheckAnnotationLevel] = scala.collection.immutable.Vector(FAILURE, NOTICE, WARNING)
        }
       
sealed trait CheckConclusionState extends scala.Product with scala.Serializable { def value: String }
        object CheckConclusionState {
          case object ACTION_REQUIRED extends CheckConclusionState { val value: String = "ACTION_REQUIRED" }
case object CANCELLED extends CheckConclusionState { val value: String = "CANCELLED" }
case object FAILURE extends CheckConclusionState { val value: String = "FAILURE" }
case object NEUTRAL extends CheckConclusionState { val value: String = "NEUTRAL" }
case object SKIPPED extends CheckConclusionState { val value: String = "SKIPPED" }
case object STALE extends CheckConclusionState { val value: String = "STALE" }
case object STARTUP_FAILURE extends CheckConclusionState { val value: String = "STARTUP_FAILURE" }
case object SUCCESS extends CheckConclusionState { val value: String = "SUCCESS" }
case object TIMED_OUT extends CheckConclusionState { val value: String = "TIMED_OUT" }

          implicit val decoder: ScalarDecoder[CheckConclusionState] = {
            case __StringValue ("ACTION_REQUIRED") => Right(CheckConclusionState.ACTION_REQUIRED)
case __StringValue ("CANCELLED") => Right(CheckConclusionState.CANCELLED)
case __StringValue ("FAILURE") => Right(CheckConclusionState.FAILURE)
case __StringValue ("NEUTRAL") => Right(CheckConclusionState.NEUTRAL)
case __StringValue ("SKIPPED") => Right(CheckConclusionState.SKIPPED)
case __StringValue ("STALE") => Right(CheckConclusionState.STALE)
case __StringValue ("STARTUP_FAILURE") => Right(CheckConclusionState.STARTUP_FAILURE)
case __StringValue ("SUCCESS") => Right(CheckConclusionState.SUCCESS)
case __StringValue ("TIMED_OUT") => Right(CheckConclusionState.TIMED_OUT)
            case other => Left(DecodingError(s"Can't build CheckConclusionState from input $other"))
          }
          implicit val encoder: ArgEncoder[CheckConclusionState] = {
            case CheckConclusionState.ACTION_REQUIRED => __EnumValue("ACTION_REQUIRED")
case CheckConclusionState.CANCELLED => __EnumValue("CANCELLED")
case CheckConclusionState.FAILURE => __EnumValue("FAILURE")
case CheckConclusionState.NEUTRAL => __EnumValue("NEUTRAL")
case CheckConclusionState.SKIPPED => __EnumValue("SKIPPED")
case CheckConclusionState.STALE => __EnumValue("STALE")
case CheckConclusionState.STARTUP_FAILURE => __EnumValue("STARTUP_FAILURE")
case CheckConclusionState.SUCCESS => __EnumValue("SUCCESS")
case CheckConclusionState.TIMED_OUT => __EnumValue("TIMED_OUT")
          }

          val values: scala.collection.immutable.Vector[CheckConclusionState] = scala.collection.immutable.Vector(ACTION_REQUIRED, CANCELLED, FAILURE, NEUTRAL, SKIPPED, STALE, STARTUP_FAILURE, SUCCESS, TIMED_OUT)
        }
       
sealed trait CheckRunState extends scala.Product with scala.Serializable { def value: String }
        object CheckRunState {
          case object ACTION_REQUIRED extends CheckRunState { val value: String = "ACTION_REQUIRED" }
case object CANCELLED extends CheckRunState { val value: String = "CANCELLED" }
case object COMPLETED extends CheckRunState { val value: String = "COMPLETED" }
case object FAILURE extends CheckRunState { val value: String = "FAILURE" }
case object IN_PROGRESS extends CheckRunState { val value: String = "IN_PROGRESS" }
case object NEUTRAL extends CheckRunState { val value: String = "NEUTRAL" }
case object PENDING extends CheckRunState { val value: String = "PENDING" }
case object QUEUED extends CheckRunState { val value: String = "QUEUED" }
case object SKIPPED extends CheckRunState { val value: String = "SKIPPED" }
case object STALE extends CheckRunState { val value: String = "STALE" }
case object STARTUP_FAILURE extends CheckRunState { val value: String = "STARTUP_FAILURE" }
case object SUCCESS extends CheckRunState { val value: String = "SUCCESS" }
case object TIMED_OUT extends CheckRunState { val value: String = "TIMED_OUT" }
case object WAITING extends CheckRunState { val value: String = "WAITING" }

          implicit val decoder: ScalarDecoder[CheckRunState] = {
            case __StringValue ("ACTION_REQUIRED") => Right(CheckRunState.ACTION_REQUIRED)
case __StringValue ("CANCELLED") => Right(CheckRunState.CANCELLED)
case __StringValue ("COMPLETED") => Right(CheckRunState.COMPLETED)
case __StringValue ("FAILURE") => Right(CheckRunState.FAILURE)
case __StringValue ("IN_PROGRESS") => Right(CheckRunState.IN_PROGRESS)
case __StringValue ("NEUTRAL") => Right(CheckRunState.NEUTRAL)
case __StringValue ("PENDING") => Right(CheckRunState.PENDING)
case __StringValue ("QUEUED") => Right(CheckRunState.QUEUED)
case __StringValue ("SKIPPED") => Right(CheckRunState.SKIPPED)
case __StringValue ("STALE") => Right(CheckRunState.STALE)
case __StringValue ("STARTUP_FAILURE") => Right(CheckRunState.STARTUP_FAILURE)
case __StringValue ("SUCCESS") => Right(CheckRunState.SUCCESS)
case __StringValue ("TIMED_OUT") => Right(CheckRunState.TIMED_OUT)
case __StringValue ("WAITING") => Right(CheckRunState.WAITING)
            case other => Left(DecodingError(s"Can't build CheckRunState from input $other"))
          }
          implicit val encoder: ArgEncoder[CheckRunState] = {
            case CheckRunState.ACTION_REQUIRED => __EnumValue("ACTION_REQUIRED")
case CheckRunState.CANCELLED => __EnumValue("CANCELLED")
case CheckRunState.COMPLETED => __EnumValue("COMPLETED")
case CheckRunState.FAILURE => __EnumValue("FAILURE")
case CheckRunState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case CheckRunState.NEUTRAL => __EnumValue("NEUTRAL")
case CheckRunState.PENDING => __EnumValue("PENDING")
case CheckRunState.QUEUED => __EnumValue("QUEUED")
case CheckRunState.SKIPPED => __EnumValue("SKIPPED")
case CheckRunState.STALE => __EnumValue("STALE")
case CheckRunState.STARTUP_FAILURE => __EnumValue("STARTUP_FAILURE")
case CheckRunState.SUCCESS => __EnumValue("SUCCESS")
case CheckRunState.TIMED_OUT => __EnumValue("TIMED_OUT")
case CheckRunState.WAITING => __EnumValue("WAITING")
          }

          val values: scala.collection.immutable.Vector[CheckRunState] = scala.collection.immutable.Vector(ACTION_REQUIRED, CANCELLED, COMPLETED, FAILURE, IN_PROGRESS, NEUTRAL, PENDING, QUEUED, SKIPPED, STALE, STARTUP_FAILURE, SUCCESS, TIMED_OUT, WAITING)
        }
       
sealed trait CheckRunType extends scala.Product with scala.Serializable { def value: String }
        object CheckRunType {
          case object ALL extends CheckRunType { val value: String = "ALL" }
case object LATEST extends CheckRunType { val value: String = "LATEST" }

          implicit val decoder: ScalarDecoder[CheckRunType] = {
            case __StringValue ("ALL") => Right(CheckRunType.ALL)
case __StringValue ("LATEST") => Right(CheckRunType.LATEST)
            case other => Left(DecodingError(s"Can't build CheckRunType from input $other"))
          }
          implicit val encoder: ArgEncoder[CheckRunType] = {
            case CheckRunType.ALL => __EnumValue("ALL")
case CheckRunType.LATEST => __EnumValue("LATEST")
          }

          val values: scala.collection.immutable.Vector[CheckRunType] = scala.collection.immutable.Vector(ALL, LATEST)
        }
       
sealed trait CheckStatusState extends scala.Product with scala.Serializable { def value: String }
        object CheckStatusState {
          case object COMPLETED extends CheckStatusState { val value: String = "COMPLETED" }
case object IN_PROGRESS extends CheckStatusState { val value: String = "IN_PROGRESS" }
case object PENDING extends CheckStatusState { val value: String = "PENDING" }
case object QUEUED extends CheckStatusState { val value: String = "QUEUED" }
case object REQUESTED extends CheckStatusState { val value: String = "REQUESTED" }
case object WAITING extends CheckStatusState { val value: String = "WAITING" }

          implicit val decoder: ScalarDecoder[CheckStatusState] = {
            case __StringValue ("COMPLETED") => Right(CheckStatusState.COMPLETED)
case __StringValue ("IN_PROGRESS") => Right(CheckStatusState.IN_PROGRESS)
case __StringValue ("PENDING") => Right(CheckStatusState.PENDING)
case __StringValue ("QUEUED") => Right(CheckStatusState.QUEUED)
case __StringValue ("REQUESTED") => Right(CheckStatusState.REQUESTED)
case __StringValue ("WAITING") => Right(CheckStatusState.WAITING)
            case other => Left(DecodingError(s"Can't build CheckStatusState from input $other"))
          }
          implicit val encoder: ArgEncoder[CheckStatusState] = {
            case CheckStatusState.COMPLETED => __EnumValue("COMPLETED")
case CheckStatusState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case CheckStatusState.PENDING => __EnumValue("PENDING")
case CheckStatusState.QUEUED => __EnumValue("QUEUED")
case CheckStatusState.REQUESTED => __EnumValue("REQUESTED")
case CheckStatusState.WAITING => __EnumValue("WAITING")
          }

          val values: scala.collection.immutable.Vector[CheckStatusState] = scala.collection.immutable.Vector(COMPLETED, IN_PROGRESS, PENDING, QUEUED, REQUESTED, WAITING)
        }
       
sealed trait CollaboratorAffiliation extends scala.Product with scala.Serializable { def value: String }
        object CollaboratorAffiliation {
          case object ALL extends CollaboratorAffiliation { val value: String = "ALL" }
case object DIRECT extends CollaboratorAffiliation { val value: String = "DIRECT" }
case object OUTSIDE extends CollaboratorAffiliation { val value: String = "OUTSIDE" }

          implicit val decoder: ScalarDecoder[CollaboratorAffiliation] = {
            case __StringValue ("ALL") => Right(CollaboratorAffiliation.ALL)
case __StringValue ("DIRECT") => Right(CollaboratorAffiliation.DIRECT)
case __StringValue ("OUTSIDE") => Right(CollaboratorAffiliation.OUTSIDE)
            case other => Left(DecodingError(s"Can't build CollaboratorAffiliation from input $other"))
          }
          implicit val encoder: ArgEncoder[CollaboratorAffiliation] = {
            case CollaboratorAffiliation.ALL => __EnumValue("ALL")
case CollaboratorAffiliation.DIRECT => __EnumValue("DIRECT")
case CollaboratorAffiliation.OUTSIDE => __EnumValue("OUTSIDE")
          }

          val values: scala.collection.immutable.Vector[CollaboratorAffiliation] = scala.collection.immutable.Vector(ALL, DIRECT, OUTSIDE)
        }
       
sealed trait CommentAuthorAssociation extends scala.Product with scala.Serializable { def value: String }
        object CommentAuthorAssociation {
          case object COLLABORATOR extends CommentAuthorAssociation { val value: String = "COLLABORATOR" }
case object CONTRIBUTOR extends CommentAuthorAssociation { val value: String = "CONTRIBUTOR" }
case object FIRST_TIMER extends CommentAuthorAssociation { val value: String = "FIRST_TIMER" }
case object FIRST_TIME_CONTRIBUTOR extends CommentAuthorAssociation { val value: String = "FIRST_TIME_CONTRIBUTOR" }
case object MANNEQUIN extends CommentAuthorAssociation { val value: String = "MANNEQUIN" }
case object MEMBER extends CommentAuthorAssociation { val value: String = "MEMBER" }
case object NONE extends CommentAuthorAssociation { val value: String = "NONE" }
case object OWNER extends CommentAuthorAssociation { val value: String = "OWNER" }

          implicit val decoder: ScalarDecoder[CommentAuthorAssociation] = {
            case __StringValue ("COLLABORATOR") => Right(CommentAuthorAssociation.COLLABORATOR)
case __StringValue ("CONTRIBUTOR") => Right(CommentAuthorAssociation.CONTRIBUTOR)
case __StringValue ("FIRST_TIMER") => Right(CommentAuthorAssociation.FIRST_TIMER)
case __StringValue ("FIRST_TIME_CONTRIBUTOR") => Right(CommentAuthorAssociation.FIRST_TIME_CONTRIBUTOR)
case __StringValue ("MANNEQUIN") => Right(CommentAuthorAssociation.MANNEQUIN)
case __StringValue ("MEMBER") => Right(CommentAuthorAssociation.MEMBER)
case __StringValue ("NONE") => Right(CommentAuthorAssociation.NONE)
case __StringValue ("OWNER") => Right(CommentAuthorAssociation.OWNER)
            case other => Left(DecodingError(s"Can't build CommentAuthorAssociation from input $other"))
          }
          implicit val encoder: ArgEncoder[CommentAuthorAssociation] = {
            case CommentAuthorAssociation.COLLABORATOR => __EnumValue("COLLABORATOR")
case CommentAuthorAssociation.CONTRIBUTOR => __EnumValue("CONTRIBUTOR")
case CommentAuthorAssociation.FIRST_TIMER => __EnumValue("FIRST_TIMER")
case CommentAuthorAssociation.FIRST_TIME_CONTRIBUTOR => __EnumValue("FIRST_TIME_CONTRIBUTOR")
case CommentAuthorAssociation.MANNEQUIN => __EnumValue("MANNEQUIN")
case CommentAuthorAssociation.MEMBER => __EnumValue("MEMBER")
case CommentAuthorAssociation.NONE => __EnumValue("NONE")
case CommentAuthorAssociation.OWNER => __EnumValue("OWNER")
          }

          val values: scala.collection.immutable.Vector[CommentAuthorAssociation] = scala.collection.immutable.Vector(COLLABORATOR, CONTRIBUTOR, FIRST_TIMER, FIRST_TIME_CONTRIBUTOR, MANNEQUIN, MEMBER, NONE, OWNER)
        }
       
sealed trait CommentCannotUpdateReason extends scala.Product with scala.Serializable { def value: String }
        object CommentCannotUpdateReason {
          case object ARCHIVED extends CommentCannotUpdateReason { val value: String = "ARCHIVED" }
case object DENIED extends CommentCannotUpdateReason { val value: String = "DENIED" }
case object INSUFFICIENT_ACCESS extends CommentCannotUpdateReason { val value: String = "INSUFFICIENT_ACCESS" }
case object LOCKED extends CommentCannotUpdateReason { val value: String = "LOCKED" }
case object LOGIN_REQUIRED extends CommentCannotUpdateReason { val value: String = "LOGIN_REQUIRED" }
case object MAINTENANCE extends CommentCannotUpdateReason { val value: String = "MAINTENANCE" }
case object VERIFIED_EMAIL_REQUIRED extends CommentCannotUpdateReason { val value: String = "VERIFIED_EMAIL_REQUIRED" }

          implicit val decoder: ScalarDecoder[CommentCannotUpdateReason] = {
            case __StringValue ("ARCHIVED") => Right(CommentCannotUpdateReason.ARCHIVED)
case __StringValue ("DENIED") => Right(CommentCannotUpdateReason.DENIED)
case __StringValue ("INSUFFICIENT_ACCESS") => Right(CommentCannotUpdateReason.INSUFFICIENT_ACCESS)
case __StringValue ("LOCKED") => Right(CommentCannotUpdateReason.LOCKED)
case __StringValue ("LOGIN_REQUIRED") => Right(CommentCannotUpdateReason.LOGIN_REQUIRED)
case __StringValue ("MAINTENANCE") => Right(CommentCannotUpdateReason.MAINTENANCE)
case __StringValue ("VERIFIED_EMAIL_REQUIRED") => Right(CommentCannotUpdateReason.VERIFIED_EMAIL_REQUIRED)
            case other => Left(DecodingError(s"Can't build CommentCannotUpdateReason from input $other"))
          }
          implicit val encoder: ArgEncoder[CommentCannotUpdateReason] = {
            case CommentCannotUpdateReason.ARCHIVED => __EnumValue("ARCHIVED")
case CommentCannotUpdateReason.DENIED => __EnumValue("DENIED")
case CommentCannotUpdateReason.INSUFFICIENT_ACCESS => __EnumValue("INSUFFICIENT_ACCESS")
case CommentCannotUpdateReason.LOCKED => __EnumValue("LOCKED")
case CommentCannotUpdateReason.LOGIN_REQUIRED => __EnumValue("LOGIN_REQUIRED")
case CommentCannotUpdateReason.MAINTENANCE => __EnumValue("MAINTENANCE")
case CommentCannotUpdateReason.VERIFIED_EMAIL_REQUIRED => __EnumValue("VERIFIED_EMAIL_REQUIRED")
          }

          val values: scala.collection.immutable.Vector[CommentCannotUpdateReason] = scala.collection.immutable.Vector(ARCHIVED, DENIED, INSUFFICIENT_ACCESS, LOCKED, LOGIN_REQUIRED, MAINTENANCE, VERIFIED_EMAIL_REQUIRED)
        }
       
sealed trait CommitContributionOrderField extends scala.Product with scala.Serializable { def value: String }
        object CommitContributionOrderField {
          case object COMMIT_COUNT extends CommitContributionOrderField { val value: String = "COMMIT_COUNT" }
case object OCCURRED_AT extends CommitContributionOrderField { val value: String = "OCCURRED_AT" }

          implicit val decoder: ScalarDecoder[CommitContributionOrderField] = {
            case __StringValue ("COMMIT_COUNT") => Right(CommitContributionOrderField.COMMIT_COUNT)
case __StringValue ("OCCURRED_AT") => Right(CommitContributionOrderField.OCCURRED_AT)
            case other => Left(DecodingError(s"Can't build CommitContributionOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[CommitContributionOrderField] = {
            case CommitContributionOrderField.COMMIT_COUNT => __EnumValue("COMMIT_COUNT")
case CommitContributionOrderField.OCCURRED_AT => __EnumValue("OCCURRED_AT")
          }

          val values: scala.collection.immutable.Vector[CommitContributionOrderField] = scala.collection.immutable.Vector(COMMIT_COUNT, OCCURRED_AT)
        }
       
sealed trait ComparisonStatus extends scala.Product with scala.Serializable { def value: String }
        object ComparisonStatus {
          case object AHEAD extends ComparisonStatus { val value: String = "AHEAD" }
case object BEHIND extends ComparisonStatus { val value: String = "BEHIND" }
case object DIVERGED extends ComparisonStatus { val value: String = "DIVERGED" }
case object IDENTICAL extends ComparisonStatus { val value: String = "IDENTICAL" }

          implicit val decoder: ScalarDecoder[ComparisonStatus] = {
            case __StringValue ("AHEAD") => Right(ComparisonStatus.AHEAD)
case __StringValue ("BEHIND") => Right(ComparisonStatus.BEHIND)
case __StringValue ("DIVERGED") => Right(ComparisonStatus.DIVERGED)
case __StringValue ("IDENTICAL") => Right(ComparisonStatus.IDENTICAL)
            case other => Left(DecodingError(s"Can't build ComparisonStatus from input $other"))
          }
          implicit val encoder: ArgEncoder[ComparisonStatus] = {
            case ComparisonStatus.AHEAD => __EnumValue("AHEAD")
case ComparisonStatus.BEHIND => __EnumValue("BEHIND")
case ComparisonStatus.DIVERGED => __EnumValue("DIVERGED")
case ComparisonStatus.IDENTICAL => __EnumValue("IDENTICAL")
          }

          val values: scala.collection.immutable.Vector[ComparisonStatus] = scala.collection.immutable.Vector(AHEAD, BEHIND, DIVERGED, IDENTICAL)
        }
       
sealed trait ContributionLevel extends scala.Product with scala.Serializable { def value: String }
        object ContributionLevel {
          case object FIRST_QUARTILE extends ContributionLevel { val value: String = "FIRST_QUARTILE" }
case object FOURTH_QUARTILE extends ContributionLevel { val value: String = "FOURTH_QUARTILE" }
case object NONE extends ContributionLevel { val value: String = "NONE" }
case object SECOND_QUARTILE extends ContributionLevel { val value: String = "SECOND_QUARTILE" }
case object THIRD_QUARTILE extends ContributionLevel { val value: String = "THIRD_QUARTILE" }

          implicit val decoder: ScalarDecoder[ContributionLevel] = {
            case __StringValue ("FIRST_QUARTILE") => Right(ContributionLevel.FIRST_QUARTILE)
case __StringValue ("FOURTH_QUARTILE") => Right(ContributionLevel.FOURTH_QUARTILE)
case __StringValue ("NONE") => Right(ContributionLevel.NONE)
case __StringValue ("SECOND_QUARTILE") => Right(ContributionLevel.SECOND_QUARTILE)
case __StringValue ("THIRD_QUARTILE") => Right(ContributionLevel.THIRD_QUARTILE)
            case other => Left(DecodingError(s"Can't build ContributionLevel from input $other"))
          }
          implicit val encoder: ArgEncoder[ContributionLevel] = {
            case ContributionLevel.FIRST_QUARTILE => __EnumValue("FIRST_QUARTILE")
case ContributionLevel.FOURTH_QUARTILE => __EnumValue("FOURTH_QUARTILE")
case ContributionLevel.NONE => __EnumValue("NONE")
case ContributionLevel.SECOND_QUARTILE => __EnumValue("SECOND_QUARTILE")
case ContributionLevel.THIRD_QUARTILE => __EnumValue("THIRD_QUARTILE")
          }

          val values: scala.collection.immutable.Vector[ContributionLevel] = scala.collection.immutable.Vector(FIRST_QUARTILE, FOURTH_QUARTILE, NONE, SECOND_QUARTILE, THIRD_QUARTILE)
        }
       
sealed trait DefaultRepositoryPermissionField extends scala.Product with scala.Serializable { def value: String }
        object DefaultRepositoryPermissionField {
          case object ADMIN extends DefaultRepositoryPermissionField { val value: String = "ADMIN" }
case object NONE extends DefaultRepositoryPermissionField { val value: String = "NONE" }
case object READ extends DefaultRepositoryPermissionField { val value: String = "READ" }
case object WRITE extends DefaultRepositoryPermissionField { val value: String = "WRITE" }

          implicit val decoder: ScalarDecoder[DefaultRepositoryPermissionField] = {
            case __StringValue ("ADMIN") => Right(DefaultRepositoryPermissionField.ADMIN)
case __StringValue ("NONE") => Right(DefaultRepositoryPermissionField.NONE)
case __StringValue ("READ") => Right(DefaultRepositoryPermissionField.READ)
case __StringValue ("WRITE") => Right(DefaultRepositoryPermissionField.WRITE)
            case other => Left(DecodingError(s"Can't build DefaultRepositoryPermissionField from input $other"))
          }
          implicit val encoder: ArgEncoder[DefaultRepositoryPermissionField] = {
            case DefaultRepositoryPermissionField.ADMIN => __EnumValue("ADMIN")
case DefaultRepositoryPermissionField.NONE => __EnumValue("NONE")
case DefaultRepositoryPermissionField.READ => __EnumValue("READ")
case DefaultRepositoryPermissionField.WRITE => __EnumValue("WRITE")
          }

          val values: scala.collection.immutable.Vector[DefaultRepositoryPermissionField] = scala.collection.immutable.Vector(ADMIN, NONE, READ, WRITE)
        }
       
sealed trait DependencyGraphEcosystem extends scala.Product with scala.Serializable { def value: String }
        object DependencyGraphEcosystem {
          case object ACTIONS extends DependencyGraphEcosystem { val value: String = "ACTIONS" }
case object COMPOSER extends DependencyGraphEcosystem { val value: String = "COMPOSER" }
case object GO extends DependencyGraphEcosystem { val value: String = "GO" }
case object MAVEN extends DependencyGraphEcosystem { val value: String = "MAVEN" }
case object NPM extends DependencyGraphEcosystem { val value: String = "NPM" }
case object NUGET extends DependencyGraphEcosystem { val value: String = "NUGET" }
case object PIP extends DependencyGraphEcosystem { val value: String = "PIP" }
case object PUB extends DependencyGraphEcosystem { val value: String = "PUB" }
case object RUBYGEMS extends DependencyGraphEcosystem { val value: String = "RUBYGEMS" }
case object RUST extends DependencyGraphEcosystem { val value: String = "RUST" }

          implicit val decoder: ScalarDecoder[DependencyGraphEcosystem] = {
            case __StringValue ("ACTIONS") => Right(DependencyGraphEcosystem.ACTIONS)
case __StringValue ("COMPOSER") => Right(DependencyGraphEcosystem.COMPOSER)
case __StringValue ("GO") => Right(DependencyGraphEcosystem.GO)
case __StringValue ("MAVEN") => Right(DependencyGraphEcosystem.MAVEN)
case __StringValue ("NPM") => Right(DependencyGraphEcosystem.NPM)
case __StringValue ("NUGET") => Right(DependencyGraphEcosystem.NUGET)
case __StringValue ("PIP") => Right(DependencyGraphEcosystem.PIP)
case __StringValue ("PUB") => Right(DependencyGraphEcosystem.PUB)
case __StringValue ("RUBYGEMS") => Right(DependencyGraphEcosystem.RUBYGEMS)
case __StringValue ("RUST") => Right(DependencyGraphEcosystem.RUST)
            case other => Left(DecodingError(s"Can't build DependencyGraphEcosystem from input $other"))
          }
          implicit val encoder: ArgEncoder[DependencyGraphEcosystem] = {
            case DependencyGraphEcosystem.ACTIONS => __EnumValue("ACTIONS")
case DependencyGraphEcosystem.COMPOSER => __EnumValue("COMPOSER")
case DependencyGraphEcosystem.GO => __EnumValue("GO")
case DependencyGraphEcosystem.MAVEN => __EnumValue("MAVEN")
case DependencyGraphEcosystem.NPM => __EnumValue("NPM")
case DependencyGraphEcosystem.NUGET => __EnumValue("NUGET")
case DependencyGraphEcosystem.PIP => __EnumValue("PIP")
case DependencyGraphEcosystem.PUB => __EnumValue("PUB")
case DependencyGraphEcosystem.RUBYGEMS => __EnumValue("RUBYGEMS")
case DependencyGraphEcosystem.RUST => __EnumValue("RUST")
          }

          val values: scala.collection.immutable.Vector[DependencyGraphEcosystem] = scala.collection.immutable.Vector(ACTIONS, COMPOSER, GO, MAVEN, NPM, NUGET, PIP, PUB, RUBYGEMS, RUST)
        }
       
sealed trait DeploymentOrderField extends scala.Product with scala.Serializable { def value: String }
        object DeploymentOrderField {
          case object CREATED_AT extends DeploymentOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[DeploymentOrderField] = {
            case __StringValue ("CREATED_AT") => Right(DeploymentOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build DeploymentOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[DeploymentOrderField] = {
            case DeploymentOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[DeploymentOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait DeploymentProtectionRuleType extends scala.Product with scala.Serializable { def value: String }
        object DeploymentProtectionRuleType {
          case object REQUIRED_REVIEWERS extends DeploymentProtectionRuleType { val value: String = "REQUIRED_REVIEWERS" }
case object WAIT_TIMER extends DeploymentProtectionRuleType { val value: String = "WAIT_TIMER" }

          implicit val decoder: ScalarDecoder[DeploymentProtectionRuleType] = {
            case __StringValue ("REQUIRED_REVIEWERS") => Right(DeploymentProtectionRuleType.REQUIRED_REVIEWERS)
case __StringValue ("WAIT_TIMER") => Right(DeploymentProtectionRuleType.WAIT_TIMER)
            case other => Left(DecodingError(s"Can't build DeploymentProtectionRuleType from input $other"))
          }
          implicit val encoder: ArgEncoder[DeploymentProtectionRuleType] = {
            case DeploymentProtectionRuleType.REQUIRED_REVIEWERS => __EnumValue("REQUIRED_REVIEWERS")
case DeploymentProtectionRuleType.WAIT_TIMER => __EnumValue("WAIT_TIMER")
          }

          val values: scala.collection.immutable.Vector[DeploymentProtectionRuleType] = scala.collection.immutable.Vector(REQUIRED_REVIEWERS, WAIT_TIMER)
        }
       
sealed trait DeploymentReviewState extends scala.Product with scala.Serializable { def value: String }
        object DeploymentReviewState {
          case object APPROVED extends DeploymentReviewState { val value: String = "APPROVED" }
case object REJECTED extends DeploymentReviewState { val value: String = "REJECTED" }

          implicit val decoder: ScalarDecoder[DeploymentReviewState] = {
            case __StringValue ("APPROVED") => Right(DeploymentReviewState.APPROVED)
case __StringValue ("REJECTED") => Right(DeploymentReviewState.REJECTED)
            case other => Left(DecodingError(s"Can't build DeploymentReviewState from input $other"))
          }
          implicit val encoder: ArgEncoder[DeploymentReviewState] = {
            case DeploymentReviewState.APPROVED => __EnumValue("APPROVED")
case DeploymentReviewState.REJECTED => __EnumValue("REJECTED")
          }

          val values: scala.collection.immutable.Vector[DeploymentReviewState] = scala.collection.immutable.Vector(APPROVED, REJECTED)
        }
       
sealed trait DeploymentState extends scala.Product with scala.Serializable { def value: String }
        object DeploymentState {
          case object ABANDONED extends DeploymentState { val value: String = "ABANDONED" }
case object ACTIVE extends DeploymentState { val value: String = "ACTIVE" }
case object DESTROYED extends DeploymentState { val value: String = "DESTROYED" }
case object ERROR extends DeploymentState { val value: String = "ERROR" }
case object FAILURE extends DeploymentState { val value: String = "FAILURE" }
case object INACTIVE extends DeploymentState { val value: String = "INACTIVE" }
case object IN_PROGRESS extends DeploymentState { val value: String = "IN_PROGRESS" }
case object PENDING extends DeploymentState { val value: String = "PENDING" }
case object QUEUED extends DeploymentState { val value: String = "QUEUED" }
case object SUCCESS extends DeploymentState { val value: String = "SUCCESS" }
case object WAITING extends DeploymentState { val value: String = "WAITING" }

          implicit val decoder: ScalarDecoder[DeploymentState] = {
            case __StringValue ("ABANDONED") => Right(DeploymentState.ABANDONED)
case __StringValue ("ACTIVE") => Right(DeploymentState.ACTIVE)
case __StringValue ("DESTROYED") => Right(DeploymentState.DESTROYED)
case __StringValue ("ERROR") => Right(DeploymentState.ERROR)
case __StringValue ("FAILURE") => Right(DeploymentState.FAILURE)
case __StringValue ("INACTIVE") => Right(DeploymentState.INACTIVE)
case __StringValue ("IN_PROGRESS") => Right(DeploymentState.IN_PROGRESS)
case __StringValue ("PENDING") => Right(DeploymentState.PENDING)
case __StringValue ("QUEUED") => Right(DeploymentState.QUEUED)
case __StringValue ("SUCCESS") => Right(DeploymentState.SUCCESS)
case __StringValue ("WAITING") => Right(DeploymentState.WAITING)
            case other => Left(DecodingError(s"Can't build DeploymentState from input $other"))
          }
          implicit val encoder: ArgEncoder[DeploymentState] = {
            case DeploymentState.ABANDONED => __EnumValue("ABANDONED")
case DeploymentState.ACTIVE => __EnumValue("ACTIVE")
case DeploymentState.DESTROYED => __EnumValue("DESTROYED")
case DeploymentState.ERROR => __EnumValue("ERROR")
case DeploymentState.FAILURE => __EnumValue("FAILURE")
case DeploymentState.INACTIVE => __EnumValue("INACTIVE")
case DeploymentState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case DeploymentState.PENDING => __EnumValue("PENDING")
case DeploymentState.QUEUED => __EnumValue("QUEUED")
case DeploymentState.SUCCESS => __EnumValue("SUCCESS")
case DeploymentState.WAITING => __EnumValue("WAITING")
          }

          val values: scala.collection.immutable.Vector[DeploymentState] = scala.collection.immutable.Vector(ABANDONED, ACTIVE, DESTROYED, ERROR, FAILURE, INACTIVE, IN_PROGRESS, PENDING, QUEUED, SUCCESS, WAITING)
        }
       
sealed trait DeploymentStatusState extends scala.Product with scala.Serializable { def value: String }
        object DeploymentStatusState {
          case object ERROR extends DeploymentStatusState { val value: String = "ERROR" }
case object FAILURE extends DeploymentStatusState { val value: String = "FAILURE" }
case object INACTIVE extends DeploymentStatusState { val value: String = "INACTIVE" }
case object IN_PROGRESS extends DeploymentStatusState { val value: String = "IN_PROGRESS" }
case object PENDING extends DeploymentStatusState { val value: String = "PENDING" }
case object QUEUED extends DeploymentStatusState { val value: String = "QUEUED" }
case object SUCCESS extends DeploymentStatusState { val value: String = "SUCCESS" }
case object WAITING extends DeploymentStatusState { val value: String = "WAITING" }

          implicit val decoder: ScalarDecoder[DeploymentStatusState] = {
            case __StringValue ("ERROR") => Right(DeploymentStatusState.ERROR)
case __StringValue ("FAILURE") => Right(DeploymentStatusState.FAILURE)
case __StringValue ("INACTIVE") => Right(DeploymentStatusState.INACTIVE)
case __StringValue ("IN_PROGRESS") => Right(DeploymentStatusState.IN_PROGRESS)
case __StringValue ("PENDING") => Right(DeploymentStatusState.PENDING)
case __StringValue ("QUEUED") => Right(DeploymentStatusState.QUEUED)
case __StringValue ("SUCCESS") => Right(DeploymentStatusState.SUCCESS)
case __StringValue ("WAITING") => Right(DeploymentStatusState.WAITING)
            case other => Left(DecodingError(s"Can't build DeploymentStatusState from input $other"))
          }
          implicit val encoder: ArgEncoder[DeploymentStatusState] = {
            case DeploymentStatusState.ERROR => __EnumValue("ERROR")
case DeploymentStatusState.FAILURE => __EnumValue("FAILURE")
case DeploymentStatusState.INACTIVE => __EnumValue("INACTIVE")
case DeploymentStatusState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case DeploymentStatusState.PENDING => __EnumValue("PENDING")
case DeploymentStatusState.QUEUED => __EnumValue("QUEUED")
case DeploymentStatusState.SUCCESS => __EnumValue("SUCCESS")
case DeploymentStatusState.WAITING => __EnumValue("WAITING")
          }

          val values: scala.collection.immutable.Vector[DeploymentStatusState] = scala.collection.immutable.Vector(ERROR, FAILURE, INACTIVE, IN_PROGRESS, PENDING, QUEUED, SUCCESS, WAITING)
        }
       
sealed trait DiffSide extends scala.Product with scala.Serializable { def value: String }
        object DiffSide {
          case object LEFT extends DiffSide { val value: String = "LEFT" }
case object RIGHT extends DiffSide { val value: String = "RIGHT" }

          implicit val decoder: ScalarDecoder[DiffSide] = {
            case __StringValue ("LEFT") => Right(DiffSide.LEFT)
case __StringValue ("RIGHT") => Right(DiffSide.RIGHT)
            case other => Left(DecodingError(s"Can't build DiffSide from input $other"))
          }
          implicit val encoder: ArgEncoder[DiffSide] = {
            case DiffSide.LEFT => __EnumValue("LEFT")
case DiffSide.RIGHT => __EnumValue("RIGHT")
          }

          val values: scala.collection.immutable.Vector[DiffSide] = scala.collection.immutable.Vector(LEFT, RIGHT)
        }
       
sealed trait DiscussionCloseReason extends scala.Product with scala.Serializable { def value: String }
        object DiscussionCloseReason {
          case object DUPLICATE extends DiscussionCloseReason { val value: String = "DUPLICATE" }
case object OUTDATED extends DiscussionCloseReason { val value: String = "OUTDATED" }
case object RESOLVED extends DiscussionCloseReason { val value: String = "RESOLVED" }

          implicit val decoder: ScalarDecoder[DiscussionCloseReason] = {
            case __StringValue ("DUPLICATE") => Right(DiscussionCloseReason.DUPLICATE)
case __StringValue ("OUTDATED") => Right(DiscussionCloseReason.OUTDATED)
case __StringValue ("RESOLVED") => Right(DiscussionCloseReason.RESOLVED)
            case other => Left(DecodingError(s"Can't build DiscussionCloseReason from input $other"))
          }
          implicit val encoder: ArgEncoder[DiscussionCloseReason] = {
            case DiscussionCloseReason.DUPLICATE => __EnumValue("DUPLICATE")
case DiscussionCloseReason.OUTDATED => __EnumValue("OUTDATED")
case DiscussionCloseReason.RESOLVED => __EnumValue("RESOLVED")
          }

          val values: scala.collection.immutable.Vector[DiscussionCloseReason] = scala.collection.immutable.Vector(DUPLICATE, OUTDATED, RESOLVED)
        }
       
sealed trait DiscussionOrderField extends scala.Product with scala.Serializable { def value: String }
        object DiscussionOrderField {
          case object CREATED_AT extends DiscussionOrderField { val value: String = "CREATED_AT" }
case object UPDATED_AT extends DiscussionOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[DiscussionOrderField] = {
            case __StringValue ("CREATED_AT") => Right(DiscussionOrderField.CREATED_AT)
case __StringValue ("UPDATED_AT") => Right(DiscussionOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build DiscussionOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[DiscussionOrderField] = {
            case DiscussionOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case DiscussionOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[DiscussionOrderField] = scala.collection.immutable.Vector(CREATED_AT, UPDATED_AT)
        }
       
sealed trait DiscussionPollOptionOrderField extends scala.Product with scala.Serializable { def value: String }
        object DiscussionPollOptionOrderField {
          case object AUTHORED_ORDER extends DiscussionPollOptionOrderField { val value: String = "AUTHORED_ORDER" }
case object VOTE_COUNT extends DiscussionPollOptionOrderField { val value: String = "VOTE_COUNT" }

          implicit val decoder: ScalarDecoder[DiscussionPollOptionOrderField] = {
            case __StringValue ("AUTHORED_ORDER") => Right(DiscussionPollOptionOrderField.AUTHORED_ORDER)
case __StringValue ("VOTE_COUNT") => Right(DiscussionPollOptionOrderField.VOTE_COUNT)
            case other => Left(DecodingError(s"Can't build DiscussionPollOptionOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[DiscussionPollOptionOrderField] = {
            case DiscussionPollOptionOrderField.AUTHORED_ORDER => __EnumValue("AUTHORED_ORDER")
case DiscussionPollOptionOrderField.VOTE_COUNT => __EnumValue("VOTE_COUNT")
          }

          val values: scala.collection.immutable.Vector[DiscussionPollOptionOrderField] = scala.collection.immutable.Vector(AUTHORED_ORDER, VOTE_COUNT)
        }
       
sealed trait DiscussionState extends scala.Product with scala.Serializable { def value: String }
        object DiscussionState {
          case object CLOSED extends DiscussionState { val value: String = "CLOSED" }
case object OPEN extends DiscussionState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[DiscussionState] = {
            case __StringValue ("CLOSED") => Right(DiscussionState.CLOSED)
case __StringValue ("OPEN") => Right(DiscussionState.OPEN)
            case other => Left(DecodingError(s"Can't build DiscussionState from input $other"))
          }
          implicit val encoder: ArgEncoder[DiscussionState] = {
            case DiscussionState.CLOSED => __EnumValue("CLOSED")
case DiscussionState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[DiscussionState] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait DiscussionStateReason extends scala.Product with scala.Serializable { def value: String }
        object DiscussionStateReason {
          case object DUPLICATE extends DiscussionStateReason { val value: String = "DUPLICATE" }
case object OUTDATED extends DiscussionStateReason { val value: String = "OUTDATED" }
case object REOPENED extends DiscussionStateReason { val value: String = "REOPENED" }
case object RESOLVED extends DiscussionStateReason { val value: String = "RESOLVED" }

          implicit val decoder: ScalarDecoder[DiscussionStateReason] = {
            case __StringValue ("DUPLICATE") => Right(DiscussionStateReason.DUPLICATE)
case __StringValue ("OUTDATED") => Right(DiscussionStateReason.OUTDATED)
case __StringValue ("REOPENED") => Right(DiscussionStateReason.REOPENED)
case __StringValue ("RESOLVED") => Right(DiscussionStateReason.RESOLVED)
            case other => Left(DecodingError(s"Can't build DiscussionStateReason from input $other"))
          }
          implicit val encoder: ArgEncoder[DiscussionStateReason] = {
            case DiscussionStateReason.DUPLICATE => __EnumValue("DUPLICATE")
case DiscussionStateReason.OUTDATED => __EnumValue("OUTDATED")
case DiscussionStateReason.REOPENED => __EnumValue("REOPENED")
case DiscussionStateReason.RESOLVED => __EnumValue("RESOLVED")
          }

          val values: scala.collection.immutable.Vector[DiscussionStateReason] = scala.collection.immutable.Vector(DUPLICATE, OUTDATED, REOPENED, RESOLVED)
        }
       
sealed trait DismissReason extends scala.Product with scala.Serializable { def value: String }
        object DismissReason {
          case object FIX_STARTED extends DismissReason { val value: String = "FIX_STARTED" }
case object INACCURATE extends DismissReason { val value: String = "INACCURATE" }
case object NOT_USED extends DismissReason { val value: String = "NOT_USED" }
case object NO_BANDWIDTH extends DismissReason { val value: String = "NO_BANDWIDTH" }
case object TOLERABLE_RISK extends DismissReason { val value: String = "TOLERABLE_RISK" }

          implicit val decoder: ScalarDecoder[DismissReason] = {
            case __StringValue ("FIX_STARTED") => Right(DismissReason.FIX_STARTED)
case __StringValue ("INACCURATE") => Right(DismissReason.INACCURATE)
case __StringValue ("NOT_USED") => Right(DismissReason.NOT_USED)
case __StringValue ("NO_BANDWIDTH") => Right(DismissReason.NO_BANDWIDTH)
case __StringValue ("TOLERABLE_RISK") => Right(DismissReason.TOLERABLE_RISK)
            case other => Left(DecodingError(s"Can't build DismissReason from input $other"))
          }
          implicit val encoder: ArgEncoder[DismissReason] = {
            case DismissReason.FIX_STARTED => __EnumValue("FIX_STARTED")
case DismissReason.INACCURATE => __EnumValue("INACCURATE")
case DismissReason.NOT_USED => __EnumValue("NOT_USED")
case DismissReason.NO_BANDWIDTH => __EnumValue("NO_BANDWIDTH")
case DismissReason.TOLERABLE_RISK => __EnumValue("TOLERABLE_RISK")
          }

          val values: scala.collection.immutable.Vector[DismissReason] = scala.collection.immutable.Vector(FIX_STARTED, INACCURATE, NOT_USED, NO_BANDWIDTH, TOLERABLE_RISK)
        }
       
sealed trait EnterpriseAdministratorInvitationOrderField extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseAdministratorInvitationOrderField {
          case object CREATED_AT extends EnterpriseAdministratorInvitationOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[EnterpriseAdministratorInvitationOrderField] = {
            case __StringValue ("CREATED_AT") => Right(EnterpriseAdministratorInvitationOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build EnterpriseAdministratorInvitationOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseAdministratorInvitationOrderField] = {
            case EnterpriseAdministratorInvitationOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[EnterpriseAdministratorInvitationOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait EnterpriseAdministratorRole extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseAdministratorRole {
          case object BILLING_MANAGER extends EnterpriseAdministratorRole { val value: String = "BILLING_MANAGER" }
case object OWNER extends EnterpriseAdministratorRole { val value: String = "OWNER" }

          implicit val decoder: ScalarDecoder[EnterpriseAdministratorRole] = {
            case __StringValue ("BILLING_MANAGER") => Right(EnterpriseAdministratorRole.BILLING_MANAGER)
case __StringValue ("OWNER") => Right(EnterpriseAdministratorRole.OWNER)
            case other => Left(DecodingError(s"Can't build EnterpriseAdministratorRole from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseAdministratorRole] = {
            case EnterpriseAdministratorRole.BILLING_MANAGER => __EnumValue("BILLING_MANAGER")
case EnterpriseAdministratorRole.OWNER => __EnumValue("OWNER")
          }

          val values: scala.collection.immutable.Vector[EnterpriseAdministratorRole] = scala.collection.immutable.Vector(BILLING_MANAGER, OWNER)
        }
       
sealed trait EnterpriseAllowPrivateRepositoryForkingPolicyValue extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseAllowPrivateRepositoryForkingPolicyValue {
          case object ENTERPRISE_ORGANIZATIONS extends EnterpriseAllowPrivateRepositoryForkingPolicyValue { val value: String = "ENTERPRISE_ORGANIZATIONS" }
case object ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS extends EnterpriseAllowPrivateRepositoryForkingPolicyValue { val value: String = "ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS" }
case object EVERYWHERE extends EnterpriseAllowPrivateRepositoryForkingPolicyValue { val value: String = "EVERYWHERE" }
case object SAME_ORGANIZATION extends EnterpriseAllowPrivateRepositoryForkingPolicyValue { val value: String = "SAME_ORGANIZATION" }
case object SAME_ORGANIZATION_USER_ACCOUNTS extends EnterpriseAllowPrivateRepositoryForkingPolicyValue { val value: String = "SAME_ORGANIZATION_USER_ACCOUNTS" }
case object USER_ACCOUNTS extends EnterpriseAllowPrivateRepositoryForkingPolicyValue { val value: String = "USER_ACCOUNTS" }

          implicit val decoder: ScalarDecoder[EnterpriseAllowPrivateRepositoryForkingPolicyValue] = {
            case __StringValue ("ENTERPRISE_ORGANIZATIONS") => Right(EnterpriseAllowPrivateRepositoryForkingPolicyValue.ENTERPRISE_ORGANIZATIONS)
case __StringValue ("ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS") => Right(EnterpriseAllowPrivateRepositoryForkingPolicyValue.ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS)
case __StringValue ("EVERYWHERE") => Right(EnterpriseAllowPrivateRepositoryForkingPolicyValue.EVERYWHERE)
case __StringValue ("SAME_ORGANIZATION") => Right(EnterpriseAllowPrivateRepositoryForkingPolicyValue.SAME_ORGANIZATION)
case __StringValue ("SAME_ORGANIZATION_USER_ACCOUNTS") => Right(EnterpriseAllowPrivateRepositoryForkingPolicyValue.SAME_ORGANIZATION_USER_ACCOUNTS)
case __StringValue ("USER_ACCOUNTS") => Right(EnterpriseAllowPrivateRepositoryForkingPolicyValue.USER_ACCOUNTS)
            case other => Left(DecodingError(s"Can't build EnterpriseAllowPrivateRepositoryForkingPolicyValue from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseAllowPrivateRepositoryForkingPolicyValue] = {
            case EnterpriseAllowPrivateRepositoryForkingPolicyValue.ENTERPRISE_ORGANIZATIONS => __EnumValue("ENTERPRISE_ORGANIZATIONS")
case EnterpriseAllowPrivateRepositoryForkingPolicyValue.ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS => __EnumValue("ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS")
case EnterpriseAllowPrivateRepositoryForkingPolicyValue.EVERYWHERE => __EnumValue("EVERYWHERE")
case EnterpriseAllowPrivateRepositoryForkingPolicyValue.SAME_ORGANIZATION => __EnumValue("SAME_ORGANIZATION")
case EnterpriseAllowPrivateRepositoryForkingPolicyValue.SAME_ORGANIZATION_USER_ACCOUNTS => __EnumValue("SAME_ORGANIZATION_USER_ACCOUNTS")
case EnterpriseAllowPrivateRepositoryForkingPolicyValue.USER_ACCOUNTS => __EnumValue("USER_ACCOUNTS")
          }

          val values: scala.collection.immutable.Vector[EnterpriseAllowPrivateRepositoryForkingPolicyValue] = scala.collection.immutable.Vector(ENTERPRISE_ORGANIZATIONS, ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS, EVERYWHERE, SAME_ORGANIZATION, SAME_ORGANIZATION_USER_ACCOUNTS, USER_ACCOUNTS)
        }
       
sealed trait EnterpriseDefaultRepositoryPermissionSettingValue extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseDefaultRepositoryPermissionSettingValue {
          case object ADMIN extends EnterpriseDefaultRepositoryPermissionSettingValue { val value: String = "ADMIN" }
case object NONE extends EnterpriseDefaultRepositoryPermissionSettingValue { val value: String = "NONE" }
case object NO_POLICY extends EnterpriseDefaultRepositoryPermissionSettingValue { val value: String = "NO_POLICY" }
case object READ extends EnterpriseDefaultRepositoryPermissionSettingValue { val value: String = "READ" }
case object WRITE extends EnterpriseDefaultRepositoryPermissionSettingValue { val value: String = "WRITE" }

          implicit val decoder: ScalarDecoder[EnterpriseDefaultRepositoryPermissionSettingValue] = {
            case __StringValue ("ADMIN") => Right(EnterpriseDefaultRepositoryPermissionSettingValue.ADMIN)
case __StringValue ("NONE") => Right(EnterpriseDefaultRepositoryPermissionSettingValue.NONE)
case __StringValue ("NO_POLICY") => Right(EnterpriseDefaultRepositoryPermissionSettingValue.NO_POLICY)
case __StringValue ("READ") => Right(EnterpriseDefaultRepositoryPermissionSettingValue.READ)
case __StringValue ("WRITE") => Right(EnterpriseDefaultRepositoryPermissionSettingValue.WRITE)
            case other => Left(DecodingError(s"Can't build EnterpriseDefaultRepositoryPermissionSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseDefaultRepositoryPermissionSettingValue] = {
            case EnterpriseDefaultRepositoryPermissionSettingValue.ADMIN => __EnumValue("ADMIN")
case EnterpriseDefaultRepositoryPermissionSettingValue.NONE => __EnumValue("NONE")
case EnterpriseDefaultRepositoryPermissionSettingValue.NO_POLICY => __EnumValue("NO_POLICY")
case EnterpriseDefaultRepositoryPermissionSettingValue.READ => __EnumValue("READ")
case EnterpriseDefaultRepositoryPermissionSettingValue.WRITE => __EnumValue("WRITE")
          }

          val values: scala.collection.immutable.Vector[EnterpriseDefaultRepositoryPermissionSettingValue] = scala.collection.immutable.Vector(ADMIN, NONE, NO_POLICY, READ, WRITE)
        }
       
sealed trait EnterpriseEnabledDisabledSettingValue extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseEnabledDisabledSettingValue {
          case object DISABLED extends EnterpriseEnabledDisabledSettingValue { val value: String = "DISABLED" }
case object ENABLED extends EnterpriseEnabledDisabledSettingValue { val value: String = "ENABLED" }
case object NO_POLICY extends EnterpriseEnabledDisabledSettingValue { val value: String = "NO_POLICY" }

          implicit val decoder: ScalarDecoder[EnterpriseEnabledDisabledSettingValue] = {
            case __StringValue ("DISABLED") => Right(EnterpriseEnabledDisabledSettingValue.DISABLED)
case __StringValue ("ENABLED") => Right(EnterpriseEnabledDisabledSettingValue.ENABLED)
case __StringValue ("NO_POLICY") => Right(EnterpriseEnabledDisabledSettingValue.NO_POLICY)
            case other => Left(DecodingError(s"Can't build EnterpriseEnabledDisabledSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseEnabledDisabledSettingValue] = {
            case EnterpriseEnabledDisabledSettingValue.DISABLED => __EnumValue("DISABLED")
case EnterpriseEnabledDisabledSettingValue.ENABLED => __EnumValue("ENABLED")
case EnterpriseEnabledDisabledSettingValue.NO_POLICY => __EnumValue("NO_POLICY")
          }

          val values: scala.collection.immutable.Vector[EnterpriseEnabledDisabledSettingValue] = scala.collection.immutable.Vector(DISABLED, ENABLED, NO_POLICY)
        }
       
sealed trait EnterpriseEnabledSettingValue extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseEnabledSettingValue {
          case object ENABLED extends EnterpriseEnabledSettingValue { val value: String = "ENABLED" }
case object NO_POLICY extends EnterpriseEnabledSettingValue { val value: String = "NO_POLICY" }

          implicit val decoder: ScalarDecoder[EnterpriseEnabledSettingValue] = {
            case __StringValue ("ENABLED") => Right(EnterpriseEnabledSettingValue.ENABLED)
case __StringValue ("NO_POLICY") => Right(EnterpriseEnabledSettingValue.NO_POLICY)
            case other => Left(DecodingError(s"Can't build EnterpriseEnabledSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseEnabledSettingValue] = {
            case EnterpriseEnabledSettingValue.ENABLED => __EnumValue("ENABLED")
case EnterpriseEnabledSettingValue.NO_POLICY => __EnumValue("NO_POLICY")
          }

          val values: scala.collection.immutable.Vector[EnterpriseEnabledSettingValue] = scala.collection.immutable.Vector(ENABLED, NO_POLICY)
        }
       
sealed trait EnterpriseMemberOrderField extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseMemberOrderField {
          case object CREATED_AT extends EnterpriseMemberOrderField { val value: String = "CREATED_AT" }
case object LOGIN extends EnterpriseMemberOrderField { val value: String = "LOGIN" }

          implicit val decoder: ScalarDecoder[EnterpriseMemberOrderField] = {
            case __StringValue ("CREATED_AT") => Right(EnterpriseMemberOrderField.CREATED_AT)
case __StringValue ("LOGIN") => Right(EnterpriseMemberOrderField.LOGIN)
            case other => Left(DecodingError(s"Can't build EnterpriseMemberOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseMemberOrderField] = {
            case EnterpriseMemberOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case EnterpriseMemberOrderField.LOGIN => __EnumValue("LOGIN")
          }

          val values: scala.collection.immutable.Vector[EnterpriseMemberOrderField] = scala.collection.immutable.Vector(CREATED_AT, LOGIN)
        }
       
sealed trait EnterpriseMembersCanCreateRepositoriesSettingValue extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseMembersCanCreateRepositoriesSettingValue {
          case object ALL extends EnterpriseMembersCanCreateRepositoriesSettingValue { val value: String = "ALL" }
case object DISABLED extends EnterpriseMembersCanCreateRepositoriesSettingValue { val value: String = "DISABLED" }
case object NO_POLICY extends EnterpriseMembersCanCreateRepositoriesSettingValue { val value: String = "NO_POLICY" }
case object PRIVATE extends EnterpriseMembersCanCreateRepositoriesSettingValue { val value: String = "PRIVATE" }
case object PUBLIC extends EnterpriseMembersCanCreateRepositoriesSettingValue { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[EnterpriseMembersCanCreateRepositoriesSettingValue] = {
            case __StringValue ("ALL") => Right(EnterpriseMembersCanCreateRepositoriesSettingValue.ALL)
case __StringValue ("DISABLED") => Right(EnterpriseMembersCanCreateRepositoriesSettingValue.DISABLED)
case __StringValue ("NO_POLICY") => Right(EnterpriseMembersCanCreateRepositoriesSettingValue.NO_POLICY)
case __StringValue ("PRIVATE") => Right(EnterpriseMembersCanCreateRepositoriesSettingValue.PRIVATE)
case __StringValue ("PUBLIC") => Right(EnterpriseMembersCanCreateRepositoriesSettingValue.PUBLIC)
            case other => Left(DecodingError(s"Can't build EnterpriseMembersCanCreateRepositoriesSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseMembersCanCreateRepositoriesSettingValue] = {
            case EnterpriseMembersCanCreateRepositoriesSettingValue.ALL => __EnumValue("ALL")
case EnterpriseMembersCanCreateRepositoriesSettingValue.DISABLED => __EnumValue("DISABLED")
case EnterpriseMembersCanCreateRepositoriesSettingValue.NO_POLICY => __EnumValue("NO_POLICY")
case EnterpriseMembersCanCreateRepositoriesSettingValue.PRIVATE => __EnumValue("PRIVATE")
case EnterpriseMembersCanCreateRepositoriesSettingValue.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[EnterpriseMembersCanCreateRepositoriesSettingValue] = scala.collection.immutable.Vector(ALL, DISABLED, NO_POLICY, PRIVATE, PUBLIC)
        }
       
sealed trait EnterpriseMembersCanMakePurchasesSettingValue extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseMembersCanMakePurchasesSettingValue {
          case object DISABLED extends EnterpriseMembersCanMakePurchasesSettingValue { val value: String = "DISABLED" }
case object ENABLED extends EnterpriseMembersCanMakePurchasesSettingValue { val value: String = "ENABLED" }

          implicit val decoder: ScalarDecoder[EnterpriseMembersCanMakePurchasesSettingValue] = {
            case __StringValue ("DISABLED") => Right(EnterpriseMembersCanMakePurchasesSettingValue.DISABLED)
case __StringValue ("ENABLED") => Right(EnterpriseMembersCanMakePurchasesSettingValue.ENABLED)
            case other => Left(DecodingError(s"Can't build EnterpriseMembersCanMakePurchasesSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseMembersCanMakePurchasesSettingValue] = {
            case EnterpriseMembersCanMakePurchasesSettingValue.DISABLED => __EnumValue("DISABLED")
case EnterpriseMembersCanMakePurchasesSettingValue.ENABLED => __EnumValue("ENABLED")
          }

          val values: scala.collection.immutable.Vector[EnterpriseMembersCanMakePurchasesSettingValue] = scala.collection.immutable.Vector(DISABLED, ENABLED)
        }
       
sealed trait EnterpriseServerInstallationOrderField extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseServerInstallationOrderField {
          case object CREATED_AT extends EnterpriseServerInstallationOrderField { val value: String = "CREATED_AT" }
case object CUSTOMER_NAME extends EnterpriseServerInstallationOrderField { val value: String = "CUSTOMER_NAME" }
case object HOST_NAME extends EnterpriseServerInstallationOrderField { val value: String = "HOST_NAME" }

          implicit val decoder: ScalarDecoder[EnterpriseServerInstallationOrderField] = {
            case __StringValue ("CREATED_AT") => Right(EnterpriseServerInstallationOrderField.CREATED_AT)
case __StringValue ("CUSTOMER_NAME") => Right(EnterpriseServerInstallationOrderField.CUSTOMER_NAME)
case __StringValue ("HOST_NAME") => Right(EnterpriseServerInstallationOrderField.HOST_NAME)
            case other => Left(DecodingError(s"Can't build EnterpriseServerInstallationOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseServerInstallationOrderField] = {
            case EnterpriseServerInstallationOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case EnterpriseServerInstallationOrderField.CUSTOMER_NAME => __EnumValue("CUSTOMER_NAME")
case EnterpriseServerInstallationOrderField.HOST_NAME => __EnumValue("HOST_NAME")
          }

          val values: scala.collection.immutable.Vector[EnterpriseServerInstallationOrderField] = scala.collection.immutable.Vector(CREATED_AT, CUSTOMER_NAME, HOST_NAME)
        }
       
sealed trait EnterpriseServerUserAccountEmailOrderField extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseServerUserAccountEmailOrderField {
          case object EMAIL extends EnterpriseServerUserAccountEmailOrderField { val value: String = "EMAIL" }

          implicit val decoder: ScalarDecoder[EnterpriseServerUserAccountEmailOrderField] = {
            case __StringValue ("EMAIL") => Right(EnterpriseServerUserAccountEmailOrderField.EMAIL)
            case other => Left(DecodingError(s"Can't build EnterpriseServerUserAccountEmailOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseServerUserAccountEmailOrderField] = {
            case EnterpriseServerUserAccountEmailOrderField.EMAIL => __EnumValue("EMAIL")
          }

          val values: scala.collection.immutable.Vector[EnterpriseServerUserAccountEmailOrderField] = scala.collection.immutable.Vector(EMAIL)
        }
       
sealed trait EnterpriseServerUserAccountOrderField extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseServerUserAccountOrderField {
          case object LOGIN extends EnterpriseServerUserAccountOrderField { val value: String = "LOGIN" }
case object REMOTE_CREATED_AT extends EnterpriseServerUserAccountOrderField { val value: String = "REMOTE_CREATED_AT" }

          implicit val decoder: ScalarDecoder[EnterpriseServerUserAccountOrderField] = {
            case __StringValue ("LOGIN") => Right(EnterpriseServerUserAccountOrderField.LOGIN)
case __StringValue ("REMOTE_CREATED_AT") => Right(EnterpriseServerUserAccountOrderField.REMOTE_CREATED_AT)
            case other => Left(DecodingError(s"Can't build EnterpriseServerUserAccountOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseServerUserAccountOrderField] = {
            case EnterpriseServerUserAccountOrderField.LOGIN => __EnumValue("LOGIN")
case EnterpriseServerUserAccountOrderField.REMOTE_CREATED_AT => __EnumValue("REMOTE_CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[EnterpriseServerUserAccountOrderField] = scala.collection.immutable.Vector(LOGIN, REMOTE_CREATED_AT)
        }
       
sealed trait EnterpriseServerUserAccountsUploadOrderField extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseServerUserAccountsUploadOrderField {
          case object CREATED_AT extends EnterpriseServerUserAccountsUploadOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[EnterpriseServerUserAccountsUploadOrderField] = {
            case __StringValue ("CREATED_AT") => Right(EnterpriseServerUserAccountsUploadOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build EnterpriseServerUserAccountsUploadOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseServerUserAccountsUploadOrderField] = {
            case EnterpriseServerUserAccountsUploadOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[EnterpriseServerUserAccountsUploadOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait EnterpriseServerUserAccountsUploadSyncState extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseServerUserAccountsUploadSyncState {
          case object FAILURE extends EnterpriseServerUserAccountsUploadSyncState { val value: String = "FAILURE" }
case object PENDING extends EnterpriseServerUserAccountsUploadSyncState { val value: String = "PENDING" }
case object SUCCESS extends EnterpriseServerUserAccountsUploadSyncState { val value: String = "SUCCESS" }

          implicit val decoder: ScalarDecoder[EnterpriseServerUserAccountsUploadSyncState] = {
            case __StringValue ("FAILURE") => Right(EnterpriseServerUserAccountsUploadSyncState.FAILURE)
case __StringValue ("PENDING") => Right(EnterpriseServerUserAccountsUploadSyncState.PENDING)
case __StringValue ("SUCCESS") => Right(EnterpriseServerUserAccountsUploadSyncState.SUCCESS)
            case other => Left(DecodingError(s"Can't build EnterpriseServerUserAccountsUploadSyncState from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseServerUserAccountsUploadSyncState] = {
            case EnterpriseServerUserAccountsUploadSyncState.FAILURE => __EnumValue("FAILURE")
case EnterpriseServerUserAccountsUploadSyncState.PENDING => __EnumValue("PENDING")
case EnterpriseServerUserAccountsUploadSyncState.SUCCESS => __EnumValue("SUCCESS")
          }

          val values: scala.collection.immutable.Vector[EnterpriseServerUserAccountsUploadSyncState] = scala.collection.immutable.Vector(FAILURE, PENDING, SUCCESS)
        }
       
sealed trait EnterpriseUserAccountMembershipRole extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseUserAccountMembershipRole {
          case object MEMBER extends EnterpriseUserAccountMembershipRole { val value: String = "MEMBER" }
case object OWNER extends EnterpriseUserAccountMembershipRole { val value: String = "OWNER" }
case object UNAFFILIATED extends EnterpriseUserAccountMembershipRole { val value: String = "UNAFFILIATED" }

          implicit val decoder: ScalarDecoder[EnterpriseUserAccountMembershipRole] = {
            case __StringValue ("MEMBER") => Right(EnterpriseUserAccountMembershipRole.MEMBER)
case __StringValue ("OWNER") => Right(EnterpriseUserAccountMembershipRole.OWNER)
case __StringValue ("UNAFFILIATED") => Right(EnterpriseUserAccountMembershipRole.UNAFFILIATED)
            case other => Left(DecodingError(s"Can't build EnterpriseUserAccountMembershipRole from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseUserAccountMembershipRole] = {
            case EnterpriseUserAccountMembershipRole.MEMBER => __EnumValue("MEMBER")
case EnterpriseUserAccountMembershipRole.OWNER => __EnumValue("OWNER")
case EnterpriseUserAccountMembershipRole.UNAFFILIATED => __EnumValue("UNAFFILIATED")
          }

          val values: scala.collection.immutable.Vector[EnterpriseUserAccountMembershipRole] = scala.collection.immutable.Vector(MEMBER, OWNER, UNAFFILIATED)
        }
       
sealed trait EnterpriseUserDeployment extends scala.Product with scala.Serializable { def value: String }
        object EnterpriseUserDeployment {
          case object CLOUD extends EnterpriseUserDeployment { val value: String = "CLOUD" }
case object SERVER extends EnterpriseUserDeployment { val value: String = "SERVER" }

          implicit val decoder: ScalarDecoder[EnterpriseUserDeployment] = {
            case __StringValue ("CLOUD") => Right(EnterpriseUserDeployment.CLOUD)
case __StringValue ("SERVER") => Right(EnterpriseUserDeployment.SERVER)
            case other => Left(DecodingError(s"Can't build EnterpriseUserDeployment from input $other"))
          }
          implicit val encoder: ArgEncoder[EnterpriseUserDeployment] = {
            case EnterpriseUserDeployment.CLOUD => __EnumValue("CLOUD")
case EnterpriseUserDeployment.SERVER => __EnumValue("SERVER")
          }

          val values: scala.collection.immutable.Vector[EnterpriseUserDeployment] = scala.collection.immutable.Vector(CLOUD, SERVER)
        }
       
sealed trait FileViewedState extends scala.Product with scala.Serializable { def value: String }
        object FileViewedState {
          case object DISMISSED extends FileViewedState { val value: String = "DISMISSED" }
case object UNVIEWED extends FileViewedState { val value: String = "UNVIEWED" }
case object VIEWED extends FileViewedState { val value: String = "VIEWED" }

          implicit val decoder: ScalarDecoder[FileViewedState] = {
            case __StringValue ("DISMISSED") => Right(FileViewedState.DISMISSED)
case __StringValue ("UNVIEWED") => Right(FileViewedState.UNVIEWED)
case __StringValue ("VIEWED") => Right(FileViewedState.VIEWED)
            case other => Left(DecodingError(s"Can't build FileViewedState from input $other"))
          }
          implicit val encoder: ArgEncoder[FileViewedState] = {
            case FileViewedState.DISMISSED => __EnumValue("DISMISSED")
case FileViewedState.UNVIEWED => __EnumValue("UNVIEWED")
case FileViewedState.VIEWED => __EnumValue("VIEWED")
          }

          val values: scala.collection.immutable.Vector[FileViewedState] = scala.collection.immutable.Vector(DISMISSED, UNVIEWED, VIEWED)
        }
       
sealed trait FundingPlatform extends scala.Product with scala.Serializable { def value: String }
        object FundingPlatform {
          case object COMMUNITY_BRIDGE extends FundingPlatform { val value: String = "COMMUNITY_BRIDGE" }
case object CUSTOM extends FundingPlatform { val value: String = "CUSTOM" }
case object GITHUB extends FundingPlatform { val value: String = "GITHUB" }
case object ISSUEHUNT extends FundingPlatform { val value: String = "ISSUEHUNT" }
case object KO_FI extends FundingPlatform { val value: String = "KO_FI" }
case object LFX_CROWDFUNDING extends FundingPlatform { val value: String = "LFX_CROWDFUNDING" }
case object LIBERAPAY extends FundingPlatform { val value: String = "LIBERAPAY" }
case object OPEN_COLLECTIVE extends FundingPlatform { val value: String = "OPEN_COLLECTIVE" }
case object OTECHIE extends FundingPlatform { val value: String = "OTECHIE" }
case object PATREON extends FundingPlatform { val value: String = "PATREON" }
case object TIDELIFT extends FundingPlatform { val value: String = "TIDELIFT" }

          implicit val decoder: ScalarDecoder[FundingPlatform] = {
            case __StringValue ("COMMUNITY_BRIDGE") => Right(FundingPlatform.COMMUNITY_BRIDGE)
case __StringValue ("CUSTOM") => Right(FundingPlatform.CUSTOM)
case __StringValue ("GITHUB") => Right(FundingPlatform.GITHUB)
case __StringValue ("ISSUEHUNT") => Right(FundingPlatform.ISSUEHUNT)
case __StringValue ("KO_FI") => Right(FundingPlatform.KO_FI)
case __StringValue ("LFX_CROWDFUNDING") => Right(FundingPlatform.LFX_CROWDFUNDING)
case __StringValue ("LIBERAPAY") => Right(FundingPlatform.LIBERAPAY)
case __StringValue ("OPEN_COLLECTIVE") => Right(FundingPlatform.OPEN_COLLECTIVE)
case __StringValue ("OTECHIE") => Right(FundingPlatform.OTECHIE)
case __StringValue ("PATREON") => Right(FundingPlatform.PATREON)
case __StringValue ("TIDELIFT") => Right(FundingPlatform.TIDELIFT)
            case other => Left(DecodingError(s"Can't build FundingPlatform from input $other"))
          }
          implicit val encoder: ArgEncoder[FundingPlatform] = {
            case FundingPlatform.COMMUNITY_BRIDGE => __EnumValue("COMMUNITY_BRIDGE")
case FundingPlatform.CUSTOM => __EnumValue("CUSTOM")
case FundingPlatform.GITHUB => __EnumValue("GITHUB")
case FundingPlatform.ISSUEHUNT => __EnumValue("ISSUEHUNT")
case FundingPlatform.KO_FI => __EnumValue("KO_FI")
case FundingPlatform.LFX_CROWDFUNDING => __EnumValue("LFX_CROWDFUNDING")
case FundingPlatform.LIBERAPAY => __EnumValue("LIBERAPAY")
case FundingPlatform.OPEN_COLLECTIVE => __EnumValue("OPEN_COLLECTIVE")
case FundingPlatform.OTECHIE => __EnumValue("OTECHIE")
case FundingPlatform.PATREON => __EnumValue("PATREON")
case FundingPlatform.TIDELIFT => __EnumValue("TIDELIFT")
          }

          val values: scala.collection.immutable.Vector[FundingPlatform] = scala.collection.immutable.Vector(COMMUNITY_BRIDGE, CUSTOM, GITHUB, ISSUEHUNT, KO_FI, LFX_CROWDFUNDING, LIBERAPAY, OPEN_COLLECTIVE, OTECHIE, PATREON, TIDELIFT)
        }
       
sealed trait GistOrderField extends scala.Product with scala.Serializable { def value: String }
        object GistOrderField {
          case object CREATED_AT extends GistOrderField { val value: String = "CREATED_AT" }
case object PUSHED_AT extends GistOrderField { val value: String = "PUSHED_AT" }
case object UPDATED_AT extends GistOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[GistOrderField] = {
            case __StringValue ("CREATED_AT") => Right(GistOrderField.CREATED_AT)
case __StringValue ("PUSHED_AT") => Right(GistOrderField.PUSHED_AT)
case __StringValue ("UPDATED_AT") => Right(GistOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build GistOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[GistOrderField] = {
            case GistOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case GistOrderField.PUSHED_AT => __EnumValue("PUSHED_AT")
case GistOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[GistOrderField] = scala.collection.immutable.Vector(CREATED_AT, PUSHED_AT, UPDATED_AT)
        }
       
sealed trait GistPrivacy extends scala.Product with scala.Serializable { def value: String }
        object GistPrivacy {
          case object ALL extends GistPrivacy { val value: String = "ALL" }
case object PUBLIC extends GistPrivacy { val value: String = "PUBLIC" }
case object SECRET extends GistPrivacy { val value: String = "SECRET" }

          implicit val decoder: ScalarDecoder[GistPrivacy] = {
            case __StringValue ("ALL") => Right(GistPrivacy.ALL)
case __StringValue ("PUBLIC") => Right(GistPrivacy.PUBLIC)
case __StringValue ("SECRET") => Right(GistPrivacy.SECRET)
            case other => Left(DecodingError(s"Can't build GistPrivacy from input $other"))
          }
          implicit val encoder: ArgEncoder[GistPrivacy] = {
            case GistPrivacy.ALL => __EnumValue("ALL")
case GistPrivacy.PUBLIC => __EnumValue("PUBLIC")
case GistPrivacy.SECRET => __EnumValue("SECRET")
          }

          val values: scala.collection.immutable.Vector[GistPrivacy] = scala.collection.immutable.Vector(ALL, PUBLIC, SECRET)
        }
       
sealed trait GitSignatureState extends scala.Product with scala.Serializable { def value: String }
        object GitSignatureState {
          case object BAD_CERT extends GitSignatureState { val value: String = "BAD_CERT" }
case object BAD_EMAIL extends GitSignatureState { val value: String = "BAD_EMAIL" }
case object EXPIRED_KEY extends GitSignatureState { val value: String = "EXPIRED_KEY" }
case object GPGVERIFY_ERROR extends GitSignatureState { val value: String = "GPGVERIFY_ERROR" }
case object GPGVERIFY_UNAVAILABLE extends GitSignatureState { val value: String = "GPGVERIFY_UNAVAILABLE" }
case object INVALID extends GitSignatureState { val value: String = "INVALID" }
case object MALFORMED_SIG extends GitSignatureState { val value: String = "MALFORMED_SIG" }
case object NOT_SIGNING_KEY extends GitSignatureState { val value: String = "NOT_SIGNING_KEY" }
case object NO_USER extends GitSignatureState { val value: String = "NO_USER" }
case object OCSP_ERROR extends GitSignatureState { val value: String = "OCSP_ERROR" }
case object OCSP_PENDING extends GitSignatureState { val value: String = "OCSP_PENDING" }
case object OCSP_REVOKED extends GitSignatureState { val value: String = "OCSP_REVOKED" }
case object UNKNOWN_KEY extends GitSignatureState { val value: String = "UNKNOWN_KEY" }
case object UNKNOWN_SIG_TYPE extends GitSignatureState { val value: String = "UNKNOWN_SIG_TYPE" }
case object UNSIGNED extends GitSignatureState { val value: String = "UNSIGNED" }
case object UNVERIFIED_EMAIL extends GitSignatureState { val value: String = "UNVERIFIED_EMAIL" }
case object VALID extends GitSignatureState { val value: String = "VALID" }

          implicit val decoder: ScalarDecoder[GitSignatureState] = {
            case __StringValue ("BAD_CERT") => Right(GitSignatureState.BAD_CERT)
case __StringValue ("BAD_EMAIL") => Right(GitSignatureState.BAD_EMAIL)
case __StringValue ("EXPIRED_KEY") => Right(GitSignatureState.EXPIRED_KEY)
case __StringValue ("GPGVERIFY_ERROR") => Right(GitSignatureState.GPGVERIFY_ERROR)
case __StringValue ("GPGVERIFY_UNAVAILABLE") => Right(GitSignatureState.GPGVERIFY_UNAVAILABLE)
case __StringValue ("INVALID") => Right(GitSignatureState.INVALID)
case __StringValue ("MALFORMED_SIG") => Right(GitSignatureState.MALFORMED_SIG)
case __StringValue ("NOT_SIGNING_KEY") => Right(GitSignatureState.NOT_SIGNING_KEY)
case __StringValue ("NO_USER") => Right(GitSignatureState.NO_USER)
case __StringValue ("OCSP_ERROR") => Right(GitSignatureState.OCSP_ERROR)
case __StringValue ("OCSP_PENDING") => Right(GitSignatureState.OCSP_PENDING)
case __StringValue ("OCSP_REVOKED") => Right(GitSignatureState.OCSP_REVOKED)
case __StringValue ("UNKNOWN_KEY") => Right(GitSignatureState.UNKNOWN_KEY)
case __StringValue ("UNKNOWN_SIG_TYPE") => Right(GitSignatureState.UNKNOWN_SIG_TYPE)
case __StringValue ("UNSIGNED") => Right(GitSignatureState.UNSIGNED)
case __StringValue ("UNVERIFIED_EMAIL") => Right(GitSignatureState.UNVERIFIED_EMAIL)
case __StringValue ("VALID") => Right(GitSignatureState.VALID)
            case other => Left(DecodingError(s"Can't build GitSignatureState from input $other"))
          }
          implicit val encoder: ArgEncoder[GitSignatureState] = {
            case GitSignatureState.BAD_CERT => __EnumValue("BAD_CERT")
case GitSignatureState.BAD_EMAIL => __EnumValue("BAD_EMAIL")
case GitSignatureState.EXPIRED_KEY => __EnumValue("EXPIRED_KEY")
case GitSignatureState.GPGVERIFY_ERROR => __EnumValue("GPGVERIFY_ERROR")
case GitSignatureState.GPGVERIFY_UNAVAILABLE => __EnumValue("GPGVERIFY_UNAVAILABLE")
case GitSignatureState.INVALID => __EnumValue("INVALID")
case GitSignatureState.MALFORMED_SIG => __EnumValue("MALFORMED_SIG")
case GitSignatureState.NOT_SIGNING_KEY => __EnumValue("NOT_SIGNING_KEY")
case GitSignatureState.NO_USER => __EnumValue("NO_USER")
case GitSignatureState.OCSP_ERROR => __EnumValue("OCSP_ERROR")
case GitSignatureState.OCSP_PENDING => __EnumValue("OCSP_PENDING")
case GitSignatureState.OCSP_REVOKED => __EnumValue("OCSP_REVOKED")
case GitSignatureState.UNKNOWN_KEY => __EnumValue("UNKNOWN_KEY")
case GitSignatureState.UNKNOWN_SIG_TYPE => __EnumValue("UNKNOWN_SIG_TYPE")
case GitSignatureState.UNSIGNED => __EnumValue("UNSIGNED")
case GitSignatureState.UNVERIFIED_EMAIL => __EnumValue("UNVERIFIED_EMAIL")
case GitSignatureState.VALID => __EnumValue("VALID")
          }

          val values: scala.collection.immutable.Vector[GitSignatureState] = scala.collection.immutable.Vector(BAD_CERT, BAD_EMAIL, EXPIRED_KEY, GPGVERIFY_ERROR, GPGVERIFY_UNAVAILABLE, INVALID, MALFORMED_SIG, NOT_SIGNING_KEY, NO_USER, OCSP_ERROR, OCSP_PENDING, OCSP_REVOKED, UNKNOWN_KEY, UNKNOWN_SIG_TYPE, UNSIGNED, UNVERIFIED_EMAIL, VALID)
        }
       
sealed trait IdentityProviderConfigurationState extends scala.Product with scala.Serializable { def value: String }
        object IdentityProviderConfigurationState {
          case object CONFIGURED extends IdentityProviderConfigurationState { val value: String = "CONFIGURED" }
case object ENFORCED extends IdentityProviderConfigurationState { val value: String = "ENFORCED" }
case object UNCONFIGURED extends IdentityProviderConfigurationState { val value: String = "UNCONFIGURED" }

          implicit val decoder: ScalarDecoder[IdentityProviderConfigurationState] = {
            case __StringValue ("CONFIGURED") => Right(IdentityProviderConfigurationState.CONFIGURED)
case __StringValue ("ENFORCED") => Right(IdentityProviderConfigurationState.ENFORCED)
case __StringValue ("UNCONFIGURED") => Right(IdentityProviderConfigurationState.UNCONFIGURED)
            case other => Left(DecodingError(s"Can't build IdentityProviderConfigurationState from input $other"))
          }
          implicit val encoder: ArgEncoder[IdentityProviderConfigurationState] = {
            case IdentityProviderConfigurationState.CONFIGURED => __EnumValue("CONFIGURED")
case IdentityProviderConfigurationState.ENFORCED => __EnumValue("ENFORCED")
case IdentityProviderConfigurationState.UNCONFIGURED => __EnumValue("UNCONFIGURED")
          }

          val values: scala.collection.immutable.Vector[IdentityProviderConfigurationState] = scala.collection.immutable.Vector(CONFIGURED, ENFORCED, UNCONFIGURED)
        }
       
sealed trait IpAllowListEnabledSettingValue extends scala.Product with scala.Serializable { def value: String }
        object IpAllowListEnabledSettingValue {
          case object DISABLED extends IpAllowListEnabledSettingValue { val value: String = "DISABLED" }
case object ENABLED extends IpAllowListEnabledSettingValue { val value: String = "ENABLED" }

          implicit val decoder: ScalarDecoder[IpAllowListEnabledSettingValue] = {
            case __StringValue ("DISABLED") => Right(IpAllowListEnabledSettingValue.DISABLED)
case __StringValue ("ENABLED") => Right(IpAllowListEnabledSettingValue.ENABLED)
            case other => Left(DecodingError(s"Can't build IpAllowListEnabledSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[IpAllowListEnabledSettingValue] = {
            case IpAllowListEnabledSettingValue.DISABLED => __EnumValue("DISABLED")
case IpAllowListEnabledSettingValue.ENABLED => __EnumValue("ENABLED")
          }

          val values: scala.collection.immutable.Vector[IpAllowListEnabledSettingValue] = scala.collection.immutable.Vector(DISABLED, ENABLED)
        }
       
sealed trait IpAllowListEntryOrderField extends scala.Product with scala.Serializable { def value: String }
        object IpAllowListEntryOrderField {
          case object ALLOW_LIST_VALUE extends IpAllowListEntryOrderField { val value: String = "ALLOW_LIST_VALUE" }
case object CREATED_AT extends IpAllowListEntryOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[IpAllowListEntryOrderField] = {
            case __StringValue ("ALLOW_LIST_VALUE") => Right(IpAllowListEntryOrderField.ALLOW_LIST_VALUE)
case __StringValue ("CREATED_AT") => Right(IpAllowListEntryOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build IpAllowListEntryOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[IpAllowListEntryOrderField] = {
            case IpAllowListEntryOrderField.ALLOW_LIST_VALUE => __EnumValue("ALLOW_LIST_VALUE")
case IpAllowListEntryOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[IpAllowListEntryOrderField] = scala.collection.immutable.Vector(ALLOW_LIST_VALUE, CREATED_AT)
        }
       
sealed trait IpAllowListForInstalledAppsEnabledSettingValue extends scala.Product with scala.Serializable { def value: String }
        object IpAllowListForInstalledAppsEnabledSettingValue {
          case object DISABLED extends IpAllowListForInstalledAppsEnabledSettingValue { val value: String = "DISABLED" }
case object ENABLED extends IpAllowListForInstalledAppsEnabledSettingValue { val value: String = "ENABLED" }

          implicit val decoder: ScalarDecoder[IpAllowListForInstalledAppsEnabledSettingValue] = {
            case __StringValue ("DISABLED") => Right(IpAllowListForInstalledAppsEnabledSettingValue.DISABLED)
case __StringValue ("ENABLED") => Right(IpAllowListForInstalledAppsEnabledSettingValue.ENABLED)
            case other => Left(DecodingError(s"Can't build IpAllowListForInstalledAppsEnabledSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[IpAllowListForInstalledAppsEnabledSettingValue] = {
            case IpAllowListForInstalledAppsEnabledSettingValue.DISABLED => __EnumValue("DISABLED")
case IpAllowListForInstalledAppsEnabledSettingValue.ENABLED => __EnumValue("ENABLED")
          }

          val values: scala.collection.immutable.Vector[IpAllowListForInstalledAppsEnabledSettingValue] = scala.collection.immutable.Vector(DISABLED, ENABLED)
        }
       
sealed trait IssueClosedStateReason extends scala.Product with scala.Serializable { def value: String }
        object IssueClosedStateReason {
          case object COMPLETED extends IssueClosedStateReason { val value: String = "COMPLETED" }
case object NOT_PLANNED extends IssueClosedStateReason { val value: String = "NOT_PLANNED" }

          implicit val decoder: ScalarDecoder[IssueClosedStateReason] = {
            case __StringValue ("COMPLETED") => Right(IssueClosedStateReason.COMPLETED)
case __StringValue ("NOT_PLANNED") => Right(IssueClosedStateReason.NOT_PLANNED)
            case other => Left(DecodingError(s"Can't build IssueClosedStateReason from input $other"))
          }
          implicit val encoder: ArgEncoder[IssueClosedStateReason] = {
            case IssueClosedStateReason.COMPLETED => __EnumValue("COMPLETED")
case IssueClosedStateReason.NOT_PLANNED => __EnumValue("NOT_PLANNED")
          }

          val values: scala.collection.immutable.Vector[IssueClosedStateReason] = scala.collection.immutable.Vector(COMPLETED, NOT_PLANNED)
        }
       
sealed trait IssueCommentOrderField extends scala.Product with scala.Serializable { def value: String }
        object IssueCommentOrderField {
          case object UPDATED_AT extends IssueCommentOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[IssueCommentOrderField] = {
            case __StringValue ("UPDATED_AT") => Right(IssueCommentOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build IssueCommentOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[IssueCommentOrderField] = {
            case IssueCommentOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[IssueCommentOrderField] = scala.collection.immutable.Vector(UPDATED_AT)
        }
       
sealed trait IssueOrderField extends scala.Product with scala.Serializable { def value: String }
        object IssueOrderField {
          case object COMMENTS extends IssueOrderField { val value: String = "COMMENTS" }
case object CREATED_AT extends IssueOrderField { val value: String = "CREATED_AT" }
case object UPDATED_AT extends IssueOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[IssueOrderField] = {
            case __StringValue ("COMMENTS") => Right(IssueOrderField.COMMENTS)
case __StringValue ("CREATED_AT") => Right(IssueOrderField.CREATED_AT)
case __StringValue ("UPDATED_AT") => Right(IssueOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build IssueOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[IssueOrderField] = {
            case IssueOrderField.COMMENTS => __EnumValue("COMMENTS")
case IssueOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case IssueOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[IssueOrderField] = scala.collection.immutable.Vector(COMMENTS, CREATED_AT, UPDATED_AT)
        }
       
sealed trait IssueState extends scala.Product with scala.Serializable { def value: String }
        object IssueState {
          case object CLOSED extends IssueState { val value: String = "CLOSED" }
case object OPEN extends IssueState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[IssueState] = {
            case __StringValue ("CLOSED") => Right(IssueState.CLOSED)
case __StringValue ("OPEN") => Right(IssueState.OPEN)
            case other => Left(DecodingError(s"Can't build IssueState from input $other"))
          }
          implicit val encoder: ArgEncoder[IssueState] = {
            case IssueState.CLOSED => __EnumValue("CLOSED")
case IssueState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[IssueState] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait IssueStateReason extends scala.Product with scala.Serializable { def value: String }
        object IssueStateReason {
          case object COMPLETED extends IssueStateReason { val value: String = "COMPLETED" }
case object NOT_PLANNED extends IssueStateReason { val value: String = "NOT_PLANNED" }
case object REOPENED extends IssueStateReason { val value: String = "REOPENED" }

          implicit val decoder: ScalarDecoder[IssueStateReason] = {
            case __StringValue ("COMPLETED") => Right(IssueStateReason.COMPLETED)
case __StringValue ("NOT_PLANNED") => Right(IssueStateReason.NOT_PLANNED)
case __StringValue ("REOPENED") => Right(IssueStateReason.REOPENED)
            case other => Left(DecodingError(s"Can't build IssueStateReason from input $other"))
          }
          implicit val encoder: ArgEncoder[IssueStateReason] = {
            case IssueStateReason.COMPLETED => __EnumValue("COMPLETED")
case IssueStateReason.NOT_PLANNED => __EnumValue("NOT_PLANNED")
case IssueStateReason.REOPENED => __EnumValue("REOPENED")
          }

          val values: scala.collection.immutable.Vector[IssueStateReason] = scala.collection.immutable.Vector(COMPLETED, NOT_PLANNED, REOPENED)
        }
       
sealed trait IssueTimelineItemsItemType extends scala.Product with scala.Serializable { def value: String }
        object IssueTimelineItemsItemType {
          case object ADDED_TO_PROJECT_EVENT extends IssueTimelineItemsItemType { val value: String = "ADDED_TO_PROJECT_EVENT" }
case object ASSIGNED_EVENT extends IssueTimelineItemsItemType { val value: String = "ASSIGNED_EVENT" }
case object CLOSED_EVENT extends IssueTimelineItemsItemType { val value: String = "CLOSED_EVENT" }
case object COMMENT_DELETED_EVENT extends IssueTimelineItemsItemType { val value: String = "COMMENT_DELETED_EVENT" }
case object CONNECTED_EVENT extends IssueTimelineItemsItemType { val value: String = "CONNECTED_EVENT" }
case object CONVERTED_NOTE_TO_ISSUE_EVENT extends IssueTimelineItemsItemType { val value: String = "CONVERTED_NOTE_TO_ISSUE_EVENT" }
case object CONVERTED_TO_DISCUSSION_EVENT extends IssueTimelineItemsItemType { val value: String = "CONVERTED_TO_DISCUSSION_EVENT" }
case object CROSS_REFERENCED_EVENT extends IssueTimelineItemsItemType { val value: String = "CROSS_REFERENCED_EVENT" }
case object DEMILESTONED_EVENT extends IssueTimelineItemsItemType { val value: String = "DEMILESTONED_EVENT" }
case object DISCONNECTED_EVENT extends IssueTimelineItemsItemType { val value: String = "DISCONNECTED_EVENT" }
case object ISSUE_COMMENT extends IssueTimelineItemsItemType { val value: String = "ISSUE_COMMENT" }
case object LABELED_EVENT extends IssueTimelineItemsItemType { val value: String = "LABELED_EVENT" }
case object LOCKED_EVENT extends IssueTimelineItemsItemType { val value: String = "LOCKED_EVENT" }
case object MARKED_AS_DUPLICATE_EVENT extends IssueTimelineItemsItemType { val value: String = "MARKED_AS_DUPLICATE_EVENT" }
case object MENTIONED_EVENT extends IssueTimelineItemsItemType { val value: String = "MENTIONED_EVENT" }
case object MILESTONED_EVENT extends IssueTimelineItemsItemType { val value: String = "MILESTONED_EVENT" }
case object MOVED_COLUMNS_IN_PROJECT_EVENT extends IssueTimelineItemsItemType { val value: String = "MOVED_COLUMNS_IN_PROJECT_EVENT" }
case object PINNED_EVENT extends IssueTimelineItemsItemType { val value: String = "PINNED_EVENT" }
case object REFERENCED_EVENT extends IssueTimelineItemsItemType { val value: String = "REFERENCED_EVENT" }
case object REMOVED_FROM_PROJECT_EVENT extends IssueTimelineItemsItemType { val value: String = "REMOVED_FROM_PROJECT_EVENT" }
case object RENAMED_TITLE_EVENT extends IssueTimelineItemsItemType { val value: String = "RENAMED_TITLE_EVENT" }
case object REOPENED_EVENT extends IssueTimelineItemsItemType { val value: String = "REOPENED_EVENT" }
case object SUBSCRIBED_EVENT extends IssueTimelineItemsItemType { val value: String = "SUBSCRIBED_EVENT" }
case object TRANSFERRED_EVENT extends IssueTimelineItemsItemType { val value: String = "TRANSFERRED_EVENT" }
case object UNASSIGNED_EVENT extends IssueTimelineItemsItemType { val value: String = "UNASSIGNED_EVENT" }
case object UNLABELED_EVENT extends IssueTimelineItemsItemType { val value: String = "UNLABELED_EVENT" }
case object UNLOCKED_EVENT extends IssueTimelineItemsItemType { val value: String = "UNLOCKED_EVENT" }
case object UNMARKED_AS_DUPLICATE_EVENT extends IssueTimelineItemsItemType { val value: String = "UNMARKED_AS_DUPLICATE_EVENT" }
case object UNPINNED_EVENT extends IssueTimelineItemsItemType { val value: String = "UNPINNED_EVENT" }
case object UNSUBSCRIBED_EVENT extends IssueTimelineItemsItemType { val value: String = "UNSUBSCRIBED_EVENT" }
case object USER_BLOCKED_EVENT extends IssueTimelineItemsItemType { val value: String = "USER_BLOCKED_EVENT" }

          implicit val decoder: ScalarDecoder[IssueTimelineItemsItemType] = {
            case __StringValue ("ADDED_TO_PROJECT_EVENT") => Right(IssueTimelineItemsItemType.ADDED_TO_PROJECT_EVENT)
case __StringValue ("ASSIGNED_EVENT") => Right(IssueTimelineItemsItemType.ASSIGNED_EVENT)
case __StringValue ("CLOSED_EVENT") => Right(IssueTimelineItemsItemType.CLOSED_EVENT)
case __StringValue ("COMMENT_DELETED_EVENT") => Right(IssueTimelineItemsItemType.COMMENT_DELETED_EVENT)
case __StringValue ("CONNECTED_EVENT") => Right(IssueTimelineItemsItemType.CONNECTED_EVENT)
case __StringValue ("CONVERTED_NOTE_TO_ISSUE_EVENT") => Right(IssueTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT)
case __StringValue ("CONVERTED_TO_DISCUSSION_EVENT") => Right(IssueTimelineItemsItemType.CONVERTED_TO_DISCUSSION_EVENT)
case __StringValue ("CROSS_REFERENCED_EVENT") => Right(IssueTimelineItemsItemType.CROSS_REFERENCED_EVENT)
case __StringValue ("DEMILESTONED_EVENT") => Right(IssueTimelineItemsItemType.DEMILESTONED_EVENT)
case __StringValue ("DISCONNECTED_EVENT") => Right(IssueTimelineItemsItemType.DISCONNECTED_EVENT)
case __StringValue ("ISSUE_COMMENT") => Right(IssueTimelineItemsItemType.ISSUE_COMMENT)
case __StringValue ("LABELED_EVENT") => Right(IssueTimelineItemsItemType.LABELED_EVENT)
case __StringValue ("LOCKED_EVENT") => Right(IssueTimelineItemsItemType.LOCKED_EVENT)
case __StringValue ("MARKED_AS_DUPLICATE_EVENT") => Right(IssueTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT)
case __StringValue ("MENTIONED_EVENT") => Right(IssueTimelineItemsItemType.MENTIONED_EVENT)
case __StringValue ("MILESTONED_EVENT") => Right(IssueTimelineItemsItemType.MILESTONED_EVENT)
case __StringValue ("MOVED_COLUMNS_IN_PROJECT_EVENT") => Right(IssueTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT)
case __StringValue ("PINNED_EVENT") => Right(IssueTimelineItemsItemType.PINNED_EVENT)
case __StringValue ("REFERENCED_EVENT") => Right(IssueTimelineItemsItemType.REFERENCED_EVENT)
case __StringValue ("REMOVED_FROM_PROJECT_EVENT") => Right(IssueTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT)
case __StringValue ("RENAMED_TITLE_EVENT") => Right(IssueTimelineItemsItemType.RENAMED_TITLE_EVENT)
case __StringValue ("REOPENED_EVENT") => Right(IssueTimelineItemsItemType.REOPENED_EVENT)
case __StringValue ("SUBSCRIBED_EVENT") => Right(IssueTimelineItemsItemType.SUBSCRIBED_EVENT)
case __StringValue ("TRANSFERRED_EVENT") => Right(IssueTimelineItemsItemType.TRANSFERRED_EVENT)
case __StringValue ("UNASSIGNED_EVENT") => Right(IssueTimelineItemsItemType.UNASSIGNED_EVENT)
case __StringValue ("UNLABELED_EVENT") => Right(IssueTimelineItemsItemType.UNLABELED_EVENT)
case __StringValue ("UNLOCKED_EVENT") => Right(IssueTimelineItemsItemType.UNLOCKED_EVENT)
case __StringValue ("UNMARKED_AS_DUPLICATE_EVENT") => Right(IssueTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT)
case __StringValue ("UNPINNED_EVENT") => Right(IssueTimelineItemsItemType.UNPINNED_EVENT)
case __StringValue ("UNSUBSCRIBED_EVENT") => Right(IssueTimelineItemsItemType.UNSUBSCRIBED_EVENT)
case __StringValue ("USER_BLOCKED_EVENT") => Right(IssueTimelineItemsItemType.USER_BLOCKED_EVENT)
            case other => Left(DecodingError(s"Can't build IssueTimelineItemsItemType from input $other"))
          }
          implicit val encoder: ArgEncoder[IssueTimelineItemsItemType] = {
            case IssueTimelineItemsItemType.ADDED_TO_PROJECT_EVENT => __EnumValue("ADDED_TO_PROJECT_EVENT")
case IssueTimelineItemsItemType.ASSIGNED_EVENT => __EnumValue("ASSIGNED_EVENT")
case IssueTimelineItemsItemType.CLOSED_EVENT => __EnumValue("CLOSED_EVENT")
case IssueTimelineItemsItemType.COMMENT_DELETED_EVENT => __EnumValue("COMMENT_DELETED_EVENT")
case IssueTimelineItemsItemType.CONNECTED_EVENT => __EnumValue("CONNECTED_EVENT")
case IssueTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT => __EnumValue("CONVERTED_NOTE_TO_ISSUE_EVENT")
case IssueTimelineItemsItemType.CONVERTED_TO_DISCUSSION_EVENT => __EnumValue("CONVERTED_TO_DISCUSSION_EVENT")
case IssueTimelineItemsItemType.CROSS_REFERENCED_EVENT => __EnumValue("CROSS_REFERENCED_EVENT")
case IssueTimelineItemsItemType.DEMILESTONED_EVENT => __EnumValue("DEMILESTONED_EVENT")
case IssueTimelineItemsItemType.DISCONNECTED_EVENT => __EnumValue("DISCONNECTED_EVENT")
case IssueTimelineItemsItemType.ISSUE_COMMENT => __EnumValue("ISSUE_COMMENT")
case IssueTimelineItemsItemType.LABELED_EVENT => __EnumValue("LABELED_EVENT")
case IssueTimelineItemsItemType.LOCKED_EVENT => __EnumValue("LOCKED_EVENT")
case IssueTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT => __EnumValue("MARKED_AS_DUPLICATE_EVENT")
case IssueTimelineItemsItemType.MENTIONED_EVENT => __EnumValue("MENTIONED_EVENT")
case IssueTimelineItemsItemType.MILESTONED_EVENT => __EnumValue("MILESTONED_EVENT")
case IssueTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT => __EnumValue("MOVED_COLUMNS_IN_PROJECT_EVENT")
case IssueTimelineItemsItemType.PINNED_EVENT => __EnumValue("PINNED_EVENT")
case IssueTimelineItemsItemType.REFERENCED_EVENT => __EnumValue("REFERENCED_EVENT")
case IssueTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT => __EnumValue("REMOVED_FROM_PROJECT_EVENT")
case IssueTimelineItemsItemType.RENAMED_TITLE_EVENT => __EnumValue("RENAMED_TITLE_EVENT")
case IssueTimelineItemsItemType.REOPENED_EVENT => __EnumValue("REOPENED_EVENT")
case IssueTimelineItemsItemType.SUBSCRIBED_EVENT => __EnumValue("SUBSCRIBED_EVENT")
case IssueTimelineItemsItemType.TRANSFERRED_EVENT => __EnumValue("TRANSFERRED_EVENT")
case IssueTimelineItemsItemType.UNASSIGNED_EVENT => __EnumValue("UNASSIGNED_EVENT")
case IssueTimelineItemsItemType.UNLABELED_EVENT => __EnumValue("UNLABELED_EVENT")
case IssueTimelineItemsItemType.UNLOCKED_EVENT => __EnumValue("UNLOCKED_EVENT")
case IssueTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT => __EnumValue("UNMARKED_AS_DUPLICATE_EVENT")
case IssueTimelineItemsItemType.UNPINNED_EVENT => __EnumValue("UNPINNED_EVENT")
case IssueTimelineItemsItemType.UNSUBSCRIBED_EVENT => __EnumValue("UNSUBSCRIBED_EVENT")
case IssueTimelineItemsItemType.USER_BLOCKED_EVENT => __EnumValue("USER_BLOCKED_EVENT")
          }

          val values: scala.collection.immutable.Vector[IssueTimelineItemsItemType] = scala.collection.immutable.Vector(ADDED_TO_PROJECT_EVENT, ASSIGNED_EVENT, CLOSED_EVENT, COMMENT_DELETED_EVENT, CONNECTED_EVENT, CONVERTED_NOTE_TO_ISSUE_EVENT, CONVERTED_TO_DISCUSSION_EVENT, CROSS_REFERENCED_EVENT, DEMILESTONED_EVENT, DISCONNECTED_EVENT, ISSUE_COMMENT, LABELED_EVENT, LOCKED_EVENT, MARKED_AS_DUPLICATE_EVENT, MENTIONED_EVENT, MILESTONED_EVENT, MOVED_COLUMNS_IN_PROJECT_EVENT, PINNED_EVENT, REFERENCED_EVENT, REMOVED_FROM_PROJECT_EVENT, RENAMED_TITLE_EVENT, REOPENED_EVENT, SUBSCRIBED_EVENT, TRANSFERRED_EVENT, UNASSIGNED_EVENT, UNLABELED_EVENT, UNLOCKED_EVENT, UNMARKED_AS_DUPLICATE_EVENT, UNPINNED_EVENT, UNSUBSCRIBED_EVENT, USER_BLOCKED_EVENT)
        }
       
sealed trait LabelOrderField extends scala.Product with scala.Serializable { def value: String }
        object LabelOrderField {
          case object CREATED_AT extends LabelOrderField { val value: String = "CREATED_AT" }
case object NAME extends LabelOrderField { val value: String = "NAME" }

          implicit val decoder: ScalarDecoder[LabelOrderField] = {
            case __StringValue ("CREATED_AT") => Right(LabelOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(LabelOrderField.NAME)
            case other => Left(DecodingError(s"Can't build LabelOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[LabelOrderField] = {
            case LabelOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case LabelOrderField.NAME => __EnumValue("NAME")
          }

          val values: scala.collection.immutable.Vector[LabelOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME)
        }
       
sealed trait LanguageOrderField extends scala.Product with scala.Serializable { def value: String }
        object LanguageOrderField {
          case object SIZE extends LanguageOrderField { val value: String = "SIZE" }

          implicit val decoder: ScalarDecoder[LanguageOrderField] = {
            case __StringValue ("SIZE") => Right(LanguageOrderField.SIZE)
            case other => Left(DecodingError(s"Can't build LanguageOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[LanguageOrderField] = {
            case LanguageOrderField.SIZE => __EnumValue("SIZE")
          }

          val values: scala.collection.immutable.Vector[LanguageOrderField] = scala.collection.immutable.Vector(SIZE)
        }
       
sealed trait LockReason extends scala.Product with scala.Serializable { def value: String }
        object LockReason {
          case object OFF_TOPIC extends LockReason { val value: String = "OFF_TOPIC" }
case object RESOLVED extends LockReason { val value: String = "RESOLVED" }
case object SPAM extends LockReason { val value: String = "SPAM" }
case object TOO_HEATED extends LockReason { val value: String = "TOO_HEATED" }

          implicit val decoder: ScalarDecoder[LockReason] = {
            case __StringValue ("OFF_TOPIC") => Right(LockReason.OFF_TOPIC)
case __StringValue ("RESOLVED") => Right(LockReason.RESOLVED)
case __StringValue ("SPAM") => Right(LockReason.SPAM)
case __StringValue ("TOO_HEATED") => Right(LockReason.TOO_HEATED)
            case other => Left(DecodingError(s"Can't build LockReason from input $other"))
          }
          implicit val encoder: ArgEncoder[LockReason] = {
            case LockReason.OFF_TOPIC => __EnumValue("OFF_TOPIC")
case LockReason.RESOLVED => __EnumValue("RESOLVED")
case LockReason.SPAM => __EnumValue("SPAM")
case LockReason.TOO_HEATED => __EnumValue("TOO_HEATED")
          }

          val values: scala.collection.immutable.Vector[LockReason] = scala.collection.immutable.Vector(OFF_TOPIC, RESOLVED, SPAM, TOO_HEATED)
        }
       
sealed trait MannequinOrderField extends scala.Product with scala.Serializable { def value: String }
        object MannequinOrderField {
          case object CREATED_AT extends MannequinOrderField { val value: String = "CREATED_AT" }
case object LOGIN extends MannequinOrderField { val value: String = "LOGIN" }

          implicit val decoder: ScalarDecoder[MannequinOrderField] = {
            case __StringValue ("CREATED_AT") => Right(MannequinOrderField.CREATED_AT)
case __StringValue ("LOGIN") => Right(MannequinOrderField.LOGIN)
            case other => Left(DecodingError(s"Can't build MannequinOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[MannequinOrderField] = {
            case MannequinOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case MannequinOrderField.LOGIN => __EnumValue("LOGIN")
          }

          val values: scala.collection.immutable.Vector[MannequinOrderField] = scala.collection.immutable.Vector(CREATED_AT, LOGIN)
        }
       
sealed trait MergeCommitMessage extends scala.Product with scala.Serializable { def value: String }
        object MergeCommitMessage {
          case object BLANK extends MergeCommitMessage { val value: String = "BLANK" }
case object PR_BODY extends MergeCommitMessage { val value: String = "PR_BODY" }
case object PR_TITLE extends MergeCommitMessage { val value: String = "PR_TITLE" }

          implicit val decoder: ScalarDecoder[MergeCommitMessage] = {
            case __StringValue ("BLANK") => Right(MergeCommitMessage.BLANK)
case __StringValue ("PR_BODY") => Right(MergeCommitMessage.PR_BODY)
case __StringValue ("PR_TITLE") => Right(MergeCommitMessage.PR_TITLE)
            case other => Left(DecodingError(s"Can't build MergeCommitMessage from input $other"))
          }
          implicit val encoder: ArgEncoder[MergeCommitMessage] = {
            case MergeCommitMessage.BLANK => __EnumValue("BLANK")
case MergeCommitMessage.PR_BODY => __EnumValue("PR_BODY")
case MergeCommitMessage.PR_TITLE => __EnumValue("PR_TITLE")
          }

          val values: scala.collection.immutable.Vector[MergeCommitMessage] = scala.collection.immutable.Vector(BLANK, PR_BODY, PR_TITLE)
        }
       
sealed trait MergeCommitTitle extends scala.Product with scala.Serializable { def value: String }
        object MergeCommitTitle {
          case object MERGE_MESSAGE extends MergeCommitTitle { val value: String = "MERGE_MESSAGE" }
case object PR_TITLE extends MergeCommitTitle { val value: String = "PR_TITLE" }

          implicit val decoder: ScalarDecoder[MergeCommitTitle] = {
            case __StringValue ("MERGE_MESSAGE") => Right(MergeCommitTitle.MERGE_MESSAGE)
case __StringValue ("PR_TITLE") => Right(MergeCommitTitle.PR_TITLE)
            case other => Left(DecodingError(s"Can't build MergeCommitTitle from input $other"))
          }
          implicit val encoder: ArgEncoder[MergeCommitTitle] = {
            case MergeCommitTitle.MERGE_MESSAGE => __EnumValue("MERGE_MESSAGE")
case MergeCommitTitle.PR_TITLE => __EnumValue("PR_TITLE")
          }

          val values: scala.collection.immutable.Vector[MergeCommitTitle] = scala.collection.immutable.Vector(MERGE_MESSAGE, PR_TITLE)
        }
       
sealed trait MergeQueueEntryState extends scala.Product with scala.Serializable { def value: String }
        object MergeQueueEntryState {
          case object AWAITING_CHECKS extends MergeQueueEntryState { val value: String = "AWAITING_CHECKS" }
case object LOCKED extends MergeQueueEntryState { val value: String = "LOCKED" }
case object MERGEABLE extends MergeQueueEntryState { val value: String = "MERGEABLE" }
case object QUEUED extends MergeQueueEntryState { val value: String = "QUEUED" }
case object UNMERGEABLE extends MergeQueueEntryState { val value: String = "UNMERGEABLE" }

          implicit val decoder: ScalarDecoder[MergeQueueEntryState] = {
            case __StringValue ("AWAITING_CHECKS") => Right(MergeQueueEntryState.AWAITING_CHECKS)
case __StringValue ("LOCKED") => Right(MergeQueueEntryState.LOCKED)
case __StringValue ("MERGEABLE") => Right(MergeQueueEntryState.MERGEABLE)
case __StringValue ("QUEUED") => Right(MergeQueueEntryState.QUEUED)
case __StringValue ("UNMERGEABLE") => Right(MergeQueueEntryState.UNMERGEABLE)
            case other => Left(DecodingError(s"Can't build MergeQueueEntryState from input $other"))
          }
          implicit val encoder: ArgEncoder[MergeQueueEntryState] = {
            case MergeQueueEntryState.AWAITING_CHECKS => __EnumValue("AWAITING_CHECKS")
case MergeQueueEntryState.LOCKED => __EnumValue("LOCKED")
case MergeQueueEntryState.MERGEABLE => __EnumValue("MERGEABLE")
case MergeQueueEntryState.QUEUED => __EnumValue("QUEUED")
case MergeQueueEntryState.UNMERGEABLE => __EnumValue("UNMERGEABLE")
          }

          val values: scala.collection.immutable.Vector[MergeQueueEntryState] = scala.collection.immutable.Vector(AWAITING_CHECKS, LOCKED, MERGEABLE, QUEUED, UNMERGEABLE)
        }
       
sealed trait MergeQueueMergingStrategy extends scala.Product with scala.Serializable { def value: String }
        object MergeQueueMergingStrategy {
          case object ALLGREEN extends MergeQueueMergingStrategy { val value: String = "ALLGREEN" }
case object HEADGREEN extends MergeQueueMergingStrategy { val value: String = "HEADGREEN" }

          implicit val decoder: ScalarDecoder[MergeQueueMergingStrategy] = {
            case __StringValue ("ALLGREEN") => Right(MergeQueueMergingStrategy.ALLGREEN)
case __StringValue ("HEADGREEN") => Right(MergeQueueMergingStrategy.HEADGREEN)
            case other => Left(DecodingError(s"Can't build MergeQueueMergingStrategy from input $other"))
          }
          implicit val encoder: ArgEncoder[MergeQueueMergingStrategy] = {
            case MergeQueueMergingStrategy.ALLGREEN => __EnumValue("ALLGREEN")
case MergeQueueMergingStrategy.HEADGREEN => __EnumValue("HEADGREEN")
          }

          val values: scala.collection.immutable.Vector[MergeQueueMergingStrategy] = scala.collection.immutable.Vector(ALLGREEN, HEADGREEN)
        }
       
sealed trait MergeStateStatus extends scala.Product with scala.Serializable { def value: String }
        object MergeStateStatus {
          case object BEHIND extends MergeStateStatus { val value: String = "BEHIND" }
case object BLOCKED extends MergeStateStatus { val value: String = "BLOCKED" }
case object CLEAN extends MergeStateStatus { val value: String = "CLEAN" }
case object DIRTY extends MergeStateStatus { val value: String = "DIRTY" }
case object DRAFT extends MergeStateStatus { val value: String = "DRAFT" }
case object HAS_HOOKS extends MergeStateStatus { val value: String = "HAS_HOOKS" }
case object UNKNOWN extends MergeStateStatus { val value: String = "UNKNOWN" }
case object UNSTABLE extends MergeStateStatus { val value: String = "UNSTABLE" }

          implicit val decoder: ScalarDecoder[MergeStateStatus] = {
            case __StringValue ("BEHIND") => Right(MergeStateStatus.BEHIND)
case __StringValue ("BLOCKED") => Right(MergeStateStatus.BLOCKED)
case __StringValue ("CLEAN") => Right(MergeStateStatus.CLEAN)
case __StringValue ("DIRTY") => Right(MergeStateStatus.DIRTY)
case __StringValue ("DRAFT") => Right(MergeStateStatus.DRAFT)
case __StringValue ("HAS_HOOKS") => Right(MergeStateStatus.HAS_HOOKS)
case __StringValue ("UNKNOWN") => Right(MergeStateStatus.UNKNOWN)
case __StringValue ("UNSTABLE") => Right(MergeStateStatus.UNSTABLE)
            case other => Left(DecodingError(s"Can't build MergeStateStatus from input $other"))
          }
          implicit val encoder: ArgEncoder[MergeStateStatus] = {
            case MergeStateStatus.BEHIND => __EnumValue("BEHIND")
case MergeStateStatus.BLOCKED => __EnumValue("BLOCKED")
case MergeStateStatus.CLEAN => __EnumValue("CLEAN")
case MergeStateStatus.DIRTY => __EnumValue("DIRTY")
case MergeStateStatus.DRAFT => __EnumValue("DRAFT")
case MergeStateStatus.HAS_HOOKS => __EnumValue("HAS_HOOKS")
case MergeStateStatus.UNKNOWN => __EnumValue("UNKNOWN")
case MergeStateStatus.UNSTABLE => __EnumValue("UNSTABLE")
          }

          val values: scala.collection.immutable.Vector[MergeStateStatus] = scala.collection.immutable.Vector(BEHIND, BLOCKED, CLEAN, DIRTY, DRAFT, HAS_HOOKS, UNKNOWN, UNSTABLE)
        }
       
sealed trait MergeableState extends scala.Product with scala.Serializable { def value: String }
        object MergeableState {
          case object CONFLICTING extends MergeableState { val value: String = "CONFLICTING" }
case object MERGEABLE extends MergeableState { val value: String = "MERGEABLE" }
case object UNKNOWN extends MergeableState { val value: String = "UNKNOWN" }

          implicit val decoder: ScalarDecoder[MergeableState] = {
            case __StringValue ("CONFLICTING") => Right(MergeableState.CONFLICTING)
case __StringValue ("MERGEABLE") => Right(MergeableState.MERGEABLE)
case __StringValue ("UNKNOWN") => Right(MergeableState.UNKNOWN)
            case other => Left(DecodingError(s"Can't build MergeableState from input $other"))
          }
          implicit val encoder: ArgEncoder[MergeableState] = {
            case MergeableState.CONFLICTING => __EnumValue("CONFLICTING")
case MergeableState.MERGEABLE => __EnumValue("MERGEABLE")
case MergeableState.UNKNOWN => __EnumValue("UNKNOWN")
          }

          val values: scala.collection.immutable.Vector[MergeableState] = scala.collection.immutable.Vector(CONFLICTING, MERGEABLE, UNKNOWN)
        }
       
sealed trait MigrationSourceType extends scala.Product with scala.Serializable { def value: String }
        object MigrationSourceType {
          case object AZURE_DEVOPS extends MigrationSourceType { val value: String = "AZURE_DEVOPS" }
case object BITBUCKET_SERVER extends MigrationSourceType { val value: String = "BITBUCKET_SERVER" }
case object GITHUB_ARCHIVE extends MigrationSourceType { val value: String = "GITHUB_ARCHIVE" }

          implicit val decoder: ScalarDecoder[MigrationSourceType] = {
            case __StringValue ("AZURE_DEVOPS") => Right(MigrationSourceType.AZURE_DEVOPS)
case __StringValue ("BITBUCKET_SERVER") => Right(MigrationSourceType.BITBUCKET_SERVER)
case __StringValue ("GITHUB_ARCHIVE") => Right(MigrationSourceType.GITHUB_ARCHIVE)
            case other => Left(DecodingError(s"Can't build MigrationSourceType from input $other"))
          }
          implicit val encoder: ArgEncoder[MigrationSourceType] = {
            case MigrationSourceType.AZURE_DEVOPS => __EnumValue("AZURE_DEVOPS")
case MigrationSourceType.BITBUCKET_SERVER => __EnumValue("BITBUCKET_SERVER")
case MigrationSourceType.GITHUB_ARCHIVE => __EnumValue("GITHUB_ARCHIVE")
          }

          val values: scala.collection.immutable.Vector[MigrationSourceType] = scala.collection.immutable.Vector(AZURE_DEVOPS, BITBUCKET_SERVER, GITHUB_ARCHIVE)
        }
       
sealed trait MigrationState extends scala.Product with scala.Serializable { def value: String }
        object MigrationState {
          case object FAILED extends MigrationState { val value: String = "FAILED" }
case object FAILED_VALIDATION extends MigrationState { val value: String = "FAILED_VALIDATION" }
case object IN_PROGRESS extends MigrationState { val value: String = "IN_PROGRESS" }
case object NOT_STARTED extends MigrationState { val value: String = "NOT_STARTED" }
case object PENDING_VALIDATION extends MigrationState { val value: String = "PENDING_VALIDATION" }
case object QUEUED extends MigrationState { val value: String = "QUEUED" }
case object SUCCEEDED extends MigrationState { val value: String = "SUCCEEDED" }

          implicit val decoder: ScalarDecoder[MigrationState] = {
            case __StringValue ("FAILED") => Right(MigrationState.FAILED)
case __StringValue ("FAILED_VALIDATION") => Right(MigrationState.FAILED_VALIDATION)
case __StringValue ("IN_PROGRESS") => Right(MigrationState.IN_PROGRESS)
case __StringValue ("NOT_STARTED") => Right(MigrationState.NOT_STARTED)
case __StringValue ("PENDING_VALIDATION") => Right(MigrationState.PENDING_VALIDATION)
case __StringValue ("QUEUED") => Right(MigrationState.QUEUED)
case __StringValue ("SUCCEEDED") => Right(MigrationState.SUCCEEDED)
            case other => Left(DecodingError(s"Can't build MigrationState from input $other"))
          }
          implicit val encoder: ArgEncoder[MigrationState] = {
            case MigrationState.FAILED => __EnumValue("FAILED")
case MigrationState.FAILED_VALIDATION => __EnumValue("FAILED_VALIDATION")
case MigrationState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case MigrationState.NOT_STARTED => __EnumValue("NOT_STARTED")
case MigrationState.PENDING_VALIDATION => __EnumValue("PENDING_VALIDATION")
case MigrationState.QUEUED => __EnumValue("QUEUED")
case MigrationState.SUCCEEDED => __EnumValue("SUCCEEDED")
          }

          val values: scala.collection.immutable.Vector[MigrationState] = scala.collection.immutable.Vector(FAILED, FAILED_VALIDATION, IN_PROGRESS, NOT_STARTED, PENDING_VALIDATION, QUEUED, SUCCEEDED)
        }
       
sealed trait MilestoneOrderField extends scala.Product with scala.Serializable { def value: String }
        object MilestoneOrderField {
          case object CREATED_AT extends MilestoneOrderField { val value: String = "CREATED_AT" }
case object DUE_DATE extends MilestoneOrderField { val value: String = "DUE_DATE" }
case object NUMBER extends MilestoneOrderField { val value: String = "NUMBER" }
case object UPDATED_AT extends MilestoneOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[MilestoneOrderField] = {
            case __StringValue ("CREATED_AT") => Right(MilestoneOrderField.CREATED_AT)
case __StringValue ("DUE_DATE") => Right(MilestoneOrderField.DUE_DATE)
case __StringValue ("NUMBER") => Right(MilestoneOrderField.NUMBER)
case __StringValue ("UPDATED_AT") => Right(MilestoneOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build MilestoneOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[MilestoneOrderField] = {
            case MilestoneOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case MilestoneOrderField.DUE_DATE => __EnumValue("DUE_DATE")
case MilestoneOrderField.NUMBER => __EnumValue("NUMBER")
case MilestoneOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[MilestoneOrderField] = scala.collection.immutable.Vector(CREATED_AT, DUE_DATE, NUMBER, UPDATED_AT)
        }
       
sealed trait MilestoneState extends scala.Product with scala.Serializable { def value: String }
        object MilestoneState {
          case object CLOSED extends MilestoneState { val value: String = "CLOSED" }
case object OPEN extends MilestoneState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[MilestoneState] = {
            case __StringValue ("CLOSED") => Right(MilestoneState.CLOSED)
case __StringValue ("OPEN") => Right(MilestoneState.OPEN)
            case other => Left(DecodingError(s"Can't build MilestoneState from input $other"))
          }
          implicit val encoder: ArgEncoder[MilestoneState] = {
            case MilestoneState.CLOSED => __EnumValue("CLOSED")
case MilestoneState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[MilestoneState] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait NotificationRestrictionSettingValue extends scala.Product with scala.Serializable { def value: String }
        object NotificationRestrictionSettingValue {
          case object DISABLED extends NotificationRestrictionSettingValue { val value: String = "DISABLED" }
case object ENABLED extends NotificationRestrictionSettingValue { val value: String = "ENABLED" }

          implicit val decoder: ScalarDecoder[NotificationRestrictionSettingValue] = {
            case __StringValue ("DISABLED") => Right(NotificationRestrictionSettingValue.DISABLED)
case __StringValue ("ENABLED") => Right(NotificationRestrictionSettingValue.ENABLED)
            case other => Left(DecodingError(s"Can't build NotificationRestrictionSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[NotificationRestrictionSettingValue] = {
            case NotificationRestrictionSettingValue.DISABLED => __EnumValue("DISABLED")
case NotificationRestrictionSettingValue.ENABLED => __EnumValue("ENABLED")
          }

          val values: scala.collection.immutable.Vector[NotificationRestrictionSettingValue] = scala.collection.immutable.Vector(DISABLED, ENABLED)
        }
       
sealed trait OIDCProviderType extends scala.Product with scala.Serializable { def value: String }
        object OIDCProviderType {
          case object AAD extends OIDCProviderType { val value: String = "AAD" }

          implicit val decoder: ScalarDecoder[OIDCProviderType] = {
            case __StringValue ("AAD") => Right(OIDCProviderType.AAD)
            case other => Left(DecodingError(s"Can't build OIDCProviderType from input $other"))
          }
          implicit val encoder: ArgEncoder[OIDCProviderType] = {
            case OIDCProviderType.AAD => __EnumValue("AAD")
          }

          val values: scala.collection.immutable.Vector[OIDCProviderType] = scala.collection.immutable.Vector(AAD)
        }
       
sealed trait OauthApplicationCreateAuditEntryState extends scala.Product with scala.Serializable { def value: String }
        object OauthApplicationCreateAuditEntryState {
          case object ACTIVE extends OauthApplicationCreateAuditEntryState { val value: String = "ACTIVE" }
case object PENDING_DELETION extends OauthApplicationCreateAuditEntryState { val value: String = "PENDING_DELETION" }
case object SUSPENDED extends OauthApplicationCreateAuditEntryState { val value: String = "SUSPENDED" }

          implicit val decoder: ScalarDecoder[OauthApplicationCreateAuditEntryState] = {
            case __StringValue ("ACTIVE") => Right(OauthApplicationCreateAuditEntryState.ACTIVE)
case __StringValue ("PENDING_DELETION") => Right(OauthApplicationCreateAuditEntryState.PENDING_DELETION)
case __StringValue ("SUSPENDED") => Right(OauthApplicationCreateAuditEntryState.SUSPENDED)
            case other => Left(DecodingError(s"Can't build OauthApplicationCreateAuditEntryState from input $other"))
          }
          implicit val encoder: ArgEncoder[OauthApplicationCreateAuditEntryState] = {
            case OauthApplicationCreateAuditEntryState.ACTIVE => __EnumValue("ACTIVE")
case OauthApplicationCreateAuditEntryState.PENDING_DELETION => __EnumValue("PENDING_DELETION")
case OauthApplicationCreateAuditEntryState.SUSPENDED => __EnumValue("SUSPENDED")
          }

          val values: scala.collection.immutable.Vector[OauthApplicationCreateAuditEntryState] = scala.collection.immutable.Vector(ACTIVE, PENDING_DELETION, SUSPENDED)
        }
       
sealed trait OperationType extends scala.Product with scala.Serializable { def value: String }
        object OperationType {
          case object ACCESS extends OperationType { val value: String = "ACCESS" }
case object AUTHENTICATION extends OperationType { val value: String = "AUTHENTICATION" }
case object CREATE extends OperationType { val value: String = "CREATE" }
case object MODIFY extends OperationType { val value: String = "MODIFY" }
case object REMOVE extends OperationType { val value: String = "REMOVE" }
case object RESTORE extends OperationType { val value: String = "RESTORE" }
case object TRANSFER extends OperationType { val value: String = "TRANSFER" }

          implicit val decoder: ScalarDecoder[OperationType] = {
            case __StringValue ("ACCESS") => Right(OperationType.ACCESS)
case __StringValue ("AUTHENTICATION") => Right(OperationType.AUTHENTICATION)
case __StringValue ("CREATE") => Right(OperationType.CREATE)
case __StringValue ("MODIFY") => Right(OperationType.MODIFY)
case __StringValue ("REMOVE") => Right(OperationType.REMOVE)
case __StringValue ("RESTORE") => Right(OperationType.RESTORE)
case __StringValue ("TRANSFER") => Right(OperationType.TRANSFER)
            case other => Left(DecodingError(s"Can't build OperationType from input $other"))
          }
          implicit val encoder: ArgEncoder[OperationType] = {
            case OperationType.ACCESS => __EnumValue("ACCESS")
case OperationType.AUTHENTICATION => __EnumValue("AUTHENTICATION")
case OperationType.CREATE => __EnumValue("CREATE")
case OperationType.MODIFY => __EnumValue("MODIFY")
case OperationType.REMOVE => __EnumValue("REMOVE")
case OperationType.RESTORE => __EnumValue("RESTORE")
case OperationType.TRANSFER => __EnumValue("TRANSFER")
          }

          val values: scala.collection.immutable.Vector[OperationType] = scala.collection.immutable.Vector(ACCESS, AUTHENTICATION, CREATE, MODIFY, REMOVE, RESTORE, TRANSFER)
        }
       
sealed trait OrderDirection extends scala.Product with scala.Serializable { def value: String }
        object OrderDirection {
          case object ASC extends OrderDirection { val value: String = "ASC" }
case object DESC extends OrderDirection { val value: String = "DESC" }

          implicit val decoder: ScalarDecoder[OrderDirection] = {
            case __StringValue ("ASC") => Right(OrderDirection.ASC)
case __StringValue ("DESC") => Right(OrderDirection.DESC)
            case other => Left(DecodingError(s"Can't build OrderDirection from input $other"))
          }
          implicit val encoder: ArgEncoder[OrderDirection] = {
            case OrderDirection.ASC => __EnumValue("ASC")
case OrderDirection.DESC => __EnumValue("DESC")
          }

          val values: scala.collection.immutable.Vector[OrderDirection] = scala.collection.immutable.Vector(ASC, DESC)
        }
       
sealed trait OrgAddMemberAuditEntryPermission extends scala.Product with scala.Serializable { def value: String }
        object OrgAddMemberAuditEntryPermission {
          case object ADMIN extends OrgAddMemberAuditEntryPermission { val value: String = "ADMIN" }
case object READ extends OrgAddMemberAuditEntryPermission { val value: String = "READ" }

          implicit val decoder: ScalarDecoder[OrgAddMemberAuditEntryPermission] = {
            case __StringValue ("ADMIN") => Right(OrgAddMemberAuditEntryPermission.ADMIN)
case __StringValue ("READ") => Right(OrgAddMemberAuditEntryPermission.READ)
            case other => Left(DecodingError(s"Can't build OrgAddMemberAuditEntryPermission from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgAddMemberAuditEntryPermission] = {
            case OrgAddMemberAuditEntryPermission.ADMIN => __EnumValue("ADMIN")
case OrgAddMemberAuditEntryPermission.READ => __EnumValue("READ")
          }

          val values: scala.collection.immutable.Vector[OrgAddMemberAuditEntryPermission] = scala.collection.immutable.Vector(ADMIN, READ)
        }
       
sealed trait OrgCreateAuditEntryBillingPlan extends scala.Product with scala.Serializable { def value: String }
        object OrgCreateAuditEntryBillingPlan {
          case object BUSINESS extends OrgCreateAuditEntryBillingPlan { val value: String = "BUSINESS" }
case object BUSINESS_PLUS extends OrgCreateAuditEntryBillingPlan { val value: String = "BUSINESS_PLUS" }
case object FREE extends OrgCreateAuditEntryBillingPlan { val value: String = "FREE" }
case object TIERED_PER_SEAT extends OrgCreateAuditEntryBillingPlan { val value: String = "TIERED_PER_SEAT" }
case object UNLIMITED extends OrgCreateAuditEntryBillingPlan { val value: String = "UNLIMITED" }

          implicit val decoder: ScalarDecoder[OrgCreateAuditEntryBillingPlan] = {
            case __StringValue ("BUSINESS") => Right(OrgCreateAuditEntryBillingPlan.BUSINESS)
case __StringValue ("BUSINESS_PLUS") => Right(OrgCreateAuditEntryBillingPlan.BUSINESS_PLUS)
case __StringValue ("FREE") => Right(OrgCreateAuditEntryBillingPlan.FREE)
case __StringValue ("TIERED_PER_SEAT") => Right(OrgCreateAuditEntryBillingPlan.TIERED_PER_SEAT)
case __StringValue ("UNLIMITED") => Right(OrgCreateAuditEntryBillingPlan.UNLIMITED)
            case other => Left(DecodingError(s"Can't build OrgCreateAuditEntryBillingPlan from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgCreateAuditEntryBillingPlan] = {
            case OrgCreateAuditEntryBillingPlan.BUSINESS => __EnumValue("BUSINESS")
case OrgCreateAuditEntryBillingPlan.BUSINESS_PLUS => __EnumValue("BUSINESS_PLUS")
case OrgCreateAuditEntryBillingPlan.FREE => __EnumValue("FREE")
case OrgCreateAuditEntryBillingPlan.TIERED_PER_SEAT => __EnumValue("TIERED_PER_SEAT")
case OrgCreateAuditEntryBillingPlan.UNLIMITED => __EnumValue("UNLIMITED")
          }

          val values: scala.collection.immutable.Vector[OrgCreateAuditEntryBillingPlan] = scala.collection.immutable.Vector(BUSINESS, BUSINESS_PLUS, FREE, TIERED_PER_SEAT, UNLIMITED)
        }
       
sealed trait OrgEnterpriseOwnerOrderField extends scala.Product with scala.Serializable { def value: String }
        object OrgEnterpriseOwnerOrderField {
          case object LOGIN extends OrgEnterpriseOwnerOrderField { val value: String = "LOGIN" }

          implicit val decoder: ScalarDecoder[OrgEnterpriseOwnerOrderField] = {
            case __StringValue ("LOGIN") => Right(OrgEnterpriseOwnerOrderField.LOGIN)
            case other => Left(DecodingError(s"Can't build OrgEnterpriseOwnerOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgEnterpriseOwnerOrderField] = {
            case OrgEnterpriseOwnerOrderField.LOGIN => __EnumValue("LOGIN")
          }

          val values: scala.collection.immutable.Vector[OrgEnterpriseOwnerOrderField] = scala.collection.immutable.Vector(LOGIN)
        }
       
sealed trait OrgRemoveBillingManagerAuditEntryReason extends scala.Product with scala.Serializable { def value: String }
        object OrgRemoveBillingManagerAuditEntryReason {
          case object SAML_EXTERNAL_IDENTITY_MISSING extends OrgRemoveBillingManagerAuditEntryReason { val value: String = "SAML_EXTERNAL_IDENTITY_MISSING" }
case object SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY extends OrgRemoveBillingManagerAuditEntryReason { val value: String = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY" }
case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE extends OrgRemoveBillingManagerAuditEntryReason { val value: String = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE" }

          implicit val decoder: ScalarDecoder[OrgRemoveBillingManagerAuditEntryReason] = {
            case __StringValue ("SAML_EXTERNAL_IDENTITY_MISSING") => Right(OrgRemoveBillingManagerAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING)
case __StringValue ("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY") => Right(OrgRemoveBillingManagerAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY)
case __StringValue ("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE") => Right(OrgRemoveBillingManagerAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE)
            case other => Left(DecodingError(s"Can't build OrgRemoveBillingManagerAuditEntryReason from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgRemoveBillingManagerAuditEntryReason] = {
            case OrgRemoveBillingManagerAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING => __EnumValue("SAML_EXTERNAL_IDENTITY_MISSING")
case OrgRemoveBillingManagerAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY => __EnumValue("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY")
case OrgRemoveBillingManagerAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE => __EnumValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE")
          }

          val values: scala.collection.immutable.Vector[OrgRemoveBillingManagerAuditEntryReason] = scala.collection.immutable.Vector(SAML_EXTERNAL_IDENTITY_MISSING, SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY, TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE)
        }
       
sealed trait OrgRemoveMemberAuditEntryMembershipType extends scala.Product with scala.Serializable { def value: String }
        object OrgRemoveMemberAuditEntryMembershipType {
          case object ADMIN extends OrgRemoveMemberAuditEntryMembershipType { val value: String = "ADMIN" }
case object BILLING_MANAGER extends OrgRemoveMemberAuditEntryMembershipType { val value: String = "BILLING_MANAGER" }
case object DIRECT_MEMBER extends OrgRemoveMemberAuditEntryMembershipType { val value: String = "DIRECT_MEMBER" }
case object OUTSIDE_COLLABORATOR extends OrgRemoveMemberAuditEntryMembershipType { val value: String = "OUTSIDE_COLLABORATOR" }
case object SUSPENDED extends OrgRemoveMemberAuditEntryMembershipType { val value: String = "SUSPENDED" }
case object UNAFFILIATED extends OrgRemoveMemberAuditEntryMembershipType { val value: String = "UNAFFILIATED" }

          implicit val decoder: ScalarDecoder[OrgRemoveMemberAuditEntryMembershipType] = {
            case __StringValue ("ADMIN") => Right(OrgRemoveMemberAuditEntryMembershipType.ADMIN)
case __StringValue ("BILLING_MANAGER") => Right(OrgRemoveMemberAuditEntryMembershipType.BILLING_MANAGER)
case __StringValue ("DIRECT_MEMBER") => Right(OrgRemoveMemberAuditEntryMembershipType.DIRECT_MEMBER)
case __StringValue ("OUTSIDE_COLLABORATOR") => Right(OrgRemoveMemberAuditEntryMembershipType.OUTSIDE_COLLABORATOR)
case __StringValue ("SUSPENDED") => Right(OrgRemoveMemberAuditEntryMembershipType.SUSPENDED)
case __StringValue ("UNAFFILIATED") => Right(OrgRemoveMemberAuditEntryMembershipType.UNAFFILIATED)
            case other => Left(DecodingError(s"Can't build OrgRemoveMemberAuditEntryMembershipType from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgRemoveMemberAuditEntryMembershipType] = {
            case OrgRemoveMemberAuditEntryMembershipType.ADMIN => __EnumValue("ADMIN")
case OrgRemoveMemberAuditEntryMembershipType.BILLING_MANAGER => __EnumValue("BILLING_MANAGER")
case OrgRemoveMemberAuditEntryMembershipType.DIRECT_MEMBER => __EnumValue("DIRECT_MEMBER")
case OrgRemoveMemberAuditEntryMembershipType.OUTSIDE_COLLABORATOR => __EnumValue("OUTSIDE_COLLABORATOR")
case OrgRemoveMemberAuditEntryMembershipType.SUSPENDED => __EnumValue("SUSPENDED")
case OrgRemoveMemberAuditEntryMembershipType.UNAFFILIATED => __EnumValue("UNAFFILIATED")
          }

          val values: scala.collection.immutable.Vector[OrgRemoveMemberAuditEntryMembershipType] = scala.collection.immutable.Vector(ADMIN, BILLING_MANAGER, DIRECT_MEMBER, OUTSIDE_COLLABORATOR, SUSPENDED, UNAFFILIATED)
        }
       
sealed trait OrgRemoveMemberAuditEntryReason extends scala.Product with scala.Serializable { def value: String }
        object OrgRemoveMemberAuditEntryReason {
          case object SAML_EXTERNAL_IDENTITY_MISSING extends OrgRemoveMemberAuditEntryReason { val value: String = "SAML_EXTERNAL_IDENTITY_MISSING" }
case object SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY extends OrgRemoveMemberAuditEntryReason { val value: String = "SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY" }
case object TWO_FACTOR_ACCOUNT_RECOVERY extends OrgRemoveMemberAuditEntryReason { val value: String = "TWO_FACTOR_ACCOUNT_RECOVERY" }
case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE extends OrgRemoveMemberAuditEntryReason { val value: String = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE" }
case object USER_ACCOUNT_DELETED extends OrgRemoveMemberAuditEntryReason { val value: String = "USER_ACCOUNT_DELETED" }

          implicit val decoder: ScalarDecoder[OrgRemoveMemberAuditEntryReason] = {
            case __StringValue ("SAML_EXTERNAL_IDENTITY_MISSING") => Right(OrgRemoveMemberAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING)
case __StringValue ("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY") => Right(OrgRemoveMemberAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY)
case __StringValue ("TWO_FACTOR_ACCOUNT_RECOVERY") => Right(OrgRemoveMemberAuditEntryReason.TWO_FACTOR_ACCOUNT_RECOVERY)
case __StringValue ("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE") => Right(OrgRemoveMemberAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE)
case __StringValue ("USER_ACCOUNT_DELETED") => Right(OrgRemoveMemberAuditEntryReason.USER_ACCOUNT_DELETED)
            case other => Left(DecodingError(s"Can't build OrgRemoveMemberAuditEntryReason from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgRemoveMemberAuditEntryReason] = {
            case OrgRemoveMemberAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING => __EnumValue("SAML_EXTERNAL_IDENTITY_MISSING")
case OrgRemoveMemberAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY => __EnumValue("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY")
case OrgRemoveMemberAuditEntryReason.TWO_FACTOR_ACCOUNT_RECOVERY => __EnumValue("TWO_FACTOR_ACCOUNT_RECOVERY")
case OrgRemoveMemberAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE => __EnumValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE")
case OrgRemoveMemberAuditEntryReason.USER_ACCOUNT_DELETED => __EnumValue("USER_ACCOUNT_DELETED")
          }

          val values: scala.collection.immutable.Vector[OrgRemoveMemberAuditEntryReason] = scala.collection.immutable.Vector(SAML_EXTERNAL_IDENTITY_MISSING, SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY, TWO_FACTOR_ACCOUNT_RECOVERY, TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE, USER_ACCOUNT_DELETED)
        }
       
sealed trait OrgRemoveOutsideCollaboratorAuditEntryMembershipType extends scala.Product with scala.Serializable { def value: String }
        object OrgRemoveOutsideCollaboratorAuditEntryMembershipType {
          case object BILLING_MANAGER extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType { val value: String = "BILLING_MANAGER" }
case object OUTSIDE_COLLABORATOR extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType { val value: String = "OUTSIDE_COLLABORATOR" }
case object UNAFFILIATED extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType { val value: String = "UNAFFILIATED" }

          implicit val decoder: ScalarDecoder[OrgRemoveOutsideCollaboratorAuditEntryMembershipType] = {
            case __StringValue ("BILLING_MANAGER") => Right(OrgRemoveOutsideCollaboratorAuditEntryMembershipType.BILLING_MANAGER)
case __StringValue ("OUTSIDE_COLLABORATOR") => Right(OrgRemoveOutsideCollaboratorAuditEntryMembershipType.OUTSIDE_COLLABORATOR)
case __StringValue ("UNAFFILIATED") => Right(OrgRemoveOutsideCollaboratorAuditEntryMembershipType.UNAFFILIATED)
            case other => Left(DecodingError(s"Can't build OrgRemoveOutsideCollaboratorAuditEntryMembershipType from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgRemoveOutsideCollaboratorAuditEntryMembershipType] = {
            case OrgRemoveOutsideCollaboratorAuditEntryMembershipType.BILLING_MANAGER => __EnumValue("BILLING_MANAGER")
case OrgRemoveOutsideCollaboratorAuditEntryMembershipType.OUTSIDE_COLLABORATOR => __EnumValue("OUTSIDE_COLLABORATOR")
case OrgRemoveOutsideCollaboratorAuditEntryMembershipType.UNAFFILIATED => __EnumValue("UNAFFILIATED")
          }

          val values: scala.collection.immutable.Vector[OrgRemoveOutsideCollaboratorAuditEntryMembershipType] = scala.collection.immutable.Vector(BILLING_MANAGER, OUTSIDE_COLLABORATOR, UNAFFILIATED)
        }
       
sealed trait OrgRemoveOutsideCollaboratorAuditEntryReason extends scala.Product with scala.Serializable { def value: String }
        object OrgRemoveOutsideCollaboratorAuditEntryReason {
          case object SAML_EXTERNAL_IDENTITY_MISSING extends OrgRemoveOutsideCollaboratorAuditEntryReason { val value: String = "SAML_EXTERNAL_IDENTITY_MISSING" }
case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE extends OrgRemoveOutsideCollaboratorAuditEntryReason { val value: String = "TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE" }

          implicit val decoder: ScalarDecoder[OrgRemoveOutsideCollaboratorAuditEntryReason] = {
            case __StringValue ("SAML_EXTERNAL_IDENTITY_MISSING") => Right(OrgRemoveOutsideCollaboratorAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING)
case __StringValue ("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE") => Right(OrgRemoveOutsideCollaboratorAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE)
            case other => Left(DecodingError(s"Can't build OrgRemoveOutsideCollaboratorAuditEntryReason from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgRemoveOutsideCollaboratorAuditEntryReason] = {
            case OrgRemoveOutsideCollaboratorAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING => __EnumValue("SAML_EXTERNAL_IDENTITY_MISSING")
case OrgRemoveOutsideCollaboratorAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE => __EnumValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE")
          }

          val values: scala.collection.immutable.Vector[OrgRemoveOutsideCollaboratorAuditEntryReason] = scala.collection.immutable.Vector(SAML_EXTERNAL_IDENTITY_MISSING, TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE)
        }
       
sealed trait OrgUpdateDefaultRepositoryPermissionAuditEntryPermission extends scala.Product with scala.Serializable { def value: String }
        object OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {
          case object ADMIN extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission { val value: String = "ADMIN" }
case object NONE extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission { val value: String = "NONE" }
case object READ extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission { val value: String = "READ" }
case object WRITE extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission { val value: String = "WRITE" }

          implicit val decoder: ScalarDecoder[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission] = {
            case __StringValue ("ADMIN") => Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.ADMIN)
case __StringValue ("NONE") => Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.NONE)
case __StringValue ("READ") => Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.READ)
case __StringValue ("WRITE") => Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.WRITE)
            case other => Left(DecodingError(s"Can't build OrgUpdateDefaultRepositoryPermissionAuditEntryPermission from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission] = {
            case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.ADMIN => __EnumValue("ADMIN")
case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.NONE => __EnumValue("NONE")
case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.READ => __EnumValue("READ")
case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.WRITE => __EnumValue("WRITE")
          }

          val values: scala.collection.immutable.Vector[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission] = scala.collection.immutable.Vector(ADMIN, NONE, READ, WRITE)
        }
       
sealed trait OrgUpdateMemberAuditEntryPermission extends scala.Product with scala.Serializable { def value: String }
        object OrgUpdateMemberAuditEntryPermission {
          case object ADMIN extends OrgUpdateMemberAuditEntryPermission { val value: String = "ADMIN" }
case object READ extends OrgUpdateMemberAuditEntryPermission { val value: String = "READ" }

          implicit val decoder: ScalarDecoder[OrgUpdateMemberAuditEntryPermission] = {
            case __StringValue ("ADMIN") => Right(OrgUpdateMemberAuditEntryPermission.ADMIN)
case __StringValue ("READ") => Right(OrgUpdateMemberAuditEntryPermission.READ)
            case other => Left(DecodingError(s"Can't build OrgUpdateMemberAuditEntryPermission from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgUpdateMemberAuditEntryPermission] = {
            case OrgUpdateMemberAuditEntryPermission.ADMIN => __EnumValue("ADMIN")
case OrgUpdateMemberAuditEntryPermission.READ => __EnumValue("READ")
          }

          val values: scala.collection.immutable.Vector[OrgUpdateMemberAuditEntryPermission] = scala.collection.immutable.Vector(ADMIN, READ)
        }
       
sealed trait OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {
          case object ALL extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "ALL" }
case object INTERNAL extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "INTERNAL" }
case object NONE extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "NONE" }
case object PRIVATE extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "PRIVATE" }
case object PRIVATE_INTERNAL extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "PRIVATE_INTERNAL" }
case object PUBLIC extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "PUBLIC" }
case object PUBLIC_INTERNAL extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "PUBLIC_INTERNAL" }
case object PUBLIC_PRIVATE extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility { val value: String = "PUBLIC_PRIVATE" }

          implicit val decoder: ScalarDecoder[OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility] = {
            case __StringValue ("ALL") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.ALL)
case __StringValue ("INTERNAL") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.INTERNAL)
case __StringValue ("NONE") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.NONE)
case __StringValue ("PRIVATE") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE)
case __StringValue ("PRIVATE_INTERNAL") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE_INTERNAL)
case __StringValue ("PUBLIC") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC)
case __StringValue ("PUBLIC_INTERNAL") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_INTERNAL)
case __StringValue ("PUBLIC_PRIVATE") => Right(OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_PRIVATE)
            case other => Left(DecodingError(s"Can't build OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility] = {
            case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.ALL => __EnumValue("ALL")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.NONE => __EnumValue("NONE")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE_INTERNAL => __EnumValue("PRIVATE_INTERNAL")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_INTERNAL => __EnumValue("PUBLIC_INTERNAL")
case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_PRIVATE => __EnumValue("PUBLIC_PRIVATE")
          }

          val values: scala.collection.immutable.Vector[OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility] = scala.collection.immutable.Vector(ALL, INTERNAL, NONE, PRIVATE, PRIVATE_INTERNAL, PUBLIC, PUBLIC_INTERNAL, PUBLIC_PRIVATE)
        }
       
sealed trait OrganizationInvitationRole extends scala.Product with scala.Serializable { def value: String }
        object OrganizationInvitationRole {
          case object ADMIN extends OrganizationInvitationRole { val value: String = "ADMIN" }
case object BILLING_MANAGER extends OrganizationInvitationRole { val value: String = "BILLING_MANAGER" }
case object DIRECT_MEMBER extends OrganizationInvitationRole { val value: String = "DIRECT_MEMBER" }
case object REINSTATE extends OrganizationInvitationRole { val value: String = "REINSTATE" }

          implicit val decoder: ScalarDecoder[OrganizationInvitationRole] = {
            case __StringValue ("ADMIN") => Right(OrganizationInvitationRole.ADMIN)
case __StringValue ("BILLING_MANAGER") => Right(OrganizationInvitationRole.BILLING_MANAGER)
case __StringValue ("DIRECT_MEMBER") => Right(OrganizationInvitationRole.DIRECT_MEMBER)
case __StringValue ("REINSTATE") => Right(OrganizationInvitationRole.REINSTATE)
            case other => Left(DecodingError(s"Can't build OrganizationInvitationRole from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationInvitationRole] = {
            case OrganizationInvitationRole.ADMIN => __EnumValue("ADMIN")
case OrganizationInvitationRole.BILLING_MANAGER => __EnumValue("BILLING_MANAGER")
case OrganizationInvitationRole.DIRECT_MEMBER => __EnumValue("DIRECT_MEMBER")
case OrganizationInvitationRole.REINSTATE => __EnumValue("REINSTATE")
          }

          val values: scala.collection.immutable.Vector[OrganizationInvitationRole] = scala.collection.immutable.Vector(ADMIN, BILLING_MANAGER, DIRECT_MEMBER, REINSTATE)
        }
       
sealed trait OrganizationInvitationSource extends scala.Product with scala.Serializable { def value: String }
        object OrganizationInvitationSource {
          case object MEMBER extends OrganizationInvitationSource { val value: String = "MEMBER" }
case object SCIM extends OrganizationInvitationSource { val value: String = "SCIM" }
case object UNKNOWN extends OrganizationInvitationSource { val value: String = "UNKNOWN" }

          implicit val decoder: ScalarDecoder[OrganizationInvitationSource] = {
            case __StringValue ("MEMBER") => Right(OrganizationInvitationSource.MEMBER)
case __StringValue ("SCIM") => Right(OrganizationInvitationSource.SCIM)
case __StringValue ("UNKNOWN") => Right(OrganizationInvitationSource.UNKNOWN)
            case other => Left(DecodingError(s"Can't build OrganizationInvitationSource from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationInvitationSource] = {
            case OrganizationInvitationSource.MEMBER => __EnumValue("MEMBER")
case OrganizationInvitationSource.SCIM => __EnumValue("SCIM")
case OrganizationInvitationSource.UNKNOWN => __EnumValue("UNKNOWN")
          }

          val values: scala.collection.immutable.Vector[OrganizationInvitationSource] = scala.collection.immutable.Vector(MEMBER, SCIM, UNKNOWN)
        }
       
sealed trait OrganizationInvitationType extends scala.Product with scala.Serializable { def value: String }
        object OrganizationInvitationType {
          case object EMAIL extends OrganizationInvitationType { val value: String = "EMAIL" }
case object USER extends OrganizationInvitationType { val value: String = "USER" }

          implicit val decoder: ScalarDecoder[OrganizationInvitationType] = {
            case __StringValue ("EMAIL") => Right(OrganizationInvitationType.EMAIL)
case __StringValue ("USER") => Right(OrganizationInvitationType.USER)
            case other => Left(DecodingError(s"Can't build OrganizationInvitationType from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationInvitationType] = {
            case OrganizationInvitationType.EMAIL => __EnumValue("EMAIL")
case OrganizationInvitationType.USER => __EnumValue("USER")
          }

          val values: scala.collection.immutable.Vector[OrganizationInvitationType] = scala.collection.immutable.Vector(EMAIL, USER)
        }
       
sealed trait OrganizationMemberRole extends scala.Product with scala.Serializable { def value: String }
        object OrganizationMemberRole {
          case object ADMIN extends OrganizationMemberRole { val value: String = "ADMIN" }
case object MEMBER extends OrganizationMemberRole { val value: String = "MEMBER" }

          implicit val decoder: ScalarDecoder[OrganizationMemberRole] = {
            case __StringValue ("ADMIN") => Right(OrganizationMemberRole.ADMIN)
case __StringValue ("MEMBER") => Right(OrganizationMemberRole.MEMBER)
            case other => Left(DecodingError(s"Can't build OrganizationMemberRole from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationMemberRole] = {
            case OrganizationMemberRole.ADMIN => __EnumValue("ADMIN")
case OrganizationMemberRole.MEMBER => __EnumValue("MEMBER")
          }

          val values: scala.collection.immutable.Vector[OrganizationMemberRole] = scala.collection.immutable.Vector(ADMIN, MEMBER)
        }
       
sealed trait OrganizationMembersCanCreateRepositoriesSettingValue extends scala.Product with scala.Serializable { def value: String }
        object OrganizationMembersCanCreateRepositoriesSettingValue {
          case object ALL extends OrganizationMembersCanCreateRepositoriesSettingValue { val value: String = "ALL" }
case object DISABLED extends OrganizationMembersCanCreateRepositoriesSettingValue { val value: String = "DISABLED" }
case object INTERNAL extends OrganizationMembersCanCreateRepositoriesSettingValue { val value: String = "INTERNAL" }
case object PRIVATE extends OrganizationMembersCanCreateRepositoriesSettingValue { val value: String = "PRIVATE" }

          implicit val decoder: ScalarDecoder[OrganizationMembersCanCreateRepositoriesSettingValue] = {
            case __StringValue ("ALL") => Right(OrganizationMembersCanCreateRepositoriesSettingValue.ALL)
case __StringValue ("DISABLED") => Right(OrganizationMembersCanCreateRepositoriesSettingValue.DISABLED)
case __StringValue ("INTERNAL") => Right(OrganizationMembersCanCreateRepositoriesSettingValue.INTERNAL)
case __StringValue ("PRIVATE") => Right(OrganizationMembersCanCreateRepositoriesSettingValue.PRIVATE)
            case other => Left(DecodingError(s"Can't build OrganizationMembersCanCreateRepositoriesSettingValue from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationMembersCanCreateRepositoriesSettingValue] = {
            case OrganizationMembersCanCreateRepositoriesSettingValue.ALL => __EnumValue("ALL")
case OrganizationMembersCanCreateRepositoriesSettingValue.DISABLED => __EnumValue("DISABLED")
case OrganizationMembersCanCreateRepositoriesSettingValue.INTERNAL => __EnumValue("INTERNAL")
case OrganizationMembersCanCreateRepositoriesSettingValue.PRIVATE => __EnumValue("PRIVATE")
          }

          val values: scala.collection.immutable.Vector[OrganizationMembersCanCreateRepositoriesSettingValue] = scala.collection.immutable.Vector(ALL, DISABLED, INTERNAL, PRIVATE)
        }
       
sealed trait OrganizationMigrationState extends scala.Product with scala.Serializable { def value: String }
        object OrganizationMigrationState {
          case object FAILED extends OrganizationMigrationState { val value: String = "FAILED" }
case object FAILED_VALIDATION extends OrganizationMigrationState { val value: String = "FAILED_VALIDATION" }
case object IN_PROGRESS extends OrganizationMigrationState { val value: String = "IN_PROGRESS" }
case object NOT_STARTED extends OrganizationMigrationState { val value: String = "NOT_STARTED" }
case object PENDING_VALIDATION extends OrganizationMigrationState { val value: String = "PENDING_VALIDATION" }
case object POST_REPO_MIGRATION extends OrganizationMigrationState { val value: String = "POST_REPO_MIGRATION" }
case object PRE_REPO_MIGRATION extends OrganizationMigrationState { val value: String = "PRE_REPO_MIGRATION" }
case object QUEUED extends OrganizationMigrationState { val value: String = "QUEUED" }
case object REPO_MIGRATION extends OrganizationMigrationState { val value: String = "REPO_MIGRATION" }
case object SUCCEEDED extends OrganizationMigrationState { val value: String = "SUCCEEDED" }

          implicit val decoder: ScalarDecoder[OrganizationMigrationState] = {
            case __StringValue ("FAILED") => Right(OrganizationMigrationState.FAILED)
case __StringValue ("FAILED_VALIDATION") => Right(OrganizationMigrationState.FAILED_VALIDATION)
case __StringValue ("IN_PROGRESS") => Right(OrganizationMigrationState.IN_PROGRESS)
case __StringValue ("NOT_STARTED") => Right(OrganizationMigrationState.NOT_STARTED)
case __StringValue ("PENDING_VALIDATION") => Right(OrganizationMigrationState.PENDING_VALIDATION)
case __StringValue ("POST_REPO_MIGRATION") => Right(OrganizationMigrationState.POST_REPO_MIGRATION)
case __StringValue ("PRE_REPO_MIGRATION") => Right(OrganizationMigrationState.PRE_REPO_MIGRATION)
case __StringValue ("QUEUED") => Right(OrganizationMigrationState.QUEUED)
case __StringValue ("REPO_MIGRATION") => Right(OrganizationMigrationState.REPO_MIGRATION)
case __StringValue ("SUCCEEDED") => Right(OrganizationMigrationState.SUCCEEDED)
            case other => Left(DecodingError(s"Can't build OrganizationMigrationState from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationMigrationState] = {
            case OrganizationMigrationState.FAILED => __EnumValue("FAILED")
case OrganizationMigrationState.FAILED_VALIDATION => __EnumValue("FAILED_VALIDATION")
case OrganizationMigrationState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case OrganizationMigrationState.NOT_STARTED => __EnumValue("NOT_STARTED")
case OrganizationMigrationState.PENDING_VALIDATION => __EnumValue("PENDING_VALIDATION")
case OrganizationMigrationState.POST_REPO_MIGRATION => __EnumValue("POST_REPO_MIGRATION")
case OrganizationMigrationState.PRE_REPO_MIGRATION => __EnumValue("PRE_REPO_MIGRATION")
case OrganizationMigrationState.QUEUED => __EnumValue("QUEUED")
case OrganizationMigrationState.REPO_MIGRATION => __EnumValue("REPO_MIGRATION")
case OrganizationMigrationState.SUCCEEDED => __EnumValue("SUCCEEDED")
          }

          val values: scala.collection.immutable.Vector[OrganizationMigrationState] = scala.collection.immutable.Vector(FAILED, FAILED_VALIDATION, IN_PROGRESS, NOT_STARTED, PENDING_VALIDATION, POST_REPO_MIGRATION, PRE_REPO_MIGRATION, QUEUED, REPO_MIGRATION, SUCCEEDED)
        }
       
sealed trait OrganizationOrderField extends scala.Product with scala.Serializable { def value: String }
        object OrganizationOrderField {
          case object CREATED_AT extends OrganizationOrderField { val value: String = "CREATED_AT" }
case object LOGIN extends OrganizationOrderField { val value: String = "LOGIN" }

          implicit val decoder: ScalarDecoder[OrganizationOrderField] = {
            case __StringValue ("CREATED_AT") => Right(OrganizationOrderField.CREATED_AT)
case __StringValue ("LOGIN") => Right(OrganizationOrderField.LOGIN)
            case other => Left(DecodingError(s"Can't build OrganizationOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[OrganizationOrderField] = {
            case OrganizationOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case OrganizationOrderField.LOGIN => __EnumValue("LOGIN")
          }

          val values: scala.collection.immutable.Vector[OrganizationOrderField] = scala.collection.immutable.Vector(CREATED_AT, LOGIN)
        }
       
sealed trait PackageFileOrderField extends scala.Product with scala.Serializable { def value: String }
        object PackageFileOrderField {
          case object CREATED_AT extends PackageFileOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[PackageFileOrderField] = {
            case __StringValue ("CREATED_AT") => Right(PackageFileOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build PackageFileOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[PackageFileOrderField] = {
            case PackageFileOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[PackageFileOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait PackageOrderField extends scala.Product with scala.Serializable { def value: String }
        object PackageOrderField {
          case object CREATED_AT extends PackageOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[PackageOrderField] = {
            case __StringValue ("CREATED_AT") => Right(PackageOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build PackageOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[PackageOrderField] = {
            case PackageOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[PackageOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait PackageType extends scala.Product with scala.Serializable { def value: String }
        object PackageType {
          case object DEBIAN extends PackageType { val value: String = "DEBIAN" }
case object DOCKER extends PackageType { val value: String = "DOCKER" }
case object MAVEN extends PackageType { val value: String = "MAVEN" }
case object NPM extends PackageType { val value: String = "NPM" }
case object NUGET extends PackageType { val value: String = "NUGET" }
case object PYPI extends PackageType { val value: String = "PYPI" }
case object RUBYGEMS extends PackageType { val value: String = "RUBYGEMS" }

          implicit val decoder: ScalarDecoder[PackageType] = {
            case __StringValue ("DEBIAN") => Right(PackageType.DEBIAN)
case __StringValue ("DOCKER") => Right(PackageType.DOCKER)
case __StringValue ("MAVEN") => Right(PackageType.MAVEN)
case __StringValue ("NPM") => Right(PackageType.NPM)
case __StringValue ("NUGET") => Right(PackageType.NUGET)
case __StringValue ("PYPI") => Right(PackageType.PYPI)
case __StringValue ("RUBYGEMS") => Right(PackageType.RUBYGEMS)
            case other => Left(DecodingError(s"Can't build PackageType from input $other"))
          }
          implicit val encoder: ArgEncoder[PackageType] = {
            case PackageType.DEBIAN => __EnumValue("DEBIAN")
case PackageType.DOCKER => __EnumValue("DOCKER")
case PackageType.MAVEN => __EnumValue("MAVEN")
case PackageType.NPM => __EnumValue("NPM")
case PackageType.NUGET => __EnumValue("NUGET")
case PackageType.PYPI => __EnumValue("PYPI")
case PackageType.RUBYGEMS => __EnumValue("RUBYGEMS")
          }

          val values: scala.collection.immutable.Vector[PackageType] = scala.collection.immutable.Vector(DEBIAN, DOCKER, MAVEN, NPM, NUGET, PYPI, RUBYGEMS)
        }
       
sealed trait PackageVersionOrderField extends scala.Product with scala.Serializable { def value: String }
        object PackageVersionOrderField {
          case object CREATED_AT extends PackageVersionOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[PackageVersionOrderField] = {
            case __StringValue ("CREATED_AT") => Right(PackageVersionOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build PackageVersionOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[PackageVersionOrderField] = {
            case PackageVersionOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[PackageVersionOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait PatchStatus extends scala.Product with scala.Serializable { def value: String }
        object PatchStatus {
          case object ADDED extends PatchStatus { val value: String = "ADDED" }
case object CHANGED extends PatchStatus { val value: String = "CHANGED" }
case object COPIED extends PatchStatus { val value: String = "COPIED" }
case object DELETED extends PatchStatus { val value: String = "DELETED" }
case object MODIFIED extends PatchStatus { val value: String = "MODIFIED" }
case object RENAMED extends PatchStatus { val value: String = "RENAMED" }

          implicit val decoder: ScalarDecoder[PatchStatus] = {
            case __StringValue ("ADDED") => Right(PatchStatus.ADDED)
case __StringValue ("CHANGED") => Right(PatchStatus.CHANGED)
case __StringValue ("COPIED") => Right(PatchStatus.COPIED)
case __StringValue ("DELETED") => Right(PatchStatus.DELETED)
case __StringValue ("MODIFIED") => Right(PatchStatus.MODIFIED)
case __StringValue ("RENAMED") => Right(PatchStatus.RENAMED)
            case other => Left(DecodingError(s"Can't build PatchStatus from input $other"))
          }
          implicit val encoder: ArgEncoder[PatchStatus] = {
            case PatchStatus.ADDED => __EnumValue("ADDED")
case PatchStatus.CHANGED => __EnumValue("CHANGED")
case PatchStatus.COPIED => __EnumValue("COPIED")
case PatchStatus.DELETED => __EnumValue("DELETED")
case PatchStatus.MODIFIED => __EnumValue("MODIFIED")
case PatchStatus.RENAMED => __EnumValue("RENAMED")
          }

          val values: scala.collection.immutable.Vector[PatchStatus] = scala.collection.immutable.Vector(ADDED, CHANGED, COPIED, DELETED, MODIFIED, RENAMED)
        }
       
sealed trait PinnableItemType extends scala.Product with scala.Serializable { def value: String }
        object PinnableItemType {
          case object GIST extends PinnableItemType { val value: String = "GIST" }
case object ISSUE extends PinnableItemType { val value: String = "ISSUE" }
case object ORGANIZATION extends PinnableItemType { val value: String = "ORGANIZATION" }
case object PROJECT extends PinnableItemType { val value: String = "PROJECT" }
case object PULL_REQUEST extends PinnableItemType { val value: String = "PULL_REQUEST" }
case object REPOSITORY extends PinnableItemType { val value: String = "REPOSITORY" }
case object TEAM extends PinnableItemType { val value: String = "TEAM" }
case object USER extends PinnableItemType { val value: String = "USER" }

          implicit val decoder: ScalarDecoder[PinnableItemType] = {
            case __StringValue ("GIST") => Right(PinnableItemType.GIST)
case __StringValue ("ISSUE") => Right(PinnableItemType.ISSUE)
case __StringValue ("ORGANIZATION") => Right(PinnableItemType.ORGANIZATION)
case __StringValue ("PROJECT") => Right(PinnableItemType.PROJECT)
case __StringValue ("PULL_REQUEST") => Right(PinnableItemType.PULL_REQUEST)
case __StringValue ("REPOSITORY") => Right(PinnableItemType.REPOSITORY)
case __StringValue ("TEAM") => Right(PinnableItemType.TEAM)
case __StringValue ("USER") => Right(PinnableItemType.USER)
            case other => Left(DecodingError(s"Can't build PinnableItemType from input $other"))
          }
          implicit val encoder: ArgEncoder[PinnableItemType] = {
            case PinnableItemType.GIST => __EnumValue("GIST")
case PinnableItemType.ISSUE => __EnumValue("ISSUE")
case PinnableItemType.ORGANIZATION => __EnumValue("ORGANIZATION")
case PinnableItemType.PROJECT => __EnumValue("PROJECT")
case PinnableItemType.PULL_REQUEST => __EnumValue("PULL_REQUEST")
case PinnableItemType.REPOSITORY => __EnumValue("REPOSITORY")
case PinnableItemType.TEAM => __EnumValue("TEAM")
case PinnableItemType.USER => __EnumValue("USER")
          }

          val values: scala.collection.immutable.Vector[PinnableItemType] = scala.collection.immutable.Vector(GIST, ISSUE, ORGANIZATION, PROJECT, PULL_REQUEST, REPOSITORY, TEAM, USER)
        }
       
sealed trait PinnedDiscussionGradient extends scala.Product with scala.Serializable { def value: String }
        object PinnedDiscussionGradient {
          case object BLUE_MINT extends PinnedDiscussionGradient { val value: String = "BLUE_MINT" }
case object BLUE_PURPLE extends PinnedDiscussionGradient { val value: String = "BLUE_PURPLE" }
case object PINK_BLUE extends PinnedDiscussionGradient { val value: String = "PINK_BLUE" }
case object PURPLE_CORAL extends PinnedDiscussionGradient { val value: String = "PURPLE_CORAL" }
case object RED_ORANGE extends PinnedDiscussionGradient { val value: String = "RED_ORANGE" }

          implicit val decoder: ScalarDecoder[PinnedDiscussionGradient] = {
            case __StringValue ("BLUE_MINT") => Right(PinnedDiscussionGradient.BLUE_MINT)
case __StringValue ("BLUE_PURPLE") => Right(PinnedDiscussionGradient.BLUE_PURPLE)
case __StringValue ("PINK_BLUE") => Right(PinnedDiscussionGradient.PINK_BLUE)
case __StringValue ("PURPLE_CORAL") => Right(PinnedDiscussionGradient.PURPLE_CORAL)
case __StringValue ("RED_ORANGE") => Right(PinnedDiscussionGradient.RED_ORANGE)
            case other => Left(DecodingError(s"Can't build PinnedDiscussionGradient from input $other"))
          }
          implicit val encoder: ArgEncoder[PinnedDiscussionGradient] = {
            case PinnedDiscussionGradient.BLUE_MINT => __EnumValue("BLUE_MINT")
case PinnedDiscussionGradient.BLUE_PURPLE => __EnumValue("BLUE_PURPLE")
case PinnedDiscussionGradient.PINK_BLUE => __EnumValue("PINK_BLUE")
case PinnedDiscussionGradient.PURPLE_CORAL => __EnumValue("PURPLE_CORAL")
case PinnedDiscussionGradient.RED_ORANGE => __EnumValue("RED_ORANGE")
          }

          val values: scala.collection.immutable.Vector[PinnedDiscussionGradient] = scala.collection.immutable.Vector(BLUE_MINT, BLUE_PURPLE, PINK_BLUE, PURPLE_CORAL, RED_ORANGE)
        }
       
sealed trait PinnedDiscussionPattern extends scala.Product with scala.Serializable { def value: String }
        object PinnedDiscussionPattern {
          case object CHEVRON_UP extends PinnedDiscussionPattern { val value: String = "CHEVRON_UP" }
case object DOT extends PinnedDiscussionPattern { val value: String = "DOT" }
case object DOT_FILL extends PinnedDiscussionPattern { val value: String = "DOT_FILL" }
case object HEART_FILL extends PinnedDiscussionPattern { val value: String = "HEART_FILL" }
case object PLUS extends PinnedDiscussionPattern { val value: String = "PLUS" }
case object ZAP extends PinnedDiscussionPattern { val value: String = "ZAP" }

          implicit val decoder: ScalarDecoder[PinnedDiscussionPattern] = {
            case __StringValue ("CHEVRON_UP") => Right(PinnedDiscussionPattern.CHEVRON_UP)
case __StringValue ("DOT") => Right(PinnedDiscussionPattern.DOT)
case __StringValue ("DOT_FILL") => Right(PinnedDiscussionPattern.DOT_FILL)
case __StringValue ("HEART_FILL") => Right(PinnedDiscussionPattern.HEART_FILL)
case __StringValue ("PLUS") => Right(PinnedDiscussionPattern.PLUS)
case __StringValue ("ZAP") => Right(PinnedDiscussionPattern.ZAP)
            case other => Left(DecodingError(s"Can't build PinnedDiscussionPattern from input $other"))
          }
          implicit val encoder: ArgEncoder[PinnedDiscussionPattern] = {
            case PinnedDiscussionPattern.CHEVRON_UP => __EnumValue("CHEVRON_UP")
case PinnedDiscussionPattern.DOT => __EnumValue("DOT")
case PinnedDiscussionPattern.DOT_FILL => __EnumValue("DOT_FILL")
case PinnedDiscussionPattern.HEART_FILL => __EnumValue("HEART_FILL")
case PinnedDiscussionPattern.PLUS => __EnumValue("PLUS")
case PinnedDiscussionPattern.ZAP => __EnumValue("ZAP")
          }

          val values: scala.collection.immutable.Vector[PinnedDiscussionPattern] = scala.collection.immutable.Vector(CHEVRON_UP, DOT, DOT_FILL, HEART_FILL, PLUS, ZAP)
        }
       
sealed trait ProjectCardArchivedState extends scala.Product with scala.Serializable { def value: String }
        object ProjectCardArchivedState {
          case object ARCHIVED extends ProjectCardArchivedState { val value: String = "ARCHIVED" }
case object NOT_ARCHIVED extends ProjectCardArchivedState { val value: String = "NOT_ARCHIVED" }

          implicit val decoder: ScalarDecoder[ProjectCardArchivedState] = {
            case __StringValue ("ARCHIVED") => Right(ProjectCardArchivedState.ARCHIVED)
case __StringValue ("NOT_ARCHIVED") => Right(ProjectCardArchivedState.NOT_ARCHIVED)
            case other => Left(DecodingError(s"Can't build ProjectCardArchivedState from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectCardArchivedState] = {
            case ProjectCardArchivedState.ARCHIVED => __EnumValue("ARCHIVED")
case ProjectCardArchivedState.NOT_ARCHIVED => __EnumValue("NOT_ARCHIVED")
          }

          val values: scala.collection.immutable.Vector[ProjectCardArchivedState] = scala.collection.immutable.Vector(ARCHIVED, NOT_ARCHIVED)
        }
       
sealed trait ProjectCardState extends scala.Product with scala.Serializable { def value: String }
        object ProjectCardState {
          case object CONTENT_ONLY extends ProjectCardState { val value: String = "CONTENT_ONLY" }
case object NOTE_ONLY extends ProjectCardState { val value: String = "NOTE_ONLY" }
case object REDACTED extends ProjectCardState { val value: String = "REDACTED" }

          implicit val decoder: ScalarDecoder[ProjectCardState] = {
            case __StringValue ("CONTENT_ONLY") => Right(ProjectCardState.CONTENT_ONLY)
case __StringValue ("NOTE_ONLY") => Right(ProjectCardState.NOTE_ONLY)
case __StringValue ("REDACTED") => Right(ProjectCardState.REDACTED)
            case other => Left(DecodingError(s"Can't build ProjectCardState from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectCardState] = {
            case ProjectCardState.CONTENT_ONLY => __EnumValue("CONTENT_ONLY")
case ProjectCardState.NOTE_ONLY => __EnumValue("NOTE_ONLY")
case ProjectCardState.REDACTED => __EnumValue("REDACTED")
          }

          val values: scala.collection.immutable.Vector[ProjectCardState] = scala.collection.immutable.Vector(CONTENT_ONLY, NOTE_ONLY, REDACTED)
        }
       
sealed trait ProjectColumnPurpose extends scala.Product with scala.Serializable { def value: String }
        object ProjectColumnPurpose {
          case object DONE extends ProjectColumnPurpose { val value: String = "DONE" }
case object IN_PROGRESS extends ProjectColumnPurpose { val value: String = "IN_PROGRESS" }
case object TODO extends ProjectColumnPurpose { val value: String = "TODO" }

          implicit val decoder: ScalarDecoder[ProjectColumnPurpose] = {
            case __StringValue ("DONE") => Right(ProjectColumnPurpose.DONE)
case __StringValue ("IN_PROGRESS") => Right(ProjectColumnPurpose.IN_PROGRESS)
case __StringValue ("TODO") => Right(ProjectColumnPurpose.TODO)
            case other => Left(DecodingError(s"Can't build ProjectColumnPurpose from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectColumnPurpose] = {
            case ProjectColumnPurpose.DONE => __EnumValue("DONE")
case ProjectColumnPurpose.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case ProjectColumnPurpose.TODO => __EnumValue("TODO")
          }

          val values: scala.collection.immutable.Vector[ProjectColumnPurpose] = scala.collection.immutable.Vector(DONE, IN_PROGRESS, TODO)
        }
       
sealed trait ProjectOrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectOrderField {
          case object CREATED_AT extends ProjectOrderField { val value: String = "CREATED_AT" }
case object NAME extends ProjectOrderField { val value: String = "NAME" }
case object UPDATED_AT extends ProjectOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[ProjectOrderField] = {
            case __StringValue ("CREATED_AT") => Right(ProjectOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(ProjectOrderField.NAME)
case __StringValue ("UPDATED_AT") => Right(ProjectOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build ProjectOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectOrderField] = {
            case ProjectOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case ProjectOrderField.NAME => __EnumValue("NAME")
case ProjectOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[ProjectOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME, UPDATED_AT)
        }
       
sealed trait ProjectState extends scala.Product with scala.Serializable { def value: String }
        object ProjectState {
          case object CLOSED extends ProjectState { val value: String = "CLOSED" }
case object OPEN extends ProjectState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[ProjectState] = {
            case __StringValue ("CLOSED") => Right(ProjectState.CLOSED)
case __StringValue ("OPEN") => Right(ProjectState.OPEN)
            case other => Left(DecodingError(s"Can't build ProjectState from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectState] = {
            case ProjectState.CLOSED => __EnumValue("CLOSED")
case ProjectState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[ProjectState] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait ProjectTemplate extends scala.Product with scala.Serializable { def value: String }
        object ProjectTemplate {
          case object AUTOMATED_KANBAN_V2 extends ProjectTemplate { val value: String = "AUTOMATED_KANBAN_V2" }
case object AUTOMATED_REVIEWS_KANBAN extends ProjectTemplate { val value: String = "AUTOMATED_REVIEWS_KANBAN" }
case object BASIC_KANBAN extends ProjectTemplate { val value: String = "BASIC_KANBAN" }
case object BUG_TRIAGE extends ProjectTemplate { val value: String = "BUG_TRIAGE" }

          implicit val decoder: ScalarDecoder[ProjectTemplate] = {
            case __StringValue ("AUTOMATED_KANBAN_V2") => Right(ProjectTemplate.AUTOMATED_KANBAN_V2)
case __StringValue ("AUTOMATED_REVIEWS_KANBAN") => Right(ProjectTemplate.AUTOMATED_REVIEWS_KANBAN)
case __StringValue ("BASIC_KANBAN") => Right(ProjectTemplate.BASIC_KANBAN)
case __StringValue ("BUG_TRIAGE") => Right(ProjectTemplate.BUG_TRIAGE)
            case other => Left(DecodingError(s"Can't build ProjectTemplate from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectTemplate] = {
            case ProjectTemplate.AUTOMATED_KANBAN_V2 => __EnumValue("AUTOMATED_KANBAN_V2")
case ProjectTemplate.AUTOMATED_REVIEWS_KANBAN => __EnumValue("AUTOMATED_REVIEWS_KANBAN")
case ProjectTemplate.BASIC_KANBAN => __EnumValue("BASIC_KANBAN")
case ProjectTemplate.BUG_TRIAGE => __EnumValue("BUG_TRIAGE")
          }

          val values: scala.collection.immutable.Vector[ProjectTemplate] = scala.collection.immutable.Vector(AUTOMATED_KANBAN_V2, AUTOMATED_REVIEWS_KANBAN, BASIC_KANBAN, BUG_TRIAGE)
        }
       
sealed trait ProjectV2CustomFieldType extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2CustomFieldType {
          case object DATE extends ProjectV2CustomFieldType { val value: String = "DATE" }
case object NUMBER extends ProjectV2CustomFieldType { val value: String = "NUMBER" }
case object SINGLE_SELECT extends ProjectV2CustomFieldType { val value: String = "SINGLE_SELECT" }
case object TEXT extends ProjectV2CustomFieldType { val value: String = "TEXT" }

          implicit val decoder: ScalarDecoder[ProjectV2CustomFieldType] = {
            case __StringValue ("DATE") => Right(ProjectV2CustomFieldType.DATE)
case __StringValue ("NUMBER") => Right(ProjectV2CustomFieldType.NUMBER)
case __StringValue ("SINGLE_SELECT") => Right(ProjectV2CustomFieldType.SINGLE_SELECT)
case __StringValue ("TEXT") => Right(ProjectV2CustomFieldType.TEXT)
            case other => Left(DecodingError(s"Can't build ProjectV2CustomFieldType from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2CustomFieldType] = {
            case ProjectV2CustomFieldType.DATE => __EnumValue("DATE")
case ProjectV2CustomFieldType.NUMBER => __EnumValue("NUMBER")
case ProjectV2CustomFieldType.SINGLE_SELECT => __EnumValue("SINGLE_SELECT")
case ProjectV2CustomFieldType.TEXT => __EnumValue("TEXT")
          }

          val values: scala.collection.immutable.Vector[ProjectV2CustomFieldType] = scala.collection.immutable.Vector(DATE, NUMBER, SINGLE_SELECT, TEXT)
        }
       
sealed trait ProjectV2FieldOrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2FieldOrderField {
          case object CREATED_AT extends ProjectV2FieldOrderField { val value: String = "CREATED_AT" }
case object NAME extends ProjectV2FieldOrderField { val value: String = "NAME" }
case object POSITION extends ProjectV2FieldOrderField { val value: String = "POSITION" }

          implicit val decoder: ScalarDecoder[ProjectV2FieldOrderField] = {
            case __StringValue ("CREATED_AT") => Right(ProjectV2FieldOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(ProjectV2FieldOrderField.NAME)
case __StringValue ("POSITION") => Right(ProjectV2FieldOrderField.POSITION)
            case other => Left(DecodingError(s"Can't build ProjectV2FieldOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2FieldOrderField] = {
            case ProjectV2FieldOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case ProjectV2FieldOrderField.NAME => __EnumValue("NAME")
case ProjectV2FieldOrderField.POSITION => __EnumValue("POSITION")
          }

          val values: scala.collection.immutable.Vector[ProjectV2FieldOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME, POSITION)
        }
       
sealed trait ProjectV2FieldType extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2FieldType {
          case object ASSIGNEES extends ProjectV2FieldType { val value: String = "ASSIGNEES" }
case object DATE extends ProjectV2FieldType { val value: String = "DATE" }
case object ITERATION extends ProjectV2FieldType { val value: String = "ITERATION" }
case object LABELS extends ProjectV2FieldType { val value: String = "LABELS" }
case object LINKED_PULL_REQUESTS extends ProjectV2FieldType { val value: String = "LINKED_PULL_REQUESTS" }
case object MILESTONE extends ProjectV2FieldType { val value: String = "MILESTONE" }
case object NUMBER extends ProjectV2FieldType { val value: String = "NUMBER" }
case object REPOSITORY extends ProjectV2FieldType { val value: String = "REPOSITORY" }
case object REVIEWERS extends ProjectV2FieldType { val value: String = "REVIEWERS" }
case object SINGLE_SELECT extends ProjectV2FieldType { val value: String = "SINGLE_SELECT" }
case object TEXT extends ProjectV2FieldType { val value: String = "TEXT" }
case object TITLE extends ProjectV2FieldType { val value: String = "TITLE" }
case object TRACKED_BY extends ProjectV2FieldType { val value: String = "TRACKED_BY" }
case object TRACKS extends ProjectV2FieldType { val value: String = "TRACKS" }

          implicit val decoder: ScalarDecoder[ProjectV2FieldType] = {
            case __StringValue ("ASSIGNEES") => Right(ProjectV2FieldType.ASSIGNEES)
case __StringValue ("DATE") => Right(ProjectV2FieldType.DATE)
case __StringValue ("ITERATION") => Right(ProjectV2FieldType.ITERATION)
case __StringValue ("LABELS") => Right(ProjectV2FieldType.LABELS)
case __StringValue ("LINKED_PULL_REQUESTS") => Right(ProjectV2FieldType.LINKED_PULL_REQUESTS)
case __StringValue ("MILESTONE") => Right(ProjectV2FieldType.MILESTONE)
case __StringValue ("NUMBER") => Right(ProjectV2FieldType.NUMBER)
case __StringValue ("REPOSITORY") => Right(ProjectV2FieldType.REPOSITORY)
case __StringValue ("REVIEWERS") => Right(ProjectV2FieldType.REVIEWERS)
case __StringValue ("SINGLE_SELECT") => Right(ProjectV2FieldType.SINGLE_SELECT)
case __StringValue ("TEXT") => Right(ProjectV2FieldType.TEXT)
case __StringValue ("TITLE") => Right(ProjectV2FieldType.TITLE)
case __StringValue ("TRACKED_BY") => Right(ProjectV2FieldType.TRACKED_BY)
case __StringValue ("TRACKS") => Right(ProjectV2FieldType.TRACKS)
            case other => Left(DecodingError(s"Can't build ProjectV2FieldType from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2FieldType] = {
            case ProjectV2FieldType.ASSIGNEES => __EnumValue("ASSIGNEES")
case ProjectV2FieldType.DATE => __EnumValue("DATE")
case ProjectV2FieldType.ITERATION => __EnumValue("ITERATION")
case ProjectV2FieldType.LABELS => __EnumValue("LABELS")
case ProjectV2FieldType.LINKED_PULL_REQUESTS => __EnumValue("LINKED_PULL_REQUESTS")
case ProjectV2FieldType.MILESTONE => __EnumValue("MILESTONE")
case ProjectV2FieldType.NUMBER => __EnumValue("NUMBER")
case ProjectV2FieldType.REPOSITORY => __EnumValue("REPOSITORY")
case ProjectV2FieldType.REVIEWERS => __EnumValue("REVIEWERS")
case ProjectV2FieldType.SINGLE_SELECT => __EnumValue("SINGLE_SELECT")
case ProjectV2FieldType.TEXT => __EnumValue("TEXT")
case ProjectV2FieldType.TITLE => __EnumValue("TITLE")
case ProjectV2FieldType.TRACKED_BY => __EnumValue("TRACKED_BY")
case ProjectV2FieldType.TRACKS => __EnumValue("TRACKS")
          }

          val values: scala.collection.immutable.Vector[ProjectV2FieldType] = scala.collection.immutable.Vector(ASSIGNEES, DATE, ITERATION, LABELS, LINKED_PULL_REQUESTS, MILESTONE, NUMBER, REPOSITORY, REVIEWERS, SINGLE_SELECT, TEXT, TITLE, TRACKED_BY, TRACKS)
        }
       
sealed trait ProjectV2ItemFieldValueOrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2ItemFieldValueOrderField {
          case object POSITION extends ProjectV2ItemFieldValueOrderField { val value: String = "POSITION" }

          implicit val decoder: ScalarDecoder[ProjectV2ItemFieldValueOrderField] = {
            case __StringValue ("POSITION") => Right(ProjectV2ItemFieldValueOrderField.POSITION)
            case other => Left(DecodingError(s"Can't build ProjectV2ItemFieldValueOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2ItemFieldValueOrderField] = {
            case ProjectV2ItemFieldValueOrderField.POSITION => __EnumValue("POSITION")
          }

          val values: scala.collection.immutable.Vector[ProjectV2ItemFieldValueOrderField] = scala.collection.immutable.Vector(POSITION)
        }
       
sealed trait ProjectV2ItemOrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2ItemOrderField {
          case object POSITION extends ProjectV2ItemOrderField { val value: String = "POSITION" }

          implicit val decoder: ScalarDecoder[ProjectV2ItemOrderField] = {
            case __StringValue ("POSITION") => Right(ProjectV2ItemOrderField.POSITION)
            case other => Left(DecodingError(s"Can't build ProjectV2ItemOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2ItemOrderField] = {
            case ProjectV2ItemOrderField.POSITION => __EnumValue("POSITION")
          }

          val values: scala.collection.immutable.Vector[ProjectV2ItemOrderField] = scala.collection.immutable.Vector(POSITION)
        }
       
sealed trait ProjectV2ItemType extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2ItemType {
          case object DRAFT_ISSUE extends ProjectV2ItemType { val value: String = "DRAFT_ISSUE" }
case object ISSUE extends ProjectV2ItemType { val value: String = "ISSUE" }
case object PULL_REQUEST extends ProjectV2ItemType { val value: String = "PULL_REQUEST" }
case object REDACTED extends ProjectV2ItemType { val value: String = "REDACTED" }

          implicit val decoder: ScalarDecoder[ProjectV2ItemType] = {
            case __StringValue ("DRAFT_ISSUE") => Right(ProjectV2ItemType.DRAFT_ISSUE)
case __StringValue ("ISSUE") => Right(ProjectV2ItemType.ISSUE)
case __StringValue ("PULL_REQUEST") => Right(ProjectV2ItemType.PULL_REQUEST)
case __StringValue ("REDACTED") => Right(ProjectV2ItemType.REDACTED)
            case other => Left(DecodingError(s"Can't build ProjectV2ItemType from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2ItemType] = {
            case ProjectV2ItemType.DRAFT_ISSUE => __EnumValue("DRAFT_ISSUE")
case ProjectV2ItemType.ISSUE => __EnumValue("ISSUE")
case ProjectV2ItemType.PULL_REQUEST => __EnumValue("PULL_REQUEST")
case ProjectV2ItemType.REDACTED => __EnumValue("REDACTED")
          }

          val values: scala.collection.immutable.Vector[ProjectV2ItemType] = scala.collection.immutable.Vector(DRAFT_ISSUE, ISSUE, PULL_REQUEST, REDACTED)
        }
       
sealed trait ProjectV2OrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2OrderField {
          case object CREATED_AT extends ProjectV2OrderField { val value: String = "CREATED_AT" }
case object NUMBER extends ProjectV2OrderField { val value: String = "NUMBER" }
case object TITLE extends ProjectV2OrderField { val value: String = "TITLE" }
case object UPDATED_AT extends ProjectV2OrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[ProjectV2OrderField] = {
            case __StringValue ("CREATED_AT") => Right(ProjectV2OrderField.CREATED_AT)
case __StringValue ("NUMBER") => Right(ProjectV2OrderField.NUMBER)
case __StringValue ("TITLE") => Right(ProjectV2OrderField.TITLE)
case __StringValue ("UPDATED_AT") => Right(ProjectV2OrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build ProjectV2OrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2OrderField] = {
            case ProjectV2OrderField.CREATED_AT => __EnumValue("CREATED_AT")
case ProjectV2OrderField.NUMBER => __EnumValue("NUMBER")
case ProjectV2OrderField.TITLE => __EnumValue("TITLE")
case ProjectV2OrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[ProjectV2OrderField] = scala.collection.immutable.Vector(CREATED_AT, NUMBER, TITLE, UPDATED_AT)
        }
       
sealed trait ProjectV2SingleSelectFieldOptionColor extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2SingleSelectFieldOptionColor {
          case object BLUE extends ProjectV2SingleSelectFieldOptionColor { val value: String = "BLUE" }
case object GRAY extends ProjectV2SingleSelectFieldOptionColor { val value: String = "GRAY" }
case object GREEN extends ProjectV2SingleSelectFieldOptionColor { val value: String = "GREEN" }
case object ORANGE extends ProjectV2SingleSelectFieldOptionColor { val value: String = "ORANGE" }
case object PINK extends ProjectV2SingleSelectFieldOptionColor { val value: String = "PINK" }
case object PURPLE extends ProjectV2SingleSelectFieldOptionColor { val value: String = "PURPLE" }
case object RED extends ProjectV2SingleSelectFieldOptionColor { val value: String = "RED" }
case object YELLOW extends ProjectV2SingleSelectFieldOptionColor { val value: String = "YELLOW" }

          implicit val decoder: ScalarDecoder[ProjectV2SingleSelectFieldOptionColor] = {
            case __StringValue ("BLUE") => Right(ProjectV2SingleSelectFieldOptionColor.BLUE)
case __StringValue ("GRAY") => Right(ProjectV2SingleSelectFieldOptionColor.GRAY)
case __StringValue ("GREEN") => Right(ProjectV2SingleSelectFieldOptionColor.GREEN)
case __StringValue ("ORANGE") => Right(ProjectV2SingleSelectFieldOptionColor.ORANGE)
case __StringValue ("PINK") => Right(ProjectV2SingleSelectFieldOptionColor.PINK)
case __StringValue ("PURPLE") => Right(ProjectV2SingleSelectFieldOptionColor.PURPLE)
case __StringValue ("RED") => Right(ProjectV2SingleSelectFieldOptionColor.RED)
case __StringValue ("YELLOW") => Right(ProjectV2SingleSelectFieldOptionColor.YELLOW)
            case other => Left(DecodingError(s"Can't build ProjectV2SingleSelectFieldOptionColor from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2SingleSelectFieldOptionColor] = {
            case ProjectV2SingleSelectFieldOptionColor.BLUE => __EnumValue("BLUE")
case ProjectV2SingleSelectFieldOptionColor.GRAY => __EnumValue("GRAY")
case ProjectV2SingleSelectFieldOptionColor.GREEN => __EnumValue("GREEN")
case ProjectV2SingleSelectFieldOptionColor.ORANGE => __EnumValue("ORANGE")
case ProjectV2SingleSelectFieldOptionColor.PINK => __EnumValue("PINK")
case ProjectV2SingleSelectFieldOptionColor.PURPLE => __EnumValue("PURPLE")
case ProjectV2SingleSelectFieldOptionColor.RED => __EnumValue("RED")
case ProjectV2SingleSelectFieldOptionColor.YELLOW => __EnumValue("YELLOW")
          }

          val values: scala.collection.immutable.Vector[ProjectV2SingleSelectFieldOptionColor] = scala.collection.immutable.Vector(BLUE, GRAY, GREEN, ORANGE, PINK, PURPLE, RED, YELLOW)
        }
       
sealed trait ProjectV2State extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2State {
          case object CLOSED extends ProjectV2State { val value: String = "CLOSED" }
case object OPEN extends ProjectV2State { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[ProjectV2State] = {
            case __StringValue ("CLOSED") => Right(ProjectV2State.CLOSED)
case __StringValue ("OPEN") => Right(ProjectV2State.OPEN)
            case other => Left(DecodingError(s"Can't build ProjectV2State from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2State] = {
            case ProjectV2State.CLOSED => __EnumValue("CLOSED")
case ProjectV2State.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[ProjectV2State] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait ProjectV2ViewLayout extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2ViewLayout {
          case object BOARD_LAYOUT extends ProjectV2ViewLayout { val value: String = "BOARD_LAYOUT" }
case object ROADMAP_LAYOUT extends ProjectV2ViewLayout { val value: String = "ROADMAP_LAYOUT" }
case object TABLE_LAYOUT extends ProjectV2ViewLayout { val value: String = "TABLE_LAYOUT" }

          implicit val decoder: ScalarDecoder[ProjectV2ViewLayout] = {
            case __StringValue ("BOARD_LAYOUT") => Right(ProjectV2ViewLayout.BOARD_LAYOUT)
case __StringValue ("ROADMAP_LAYOUT") => Right(ProjectV2ViewLayout.ROADMAP_LAYOUT)
case __StringValue ("TABLE_LAYOUT") => Right(ProjectV2ViewLayout.TABLE_LAYOUT)
            case other => Left(DecodingError(s"Can't build ProjectV2ViewLayout from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2ViewLayout] = {
            case ProjectV2ViewLayout.BOARD_LAYOUT => __EnumValue("BOARD_LAYOUT")
case ProjectV2ViewLayout.ROADMAP_LAYOUT => __EnumValue("ROADMAP_LAYOUT")
case ProjectV2ViewLayout.TABLE_LAYOUT => __EnumValue("TABLE_LAYOUT")
          }

          val values: scala.collection.immutable.Vector[ProjectV2ViewLayout] = scala.collection.immutable.Vector(BOARD_LAYOUT, ROADMAP_LAYOUT, TABLE_LAYOUT)
        }
       
sealed trait ProjectV2ViewOrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2ViewOrderField {
          case object CREATED_AT extends ProjectV2ViewOrderField { val value: String = "CREATED_AT" }
case object NAME extends ProjectV2ViewOrderField { val value: String = "NAME" }
case object POSITION extends ProjectV2ViewOrderField { val value: String = "POSITION" }

          implicit val decoder: ScalarDecoder[ProjectV2ViewOrderField] = {
            case __StringValue ("CREATED_AT") => Right(ProjectV2ViewOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(ProjectV2ViewOrderField.NAME)
case __StringValue ("POSITION") => Right(ProjectV2ViewOrderField.POSITION)
            case other => Left(DecodingError(s"Can't build ProjectV2ViewOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2ViewOrderField] = {
            case ProjectV2ViewOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case ProjectV2ViewOrderField.NAME => __EnumValue("NAME")
case ProjectV2ViewOrderField.POSITION => __EnumValue("POSITION")
          }

          val values: scala.collection.immutable.Vector[ProjectV2ViewOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME, POSITION)
        }
       
sealed trait ProjectV2WorkflowsOrderField extends scala.Product with scala.Serializable { def value: String }
        object ProjectV2WorkflowsOrderField {
          case object CREATED_AT extends ProjectV2WorkflowsOrderField { val value: String = "CREATED_AT" }
case object NAME extends ProjectV2WorkflowsOrderField { val value: String = "NAME" }
case object NUMBER extends ProjectV2WorkflowsOrderField { val value: String = "NUMBER" }
case object UPDATED_AT extends ProjectV2WorkflowsOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[ProjectV2WorkflowsOrderField] = {
            case __StringValue ("CREATED_AT") => Right(ProjectV2WorkflowsOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(ProjectV2WorkflowsOrderField.NAME)
case __StringValue ("NUMBER") => Right(ProjectV2WorkflowsOrderField.NUMBER)
case __StringValue ("UPDATED_AT") => Right(ProjectV2WorkflowsOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build ProjectV2WorkflowsOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ProjectV2WorkflowsOrderField] = {
            case ProjectV2WorkflowsOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case ProjectV2WorkflowsOrderField.NAME => __EnumValue("NAME")
case ProjectV2WorkflowsOrderField.NUMBER => __EnumValue("NUMBER")
case ProjectV2WorkflowsOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[ProjectV2WorkflowsOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME, NUMBER, UPDATED_AT)
        }
       
sealed trait PullRequestMergeMethod extends scala.Product with scala.Serializable { def value: String }
        object PullRequestMergeMethod {
          case object MERGE extends PullRequestMergeMethod { val value: String = "MERGE" }
case object REBASE extends PullRequestMergeMethod { val value: String = "REBASE" }
case object SQUASH extends PullRequestMergeMethod { val value: String = "SQUASH" }

          implicit val decoder: ScalarDecoder[PullRequestMergeMethod] = {
            case __StringValue ("MERGE") => Right(PullRequestMergeMethod.MERGE)
case __StringValue ("REBASE") => Right(PullRequestMergeMethod.REBASE)
case __StringValue ("SQUASH") => Right(PullRequestMergeMethod.SQUASH)
            case other => Left(DecodingError(s"Can't build PullRequestMergeMethod from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestMergeMethod] = {
            case PullRequestMergeMethod.MERGE => __EnumValue("MERGE")
case PullRequestMergeMethod.REBASE => __EnumValue("REBASE")
case PullRequestMergeMethod.SQUASH => __EnumValue("SQUASH")
          }

          val values: scala.collection.immutable.Vector[PullRequestMergeMethod] = scala.collection.immutable.Vector(MERGE, REBASE, SQUASH)
        }
       
sealed trait PullRequestOrderField extends scala.Product with scala.Serializable { def value: String }
        object PullRequestOrderField {
          case object CREATED_AT extends PullRequestOrderField { val value: String = "CREATED_AT" }
case object UPDATED_AT extends PullRequestOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[PullRequestOrderField] = {
            case __StringValue ("CREATED_AT") => Right(PullRequestOrderField.CREATED_AT)
case __StringValue ("UPDATED_AT") => Right(PullRequestOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build PullRequestOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestOrderField] = {
            case PullRequestOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case PullRequestOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[PullRequestOrderField] = scala.collection.immutable.Vector(CREATED_AT, UPDATED_AT)
        }
       
sealed trait PullRequestReviewCommentState extends scala.Product with scala.Serializable { def value: String }
        object PullRequestReviewCommentState {
          case object PENDING extends PullRequestReviewCommentState { val value: String = "PENDING" }
case object SUBMITTED extends PullRequestReviewCommentState { val value: String = "SUBMITTED" }

          implicit val decoder: ScalarDecoder[PullRequestReviewCommentState] = {
            case __StringValue ("PENDING") => Right(PullRequestReviewCommentState.PENDING)
case __StringValue ("SUBMITTED") => Right(PullRequestReviewCommentState.SUBMITTED)
            case other => Left(DecodingError(s"Can't build PullRequestReviewCommentState from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestReviewCommentState] = {
            case PullRequestReviewCommentState.PENDING => __EnumValue("PENDING")
case PullRequestReviewCommentState.SUBMITTED => __EnumValue("SUBMITTED")
          }

          val values: scala.collection.immutable.Vector[PullRequestReviewCommentState] = scala.collection.immutable.Vector(PENDING, SUBMITTED)
        }
       
sealed trait PullRequestReviewDecision extends scala.Product with scala.Serializable { def value: String }
        object PullRequestReviewDecision {
          case object APPROVED extends PullRequestReviewDecision { val value: String = "APPROVED" }
case object CHANGES_REQUESTED extends PullRequestReviewDecision { val value: String = "CHANGES_REQUESTED" }
case object REVIEW_REQUIRED extends PullRequestReviewDecision { val value: String = "REVIEW_REQUIRED" }

          implicit val decoder: ScalarDecoder[PullRequestReviewDecision] = {
            case __StringValue ("APPROVED") => Right(PullRequestReviewDecision.APPROVED)
case __StringValue ("CHANGES_REQUESTED") => Right(PullRequestReviewDecision.CHANGES_REQUESTED)
case __StringValue ("REVIEW_REQUIRED") => Right(PullRequestReviewDecision.REVIEW_REQUIRED)
            case other => Left(DecodingError(s"Can't build PullRequestReviewDecision from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestReviewDecision] = {
            case PullRequestReviewDecision.APPROVED => __EnumValue("APPROVED")
case PullRequestReviewDecision.CHANGES_REQUESTED => __EnumValue("CHANGES_REQUESTED")
case PullRequestReviewDecision.REVIEW_REQUIRED => __EnumValue("REVIEW_REQUIRED")
          }

          val values: scala.collection.immutable.Vector[PullRequestReviewDecision] = scala.collection.immutable.Vector(APPROVED, CHANGES_REQUESTED, REVIEW_REQUIRED)
        }
       
sealed trait PullRequestReviewEvent extends scala.Product with scala.Serializable { def value: String }
        object PullRequestReviewEvent {
          case object APPROVE extends PullRequestReviewEvent { val value: String = "APPROVE" }
case object COMMENT extends PullRequestReviewEvent { val value: String = "COMMENT" }
case object DISMISS extends PullRequestReviewEvent { val value: String = "DISMISS" }
case object REQUEST_CHANGES extends PullRequestReviewEvent { val value: String = "REQUEST_CHANGES" }

          implicit val decoder: ScalarDecoder[PullRequestReviewEvent] = {
            case __StringValue ("APPROVE") => Right(PullRequestReviewEvent.APPROVE)
case __StringValue ("COMMENT") => Right(PullRequestReviewEvent.COMMENT)
case __StringValue ("DISMISS") => Right(PullRequestReviewEvent.DISMISS)
case __StringValue ("REQUEST_CHANGES") => Right(PullRequestReviewEvent.REQUEST_CHANGES)
            case other => Left(DecodingError(s"Can't build PullRequestReviewEvent from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestReviewEvent] = {
            case PullRequestReviewEvent.APPROVE => __EnumValue("APPROVE")
case PullRequestReviewEvent.COMMENT => __EnumValue("COMMENT")
case PullRequestReviewEvent.DISMISS => __EnumValue("DISMISS")
case PullRequestReviewEvent.REQUEST_CHANGES => __EnumValue("REQUEST_CHANGES")
          }

          val values: scala.collection.immutable.Vector[PullRequestReviewEvent] = scala.collection.immutable.Vector(APPROVE, COMMENT, DISMISS, REQUEST_CHANGES)
        }
       
sealed trait PullRequestReviewState extends scala.Product with scala.Serializable { def value: String }
        object PullRequestReviewState {
          case object APPROVED extends PullRequestReviewState { val value: String = "APPROVED" }
case object CHANGES_REQUESTED extends PullRequestReviewState { val value: String = "CHANGES_REQUESTED" }
case object COMMENTED extends PullRequestReviewState { val value: String = "COMMENTED" }
case object DISMISSED extends PullRequestReviewState { val value: String = "DISMISSED" }
case object PENDING extends PullRequestReviewState { val value: String = "PENDING" }

          implicit val decoder: ScalarDecoder[PullRequestReviewState] = {
            case __StringValue ("APPROVED") => Right(PullRequestReviewState.APPROVED)
case __StringValue ("CHANGES_REQUESTED") => Right(PullRequestReviewState.CHANGES_REQUESTED)
case __StringValue ("COMMENTED") => Right(PullRequestReviewState.COMMENTED)
case __StringValue ("DISMISSED") => Right(PullRequestReviewState.DISMISSED)
case __StringValue ("PENDING") => Right(PullRequestReviewState.PENDING)
            case other => Left(DecodingError(s"Can't build PullRequestReviewState from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestReviewState] = {
            case PullRequestReviewState.APPROVED => __EnumValue("APPROVED")
case PullRequestReviewState.CHANGES_REQUESTED => __EnumValue("CHANGES_REQUESTED")
case PullRequestReviewState.COMMENTED => __EnumValue("COMMENTED")
case PullRequestReviewState.DISMISSED => __EnumValue("DISMISSED")
case PullRequestReviewState.PENDING => __EnumValue("PENDING")
          }

          val values: scala.collection.immutable.Vector[PullRequestReviewState] = scala.collection.immutable.Vector(APPROVED, CHANGES_REQUESTED, COMMENTED, DISMISSED, PENDING)
        }
       
sealed trait PullRequestReviewThreadSubjectType extends scala.Product with scala.Serializable { def value: String }
        object PullRequestReviewThreadSubjectType {
          case object FILE extends PullRequestReviewThreadSubjectType { val value: String = "FILE" }
case object LINE extends PullRequestReviewThreadSubjectType { val value: String = "LINE" }

          implicit val decoder: ScalarDecoder[PullRequestReviewThreadSubjectType] = {
            case __StringValue ("FILE") => Right(PullRequestReviewThreadSubjectType.FILE)
case __StringValue ("LINE") => Right(PullRequestReviewThreadSubjectType.LINE)
            case other => Left(DecodingError(s"Can't build PullRequestReviewThreadSubjectType from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestReviewThreadSubjectType] = {
            case PullRequestReviewThreadSubjectType.FILE => __EnumValue("FILE")
case PullRequestReviewThreadSubjectType.LINE => __EnumValue("LINE")
          }

          val values: scala.collection.immutable.Vector[PullRequestReviewThreadSubjectType] = scala.collection.immutable.Vector(FILE, LINE)
        }
       
sealed trait PullRequestState extends scala.Product with scala.Serializable { def value: String }
        object PullRequestState {
          case object CLOSED extends PullRequestState { val value: String = "CLOSED" }
case object MERGED extends PullRequestState { val value: String = "MERGED" }
case object OPEN extends PullRequestState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[PullRequestState] = {
            case __StringValue ("CLOSED") => Right(PullRequestState.CLOSED)
case __StringValue ("MERGED") => Right(PullRequestState.MERGED)
case __StringValue ("OPEN") => Right(PullRequestState.OPEN)
            case other => Left(DecodingError(s"Can't build PullRequestState from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestState] = {
            case PullRequestState.CLOSED => __EnumValue("CLOSED")
case PullRequestState.MERGED => __EnumValue("MERGED")
case PullRequestState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[PullRequestState] = scala.collection.immutable.Vector(CLOSED, MERGED, OPEN)
        }
       
sealed trait PullRequestTimelineItemsItemType extends scala.Product with scala.Serializable { def value: String }
        object PullRequestTimelineItemsItemType {
          case object ADDED_TO_MERGE_QUEUE_EVENT extends PullRequestTimelineItemsItemType { val value: String = "ADDED_TO_MERGE_QUEUE_EVENT" }
case object ADDED_TO_PROJECT_EVENT extends PullRequestTimelineItemsItemType { val value: String = "ADDED_TO_PROJECT_EVENT" }
case object ASSIGNED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "ASSIGNED_EVENT" }
case object AUTOMATIC_BASE_CHANGE_FAILED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "AUTOMATIC_BASE_CHANGE_FAILED_EVENT" }
case object AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT" }
case object AUTO_MERGE_DISABLED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "AUTO_MERGE_DISABLED_EVENT" }
case object AUTO_MERGE_ENABLED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "AUTO_MERGE_ENABLED_EVENT" }
case object AUTO_REBASE_ENABLED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "AUTO_REBASE_ENABLED_EVENT" }
case object AUTO_SQUASH_ENABLED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "AUTO_SQUASH_ENABLED_EVENT" }
case object BASE_REF_CHANGED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "BASE_REF_CHANGED_EVENT" }
case object BASE_REF_DELETED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "BASE_REF_DELETED_EVENT" }
case object BASE_REF_FORCE_PUSHED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "BASE_REF_FORCE_PUSHED_EVENT" }
case object CLOSED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "CLOSED_EVENT" }
case object COMMENT_DELETED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "COMMENT_DELETED_EVENT" }
case object CONNECTED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "CONNECTED_EVENT" }
case object CONVERTED_NOTE_TO_ISSUE_EVENT extends PullRequestTimelineItemsItemType { val value: String = "CONVERTED_NOTE_TO_ISSUE_EVENT" }
case object CONVERTED_TO_DISCUSSION_EVENT extends PullRequestTimelineItemsItemType { val value: String = "CONVERTED_TO_DISCUSSION_EVENT" }
case object CONVERT_TO_DRAFT_EVENT extends PullRequestTimelineItemsItemType { val value: String = "CONVERT_TO_DRAFT_EVENT" }
case object CROSS_REFERENCED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "CROSS_REFERENCED_EVENT" }
case object DEMILESTONED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "DEMILESTONED_EVENT" }
case object DEPLOYED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "DEPLOYED_EVENT" }
case object DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT" }
case object DISCONNECTED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "DISCONNECTED_EVENT" }
case object HEAD_REF_DELETED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "HEAD_REF_DELETED_EVENT" }
case object HEAD_REF_FORCE_PUSHED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "HEAD_REF_FORCE_PUSHED_EVENT" }
case object HEAD_REF_RESTORED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "HEAD_REF_RESTORED_EVENT" }
case object ISSUE_COMMENT extends PullRequestTimelineItemsItemType { val value: String = "ISSUE_COMMENT" }
case object LABELED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "LABELED_EVENT" }
case object LOCKED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "LOCKED_EVENT" }
case object MARKED_AS_DUPLICATE_EVENT extends PullRequestTimelineItemsItemType { val value: String = "MARKED_AS_DUPLICATE_EVENT" }
case object MENTIONED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "MENTIONED_EVENT" }
case object MERGED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "MERGED_EVENT" }
case object MILESTONED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "MILESTONED_EVENT" }
case object MOVED_COLUMNS_IN_PROJECT_EVENT extends PullRequestTimelineItemsItemType { val value: String = "MOVED_COLUMNS_IN_PROJECT_EVENT" }
case object PINNED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "PINNED_EVENT" }
case object PULL_REQUEST_COMMIT extends PullRequestTimelineItemsItemType { val value: String = "PULL_REQUEST_COMMIT" }
case object PULL_REQUEST_COMMIT_COMMENT_THREAD extends PullRequestTimelineItemsItemType { val value: String = "PULL_REQUEST_COMMIT_COMMENT_THREAD" }
case object PULL_REQUEST_REVIEW extends PullRequestTimelineItemsItemType { val value: String = "PULL_REQUEST_REVIEW" }
case object PULL_REQUEST_REVIEW_THREAD extends PullRequestTimelineItemsItemType { val value: String = "PULL_REQUEST_REVIEW_THREAD" }
case object PULL_REQUEST_REVISION_MARKER extends PullRequestTimelineItemsItemType { val value: String = "PULL_REQUEST_REVISION_MARKER" }
case object READY_FOR_REVIEW_EVENT extends PullRequestTimelineItemsItemType { val value: String = "READY_FOR_REVIEW_EVENT" }
case object REFERENCED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REFERENCED_EVENT" }
case object REMOVED_FROM_MERGE_QUEUE_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REMOVED_FROM_MERGE_QUEUE_EVENT" }
case object REMOVED_FROM_PROJECT_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REMOVED_FROM_PROJECT_EVENT" }
case object RENAMED_TITLE_EVENT extends PullRequestTimelineItemsItemType { val value: String = "RENAMED_TITLE_EVENT" }
case object REOPENED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REOPENED_EVENT" }
case object REVIEW_DISMISSED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REVIEW_DISMISSED_EVENT" }
case object REVIEW_REQUESTED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REVIEW_REQUESTED_EVENT" }
case object REVIEW_REQUEST_REMOVED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "REVIEW_REQUEST_REMOVED_EVENT" }
case object SUBSCRIBED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "SUBSCRIBED_EVENT" }
case object TRANSFERRED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "TRANSFERRED_EVENT" }
case object UNASSIGNED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "UNASSIGNED_EVENT" }
case object UNLABELED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "UNLABELED_EVENT" }
case object UNLOCKED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "UNLOCKED_EVENT" }
case object UNMARKED_AS_DUPLICATE_EVENT extends PullRequestTimelineItemsItemType { val value: String = "UNMARKED_AS_DUPLICATE_EVENT" }
case object UNPINNED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "UNPINNED_EVENT" }
case object UNSUBSCRIBED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "UNSUBSCRIBED_EVENT" }
case object USER_BLOCKED_EVENT extends PullRequestTimelineItemsItemType { val value: String = "USER_BLOCKED_EVENT" }

          implicit val decoder: ScalarDecoder[PullRequestTimelineItemsItemType] = {
            case __StringValue ("ADDED_TO_MERGE_QUEUE_EVENT") => Right(PullRequestTimelineItemsItemType.ADDED_TO_MERGE_QUEUE_EVENT)
case __StringValue ("ADDED_TO_PROJECT_EVENT") => Right(PullRequestTimelineItemsItemType.ADDED_TO_PROJECT_EVENT)
case __StringValue ("ASSIGNED_EVENT") => Right(PullRequestTimelineItemsItemType.ASSIGNED_EVENT)
case __StringValue ("AUTOMATIC_BASE_CHANGE_FAILED_EVENT") => Right(PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_FAILED_EVENT)
case __StringValue ("AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT") => Right(PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT)
case __StringValue ("AUTO_MERGE_DISABLED_EVENT") => Right(PullRequestTimelineItemsItemType.AUTO_MERGE_DISABLED_EVENT)
case __StringValue ("AUTO_MERGE_ENABLED_EVENT") => Right(PullRequestTimelineItemsItemType.AUTO_MERGE_ENABLED_EVENT)
case __StringValue ("AUTO_REBASE_ENABLED_EVENT") => Right(PullRequestTimelineItemsItemType.AUTO_REBASE_ENABLED_EVENT)
case __StringValue ("AUTO_SQUASH_ENABLED_EVENT") => Right(PullRequestTimelineItemsItemType.AUTO_SQUASH_ENABLED_EVENT)
case __StringValue ("BASE_REF_CHANGED_EVENT") => Right(PullRequestTimelineItemsItemType.BASE_REF_CHANGED_EVENT)
case __StringValue ("BASE_REF_DELETED_EVENT") => Right(PullRequestTimelineItemsItemType.BASE_REF_DELETED_EVENT)
case __StringValue ("BASE_REF_FORCE_PUSHED_EVENT") => Right(PullRequestTimelineItemsItemType.BASE_REF_FORCE_PUSHED_EVENT)
case __StringValue ("CLOSED_EVENT") => Right(PullRequestTimelineItemsItemType.CLOSED_EVENT)
case __StringValue ("COMMENT_DELETED_EVENT") => Right(PullRequestTimelineItemsItemType.COMMENT_DELETED_EVENT)
case __StringValue ("CONNECTED_EVENT") => Right(PullRequestTimelineItemsItemType.CONNECTED_EVENT)
case __StringValue ("CONVERTED_NOTE_TO_ISSUE_EVENT") => Right(PullRequestTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT)
case __StringValue ("CONVERTED_TO_DISCUSSION_EVENT") => Right(PullRequestTimelineItemsItemType.CONVERTED_TO_DISCUSSION_EVENT)
case __StringValue ("CONVERT_TO_DRAFT_EVENT") => Right(PullRequestTimelineItemsItemType.CONVERT_TO_DRAFT_EVENT)
case __StringValue ("CROSS_REFERENCED_EVENT") => Right(PullRequestTimelineItemsItemType.CROSS_REFERENCED_EVENT)
case __StringValue ("DEMILESTONED_EVENT") => Right(PullRequestTimelineItemsItemType.DEMILESTONED_EVENT)
case __StringValue ("DEPLOYED_EVENT") => Right(PullRequestTimelineItemsItemType.DEPLOYED_EVENT)
case __StringValue ("DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT") => Right(PullRequestTimelineItemsItemType.DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT)
case __StringValue ("DISCONNECTED_EVENT") => Right(PullRequestTimelineItemsItemType.DISCONNECTED_EVENT)
case __StringValue ("HEAD_REF_DELETED_EVENT") => Right(PullRequestTimelineItemsItemType.HEAD_REF_DELETED_EVENT)
case __StringValue ("HEAD_REF_FORCE_PUSHED_EVENT") => Right(PullRequestTimelineItemsItemType.HEAD_REF_FORCE_PUSHED_EVENT)
case __StringValue ("HEAD_REF_RESTORED_EVENT") => Right(PullRequestTimelineItemsItemType.HEAD_REF_RESTORED_EVENT)
case __StringValue ("ISSUE_COMMENT") => Right(PullRequestTimelineItemsItemType.ISSUE_COMMENT)
case __StringValue ("LABELED_EVENT") => Right(PullRequestTimelineItemsItemType.LABELED_EVENT)
case __StringValue ("LOCKED_EVENT") => Right(PullRequestTimelineItemsItemType.LOCKED_EVENT)
case __StringValue ("MARKED_AS_DUPLICATE_EVENT") => Right(PullRequestTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT)
case __StringValue ("MENTIONED_EVENT") => Right(PullRequestTimelineItemsItemType.MENTIONED_EVENT)
case __StringValue ("MERGED_EVENT") => Right(PullRequestTimelineItemsItemType.MERGED_EVENT)
case __StringValue ("MILESTONED_EVENT") => Right(PullRequestTimelineItemsItemType.MILESTONED_EVENT)
case __StringValue ("MOVED_COLUMNS_IN_PROJECT_EVENT") => Right(PullRequestTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT)
case __StringValue ("PINNED_EVENT") => Right(PullRequestTimelineItemsItemType.PINNED_EVENT)
case __StringValue ("PULL_REQUEST_COMMIT") => Right(PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT)
case __StringValue ("PULL_REQUEST_COMMIT_COMMENT_THREAD") => Right(PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT_COMMENT_THREAD)
case __StringValue ("PULL_REQUEST_REVIEW") => Right(PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW)
case __StringValue ("PULL_REQUEST_REVIEW_THREAD") => Right(PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW_THREAD)
case __StringValue ("PULL_REQUEST_REVISION_MARKER") => Right(PullRequestTimelineItemsItemType.PULL_REQUEST_REVISION_MARKER)
case __StringValue ("READY_FOR_REVIEW_EVENT") => Right(PullRequestTimelineItemsItemType.READY_FOR_REVIEW_EVENT)
case __StringValue ("REFERENCED_EVENT") => Right(PullRequestTimelineItemsItemType.REFERENCED_EVENT)
case __StringValue ("REMOVED_FROM_MERGE_QUEUE_EVENT") => Right(PullRequestTimelineItemsItemType.REMOVED_FROM_MERGE_QUEUE_EVENT)
case __StringValue ("REMOVED_FROM_PROJECT_EVENT") => Right(PullRequestTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT)
case __StringValue ("RENAMED_TITLE_EVENT") => Right(PullRequestTimelineItemsItemType.RENAMED_TITLE_EVENT)
case __StringValue ("REOPENED_EVENT") => Right(PullRequestTimelineItemsItemType.REOPENED_EVENT)
case __StringValue ("REVIEW_DISMISSED_EVENT") => Right(PullRequestTimelineItemsItemType.REVIEW_DISMISSED_EVENT)
case __StringValue ("REVIEW_REQUESTED_EVENT") => Right(PullRequestTimelineItemsItemType.REVIEW_REQUESTED_EVENT)
case __StringValue ("REVIEW_REQUEST_REMOVED_EVENT") => Right(PullRequestTimelineItemsItemType.REVIEW_REQUEST_REMOVED_EVENT)
case __StringValue ("SUBSCRIBED_EVENT") => Right(PullRequestTimelineItemsItemType.SUBSCRIBED_EVENT)
case __StringValue ("TRANSFERRED_EVENT") => Right(PullRequestTimelineItemsItemType.TRANSFERRED_EVENT)
case __StringValue ("UNASSIGNED_EVENT") => Right(PullRequestTimelineItemsItemType.UNASSIGNED_EVENT)
case __StringValue ("UNLABELED_EVENT") => Right(PullRequestTimelineItemsItemType.UNLABELED_EVENT)
case __StringValue ("UNLOCKED_EVENT") => Right(PullRequestTimelineItemsItemType.UNLOCKED_EVENT)
case __StringValue ("UNMARKED_AS_DUPLICATE_EVENT") => Right(PullRequestTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT)
case __StringValue ("UNPINNED_EVENT") => Right(PullRequestTimelineItemsItemType.UNPINNED_EVENT)
case __StringValue ("UNSUBSCRIBED_EVENT") => Right(PullRequestTimelineItemsItemType.UNSUBSCRIBED_EVENT)
case __StringValue ("USER_BLOCKED_EVENT") => Right(PullRequestTimelineItemsItemType.USER_BLOCKED_EVENT)
            case other => Left(DecodingError(s"Can't build PullRequestTimelineItemsItemType from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestTimelineItemsItemType] = {
            case PullRequestTimelineItemsItemType.ADDED_TO_MERGE_QUEUE_EVENT => __EnumValue("ADDED_TO_MERGE_QUEUE_EVENT")
case PullRequestTimelineItemsItemType.ADDED_TO_PROJECT_EVENT => __EnumValue("ADDED_TO_PROJECT_EVENT")
case PullRequestTimelineItemsItemType.ASSIGNED_EVENT => __EnumValue("ASSIGNED_EVENT")
case PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_FAILED_EVENT => __EnumValue("AUTOMATIC_BASE_CHANGE_FAILED_EVENT")
case PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT => __EnumValue("AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT")
case PullRequestTimelineItemsItemType.AUTO_MERGE_DISABLED_EVENT => __EnumValue("AUTO_MERGE_DISABLED_EVENT")
case PullRequestTimelineItemsItemType.AUTO_MERGE_ENABLED_EVENT => __EnumValue("AUTO_MERGE_ENABLED_EVENT")
case PullRequestTimelineItemsItemType.AUTO_REBASE_ENABLED_EVENT => __EnumValue("AUTO_REBASE_ENABLED_EVENT")
case PullRequestTimelineItemsItemType.AUTO_SQUASH_ENABLED_EVENT => __EnumValue("AUTO_SQUASH_ENABLED_EVENT")
case PullRequestTimelineItemsItemType.BASE_REF_CHANGED_EVENT => __EnumValue("BASE_REF_CHANGED_EVENT")
case PullRequestTimelineItemsItemType.BASE_REF_DELETED_EVENT => __EnumValue("BASE_REF_DELETED_EVENT")
case PullRequestTimelineItemsItemType.BASE_REF_FORCE_PUSHED_EVENT => __EnumValue("BASE_REF_FORCE_PUSHED_EVENT")
case PullRequestTimelineItemsItemType.CLOSED_EVENT => __EnumValue("CLOSED_EVENT")
case PullRequestTimelineItemsItemType.COMMENT_DELETED_EVENT => __EnumValue("COMMENT_DELETED_EVENT")
case PullRequestTimelineItemsItemType.CONNECTED_EVENT => __EnumValue("CONNECTED_EVENT")
case PullRequestTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT => __EnumValue("CONVERTED_NOTE_TO_ISSUE_EVENT")
case PullRequestTimelineItemsItemType.CONVERTED_TO_DISCUSSION_EVENT => __EnumValue("CONVERTED_TO_DISCUSSION_EVENT")
case PullRequestTimelineItemsItemType.CONVERT_TO_DRAFT_EVENT => __EnumValue("CONVERT_TO_DRAFT_EVENT")
case PullRequestTimelineItemsItemType.CROSS_REFERENCED_EVENT => __EnumValue("CROSS_REFERENCED_EVENT")
case PullRequestTimelineItemsItemType.DEMILESTONED_EVENT => __EnumValue("DEMILESTONED_EVENT")
case PullRequestTimelineItemsItemType.DEPLOYED_EVENT => __EnumValue("DEPLOYED_EVENT")
case PullRequestTimelineItemsItemType.DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT => __EnumValue("DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT")
case PullRequestTimelineItemsItemType.DISCONNECTED_EVENT => __EnumValue("DISCONNECTED_EVENT")
case PullRequestTimelineItemsItemType.HEAD_REF_DELETED_EVENT => __EnumValue("HEAD_REF_DELETED_EVENT")
case PullRequestTimelineItemsItemType.HEAD_REF_FORCE_PUSHED_EVENT => __EnumValue("HEAD_REF_FORCE_PUSHED_EVENT")
case PullRequestTimelineItemsItemType.HEAD_REF_RESTORED_EVENT => __EnumValue("HEAD_REF_RESTORED_EVENT")
case PullRequestTimelineItemsItemType.ISSUE_COMMENT => __EnumValue("ISSUE_COMMENT")
case PullRequestTimelineItemsItemType.LABELED_EVENT => __EnumValue("LABELED_EVENT")
case PullRequestTimelineItemsItemType.LOCKED_EVENT => __EnumValue("LOCKED_EVENT")
case PullRequestTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT => __EnumValue("MARKED_AS_DUPLICATE_EVENT")
case PullRequestTimelineItemsItemType.MENTIONED_EVENT => __EnumValue("MENTIONED_EVENT")
case PullRequestTimelineItemsItemType.MERGED_EVENT => __EnumValue("MERGED_EVENT")
case PullRequestTimelineItemsItemType.MILESTONED_EVENT => __EnumValue("MILESTONED_EVENT")
case PullRequestTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT => __EnumValue("MOVED_COLUMNS_IN_PROJECT_EVENT")
case PullRequestTimelineItemsItemType.PINNED_EVENT => __EnumValue("PINNED_EVENT")
case PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT => __EnumValue("PULL_REQUEST_COMMIT")
case PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT_COMMENT_THREAD => __EnumValue("PULL_REQUEST_COMMIT_COMMENT_THREAD")
case PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW => __EnumValue("PULL_REQUEST_REVIEW")
case PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW_THREAD => __EnumValue("PULL_REQUEST_REVIEW_THREAD")
case PullRequestTimelineItemsItemType.PULL_REQUEST_REVISION_MARKER => __EnumValue("PULL_REQUEST_REVISION_MARKER")
case PullRequestTimelineItemsItemType.READY_FOR_REVIEW_EVENT => __EnumValue("READY_FOR_REVIEW_EVENT")
case PullRequestTimelineItemsItemType.REFERENCED_EVENT => __EnumValue("REFERENCED_EVENT")
case PullRequestTimelineItemsItemType.REMOVED_FROM_MERGE_QUEUE_EVENT => __EnumValue("REMOVED_FROM_MERGE_QUEUE_EVENT")
case PullRequestTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT => __EnumValue("REMOVED_FROM_PROJECT_EVENT")
case PullRequestTimelineItemsItemType.RENAMED_TITLE_EVENT => __EnumValue("RENAMED_TITLE_EVENT")
case PullRequestTimelineItemsItemType.REOPENED_EVENT => __EnumValue("REOPENED_EVENT")
case PullRequestTimelineItemsItemType.REVIEW_DISMISSED_EVENT => __EnumValue("REVIEW_DISMISSED_EVENT")
case PullRequestTimelineItemsItemType.REVIEW_REQUESTED_EVENT => __EnumValue("REVIEW_REQUESTED_EVENT")
case PullRequestTimelineItemsItemType.REVIEW_REQUEST_REMOVED_EVENT => __EnumValue("REVIEW_REQUEST_REMOVED_EVENT")
case PullRequestTimelineItemsItemType.SUBSCRIBED_EVENT => __EnumValue("SUBSCRIBED_EVENT")
case PullRequestTimelineItemsItemType.TRANSFERRED_EVENT => __EnumValue("TRANSFERRED_EVENT")
case PullRequestTimelineItemsItemType.UNASSIGNED_EVENT => __EnumValue("UNASSIGNED_EVENT")
case PullRequestTimelineItemsItemType.UNLABELED_EVENT => __EnumValue("UNLABELED_EVENT")
case PullRequestTimelineItemsItemType.UNLOCKED_EVENT => __EnumValue("UNLOCKED_EVENT")
case PullRequestTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT => __EnumValue("UNMARKED_AS_DUPLICATE_EVENT")
case PullRequestTimelineItemsItemType.UNPINNED_EVENT => __EnumValue("UNPINNED_EVENT")
case PullRequestTimelineItemsItemType.UNSUBSCRIBED_EVENT => __EnumValue("UNSUBSCRIBED_EVENT")
case PullRequestTimelineItemsItemType.USER_BLOCKED_EVENT => __EnumValue("USER_BLOCKED_EVENT")
          }

          val values: scala.collection.immutable.Vector[PullRequestTimelineItemsItemType] = scala.collection.immutable.Vector(ADDED_TO_MERGE_QUEUE_EVENT, ADDED_TO_PROJECT_EVENT, ASSIGNED_EVENT, AUTOMATIC_BASE_CHANGE_FAILED_EVENT, AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT, AUTO_MERGE_DISABLED_EVENT, AUTO_MERGE_ENABLED_EVENT, AUTO_REBASE_ENABLED_EVENT, AUTO_SQUASH_ENABLED_EVENT, BASE_REF_CHANGED_EVENT, BASE_REF_DELETED_EVENT, BASE_REF_FORCE_PUSHED_EVENT, CLOSED_EVENT, COMMENT_DELETED_EVENT, CONNECTED_EVENT, CONVERTED_NOTE_TO_ISSUE_EVENT, CONVERTED_TO_DISCUSSION_EVENT, CONVERT_TO_DRAFT_EVENT, CROSS_REFERENCED_EVENT, DEMILESTONED_EVENT, DEPLOYED_EVENT, DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT, DISCONNECTED_EVENT, HEAD_REF_DELETED_EVENT, HEAD_REF_FORCE_PUSHED_EVENT, HEAD_REF_RESTORED_EVENT, ISSUE_COMMENT, LABELED_EVENT, LOCKED_EVENT, MARKED_AS_DUPLICATE_EVENT, MENTIONED_EVENT, MERGED_EVENT, MILESTONED_EVENT, MOVED_COLUMNS_IN_PROJECT_EVENT, PINNED_EVENT, PULL_REQUEST_COMMIT, PULL_REQUEST_COMMIT_COMMENT_THREAD, PULL_REQUEST_REVIEW, PULL_REQUEST_REVIEW_THREAD, PULL_REQUEST_REVISION_MARKER, READY_FOR_REVIEW_EVENT, REFERENCED_EVENT, REMOVED_FROM_MERGE_QUEUE_EVENT, REMOVED_FROM_PROJECT_EVENT, RENAMED_TITLE_EVENT, REOPENED_EVENT, REVIEW_DISMISSED_EVENT, REVIEW_REQUESTED_EVENT, REVIEW_REQUEST_REMOVED_EVENT, SUBSCRIBED_EVENT, TRANSFERRED_EVENT, UNASSIGNED_EVENT, UNLABELED_EVENT, UNLOCKED_EVENT, UNMARKED_AS_DUPLICATE_EVENT, UNPINNED_EVENT, UNSUBSCRIBED_EVENT, USER_BLOCKED_EVENT)
        }
       
sealed trait PullRequestUpdateState extends scala.Product with scala.Serializable { def value: String }
        object PullRequestUpdateState {
          case object CLOSED extends PullRequestUpdateState { val value: String = "CLOSED" }
case object OPEN extends PullRequestUpdateState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[PullRequestUpdateState] = {
            case __StringValue ("CLOSED") => Right(PullRequestUpdateState.CLOSED)
case __StringValue ("OPEN") => Right(PullRequestUpdateState.OPEN)
            case other => Left(DecodingError(s"Can't build PullRequestUpdateState from input $other"))
          }
          implicit val encoder: ArgEncoder[PullRequestUpdateState] = {
            case PullRequestUpdateState.CLOSED => __EnumValue("CLOSED")
case PullRequestUpdateState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[PullRequestUpdateState] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait ReactionContent extends scala.Product with scala.Serializable { def value: String }
        object ReactionContent {
          case object CONFUSED extends ReactionContent { val value: String = "CONFUSED" }
case object EYES extends ReactionContent { val value: String = "EYES" }
case object HEART extends ReactionContent { val value: String = "HEART" }
case object HOORAY extends ReactionContent { val value: String = "HOORAY" }
case object LAUGH extends ReactionContent { val value: String = "LAUGH" }
case object ROCKET extends ReactionContent { val value: String = "ROCKET" }
case object THUMBS_DOWN extends ReactionContent { val value: String = "THUMBS_DOWN" }
case object THUMBS_UP extends ReactionContent { val value: String = "THUMBS_UP" }

          implicit val decoder: ScalarDecoder[ReactionContent] = {
            case __StringValue ("CONFUSED") => Right(ReactionContent.CONFUSED)
case __StringValue ("EYES") => Right(ReactionContent.EYES)
case __StringValue ("HEART") => Right(ReactionContent.HEART)
case __StringValue ("HOORAY") => Right(ReactionContent.HOORAY)
case __StringValue ("LAUGH") => Right(ReactionContent.LAUGH)
case __StringValue ("ROCKET") => Right(ReactionContent.ROCKET)
case __StringValue ("THUMBS_DOWN") => Right(ReactionContent.THUMBS_DOWN)
case __StringValue ("THUMBS_UP") => Right(ReactionContent.THUMBS_UP)
            case other => Left(DecodingError(s"Can't build ReactionContent from input $other"))
          }
          implicit val encoder: ArgEncoder[ReactionContent] = {
            case ReactionContent.CONFUSED => __EnumValue("CONFUSED")
case ReactionContent.EYES => __EnumValue("EYES")
case ReactionContent.HEART => __EnumValue("HEART")
case ReactionContent.HOORAY => __EnumValue("HOORAY")
case ReactionContent.LAUGH => __EnumValue("LAUGH")
case ReactionContent.ROCKET => __EnumValue("ROCKET")
case ReactionContent.THUMBS_DOWN => __EnumValue("THUMBS_DOWN")
case ReactionContent.THUMBS_UP => __EnumValue("THUMBS_UP")
          }

          val values: scala.collection.immutable.Vector[ReactionContent] = scala.collection.immutable.Vector(CONFUSED, EYES, HEART, HOORAY, LAUGH, ROCKET, THUMBS_DOWN, THUMBS_UP)
        }
       
sealed trait ReactionOrderField extends scala.Product with scala.Serializable { def value: String }
        object ReactionOrderField {
          case object CREATED_AT extends ReactionOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[ReactionOrderField] = {
            case __StringValue ("CREATED_AT") => Right(ReactionOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build ReactionOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ReactionOrderField] = {
            case ReactionOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[ReactionOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait RefOrderField extends scala.Product with scala.Serializable { def value: String }
        object RefOrderField {
          case object ALPHABETICAL extends RefOrderField { val value: String = "ALPHABETICAL" }
case object TAG_COMMIT_DATE extends RefOrderField { val value: String = "TAG_COMMIT_DATE" }

          implicit val decoder: ScalarDecoder[RefOrderField] = {
            case __StringValue ("ALPHABETICAL") => Right(RefOrderField.ALPHABETICAL)
case __StringValue ("TAG_COMMIT_DATE") => Right(RefOrderField.TAG_COMMIT_DATE)
            case other => Left(DecodingError(s"Can't build RefOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[RefOrderField] = {
            case RefOrderField.ALPHABETICAL => __EnumValue("ALPHABETICAL")
case RefOrderField.TAG_COMMIT_DATE => __EnumValue("TAG_COMMIT_DATE")
          }

          val values: scala.collection.immutable.Vector[RefOrderField] = scala.collection.immutable.Vector(ALPHABETICAL, TAG_COMMIT_DATE)
        }
       
sealed trait ReleaseOrderField extends scala.Product with scala.Serializable { def value: String }
        object ReleaseOrderField {
          case object CREATED_AT extends ReleaseOrderField { val value: String = "CREATED_AT" }
case object NAME extends ReleaseOrderField { val value: String = "NAME" }

          implicit val decoder: ScalarDecoder[ReleaseOrderField] = {
            case __StringValue ("CREATED_AT") => Right(ReleaseOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(ReleaseOrderField.NAME)
            case other => Left(DecodingError(s"Can't build ReleaseOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[ReleaseOrderField] = {
            case ReleaseOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case ReleaseOrderField.NAME => __EnumValue("NAME")
          }

          val values: scala.collection.immutable.Vector[ReleaseOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME)
        }
       
sealed trait RepoAccessAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepoAccessAuditEntryVisibility {
          case object INTERNAL extends RepoAccessAuditEntryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepoAccessAuditEntryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepoAccessAuditEntryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepoAccessAuditEntryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepoAccessAuditEntryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepoAccessAuditEntryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepoAccessAuditEntryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepoAccessAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoAccessAuditEntryVisibility] = {
            case RepoAccessAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepoAccessAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepoAccessAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepoAccessAuditEntryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait RepoAddMemberAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepoAddMemberAuditEntryVisibility {
          case object INTERNAL extends RepoAddMemberAuditEntryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepoAddMemberAuditEntryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepoAddMemberAuditEntryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepoAddMemberAuditEntryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepoAddMemberAuditEntryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepoAddMemberAuditEntryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepoAddMemberAuditEntryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepoAddMemberAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoAddMemberAuditEntryVisibility] = {
            case RepoAddMemberAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepoAddMemberAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepoAddMemberAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepoAddMemberAuditEntryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait RepoArchivedAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepoArchivedAuditEntryVisibility {
          case object INTERNAL extends RepoArchivedAuditEntryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepoArchivedAuditEntryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepoArchivedAuditEntryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepoArchivedAuditEntryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepoArchivedAuditEntryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepoArchivedAuditEntryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepoArchivedAuditEntryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepoArchivedAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoArchivedAuditEntryVisibility] = {
            case RepoArchivedAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepoArchivedAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepoArchivedAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepoArchivedAuditEntryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait RepoChangeMergeSettingAuditEntryMergeType extends scala.Product with scala.Serializable { def value: String }
        object RepoChangeMergeSettingAuditEntryMergeType {
          case object MERGE extends RepoChangeMergeSettingAuditEntryMergeType { val value: String = "MERGE" }
case object REBASE extends RepoChangeMergeSettingAuditEntryMergeType { val value: String = "REBASE" }
case object SQUASH extends RepoChangeMergeSettingAuditEntryMergeType { val value: String = "SQUASH" }

          implicit val decoder: ScalarDecoder[RepoChangeMergeSettingAuditEntryMergeType] = {
            case __StringValue ("MERGE") => Right(RepoChangeMergeSettingAuditEntryMergeType.MERGE)
case __StringValue ("REBASE") => Right(RepoChangeMergeSettingAuditEntryMergeType.REBASE)
case __StringValue ("SQUASH") => Right(RepoChangeMergeSettingAuditEntryMergeType.SQUASH)
            case other => Left(DecodingError(s"Can't build RepoChangeMergeSettingAuditEntryMergeType from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoChangeMergeSettingAuditEntryMergeType] = {
            case RepoChangeMergeSettingAuditEntryMergeType.MERGE => __EnumValue("MERGE")
case RepoChangeMergeSettingAuditEntryMergeType.REBASE => __EnumValue("REBASE")
case RepoChangeMergeSettingAuditEntryMergeType.SQUASH => __EnumValue("SQUASH")
          }

          val values: scala.collection.immutable.Vector[RepoChangeMergeSettingAuditEntryMergeType] = scala.collection.immutable.Vector(MERGE, REBASE, SQUASH)
        }
       
sealed trait RepoCreateAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepoCreateAuditEntryVisibility {
          case object INTERNAL extends RepoCreateAuditEntryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepoCreateAuditEntryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepoCreateAuditEntryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepoCreateAuditEntryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepoCreateAuditEntryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepoCreateAuditEntryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepoCreateAuditEntryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepoCreateAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoCreateAuditEntryVisibility] = {
            case RepoCreateAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepoCreateAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepoCreateAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepoCreateAuditEntryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait RepoDestroyAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepoDestroyAuditEntryVisibility {
          case object INTERNAL extends RepoDestroyAuditEntryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepoDestroyAuditEntryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepoDestroyAuditEntryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepoDestroyAuditEntryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepoDestroyAuditEntryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepoDestroyAuditEntryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepoDestroyAuditEntryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepoDestroyAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoDestroyAuditEntryVisibility] = {
            case RepoDestroyAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepoDestroyAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepoDestroyAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepoDestroyAuditEntryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait RepoRemoveMemberAuditEntryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepoRemoveMemberAuditEntryVisibility {
          case object INTERNAL extends RepoRemoveMemberAuditEntryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepoRemoveMemberAuditEntryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepoRemoveMemberAuditEntryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepoRemoveMemberAuditEntryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepoRemoveMemberAuditEntryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepoRemoveMemberAuditEntryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepoRemoveMemberAuditEntryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepoRemoveMemberAuditEntryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepoRemoveMemberAuditEntryVisibility] = {
            case RepoRemoveMemberAuditEntryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepoRemoveMemberAuditEntryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepoRemoveMemberAuditEntryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepoRemoveMemberAuditEntryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait ReportedContentClassifiers extends scala.Product with scala.Serializable { def value: String }
        object ReportedContentClassifiers {
          case object ABUSE extends ReportedContentClassifiers { val value: String = "ABUSE" }
case object DUPLICATE extends ReportedContentClassifiers { val value: String = "DUPLICATE" }
case object OFF_TOPIC extends ReportedContentClassifiers { val value: String = "OFF_TOPIC" }
case object OUTDATED extends ReportedContentClassifiers { val value: String = "OUTDATED" }
case object RESOLVED extends ReportedContentClassifiers { val value: String = "RESOLVED" }
case object SPAM extends ReportedContentClassifiers { val value: String = "SPAM" }

          implicit val decoder: ScalarDecoder[ReportedContentClassifiers] = {
            case __StringValue ("ABUSE") => Right(ReportedContentClassifiers.ABUSE)
case __StringValue ("DUPLICATE") => Right(ReportedContentClassifiers.DUPLICATE)
case __StringValue ("OFF_TOPIC") => Right(ReportedContentClassifiers.OFF_TOPIC)
case __StringValue ("OUTDATED") => Right(ReportedContentClassifiers.OUTDATED)
case __StringValue ("RESOLVED") => Right(ReportedContentClassifiers.RESOLVED)
case __StringValue ("SPAM") => Right(ReportedContentClassifiers.SPAM)
            case other => Left(DecodingError(s"Can't build ReportedContentClassifiers from input $other"))
          }
          implicit val encoder: ArgEncoder[ReportedContentClassifiers] = {
            case ReportedContentClassifiers.ABUSE => __EnumValue("ABUSE")
case ReportedContentClassifiers.DUPLICATE => __EnumValue("DUPLICATE")
case ReportedContentClassifiers.OFF_TOPIC => __EnumValue("OFF_TOPIC")
case ReportedContentClassifiers.OUTDATED => __EnumValue("OUTDATED")
case ReportedContentClassifiers.RESOLVED => __EnumValue("RESOLVED")
case ReportedContentClassifiers.SPAM => __EnumValue("SPAM")
          }

          val values: scala.collection.immutable.Vector[ReportedContentClassifiers] = scala.collection.immutable.Vector(ABUSE, DUPLICATE, OFF_TOPIC, OUTDATED, RESOLVED, SPAM)
        }
       
sealed trait RepositoryAffiliation extends scala.Product with scala.Serializable { def value: String }
        object RepositoryAffiliation {
          case object COLLABORATOR extends RepositoryAffiliation { val value: String = "COLLABORATOR" }
case object ORGANIZATION_MEMBER extends RepositoryAffiliation { val value: String = "ORGANIZATION_MEMBER" }
case object OWNER extends RepositoryAffiliation { val value: String = "OWNER" }

          implicit val decoder: ScalarDecoder[RepositoryAffiliation] = {
            case __StringValue ("COLLABORATOR") => Right(RepositoryAffiliation.COLLABORATOR)
case __StringValue ("ORGANIZATION_MEMBER") => Right(RepositoryAffiliation.ORGANIZATION_MEMBER)
case __StringValue ("OWNER") => Right(RepositoryAffiliation.OWNER)
            case other => Left(DecodingError(s"Can't build RepositoryAffiliation from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryAffiliation] = {
            case RepositoryAffiliation.COLLABORATOR => __EnumValue("COLLABORATOR")
case RepositoryAffiliation.ORGANIZATION_MEMBER => __EnumValue("ORGANIZATION_MEMBER")
case RepositoryAffiliation.OWNER => __EnumValue("OWNER")
          }

          val values: scala.collection.immutable.Vector[RepositoryAffiliation] = scala.collection.immutable.Vector(COLLABORATOR, ORGANIZATION_MEMBER, OWNER)
        }
       
sealed trait RepositoryContributionType extends scala.Product with scala.Serializable { def value: String }
        object RepositoryContributionType {
          case object COMMIT extends RepositoryContributionType { val value: String = "COMMIT" }
case object ISSUE extends RepositoryContributionType { val value: String = "ISSUE" }
case object PULL_REQUEST extends RepositoryContributionType { val value: String = "PULL_REQUEST" }
case object PULL_REQUEST_REVIEW extends RepositoryContributionType { val value: String = "PULL_REQUEST_REVIEW" }
case object REPOSITORY extends RepositoryContributionType { val value: String = "REPOSITORY" }

          implicit val decoder: ScalarDecoder[RepositoryContributionType] = {
            case __StringValue ("COMMIT") => Right(RepositoryContributionType.COMMIT)
case __StringValue ("ISSUE") => Right(RepositoryContributionType.ISSUE)
case __StringValue ("PULL_REQUEST") => Right(RepositoryContributionType.PULL_REQUEST)
case __StringValue ("PULL_REQUEST_REVIEW") => Right(RepositoryContributionType.PULL_REQUEST_REVIEW)
case __StringValue ("REPOSITORY") => Right(RepositoryContributionType.REPOSITORY)
            case other => Left(DecodingError(s"Can't build RepositoryContributionType from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryContributionType] = {
            case RepositoryContributionType.COMMIT => __EnumValue("COMMIT")
case RepositoryContributionType.ISSUE => __EnumValue("ISSUE")
case RepositoryContributionType.PULL_REQUEST => __EnumValue("PULL_REQUEST")
case RepositoryContributionType.PULL_REQUEST_REVIEW => __EnumValue("PULL_REQUEST_REVIEW")
case RepositoryContributionType.REPOSITORY => __EnumValue("REPOSITORY")
          }

          val values: scala.collection.immutable.Vector[RepositoryContributionType] = scala.collection.immutable.Vector(COMMIT, ISSUE, PULL_REQUEST, PULL_REQUEST_REVIEW, REPOSITORY)
        }
       
sealed trait RepositoryInteractionLimit extends scala.Product with scala.Serializable { def value: String }
        object RepositoryInteractionLimit {
          case object COLLABORATORS_ONLY extends RepositoryInteractionLimit { val value: String = "COLLABORATORS_ONLY" }
case object CONTRIBUTORS_ONLY extends RepositoryInteractionLimit { val value: String = "CONTRIBUTORS_ONLY" }
case object EXISTING_USERS extends RepositoryInteractionLimit { val value: String = "EXISTING_USERS" }
case object NO_LIMIT extends RepositoryInteractionLimit { val value: String = "NO_LIMIT" }

          implicit val decoder: ScalarDecoder[RepositoryInteractionLimit] = {
            case __StringValue ("COLLABORATORS_ONLY") => Right(RepositoryInteractionLimit.COLLABORATORS_ONLY)
case __StringValue ("CONTRIBUTORS_ONLY") => Right(RepositoryInteractionLimit.CONTRIBUTORS_ONLY)
case __StringValue ("EXISTING_USERS") => Right(RepositoryInteractionLimit.EXISTING_USERS)
case __StringValue ("NO_LIMIT") => Right(RepositoryInteractionLimit.NO_LIMIT)
            case other => Left(DecodingError(s"Can't build RepositoryInteractionLimit from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryInteractionLimit] = {
            case RepositoryInteractionLimit.COLLABORATORS_ONLY => __EnumValue("COLLABORATORS_ONLY")
case RepositoryInteractionLimit.CONTRIBUTORS_ONLY => __EnumValue("CONTRIBUTORS_ONLY")
case RepositoryInteractionLimit.EXISTING_USERS => __EnumValue("EXISTING_USERS")
case RepositoryInteractionLimit.NO_LIMIT => __EnumValue("NO_LIMIT")
          }

          val values: scala.collection.immutable.Vector[RepositoryInteractionLimit] = scala.collection.immutable.Vector(COLLABORATORS_ONLY, CONTRIBUTORS_ONLY, EXISTING_USERS, NO_LIMIT)
        }
       
sealed trait RepositoryInteractionLimitExpiry extends scala.Product with scala.Serializable { def value: String }
        object RepositoryInteractionLimitExpiry {
          case object ONE_DAY extends RepositoryInteractionLimitExpiry { val value: String = "ONE_DAY" }
case object ONE_MONTH extends RepositoryInteractionLimitExpiry { val value: String = "ONE_MONTH" }
case object ONE_WEEK extends RepositoryInteractionLimitExpiry { val value: String = "ONE_WEEK" }
case object SIX_MONTHS extends RepositoryInteractionLimitExpiry { val value: String = "SIX_MONTHS" }
case object THREE_DAYS extends RepositoryInteractionLimitExpiry { val value: String = "THREE_DAYS" }

          implicit val decoder: ScalarDecoder[RepositoryInteractionLimitExpiry] = {
            case __StringValue ("ONE_DAY") => Right(RepositoryInteractionLimitExpiry.ONE_DAY)
case __StringValue ("ONE_MONTH") => Right(RepositoryInteractionLimitExpiry.ONE_MONTH)
case __StringValue ("ONE_WEEK") => Right(RepositoryInteractionLimitExpiry.ONE_WEEK)
case __StringValue ("SIX_MONTHS") => Right(RepositoryInteractionLimitExpiry.SIX_MONTHS)
case __StringValue ("THREE_DAYS") => Right(RepositoryInteractionLimitExpiry.THREE_DAYS)
            case other => Left(DecodingError(s"Can't build RepositoryInteractionLimitExpiry from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryInteractionLimitExpiry] = {
            case RepositoryInteractionLimitExpiry.ONE_DAY => __EnumValue("ONE_DAY")
case RepositoryInteractionLimitExpiry.ONE_MONTH => __EnumValue("ONE_MONTH")
case RepositoryInteractionLimitExpiry.ONE_WEEK => __EnumValue("ONE_WEEK")
case RepositoryInteractionLimitExpiry.SIX_MONTHS => __EnumValue("SIX_MONTHS")
case RepositoryInteractionLimitExpiry.THREE_DAYS => __EnumValue("THREE_DAYS")
          }

          val values: scala.collection.immutable.Vector[RepositoryInteractionLimitExpiry] = scala.collection.immutable.Vector(ONE_DAY, ONE_MONTH, ONE_WEEK, SIX_MONTHS, THREE_DAYS)
        }
       
sealed trait RepositoryInteractionLimitOrigin extends scala.Product with scala.Serializable { def value: String }
        object RepositoryInteractionLimitOrigin {
          case object ORGANIZATION extends RepositoryInteractionLimitOrigin { val value: String = "ORGANIZATION" }
case object REPOSITORY extends RepositoryInteractionLimitOrigin { val value: String = "REPOSITORY" }
case object USER extends RepositoryInteractionLimitOrigin { val value: String = "USER" }

          implicit val decoder: ScalarDecoder[RepositoryInteractionLimitOrigin] = {
            case __StringValue ("ORGANIZATION") => Right(RepositoryInteractionLimitOrigin.ORGANIZATION)
case __StringValue ("REPOSITORY") => Right(RepositoryInteractionLimitOrigin.REPOSITORY)
case __StringValue ("USER") => Right(RepositoryInteractionLimitOrigin.USER)
            case other => Left(DecodingError(s"Can't build RepositoryInteractionLimitOrigin from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryInteractionLimitOrigin] = {
            case RepositoryInteractionLimitOrigin.ORGANIZATION => __EnumValue("ORGANIZATION")
case RepositoryInteractionLimitOrigin.REPOSITORY => __EnumValue("REPOSITORY")
case RepositoryInteractionLimitOrigin.USER => __EnumValue("USER")
          }

          val values: scala.collection.immutable.Vector[RepositoryInteractionLimitOrigin] = scala.collection.immutable.Vector(ORGANIZATION, REPOSITORY, USER)
        }
       
sealed trait RepositoryInvitationOrderField extends scala.Product with scala.Serializable { def value: String }
        object RepositoryInvitationOrderField {
          case object CREATED_AT extends RepositoryInvitationOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[RepositoryInvitationOrderField] = {
            case __StringValue ("CREATED_AT") => Right(RepositoryInvitationOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build RepositoryInvitationOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryInvitationOrderField] = {
            case RepositoryInvitationOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[RepositoryInvitationOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait RepositoryLockReason extends scala.Product with scala.Serializable { def value: String }
        object RepositoryLockReason {
          case object BILLING extends RepositoryLockReason { val value: String = "BILLING" }
case object MIGRATING extends RepositoryLockReason { val value: String = "MIGRATING" }
case object MOVING extends RepositoryLockReason { val value: String = "MOVING" }
case object RENAME extends RepositoryLockReason { val value: String = "RENAME" }
case object TRADE_RESTRICTION extends RepositoryLockReason { val value: String = "TRADE_RESTRICTION" }

          implicit val decoder: ScalarDecoder[RepositoryLockReason] = {
            case __StringValue ("BILLING") => Right(RepositoryLockReason.BILLING)
case __StringValue ("MIGRATING") => Right(RepositoryLockReason.MIGRATING)
case __StringValue ("MOVING") => Right(RepositoryLockReason.MOVING)
case __StringValue ("RENAME") => Right(RepositoryLockReason.RENAME)
case __StringValue ("TRADE_RESTRICTION") => Right(RepositoryLockReason.TRADE_RESTRICTION)
            case other => Left(DecodingError(s"Can't build RepositoryLockReason from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryLockReason] = {
            case RepositoryLockReason.BILLING => __EnumValue("BILLING")
case RepositoryLockReason.MIGRATING => __EnumValue("MIGRATING")
case RepositoryLockReason.MOVING => __EnumValue("MOVING")
case RepositoryLockReason.RENAME => __EnumValue("RENAME")
case RepositoryLockReason.TRADE_RESTRICTION => __EnumValue("TRADE_RESTRICTION")
          }

          val values: scala.collection.immutable.Vector[RepositoryLockReason] = scala.collection.immutable.Vector(BILLING, MIGRATING, MOVING, RENAME, TRADE_RESTRICTION)
        }
       
sealed trait RepositoryMigrationOrderDirection extends scala.Product with scala.Serializable { def value: String }
        object RepositoryMigrationOrderDirection {
          case object ASC extends RepositoryMigrationOrderDirection { val value: String = "ASC" }
case object DESC extends RepositoryMigrationOrderDirection { val value: String = "DESC" }

          implicit val decoder: ScalarDecoder[RepositoryMigrationOrderDirection] = {
            case __StringValue ("ASC") => Right(RepositoryMigrationOrderDirection.ASC)
case __StringValue ("DESC") => Right(RepositoryMigrationOrderDirection.DESC)
            case other => Left(DecodingError(s"Can't build RepositoryMigrationOrderDirection from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryMigrationOrderDirection] = {
            case RepositoryMigrationOrderDirection.ASC => __EnumValue("ASC")
case RepositoryMigrationOrderDirection.DESC => __EnumValue("DESC")
          }

          val values: scala.collection.immutable.Vector[RepositoryMigrationOrderDirection] = scala.collection.immutable.Vector(ASC, DESC)
        }
       
sealed trait RepositoryMigrationOrderField extends scala.Product with scala.Serializable { def value: String }
        object RepositoryMigrationOrderField {
          case object CREATED_AT extends RepositoryMigrationOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[RepositoryMigrationOrderField] = {
            case __StringValue ("CREATED_AT") => Right(RepositoryMigrationOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build RepositoryMigrationOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryMigrationOrderField] = {
            case RepositoryMigrationOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[RepositoryMigrationOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait RepositoryOrderField extends scala.Product with scala.Serializable { def value: String }
        object RepositoryOrderField {
          case object CREATED_AT extends RepositoryOrderField { val value: String = "CREATED_AT" }
case object NAME extends RepositoryOrderField { val value: String = "NAME" }
case object PUSHED_AT extends RepositoryOrderField { val value: String = "PUSHED_AT" }
case object STARGAZERS extends RepositoryOrderField { val value: String = "STARGAZERS" }
case object UPDATED_AT extends RepositoryOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[RepositoryOrderField] = {
            case __StringValue ("CREATED_AT") => Right(RepositoryOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(RepositoryOrderField.NAME)
case __StringValue ("PUSHED_AT") => Right(RepositoryOrderField.PUSHED_AT)
case __StringValue ("STARGAZERS") => Right(RepositoryOrderField.STARGAZERS)
case __StringValue ("UPDATED_AT") => Right(RepositoryOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build RepositoryOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryOrderField] = {
            case RepositoryOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case RepositoryOrderField.NAME => __EnumValue("NAME")
case RepositoryOrderField.PUSHED_AT => __EnumValue("PUSHED_AT")
case RepositoryOrderField.STARGAZERS => __EnumValue("STARGAZERS")
case RepositoryOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[RepositoryOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME, PUSHED_AT, STARGAZERS, UPDATED_AT)
        }
       
sealed trait RepositoryPermission extends scala.Product with scala.Serializable { def value: String }
        object RepositoryPermission {
          case object ADMIN extends RepositoryPermission { val value: String = "ADMIN" }
case object MAINTAIN extends RepositoryPermission { val value: String = "MAINTAIN" }
case object READ extends RepositoryPermission { val value: String = "READ" }
case object TRIAGE extends RepositoryPermission { val value: String = "TRIAGE" }
case object WRITE extends RepositoryPermission { val value: String = "WRITE" }

          implicit val decoder: ScalarDecoder[RepositoryPermission] = {
            case __StringValue ("ADMIN") => Right(RepositoryPermission.ADMIN)
case __StringValue ("MAINTAIN") => Right(RepositoryPermission.MAINTAIN)
case __StringValue ("READ") => Right(RepositoryPermission.READ)
case __StringValue ("TRIAGE") => Right(RepositoryPermission.TRIAGE)
case __StringValue ("WRITE") => Right(RepositoryPermission.WRITE)
            case other => Left(DecodingError(s"Can't build RepositoryPermission from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryPermission] = {
            case RepositoryPermission.ADMIN => __EnumValue("ADMIN")
case RepositoryPermission.MAINTAIN => __EnumValue("MAINTAIN")
case RepositoryPermission.READ => __EnumValue("READ")
case RepositoryPermission.TRIAGE => __EnumValue("TRIAGE")
case RepositoryPermission.WRITE => __EnumValue("WRITE")
          }

          val values: scala.collection.immutable.Vector[RepositoryPermission] = scala.collection.immutable.Vector(ADMIN, MAINTAIN, READ, TRIAGE, WRITE)
        }
       
sealed trait RepositoryPrivacy extends scala.Product with scala.Serializable { def value: String }
        object RepositoryPrivacy {
          case object PRIVATE extends RepositoryPrivacy { val value: String = "PRIVATE" }
case object PUBLIC extends RepositoryPrivacy { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepositoryPrivacy] = {
            case __StringValue ("PRIVATE") => Right(RepositoryPrivacy.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepositoryPrivacy.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepositoryPrivacy from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryPrivacy] = {
            case RepositoryPrivacy.PRIVATE => __EnumValue("PRIVATE")
case RepositoryPrivacy.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepositoryPrivacy] = scala.collection.immutable.Vector(PRIVATE, PUBLIC)
        }
       
sealed trait RepositoryRuleType extends scala.Product with scala.Serializable { def value: String }
        object RepositoryRuleType {
          case object BRANCH_NAME_PATTERN extends RepositoryRuleType { val value: String = "BRANCH_NAME_PATTERN" }
case object COMMITTER_EMAIL_PATTERN extends RepositoryRuleType { val value: String = "COMMITTER_EMAIL_PATTERN" }
case object COMMIT_AUTHOR_EMAIL_PATTERN extends RepositoryRuleType { val value: String = "COMMIT_AUTHOR_EMAIL_PATTERN" }
case object COMMIT_MESSAGE_PATTERN extends RepositoryRuleType { val value: String = "COMMIT_MESSAGE_PATTERN" }
case object CREATION extends RepositoryRuleType { val value: String = "CREATION" }
case object DELETION extends RepositoryRuleType { val value: String = "DELETION" }
case object NON_FAST_FORWARD extends RepositoryRuleType { val value: String = "NON_FAST_FORWARD" }
case object PULL_REQUEST extends RepositoryRuleType { val value: String = "PULL_REQUEST" }
case object REQUIRED_DEPLOYMENTS extends RepositoryRuleType { val value: String = "REQUIRED_DEPLOYMENTS" }
case object REQUIRED_LINEAR_HISTORY extends RepositoryRuleType { val value: String = "REQUIRED_LINEAR_HISTORY" }
case object REQUIRED_SIGNATURES extends RepositoryRuleType { val value: String = "REQUIRED_SIGNATURES" }
case object REQUIRED_STATUS_CHECKS extends RepositoryRuleType { val value: String = "REQUIRED_STATUS_CHECKS" }
case object TAG_NAME_PATTERN extends RepositoryRuleType { val value: String = "TAG_NAME_PATTERN" }
case object UPDATE extends RepositoryRuleType { val value: String = "UPDATE" }

          implicit val decoder: ScalarDecoder[RepositoryRuleType] = {
            case __StringValue ("BRANCH_NAME_PATTERN") => Right(RepositoryRuleType.BRANCH_NAME_PATTERN)
case __StringValue ("COMMITTER_EMAIL_PATTERN") => Right(RepositoryRuleType.COMMITTER_EMAIL_PATTERN)
case __StringValue ("COMMIT_AUTHOR_EMAIL_PATTERN") => Right(RepositoryRuleType.COMMIT_AUTHOR_EMAIL_PATTERN)
case __StringValue ("COMMIT_MESSAGE_PATTERN") => Right(RepositoryRuleType.COMMIT_MESSAGE_PATTERN)
case __StringValue ("CREATION") => Right(RepositoryRuleType.CREATION)
case __StringValue ("DELETION") => Right(RepositoryRuleType.DELETION)
case __StringValue ("NON_FAST_FORWARD") => Right(RepositoryRuleType.NON_FAST_FORWARD)
case __StringValue ("PULL_REQUEST") => Right(RepositoryRuleType.PULL_REQUEST)
case __StringValue ("REQUIRED_DEPLOYMENTS") => Right(RepositoryRuleType.REQUIRED_DEPLOYMENTS)
case __StringValue ("REQUIRED_LINEAR_HISTORY") => Right(RepositoryRuleType.REQUIRED_LINEAR_HISTORY)
case __StringValue ("REQUIRED_SIGNATURES") => Right(RepositoryRuleType.REQUIRED_SIGNATURES)
case __StringValue ("REQUIRED_STATUS_CHECKS") => Right(RepositoryRuleType.REQUIRED_STATUS_CHECKS)
case __StringValue ("TAG_NAME_PATTERN") => Right(RepositoryRuleType.TAG_NAME_PATTERN)
case __StringValue ("UPDATE") => Right(RepositoryRuleType.UPDATE)
            case other => Left(DecodingError(s"Can't build RepositoryRuleType from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryRuleType] = {
            case RepositoryRuleType.BRANCH_NAME_PATTERN => __EnumValue("BRANCH_NAME_PATTERN")
case RepositoryRuleType.COMMITTER_EMAIL_PATTERN => __EnumValue("COMMITTER_EMAIL_PATTERN")
case RepositoryRuleType.COMMIT_AUTHOR_EMAIL_PATTERN => __EnumValue("COMMIT_AUTHOR_EMAIL_PATTERN")
case RepositoryRuleType.COMMIT_MESSAGE_PATTERN => __EnumValue("COMMIT_MESSAGE_PATTERN")
case RepositoryRuleType.CREATION => __EnumValue("CREATION")
case RepositoryRuleType.DELETION => __EnumValue("DELETION")
case RepositoryRuleType.NON_FAST_FORWARD => __EnumValue("NON_FAST_FORWARD")
case RepositoryRuleType.PULL_REQUEST => __EnumValue("PULL_REQUEST")
case RepositoryRuleType.REQUIRED_DEPLOYMENTS => __EnumValue("REQUIRED_DEPLOYMENTS")
case RepositoryRuleType.REQUIRED_LINEAR_HISTORY => __EnumValue("REQUIRED_LINEAR_HISTORY")
case RepositoryRuleType.REQUIRED_SIGNATURES => __EnumValue("REQUIRED_SIGNATURES")
case RepositoryRuleType.REQUIRED_STATUS_CHECKS => __EnumValue("REQUIRED_STATUS_CHECKS")
case RepositoryRuleType.TAG_NAME_PATTERN => __EnumValue("TAG_NAME_PATTERN")
case RepositoryRuleType.UPDATE => __EnumValue("UPDATE")
          }

          val values: scala.collection.immutable.Vector[RepositoryRuleType] = scala.collection.immutable.Vector(BRANCH_NAME_PATTERN, COMMITTER_EMAIL_PATTERN, COMMIT_AUTHOR_EMAIL_PATTERN, COMMIT_MESSAGE_PATTERN, CREATION, DELETION, NON_FAST_FORWARD, PULL_REQUEST, REQUIRED_DEPLOYMENTS, REQUIRED_LINEAR_HISTORY, REQUIRED_SIGNATURES, REQUIRED_STATUS_CHECKS, TAG_NAME_PATTERN, UPDATE)
        }
       
sealed trait RepositoryRulesetTarget extends scala.Product with scala.Serializable { def value: String }
        object RepositoryRulesetTarget {
          case object BRANCH extends RepositoryRulesetTarget { val value: String = "BRANCH" }
case object TAG extends RepositoryRulesetTarget { val value: String = "TAG" }

          implicit val decoder: ScalarDecoder[RepositoryRulesetTarget] = {
            case __StringValue ("BRANCH") => Right(RepositoryRulesetTarget.BRANCH)
case __StringValue ("TAG") => Right(RepositoryRulesetTarget.TAG)
            case other => Left(DecodingError(s"Can't build RepositoryRulesetTarget from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryRulesetTarget] = {
            case RepositoryRulesetTarget.BRANCH => __EnumValue("BRANCH")
case RepositoryRulesetTarget.TAG => __EnumValue("TAG")
          }

          val values: scala.collection.immutable.Vector[RepositoryRulesetTarget] = scala.collection.immutable.Vector(BRANCH, TAG)
        }
       
sealed trait RepositoryVisibility extends scala.Product with scala.Serializable { def value: String }
        object RepositoryVisibility {
          case object INTERNAL extends RepositoryVisibility { val value: String = "INTERNAL" }
case object PRIVATE extends RepositoryVisibility { val value: String = "PRIVATE" }
case object PUBLIC extends RepositoryVisibility { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[RepositoryVisibility] = {
            case __StringValue ("INTERNAL") => Right(RepositoryVisibility.INTERNAL)
case __StringValue ("PRIVATE") => Right(RepositoryVisibility.PRIVATE)
case __StringValue ("PUBLIC") => Right(RepositoryVisibility.PUBLIC)
            case other => Left(DecodingError(s"Can't build RepositoryVisibility from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryVisibility] = {
            case RepositoryVisibility.INTERNAL => __EnumValue("INTERNAL")
case RepositoryVisibility.PRIVATE => __EnumValue("PRIVATE")
case RepositoryVisibility.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[RepositoryVisibility] = scala.collection.immutable.Vector(INTERNAL, PRIVATE, PUBLIC)
        }
       
sealed trait RepositoryVulnerabilityAlertDependencyScope extends scala.Product with scala.Serializable { def value: String }
        object RepositoryVulnerabilityAlertDependencyScope {
          case object DEVELOPMENT extends RepositoryVulnerabilityAlertDependencyScope { val value: String = "DEVELOPMENT" }
case object RUNTIME extends RepositoryVulnerabilityAlertDependencyScope { val value: String = "RUNTIME" }

          implicit val decoder: ScalarDecoder[RepositoryVulnerabilityAlertDependencyScope] = {
            case __StringValue ("DEVELOPMENT") => Right(RepositoryVulnerabilityAlertDependencyScope.DEVELOPMENT)
case __StringValue ("RUNTIME") => Right(RepositoryVulnerabilityAlertDependencyScope.RUNTIME)
            case other => Left(DecodingError(s"Can't build RepositoryVulnerabilityAlertDependencyScope from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryVulnerabilityAlertDependencyScope] = {
            case RepositoryVulnerabilityAlertDependencyScope.DEVELOPMENT => __EnumValue("DEVELOPMENT")
case RepositoryVulnerabilityAlertDependencyScope.RUNTIME => __EnumValue("RUNTIME")
          }

          val values: scala.collection.immutable.Vector[RepositoryVulnerabilityAlertDependencyScope] = scala.collection.immutable.Vector(DEVELOPMENT, RUNTIME)
        }
       
sealed trait RepositoryVulnerabilityAlertState extends scala.Product with scala.Serializable { def value: String }
        object RepositoryVulnerabilityAlertState {
          case object AUTO_DISMISSED extends RepositoryVulnerabilityAlertState { val value: String = "AUTO_DISMISSED" }
case object DISMISSED extends RepositoryVulnerabilityAlertState { val value: String = "DISMISSED" }
case object FIXED extends RepositoryVulnerabilityAlertState { val value: String = "FIXED" }
case object OPEN extends RepositoryVulnerabilityAlertState { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[RepositoryVulnerabilityAlertState] = {
            case __StringValue ("AUTO_DISMISSED") => Right(RepositoryVulnerabilityAlertState.AUTO_DISMISSED)
case __StringValue ("DISMISSED") => Right(RepositoryVulnerabilityAlertState.DISMISSED)
case __StringValue ("FIXED") => Right(RepositoryVulnerabilityAlertState.FIXED)
case __StringValue ("OPEN") => Right(RepositoryVulnerabilityAlertState.OPEN)
            case other => Left(DecodingError(s"Can't build RepositoryVulnerabilityAlertState from input $other"))
          }
          implicit val encoder: ArgEncoder[RepositoryVulnerabilityAlertState] = {
            case RepositoryVulnerabilityAlertState.AUTO_DISMISSED => __EnumValue("AUTO_DISMISSED")
case RepositoryVulnerabilityAlertState.DISMISSED => __EnumValue("DISMISSED")
case RepositoryVulnerabilityAlertState.FIXED => __EnumValue("FIXED")
case RepositoryVulnerabilityAlertState.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[RepositoryVulnerabilityAlertState] = scala.collection.immutable.Vector(AUTO_DISMISSED, DISMISSED, FIXED, OPEN)
        }
       
sealed trait RequestableCheckStatusState extends scala.Product with scala.Serializable { def value: String }
        object RequestableCheckStatusState {
          case object COMPLETED extends RequestableCheckStatusState { val value: String = "COMPLETED" }
case object IN_PROGRESS extends RequestableCheckStatusState { val value: String = "IN_PROGRESS" }
case object PENDING extends RequestableCheckStatusState { val value: String = "PENDING" }
case object QUEUED extends RequestableCheckStatusState { val value: String = "QUEUED" }
case object WAITING extends RequestableCheckStatusState { val value: String = "WAITING" }

          implicit val decoder: ScalarDecoder[RequestableCheckStatusState] = {
            case __StringValue ("COMPLETED") => Right(RequestableCheckStatusState.COMPLETED)
case __StringValue ("IN_PROGRESS") => Right(RequestableCheckStatusState.IN_PROGRESS)
case __StringValue ("PENDING") => Right(RequestableCheckStatusState.PENDING)
case __StringValue ("QUEUED") => Right(RequestableCheckStatusState.QUEUED)
case __StringValue ("WAITING") => Right(RequestableCheckStatusState.WAITING)
            case other => Left(DecodingError(s"Can't build RequestableCheckStatusState from input $other"))
          }
          implicit val encoder: ArgEncoder[RequestableCheckStatusState] = {
            case RequestableCheckStatusState.COMPLETED => __EnumValue("COMPLETED")
case RequestableCheckStatusState.IN_PROGRESS => __EnumValue("IN_PROGRESS")
case RequestableCheckStatusState.PENDING => __EnumValue("PENDING")
case RequestableCheckStatusState.QUEUED => __EnumValue("QUEUED")
case RequestableCheckStatusState.WAITING => __EnumValue("WAITING")
          }

          val values: scala.collection.immutable.Vector[RequestableCheckStatusState] = scala.collection.immutable.Vector(COMPLETED, IN_PROGRESS, PENDING, QUEUED, WAITING)
        }
       
sealed trait RoleInOrganization extends scala.Product with scala.Serializable { def value: String }
        object RoleInOrganization {
          case object DIRECT_MEMBER extends RoleInOrganization { val value: String = "DIRECT_MEMBER" }
case object OWNER extends RoleInOrganization { val value: String = "OWNER" }
case object UNAFFILIATED extends RoleInOrganization { val value: String = "UNAFFILIATED" }

          implicit val decoder: ScalarDecoder[RoleInOrganization] = {
            case __StringValue ("DIRECT_MEMBER") => Right(RoleInOrganization.DIRECT_MEMBER)
case __StringValue ("OWNER") => Right(RoleInOrganization.OWNER)
case __StringValue ("UNAFFILIATED") => Right(RoleInOrganization.UNAFFILIATED)
            case other => Left(DecodingError(s"Can't build RoleInOrganization from input $other"))
          }
          implicit val encoder: ArgEncoder[RoleInOrganization] = {
            case RoleInOrganization.DIRECT_MEMBER => __EnumValue("DIRECT_MEMBER")
case RoleInOrganization.OWNER => __EnumValue("OWNER")
case RoleInOrganization.UNAFFILIATED => __EnumValue("UNAFFILIATED")
          }

          val values: scala.collection.immutable.Vector[RoleInOrganization] = scala.collection.immutable.Vector(DIRECT_MEMBER, OWNER, UNAFFILIATED)
        }
       
sealed trait RuleBypassMode extends scala.Product with scala.Serializable { def value: String }
        object RuleBypassMode {
          case object NONE extends RuleBypassMode { val value: String = "NONE" }
case object ORGANIZATION extends RuleBypassMode { val value: String = "ORGANIZATION" }
case object ORGANIZATION_ALWAYS extends RuleBypassMode { val value: String = "ORGANIZATION_ALWAYS" }
case object ORGANIZATION_NONE extends RuleBypassMode { val value: String = "ORGANIZATION_NONE" }
case object ORGANIZATION_PRS_ONLY extends RuleBypassMode { val value: String = "ORGANIZATION_PRS_ONLY" }
case object REPOSITORY extends RuleBypassMode { val value: String = "REPOSITORY" }

          implicit val decoder: ScalarDecoder[RuleBypassMode] = {
            case __StringValue ("NONE") => Right(RuleBypassMode.NONE)
case __StringValue ("ORGANIZATION") => Right(RuleBypassMode.ORGANIZATION)
case __StringValue ("ORGANIZATION_ALWAYS") => Right(RuleBypassMode.ORGANIZATION_ALWAYS)
case __StringValue ("ORGANIZATION_NONE") => Right(RuleBypassMode.ORGANIZATION_NONE)
case __StringValue ("ORGANIZATION_PRS_ONLY") => Right(RuleBypassMode.ORGANIZATION_PRS_ONLY)
case __StringValue ("REPOSITORY") => Right(RuleBypassMode.REPOSITORY)
            case other => Left(DecodingError(s"Can't build RuleBypassMode from input $other"))
          }
          implicit val encoder: ArgEncoder[RuleBypassMode] = {
            case RuleBypassMode.NONE => __EnumValue("NONE")
case RuleBypassMode.ORGANIZATION => __EnumValue("ORGANIZATION")
case RuleBypassMode.ORGANIZATION_ALWAYS => __EnumValue("ORGANIZATION_ALWAYS")
case RuleBypassMode.ORGANIZATION_NONE => __EnumValue("ORGANIZATION_NONE")
case RuleBypassMode.ORGANIZATION_PRS_ONLY => __EnumValue("ORGANIZATION_PRS_ONLY")
case RuleBypassMode.REPOSITORY => __EnumValue("REPOSITORY")
          }

          val values: scala.collection.immutable.Vector[RuleBypassMode] = scala.collection.immutable.Vector(NONE, ORGANIZATION, ORGANIZATION_ALWAYS, ORGANIZATION_NONE, ORGANIZATION_PRS_ONLY, REPOSITORY)
        }
       
sealed trait RuleEnforcement extends scala.Product with scala.Serializable { def value: String }
        object RuleEnforcement {
          case object ACTIVE extends RuleEnforcement { val value: String = "ACTIVE" }
case object DISABLED extends RuleEnforcement { val value: String = "DISABLED" }
case object EVALUATE extends RuleEnforcement { val value: String = "EVALUATE" }

          implicit val decoder: ScalarDecoder[RuleEnforcement] = {
            case __StringValue ("ACTIVE") => Right(RuleEnforcement.ACTIVE)
case __StringValue ("DISABLED") => Right(RuleEnforcement.DISABLED)
case __StringValue ("EVALUATE") => Right(RuleEnforcement.EVALUATE)
            case other => Left(DecodingError(s"Can't build RuleEnforcement from input $other"))
          }
          implicit val encoder: ArgEncoder[RuleEnforcement] = {
            case RuleEnforcement.ACTIVE => __EnumValue("ACTIVE")
case RuleEnforcement.DISABLED => __EnumValue("DISABLED")
case RuleEnforcement.EVALUATE => __EnumValue("EVALUATE")
          }

          val values: scala.collection.immutable.Vector[RuleEnforcement] = scala.collection.immutable.Vector(ACTIVE, DISABLED, EVALUATE)
        }
       
sealed trait SamlDigestAlgorithm extends scala.Product with scala.Serializable { def value: String }
        object SamlDigestAlgorithm {
          case object SHA1 extends SamlDigestAlgorithm { val value: String = "SHA1" }
case object SHA256 extends SamlDigestAlgorithm { val value: String = "SHA256" }
case object SHA384 extends SamlDigestAlgorithm { val value: String = "SHA384" }
case object SHA512 extends SamlDigestAlgorithm { val value: String = "SHA512" }

          implicit val decoder: ScalarDecoder[SamlDigestAlgorithm] = {
            case __StringValue ("SHA1") => Right(SamlDigestAlgorithm.SHA1)
case __StringValue ("SHA256") => Right(SamlDigestAlgorithm.SHA256)
case __StringValue ("SHA384") => Right(SamlDigestAlgorithm.SHA384)
case __StringValue ("SHA512") => Right(SamlDigestAlgorithm.SHA512)
            case other => Left(DecodingError(s"Can't build SamlDigestAlgorithm from input $other"))
          }
          implicit val encoder: ArgEncoder[SamlDigestAlgorithm] = {
            case SamlDigestAlgorithm.SHA1 => __EnumValue("SHA1")
case SamlDigestAlgorithm.SHA256 => __EnumValue("SHA256")
case SamlDigestAlgorithm.SHA384 => __EnumValue("SHA384")
case SamlDigestAlgorithm.SHA512 => __EnumValue("SHA512")
          }

          val values: scala.collection.immutable.Vector[SamlDigestAlgorithm] = scala.collection.immutable.Vector(SHA1, SHA256, SHA384, SHA512)
        }
       
sealed trait SamlSignatureAlgorithm extends scala.Product with scala.Serializable { def value: String }
        object SamlSignatureAlgorithm {
          case object RSA_SHA1 extends SamlSignatureAlgorithm { val value: String = "RSA_SHA1" }
case object RSA_SHA256 extends SamlSignatureAlgorithm { val value: String = "RSA_SHA256" }
case object RSA_SHA384 extends SamlSignatureAlgorithm { val value: String = "RSA_SHA384" }
case object RSA_SHA512 extends SamlSignatureAlgorithm { val value: String = "RSA_SHA512" }

          implicit val decoder: ScalarDecoder[SamlSignatureAlgorithm] = {
            case __StringValue ("RSA_SHA1") => Right(SamlSignatureAlgorithm.RSA_SHA1)
case __StringValue ("RSA_SHA256") => Right(SamlSignatureAlgorithm.RSA_SHA256)
case __StringValue ("RSA_SHA384") => Right(SamlSignatureAlgorithm.RSA_SHA384)
case __StringValue ("RSA_SHA512") => Right(SamlSignatureAlgorithm.RSA_SHA512)
            case other => Left(DecodingError(s"Can't build SamlSignatureAlgorithm from input $other"))
          }
          implicit val encoder: ArgEncoder[SamlSignatureAlgorithm] = {
            case SamlSignatureAlgorithm.RSA_SHA1 => __EnumValue("RSA_SHA1")
case SamlSignatureAlgorithm.RSA_SHA256 => __EnumValue("RSA_SHA256")
case SamlSignatureAlgorithm.RSA_SHA384 => __EnumValue("RSA_SHA384")
case SamlSignatureAlgorithm.RSA_SHA512 => __EnumValue("RSA_SHA512")
          }

          val values: scala.collection.immutable.Vector[SamlSignatureAlgorithm] = scala.collection.immutable.Vector(RSA_SHA1, RSA_SHA256, RSA_SHA384, RSA_SHA512)
        }
       
sealed trait SavedReplyOrderField extends scala.Product with scala.Serializable { def value: String }
        object SavedReplyOrderField {
          case object UPDATED_AT extends SavedReplyOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[SavedReplyOrderField] = {
            case __StringValue ("UPDATED_AT") => Right(SavedReplyOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build SavedReplyOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SavedReplyOrderField] = {
            case SavedReplyOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[SavedReplyOrderField] = scala.collection.immutable.Vector(UPDATED_AT)
        }
       
sealed trait SearchType extends scala.Product with scala.Serializable { def value: String }
        object SearchType {
          case object DISCUSSION extends SearchType { val value: String = "DISCUSSION" }
case object ISSUE extends SearchType { val value: String = "ISSUE" }
case object REPOSITORY extends SearchType { val value: String = "REPOSITORY" }
case object USER extends SearchType { val value: String = "USER" }

          implicit val decoder: ScalarDecoder[SearchType] = {
            case __StringValue ("DISCUSSION") => Right(SearchType.DISCUSSION)
case __StringValue ("ISSUE") => Right(SearchType.ISSUE)
case __StringValue ("REPOSITORY") => Right(SearchType.REPOSITORY)
case __StringValue ("USER") => Right(SearchType.USER)
            case other => Left(DecodingError(s"Can't build SearchType from input $other"))
          }
          implicit val encoder: ArgEncoder[SearchType] = {
            case SearchType.DISCUSSION => __EnumValue("DISCUSSION")
case SearchType.ISSUE => __EnumValue("ISSUE")
case SearchType.REPOSITORY => __EnumValue("REPOSITORY")
case SearchType.USER => __EnumValue("USER")
          }

          val values: scala.collection.immutable.Vector[SearchType] = scala.collection.immutable.Vector(DISCUSSION, ISSUE, REPOSITORY, USER)
        }
       
sealed trait SecurityAdvisoryClassification extends scala.Product with scala.Serializable { def value: String }
        object SecurityAdvisoryClassification {
          case object GENERAL extends SecurityAdvisoryClassification { val value: String = "GENERAL" }
case object MALWARE extends SecurityAdvisoryClassification { val value: String = "MALWARE" }

          implicit val decoder: ScalarDecoder[SecurityAdvisoryClassification] = {
            case __StringValue ("GENERAL") => Right(SecurityAdvisoryClassification.GENERAL)
case __StringValue ("MALWARE") => Right(SecurityAdvisoryClassification.MALWARE)
            case other => Left(DecodingError(s"Can't build SecurityAdvisoryClassification from input $other"))
          }
          implicit val encoder: ArgEncoder[SecurityAdvisoryClassification] = {
            case SecurityAdvisoryClassification.GENERAL => __EnumValue("GENERAL")
case SecurityAdvisoryClassification.MALWARE => __EnumValue("MALWARE")
          }

          val values: scala.collection.immutable.Vector[SecurityAdvisoryClassification] = scala.collection.immutable.Vector(GENERAL, MALWARE)
        }
       
sealed trait SecurityAdvisoryEcosystem extends scala.Product with scala.Serializable { def value: String }
        object SecurityAdvisoryEcosystem {
          case object ACTIONS extends SecurityAdvisoryEcosystem { val value: String = "ACTIONS" }
case object COMPOSER extends SecurityAdvisoryEcosystem { val value: String = "COMPOSER" }
case object ERLANG extends SecurityAdvisoryEcosystem { val value: String = "ERLANG" }
case object GO extends SecurityAdvisoryEcosystem { val value: String = "GO" }
case object MAVEN extends SecurityAdvisoryEcosystem { val value: String = "MAVEN" }
case object NPM extends SecurityAdvisoryEcosystem { val value: String = "NPM" }
case object NUGET extends SecurityAdvisoryEcosystem { val value: String = "NUGET" }
case object PIP extends SecurityAdvisoryEcosystem { val value: String = "PIP" }
case object PUB extends SecurityAdvisoryEcosystem { val value: String = "PUB" }
case object RUBYGEMS extends SecurityAdvisoryEcosystem { val value: String = "RUBYGEMS" }
case object RUST extends SecurityAdvisoryEcosystem { val value: String = "RUST" }

          implicit val decoder: ScalarDecoder[SecurityAdvisoryEcosystem] = {
            case __StringValue ("ACTIONS") => Right(SecurityAdvisoryEcosystem.ACTIONS)
case __StringValue ("COMPOSER") => Right(SecurityAdvisoryEcosystem.COMPOSER)
case __StringValue ("ERLANG") => Right(SecurityAdvisoryEcosystem.ERLANG)
case __StringValue ("GO") => Right(SecurityAdvisoryEcosystem.GO)
case __StringValue ("MAVEN") => Right(SecurityAdvisoryEcosystem.MAVEN)
case __StringValue ("NPM") => Right(SecurityAdvisoryEcosystem.NPM)
case __StringValue ("NUGET") => Right(SecurityAdvisoryEcosystem.NUGET)
case __StringValue ("PIP") => Right(SecurityAdvisoryEcosystem.PIP)
case __StringValue ("PUB") => Right(SecurityAdvisoryEcosystem.PUB)
case __StringValue ("RUBYGEMS") => Right(SecurityAdvisoryEcosystem.RUBYGEMS)
case __StringValue ("RUST") => Right(SecurityAdvisoryEcosystem.RUST)
            case other => Left(DecodingError(s"Can't build SecurityAdvisoryEcosystem from input $other"))
          }
          implicit val encoder: ArgEncoder[SecurityAdvisoryEcosystem] = {
            case SecurityAdvisoryEcosystem.ACTIONS => __EnumValue("ACTIONS")
case SecurityAdvisoryEcosystem.COMPOSER => __EnumValue("COMPOSER")
case SecurityAdvisoryEcosystem.ERLANG => __EnumValue("ERLANG")
case SecurityAdvisoryEcosystem.GO => __EnumValue("GO")
case SecurityAdvisoryEcosystem.MAVEN => __EnumValue("MAVEN")
case SecurityAdvisoryEcosystem.NPM => __EnumValue("NPM")
case SecurityAdvisoryEcosystem.NUGET => __EnumValue("NUGET")
case SecurityAdvisoryEcosystem.PIP => __EnumValue("PIP")
case SecurityAdvisoryEcosystem.PUB => __EnumValue("PUB")
case SecurityAdvisoryEcosystem.RUBYGEMS => __EnumValue("RUBYGEMS")
case SecurityAdvisoryEcosystem.RUST => __EnumValue("RUST")
          }

          val values: scala.collection.immutable.Vector[SecurityAdvisoryEcosystem] = scala.collection.immutable.Vector(ACTIONS, COMPOSER, ERLANG, GO, MAVEN, NPM, NUGET, PIP, PUB, RUBYGEMS, RUST)
        }
       
sealed trait SecurityAdvisoryIdentifierType extends scala.Product with scala.Serializable { def value: String }
        object SecurityAdvisoryIdentifierType {
          case object CVE extends SecurityAdvisoryIdentifierType { val value: String = "CVE" }
case object GHSA extends SecurityAdvisoryIdentifierType { val value: String = "GHSA" }

          implicit val decoder: ScalarDecoder[SecurityAdvisoryIdentifierType] = {
            case __StringValue ("CVE") => Right(SecurityAdvisoryIdentifierType.CVE)
case __StringValue ("GHSA") => Right(SecurityAdvisoryIdentifierType.GHSA)
            case other => Left(DecodingError(s"Can't build SecurityAdvisoryIdentifierType from input $other"))
          }
          implicit val encoder: ArgEncoder[SecurityAdvisoryIdentifierType] = {
            case SecurityAdvisoryIdentifierType.CVE => __EnumValue("CVE")
case SecurityAdvisoryIdentifierType.GHSA => __EnumValue("GHSA")
          }

          val values: scala.collection.immutable.Vector[SecurityAdvisoryIdentifierType] = scala.collection.immutable.Vector(CVE, GHSA)
        }
       
sealed trait SecurityAdvisoryOrderField extends scala.Product with scala.Serializable { def value: String }
        object SecurityAdvisoryOrderField {
          case object PUBLISHED_AT extends SecurityAdvisoryOrderField { val value: String = "PUBLISHED_AT" }
case object UPDATED_AT extends SecurityAdvisoryOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[SecurityAdvisoryOrderField] = {
            case __StringValue ("PUBLISHED_AT") => Right(SecurityAdvisoryOrderField.PUBLISHED_AT)
case __StringValue ("UPDATED_AT") => Right(SecurityAdvisoryOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build SecurityAdvisoryOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SecurityAdvisoryOrderField] = {
            case SecurityAdvisoryOrderField.PUBLISHED_AT => __EnumValue("PUBLISHED_AT")
case SecurityAdvisoryOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[SecurityAdvisoryOrderField] = scala.collection.immutable.Vector(PUBLISHED_AT, UPDATED_AT)
        }
       
sealed trait SecurityAdvisorySeverity extends scala.Product with scala.Serializable { def value: String }
        object SecurityAdvisorySeverity {
          case object CRITICAL extends SecurityAdvisorySeverity { val value: String = "CRITICAL" }
case object HIGH extends SecurityAdvisorySeverity { val value: String = "HIGH" }
case object LOW extends SecurityAdvisorySeverity { val value: String = "LOW" }
case object MODERATE extends SecurityAdvisorySeverity { val value: String = "MODERATE" }

          implicit val decoder: ScalarDecoder[SecurityAdvisorySeverity] = {
            case __StringValue ("CRITICAL") => Right(SecurityAdvisorySeverity.CRITICAL)
case __StringValue ("HIGH") => Right(SecurityAdvisorySeverity.HIGH)
case __StringValue ("LOW") => Right(SecurityAdvisorySeverity.LOW)
case __StringValue ("MODERATE") => Right(SecurityAdvisorySeverity.MODERATE)
            case other => Left(DecodingError(s"Can't build SecurityAdvisorySeverity from input $other"))
          }
          implicit val encoder: ArgEncoder[SecurityAdvisorySeverity] = {
            case SecurityAdvisorySeverity.CRITICAL => __EnumValue("CRITICAL")
case SecurityAdvisorySeverity.HIGH => __EnumValue("HIGH")
case SecurityAdvisorySeverity.LOW => __EnumValue("LOW")
case SecurityAdvisorySeverity.MODERATE => __EnumValue("MODERATE")
          }

          val values: scala.collection.immutable.Vector[SecurityAdvisorySeverity] = scala.collection.immutable.Vector(CRITICAL, HIGH, LOW, MODERATE)
        }
       
sealed trait SecurityVulnerabilityOrderField extends scala.Product with scala.Serializable { def value: String }
        object SecurityVulnerabilityOrderField {
          case object UPDATED_AT extends SecurityVulnerabilityOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[SecurityVulnerabilityOrderField] = {
            case __StringValue ("UPDATED_AT") => Right(SecurityVulnerabilityOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build SecurityVulnerabilityOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SecurityVulnerabilityOrderField] = {
            case SecurityVulnerabilityOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[SecurityVulnerabilityOrderField] = scala.collection.immutable.Vector(UPDATED_AT)
        }
       
sealed trait SocialAccountProvider extends scala.Product with scala.Serializable { def value: String }
        object SocialAccountProvider {
          case object FACEBOOK extends SocialAccountProvider { val value: String = "FACEBOOK" }
case object GENERIC extends SocialAccountProvider { val value: String = "GENERIC" }
case object HOMETOWN extends SocialAccountProvider { val value: String = "HOMETOWN" }
case object INSTAGRAM extends SocialAccountProvider { val value: String = "INSTAGRAM" }
case object LINKEDIN extends SocialAccountProvider { val value: String = "LINKEDIN" }
case object MASTODON extends SocialAccountProvider { val value: String = "MASTODON" }
case object REDDIT extends SocialAccountProvider { val value: String = "REDDIT" }
case object TWITCH extends SocialAccountProvider { val value: String = "TWITCH" }
case object TWITTER extends SocialAccountProvider { val value: String = "TWITTER" }
case object YOUTUBE extends SocialAccountProvider { val value: String = "YOUTUBE" }

          implicit val decoder: ScalarDecoder[SocialAccountProvider] = {
            case __StringValue ("FACEBOOK") => Right(SocialAccountProvider.FACEBOOK)
case __StringValue ("GENERIC") => Right(SocialAccountProvider.GENERIC)
case __StringValue ("HOMETOWN") => Right(SocialAccountProvider.HOMETOWN)
case __StringValue ("INSTAGRAM") => Right(SocialAccountProvider.INSTAGRAM)
case __StringValue ("LINKEDIN") => Right(SocialAccountProvider.LINKEDIN)
case __StringValue ("MASTODON") => Right(SocialAccountProvider.MASTODON)
case __StringValue ("REDDIT") => Right(SocialAccountProvider.REDDIT)
case __StringValue ("TWITCH") => Right(SocialAccountProvider.TWITCH)
case __StringValue ("TWITTER") => Right(SocialAccountProvider.TWITTER)
case __StringValue ("YOUTUBE") => Right(SocialAccountProvider.YOUTUBE)
            case other => Left(DecodingError(s"Can't build SocialAccountProvider from input $other"))
          }
          implicit val encoder: ArgEncoder[SocialAccountProvider] = {
            case SocialAccountProvider.FACEBOOK => __EnumValue("FACEBOOK")
case SocialAccountProvider.GENERIC => __EnumValue("GENERIC")
case SocialAccountProvider.HOMETOWN => __EnumValue("HOMETOWN")
case SocialAccountProvider.INSTAGRAM => __EnumValue("INSTAGRAM")
case SocialAccountProvider.LINKEDIN => __EnumValue("LINKEDIN")
case SocialAccountProvider.MASTODON => __EnumValue("MASTODON")
case SocialAccountProvider.REDDIT => __EnumValue("REDDIT")
case SocialAccountProvider.TWITCH => __EnumValue("TWITCH")
case SocialAccountProvider.TWITTER => __EnumValue("TWITTER")
case SocialAccountProvider.YOUTUBE => __EnumValue("YOUTUBE")
          }

          val values: scala.collection.immutable.Vector[SocialAccountProvider] = scala.collection.immutable.Vector(FACEBOOK, GENERIC, HOMETOWN, INSTAGRAM, LINKEDIN, MASTODON, REDDIT, TWITCH, TWITTER, YOUTUBE)
        }
       
sealed trait SponsorOrderField extends scala.Product with scala.Serializable { def value: String }
        object SponsorOrderField {
          case object LOGIN extends SponsorOrderField { val value: String = "LOGIN" }
case object RELEVANCE extends SponsorOrderField { val value: String = "RELEVANCE" }

          implicit val decoder: ScalarDecoder[SponsorOrderField] = {
            case __StringValue ("LOGIN") => Right(SponsorOrderField.LOGIN)
case __StringValue ("RELEVANCE") => Right(SponsorOrderField.RELEVANCE)
            case other => Left(DecodingError(s"Can't build SponsorOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorOrderField] = {
            case SponsorOrderField.LOGIN => __EnumValue("LOGIN")
case SponsorOrderField.RELEVANCE => __EnumValue("RELEVANCE")
          }

          val values: scala.collection.immutable.Vector[SponsorOrderField] = scala.collection.immutable.Vector(LOGIN, RELEVANCE)
        }
       
sealed trait SponsorableOrderField extends scala.Product with scala.Serializable { def value: String }
        object SponsorableOrderField {
          case object LOGIN extends SponsorableOrderField { val value: String = "LOGIN" }

          implicit val decoder: ScalarDecoder[SponsorableOrderField] = {
            case __StringValue ("LOGIN") => Right(SponsorableOrderField.LOGIN)
            case other => Left(DecodingError(s"Can't build SponsorableOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorableOrderField] = {
            case SponsorableOrderField.LOGIN => __EnumValue("LOGIN")
          }

          val values: scala.collection.immutable.Vector[SponsorableOrderField] = scala.collection.immutable.Vector(LOGIN)
        }
       
sealed trait SponsorsActivityAction extends scala.Product with scala.Serializable { def value: String }
        object SponsorsActivityAction {
          case object CANCELLED_SPONSORSHIP extends SponsorsActivityAction { val value: String = "CANCELLED_SPONSORSHIP" }
case object NEW_SPONSORSHIP extends SponsorsActivityAction { val value: String = "NEW_SPONSORSHIP" }
case object PENDING_CHANGE extends SponsorsActivityAction { val value: String = "PENDING_CHANGE" }
case object REFUND extends SponsorsActivityAction { val value: String = "REFUND" }
case object SPONSOR_MATCH_DISABLED extends SponsorsActivityAction { val value: String = "SPONSOR_MATCH_DISABLED" }
case object TIER_CHANGE extends SponsorsActivityAction { val value: String = "TIER_CHANGE" }

          implicit val decoder: ScalarDecoder[SponsorsActivityAction] = {
            case __StringValue ("CANCELLED_SPONSORSHIP") => Right(SponsorsActivityAction.CANCELLED_SPONSORSHIP)
case __StringValue ("NEW_SPONSORSHIP") => Right(SponsorsActivityAction.NEW_SPONSORSHIP)
case __StringValue ("PENDING_CHANGE") => Right(SponsorsActivityAction.PENDING_CHANGE)
case __StringValue ("REFUND") => Right(SponsorsActivityAction.REFUND)
case __StringValue ("SPONSOR_MATCH_DISABLED") => Right(SponsorsActivityAction.SPONSOR_MATCH_DISABLED)
case __StringValue ("TIER_CHANGE") => Right(SponsorsActivityAction.TIER_CHANGE)
            case other => Left(DecodingError(s"Can't build SponsorsActivityAction from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsActivityAction] = {
            case SponsorsActivityAction.CANCELLED_SPONSORSHIP => __EnumValue("CANCELLED_SPONSORSHIP")
case SponsorsActivityAction.NEW_SPONSORSHIP => __EnumValue("NEW_SPONSORSHIP")
case SponsorsActivityAction.PENDING_CHANGE => __EnumValue("PENDING_CHANGE")
case SponsorsActivityAction.REFUND => __EnumValue("REFUND")
case SponsorsActivityAction.SPONSOR_MATCH_DISABLED => __EnumValue("SPONSOR_MATCH_DISABLED")
case SponsorsActivityAction.TIER_CHANGE => __EnumValue("TIER_CHANGE")
          }

          val values: scala.collection.immutable.Vector[SponsorsActivityAction] = scala.collection.immutable.Vector(CANCELLED_SPONSORSHIP, NEW_SPONSORSHIP, PENDING_CHANGE, REFUND, SPONSOR_MATCH_DISABLED, TIER_CHANGE)
        }
       
sealed trait SponsorsActivityOrderField extends scala.Product with scala.Serializable { def value: String }
        object SponsorsActivityOrderField {
          case object TIMESTAMP extends SponsorsActivityOrderField { val value: String = "TIMESTAMP" }

          implicit val decoder: ScalarDecoder[SponsorsActivityOrderField] = {
            case __StringValue ("TIMESTAMP") => Right(SponsorsActivityOrderField.TIMESTAMP)
            case other => Left(DecodingError(s"Can't build SponsorsActivityOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsActivityOrderField] = {
            case SponsorsActivityOrderField.TIMESTAMP => __EnumValue("TIMESTAMP")
          }

          val values: scala.collection.immutable.Vector[SponsorsActivityOrderField] = scala.collection.immutable.Vector(TIMESTAMP)
        }
       
sealed trait SponsorsActivityPeriod extends scala.Product with scala.Serializable { def value: String }
        object SponsorsActivityPeriod {
          case object ALL extends SponsorsActivityPeriod { val value: String = "ALL" }
case object DAY extends SponsorsActivityPeriod { val value: String = "DAY" }
case object MONTH extends SponsorsActivityPeriod { val value: String = "MONTH" }
case object WEEK extends SponsorsActivityPeriod { val value: String = "WEEK" }

          implicit val decoder: ScalarDecoder[SponsorsActivityPeriod] = {
            case __StringValue ("ALL") => Right(SponsorsActivityPeriod.ALL)
case __StringValue ("DAY") => Right(SponsorsActivityPeriod.DAY)
case __StringValue ("MONTH") => Right(SponsorsActivityPeriod.MONTH)
case __StringValue ("WEEK") => Right(SponsorsActivityPeriod.WEEK)
            case other => Left(DecodingError(s"Can't build SponsorsActivityPeriod from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsActivityPeriod] = {
            case SponsorsActivityPeriod.ALL => __EnumValue("ALL")
case SponsorsActivityPeriod.DAY => __EnumValue("DAY")
case SponsorsActivityPeriod.MONTH => __EnumValue("MONTH")
case SponsorsActivityPeriod.WEEK => __EnumValue("WEEK")
          }

          val values: scala.collection.immutable.Vector[SponsorsActivityPeriod] = scala.collection.immutable.Vector(ALL, DAY, MONTH, WEEK)
        }
       
sealed trait SponsorsCountryOrRegionCode extends scala.Product with scala.Serializable { def value: String }
        object SponsorsCountryOrRegionCode {
          case object AD extends SponsorsCountryOrRegionCode { val value: String = "AD" }
case object AE extends SponsorsCountryOrRegionCode { val value: String = "AE" }
case object AF extends SponsorsCountryOrRegionCode { val value: String = "AF" }
case object AG extends SponsorsCountryOrRegionCode { val value: String = "AG" }
case object AI extends SponsorsCountryOrRegionCode { val value: String = "AI" }
case object AL extends SponsorsCountryOrRegionCode { val value: String = "AL" }
case object AM extends SponsorsCountryOrRegionCode { val value: String = "AM" }
case object AO extends SponsorsCountryOrRegionCode { val value: String = "AO" }
case object AQ extends SponsorsCountryOrRegionCode { val value: String = "AQ" }
case object AR extends SponsorsCountryOrRegionCode { val value: String = "AR" }
case object AS extends SponsorsCountryOrRegionCode { val value: String = "AS" }
case object AT extends SponsorsCountryOrRegionCode { val value: String = "AT" }
case object AU extends SponsorsCountryOrRegionCode { val value: String = "AU" }
case object AW extends SponsorsCountryOrRegionCode { val value: String = "AW" }
case object AX extends SponsorsCountryOrRegionCode { val value: String = "AX" }
case object AZ extends SponsorsCountryOrRegionCode { val value: String = "AZ" }
case object BA extends SponsorsCountryOrRegionCode { val value: String = "BA" }
case object BB extends SponsorsCountryOrRegionCode { val value: String = "BB" }
case object BD extends SponsorsCountryOrRegionCode { val value: String = "BD" }
case object BE extends SponsorsCountryOrRegionCode { val value: String = "BE" }
case object BF extends SponsorsCountryOrRegionCode { val value: String = "BF" }
case object BG extends SponsorsCountryOrRegionCode { val value: String = "BG" }
case object BH extends SponsorsCountryOrRegionCode { val value: String = "BH" }
case object BI extends SponsorsCountryOrRegionCode { val value: String = "BI" }
case object BJ extends SponsorsCountryOrRegionCode { val value: String = "BJ" }
case object BL extends SponsorsCountryOrRegionCode { val value: String = "BL" }
case object BM extends SponsorsCountryOrRegionCode { val value: String = "BM" }
case object BN extends SponsorsCountryOrRegionCode { val value: String = "BN" }
case object BO extends SponsorsCountryOrRegionCode { val value: String = "BO" }
case object BQ extends SponsorsCountryOrRegionCode { val value: String = "BQ" }
case object BR extends SponsorsCountryOrRegionCode { val value: String = "BR" }
case object BS extends SponsorsCountryOrRegionCode { val value: String = "BS" }
case object BT extends SponsorsCountryOrRegionCode { val value: String = "BT" }
case object BV extends SponsorsCountryOrRegionCode { val value: String = "BV" }
case object BW extends SponsorsCountryOrRegionCode { val value: String = "BW" }
case object BY extends SponsorsCountryOrRegionCode { val value: String = "BY" }
case object BZ extends SponsorsCountryOrRegionCode { val value: String = "BZ" }
case object CA extends SponsorsCountryOrRegionCode { val value: String = "CA" }
case object CC extends SponsorsCountryOrRegionCode { val value: String = "CC" }
case object CD extends SponsorsCountryOrRegionCode { val value: String = "CD" }
case object CF extends SponsorsCountryOrRegionCode { val value: String = "CF" }
case object CG extends SponsorsCountryOrRegionCode { val value: String = "CG" }
case object CH extends SponsorsCountryOrRegionCode { val value: String = "CH" }
case object CI extends SponsorsCountryOrRegionCode { val value: String = "CI" }
case object CK extends SponsorsCountryOrRegionCode { val value: String = "CK" }
case object CL extends SponsorsCountryOrRegionCode { val value: String = "CL" }
case object CM extends SponsorsCountryOrRegionCode { val value: String = "CM" }
case object CN extends SponsorsCountryOrRegionCode { val value: String = "CN" }
case object CO extends SponsorsCountryOrRegionCode { val value: String = "CO" }
case object CR extends SponsorsCountryOrRegionCode { val value: String = "CR" }
case object CV extends SponsorsCountryOrRegionCode { val value: String = "CV" }
case object CW extends SponsorsCountryOrRegionCode { val value: String = "CW" }
case object CX extends SponsorsCountryOrRegionCode { val value: String = "CX" }
case object CY extends SponsorsCountryOrRegionCode { val value: String = "CY" }
case object CZ extends SponsorsCountryOrRegionCode { val value: String = "CZ" }
case object DE extends SponsorsCountryOrRegionCode { val value: String = "DE" }
case object DJ extends SponsorsCountryOrRegionCode { val value: String = "DJ" }
case object DK extends SponsorsCountryOrRegionCode { val value: String = "DK" }
case object DM extends SponsorsCountryOrRegionCode { val value: String = "DM" }
case object DO extends SponsorsCountryOrRegionCode { val value: String = "DO" }
case object DZ extends SponsorsCountryOrRegionCode { val value: String = "DZ" }
case object EC extends SponsorsCountryOrRegionCode { val value: String = "EC" }
case object EE extends SponsorsCountryOrRegionCode { val value: String = "EE" }
case object EG extends SponsorsCountryOrRegionCode { val value: String = "EG" }
case object EH extends SponsorsCountryOrRegionCode { val value: String = "EH" }
case object ER extends SponsorsCountryOrRegionCode { val value: String = "ER" }
case object ES extends SponsorsCountryOrRegionCode { val value: String = "ES" }
case object ET extends SponsorsCountryOrRegionCode { val value: String = "ET" }
case object FI extends SponsorsCountryOrRegionCode { val value: String = "FI" }
case object FJ extends SponsorsCountryOrRegionCode { val value: String = "FJ" }
case object FK extends SponsorsCountryOrRegionCode { val value: String = "FK" }
case object FM extends SponsorsCountryOrRegionCode { val value: String = "FM" }
case object FO extends SponsorsCountryOrRegionCode { val value: String = "FO" }
case object FR extends SponsorsCountryOrRegionCode { val value: String = "FR" }
case object GA extends SponsorsCountryOrRegionCode { val value: String = "GA" }
case object GB extends SponsorsCountryOrRegionCode { val value: String = "GB" }
case object GD extends SponsorsCountryOrRegionCode { val value: String = "GD" }
case object GE extends SponsorsCountryOrRegionCode { val value: String = "GE" }
case object GF extends SponsorsCountryOrRegionCode { val value: String = "GF" }
case object GG extends SponsorsCountryOrRegionCode { val value: String = "GG" }
case object GH extends SponsorsCountryOrRegionCode { val value: String = "GH" }
case object GI extends SponsorsCountryOrRegionCode { val value: String = "GI" }
case object GL extends SponsorsCountryOrRegionCode { val value: String = "GL" }
case object GM extends SponsorsCountryOrRegionCode { val value: String = "GM" }
case object GN extends SponsorsCountryOrRegionCode { val value: String = "GN" }
case object GP extends SponsorsCountryOrRegionCode { val value: String = "GP" }
case object GQ extends SponsorsCountryOrRegionCode { val value: String = "GQ" }
case object GR extends SponsorsCountryOrRegionCode { val value: String = "GR" }
case object GS extends SponsorsCountryOrRegionCode { val value: String = "GS" }
case object GT extends SponsorsCountryOrRegionCode { val value: String = "GT" }
case object GU extends SponsorsCountryOrRegionCode { val value: String = "GU" }
case object GW extends SponsorsCountryOrRegionCode { val value: String = "GW" }
case object GY extends SponsorsCountryOrRegionCode { val value: String = "GY" }
case object HK extends SponsorsCountryOrRegionCode { val value: String = "HK" }
case object HM extends SponsorsCountryOrRegionCode { val value: String = "HM" }
case object HN extends SponsorsCountryOrRegionCode { val value: String = "HN" }
case object HR extends SponsorsCountryOrRegionCode { val value: String = "HR" }
case object HT extends SponsorsCountryOrRegionCode { val value: String = "HT" }
case object HU extends SponsorsCountryOrRegionCode { val value: String = "HU" }
case object ID extends SponsorsCountryOrRegionCode { val value: String = "ID" }
case object IE extends SponsorsCountryOrRegionCode { val value: String = "IE" }
case object IL extends SponsorsCountryOrRegionCode { val value: String = "IL" }
case object IM extends SponsorsCountryOrRegionCode { val value: String = "IM" }
case object IN extends SponsorsCountryOrRegionCode { val value: String = "IN" }
case object IO extends SponsorsCountryOrRegionCode { val value: String = "IO" }
case object IQ extends SponsorsCountryOrRegionCode { val value: String = "IQ" }
case object IR extends SponsorsCountryOrRegionCode { val value: String = "IR" }
case object IS extends SponsorsCountryOrRegionCode { val value: String = "IS" }
case object IT extends SponsorsCountryOrRegionCode { val value: String = "IT" }
case object JE extends SponsorsCountryOrRegionCode { val value: String = "JE" }
case object JM extends SponsorsCountryOrRegionCode { val value: String = "JM" }
case object JO extends SponsorsCountryOrRegionCode { val value: String = "JO" }
case object JP extends SponsorsCountryOrRegionCode { val value: String = "JP" }
case object KE extends SponsorsCountryOrRegionCode { val value: String = "KE" }
case object KG extends SponsorsCountryOrRegionCode { val value: String = "KG" }
case object KH extends SponsorsCountryOrRegionCode { val value: String = "KH" }
case object KI extends SponsorsCountryOrRegionCode { val value: String = "KI" }
case object KM extends SponsorsCountryOrRegionCode { val value: String = "KM" }
case object KN extends SponsorsCountryOrRegionCode { val value: String = "KN" }
case object KR extends SponsorsCountryOrRegionCode { val value: String = "KR" }
case object KW extends SponsorsCountryOrRegionCode { val value: String = "KW" }
case object KY extends SponsorsCountryOrRegionCode { val value: String = "KY" }
case object KZ extends SponsorsCountryOrRegionCode { val value: String = "KZ" }
case object LA extends SponsorsCountryOrRegionCode { val value: String = "LA" }
case object LB extends SponsorsCountryOrRegionCode { val value: String = "LB" }
case object LC extends SponsorsCountryOrRegionCode { val value: String = "LC" }
case object LI extends SponsorsCountryOrRegionCode { val value: String = "LI" }
case object LK extends SponsorsCountryOrRegionCode { val value: String = "LK" }
case object LR extends SponsorsCountryOrRegionCode { val value: String = "LR" }
case object LS extends SponsorsCountryOrRegionCode { val value: String = "LS" }
case object LT extends SponsorsCountryOrRegionCode { val value: String = "LT" }
case object LU extends SponsorsCountryOrRegionCode { val value: String = "LU" }
case object LV extends SponsorsCountryOrRegionCode { val value: String = "LV" }
case object LY extends SponsorsCountryOrRegionCode { val value: String = "LY" }
case object MA extends SponsorsCountryOrRegionCode { val value: String = "MA" }
case object MC extends SponsorsCountryOrRegionCode { val value: String = "MC" }
case object MD extends SponsorsCountryOrRegionCode { val value: String = "MD" }
case object ME extends SponsorsCountryOrRegionCode { val value: String = "ME" }
case object MF extends SponsorsCountryOrRegionCode { val value: String = "MF" }
case object MG extends SponsorsCountryOrRegionCode { val value: String = "MG" }
case object MH extends SponsorsCountryOrRegionCode { val value: String = "MH" }
case object MK extends SponsorsCountryOrRegionCode { val value: String = "MK" }
case object ML extends SponsorsCountryOrRegionCode { val value: String = "ML" }
case object MM extends SponsorsCountryOrRegionCode { val value: String = "MM" }
case object MN extends SponsorsCountryOrRegionCode { val value: String = "MN" }
case object MO extends SponsorsCountryOrRegionCode { val value: String = "MO" }
case object MP extends SponsorsCountryOrRegionCode { val value: String = "MP" }
case object MQ extends SponsorsCountryOrRegionCode { val value: String = "MQ" }
case object MR extends SponsorsCountryOrRegionCode { val value: String = "MR" }
case object MS extends SponsorsCountryOrRegionCode { val value: String = "MS" }
case object MT extends SponsorsCountryOrRegionCode { val value: String = "MT" }
case object MU extends SponsorsCountryOrRegionCode { val value: String = "MU" }
case object MV extends SponsorsCountryOrRegionCode { val value: String = "MV" }
case object MW extends SponsorsCountryOrRegionCode { val value: String = "MW" }
case object MX extends SponsorsCountryOrRegionCode { val value: String = "MX" }
case object MY extends SponsorsCountryOrRegionCode { val value: String = "MY" }
case object MZ extends SponsorsCountryOrRegionCode { val value: String = "MZ" }
case object NA extends SponsorsCountryOrRegionCode { val value: String = "NA" }
case object NC extends SponsorsCountryOrRegionCode { val value: String = "NC" }
case object NE extends SponsorsCountryOrRegionCode { val value: String = "NE" }
case object NF extends SponsorsCountryOrRegionCode { val value: String = "NF" }
case object NG extends SponsorsCountryOrRegionCode { val value: String = "NG" }
case object NI extends SponsorsCountryOrRegionCode { val value: String = "NI" }
case object NL extends SponsorsCountryOrRegionCode { val value: String = "NL" }
case object NO extends SponsorsCountryOrRegionCode { val value: String = "NO" }
case object NP extends SponsorsCountryOrRegionCode { val value: String = "NP" }
case object NR extends SponsorsCountryOrRegionCode { val value: String = "NR" }
case object NU extends SponsorsCountryOrRegionCode { val value: String = "NU" }
case object NZ extends SponsorsCountryOrRegionCode { val value: String = "NZ" }
case object OM extends SponsorsCountryOrRegionCode { val value: String = "OM" }
case object PA extends SponsorsCountryOrRegionCode { val value: String = "PA" }
case object PE extends SponsorsCountryOrRegionCode { val value: String = "PE" }
case object PF extends SponsorsCountryOrRegionCode { val value: String = "PF" }
case object PG extends SponsorsCountryOrRegionCode { val value: String = "PG" }
case object PH extends SponsorsCountryOrRegionCode { val value: String = "PH" }
case object PK extends SponsorsCountryOrRegionCode { val value: String = "PK" }
case object PL extends SponsorsCountryOrRegionCode { val value: String = "PL" }
case object PM extends SponsorsCountryOrRegionCode { val value: String = "PM" }
case object PN extends SponsorsCountryOrRegionCode { val value: String = "PN" }
case object PR extends SponsorsCountryOrRegionCode { val value: String = "PR" }
case object PS extends SponsorsCountryOrRegionCode { val value: String = "PS" }
case object PT extends SponsorsCountryOrRegionCode { val value: String = "PT" }
case object PW extends SponsorsCountryOrRegionCode { val value: String = "PW" }
case object PY extends SponsorsCountryOrRegionCode { val value: String = "PY" }
case object QA extends SponsorsCountryOrRegionCode { val value: String = "QA" }
case object RE extends SponsorsCountryOrRegionCode { val value: String = "RE" }
case object RO extends SponsorsCountryOrRegionCode { val value: String = "RO" }
case object RS extends SponsorsCountryOrRegionCode { val value: String = "RS" }
case object RU extends SponsorsCountryOrRegionCode { val value: String = "RU" }
case object RW extends SponsorsCountryOrRegionCode { val value: String = "RW" }
case object SA extends SponsorsCountryOrRegionCode { val value: String = "SA" }
case object SB extends SponsorsCountryOrRegionCode { val value: String = "SB" }
case object SC extends SponsorsCountryOrRegionCode { val value: String = "SC" }
case object SD extends SponsorsCountryOrRegionCode { val value: String = "SD" }
case object SE extends SponsorsCountryOrRegionCode { val value: String = "SE" }
case object SG extends SponsorsCountryOrRegionCode { val value: String = "SG" }
case object SH extends SponsorsCountryOrRegionCode { val value: String = "SH" }
case object SI extends SponsorsCountryOrRegionCode { val value: String = "SI" }
case object SJ extends SponsorsCountryOrRegionCode { val value: String = "SJ" }
case object SK extends SponsorsCountryOrRegionCode { val value: String = "SK" }
case object SL extends SponsorsCountryOrRegionCode { val value: String = "SL" }
case object SM extends SponsorsCountryOrRegionCode { val value: String = "SM" }
case object SN extends SponsorsCountryOrRegionCode { val value: String = "SN" }
case object SO extends SponsorsCountryOrRegionCode { val value: String = "SO" }
case object SR extends SponsorsCountryOrRegionCode { val value: String = "SR" }
case object SS extends SponsorsCountryOrRegionCode { val value: String = "SS" }
case object ST extends SponsorsCountryOrRegionCode { val value: String = "ST" }
case object SV extends SponsorsCountryOrRegionCode { val value: String = "SV" }
case object SX extends SponsorsCountryOrRegionCode { val value: String = "SX" }
case object SZ extends SponsorsCountryOrRegionCode { val value: String = "SZ" }
case object TC extends SponsorsCountryOrRegionCode { val value: String = "TC" }
case object TD extends SponsorsCountryOrRegionCode { val value: String = "TD" }
case object TF extends SponsorsCountryOrRegionCode { val value: String = "TF" }
case object TG extends SponsorsCountryOrRegionCode { val value: String = "TG" }
case object TH extends SponsorsCountryOrRegionCode { val value: String = "TH" }
case object TJ extends SponsorsCountryOrRegionCode { val value: String = "TJ" }
case object TK extends SponsorsCountryOrRegionCode { val value: String = "TK" }
case object TL extends SponsorsCountryOrRegionCode { val value: String = "TL" }
case object TM extends SponsorsCountryOrRegionCode { val value: String = "TM" }
case object TN extends SponsorsCountryOrRegionCode { val value: String = "TN" }
case object TO extends SponsorsCountryOrRegionCode { val value: String = "TO" }
case object TR extends SponsorsCountryOrRegionCode { val value: String = "TR" }
case object TT extends SponsorsCountryOrRegionCode { val value: String = "TT" }
case object TV extends SponsorsCountryOrRegionCode { val value: String = "TV" }
case object TW extends SponsorsCountryOrRegionCode { val value: String = "TW" }
case object TZ extends SponsorsCountryOrRegionCode { val value: String = "TZ" }
case object UA extends SponsorsCountryOrRegionCode { val value: String = "UA" }
case object UG extends SponsorsCountryOrRegionCode { val value: String = "UG" }
case object UM extends SponsorsCountryOrRegionCode { val value: String = "UM" }
case object US extends SponsorsCountryOrRegionCode { val value: String = "US" }
case object UY extends SponsorsCountryOrRegionCode { val value: String = "UY" }
case object UZ extends SponsorsCountryOrRegionCode { val value: String = "UZ" }
case object VA extends SponsorsCountryOrRegionCode { val value: String = "VA" }
case object VC extends SponsorsCountryOrRegionCode { val value: String = "VC" }
case object VE extends SponsorsCountryOrRegionCode { val value: String = "VE" }
case object VG extends SponsorsCountryOrRegionCode { val value: String = "VG" }
case object VI extends SponsorsCountryOrRegionCode { val value: String = "VI" }
case object VN extends SponsorsCountryOrRegionCode { val value: String = "VN" }
case object VU extends SponsorsCountryOrRegionCode { val value: String = "VU" }
case object WF extends SponsorsCountryOrRegionCode { val value: String = "WF" }
case object WS extends SponsorsCountryOrRegionCode { val value: String = "WS" }
case object YE extends SponsorsCountryOrRegionCode { val value: String = "YE" }
case object YT extends SponsorsCountryOrRegionCode { val value: String = "YT" }
case object ZA extends SponsorsCountryOrRegionCode { val value: String = "ZA" }
case object ZM extends SponsorsCountryOrRegionCode { val value: String = "ZM" }
case object ZW extends SponsorsCountryOrRegionCode { val value: String = "ZW" }

          implicit val decoder: ScalarDecoder[SponsorsCountryOrRegionCode] = {
            case __StringValue ("AD") => Right(SponsorsCountryOrRegionCode.AD)
case __StringValue ("AE") => Right(SponsorsCountryOrRegionCode.AE)
case __StringValue ("AF") => Right(SponsorsCountryOrRegionCode.AF)
case __StringValue ("AG") => Right(SponsorsCountryOrRegionCode.AG)
case __StringValue ("AI") => Right(SponsorsCountryOrRegionCode.AI)
case __StringValue ("AL") => Right(SponsorsCountryOrRegionCode.AL)
case __StringValue ("AM") => Right(SponsorsCountryOrRegionCode.AM)
case __StringValue ("AO") => Right(SponsorsCountryOrRegionCode.AO)
case __StringValue ("AQ") => Right(SponsorsCountryOrRegionCode.AQ)
case __StringValue ("AR") => Right(SponsorsCountryOrRegionCode.AR)
case __StringValue ("AS") => Right(SponsorsCountryOrRegionCode.AS)
case __StringValue ("AT") => Right(SponsorsCountryOrRegionCode.AT)
case __StringValue ("AU") => Right(SponsorsCountryOrRegionCode.AU)
case __StringValue ("AW") => Right(SponsorsCountryOrRegionCode.AW)
case __StringValue ("AX") => Right(SponsorsCountryOrRegionCode.AX)
case __StringValue ("AZ") => Right(SponsorsCountryOrRegionCode.AZ)
case __StringValue ("BA") => Right(SponsorsCountryOrRegionCode.BA)
case __StringValue ("BB") => Right(SponsorsCountryOrRegionCode.BB)
case __StringValue ("BD") => Right(SponsorsCountryOrRegionCode.BD)
case __StringValue ("BE") => Right(SponsorsCountryOrRegionCode.BE)
case __StringValue ("BF") => Right(SponsorsCountryOrRegionCode.BF)
case __StringValue ("BG") => Right(SponsorsCountryOrRegionCode.BG)
case __StringValue ("BH") => Right(SponsorsCountryOrRegionCode.BH)
case __StringValue ("BI") => Right(SponsorsCountryOrRegionCode.BI)
case __StringValue ("BJ") => Right(SponsorsCountryOrRegionCode.BJ)
case __StringValue ("BL") => Right(SponsorsCountryOrRegionCode.BL)
case __StringValue ("BM") => Right(SponsorsCountryOrRegionCode.BM)
case __StringValue ("BN") => Right(SponsorsCountryOrRegionCode.BN)
case __StringValue ("BO") => Right(SponsorsCountryOrRegionCode.BO)
case __StringValue ("BQ") => Right(SponsorsCountryOrRegionCode.BQ)
case __StringValue ("BR") => Right(SponsorsCountryOrRegionCode.BR)
case __StringValue ("BS") => Right(SponsorsCountryOrRegionCode.BS)
case __StringValue ("BT") => Right(SponsorsCountryOrRegionCode.BT)
case __StringValue ("BV") => Right(SponsorsCountryOrRegionCode.BV)
case __StringValue ("BW") => Right(SponsorsCountryOrRegionCode.BW)
case __StringValue ("BY") => Right(SponsorsCountryOrRegionCode.BY)
case __StringValue ("BZ") => Right(SponsorsCountryOrRegionCode.BZ)
case __StringValue ("CA") => Right(SponsorsCountryOrRegionCode.CA)
case __StringValue ("CC") => Right(SponsorsCountryOrRegionCode.CC)
case __StringValue ("CD") => Right(SponsorsCountryOrRegionCode.CD)
case __StringValue ("CF") => Right(SponsorsCountryOrRegionCode.CF)
case __StringValue ("CG") => Right(SponsorsCountryOrRegionCode.CG)
case __StringValue ("CH") => Right(SponsorsCountryOrRegionCode.CH)
case __StringValue ("CI") => Right(SponsorsCountryOrRegionCode.CI)
case __StringValue ("CK") => Right(SponsorsCountryOrRegionCode.CK)
case __StringValue ("CL") => Right(SponsorsCountryOrRegionCode.CL)
case __StringValue ("CM") => Right(SponsorsCountryOrRegionCode.CM)
case __StringValue ("CN") => Right(SponsorsCountryOrRegionCode.CN)
case __StringValue ("CO") => Right(SponsorsCountryOrRegionCode.CO)
case __StringValue ("CR") => Right(SponsorsCountryOrRegionCode.CR)
case __StringValue ("CV") => Right(SponsorsCountryOrRegionCode.CV)
case __StringValue ("CW") => Right(SponsorsCountryOrRegionCode.CW)
case __StringValue ("CX") => Right(SponsorsCountryOrRegionCode.CX)
case __StringValue ("CY") => Right(SponsorsCountryOrRegionCode.CY)
case __StringValue ("CZ") => Right(SponsorsCountryOrRegionCode.CZ)
case __StringValue ("DE") => Right(SponsorsCountryOrRegionCode.DE)
case __StringValue ("DJ") => Right(SponsorsCountryOrRegionCode.DJ)
case __StringValue ("DK") => Right(SponsorsCountryOrRegionCode.DK)
case __StringValue ("DM") => Right(SponsorsCountryOrRegionCode.DM)
case __StringValue ("DO") => Right(SponsorsCountryOrRegionCode.DO)
case __StringValue ("DZ") => Right(SponsorsCountryOrRegionCode.DZ)
case __StringValue ("EC") => Right(SponsorsCountryOrRegionCode.EC)
case __StringValue ("EE") => Right(SponsorsCountryOrRegionCode.EE)
case __StringValue ("EG") => Right(SponsorsCountryOrRegionCode.EG)
case __StringValue ("EH") => Right(SponsorsCountryOrRegionCode.EH)
case __StringValue ("ER") => Right(SponsorsCountryOrRegionCode.ER)
case __StringValue ("ES") => Right(SponsorsCountryOrRegionCode.ES)
case __StringValue ("ET") => Right(SponsorsCountryOrRegionCode.ET)
case __StringValue ("FI") => Right(SponsorsCountryOrRegionCode.FI)
case __StringValue ("FJ") => Right(SponsorsCountryOrRegionCode.FJ)
case __StringValue ("FK") => Right(SponsorsCountryOrRegionCode.FK)
case __StringValue ("FM") => Right(SponsorsCountryOrRegionCode.FM)
case __StringValue ("FO") => Right(SponsorsCountryOrRegionCode.FO)
case __StringValue ("FR") => Right(SponsorsCountryOrRegionCode.FR)
case __StringValue ("GA") => Right(SponsorsCountryOrRegionCode.GA)
case __StringValue ("GB") => Right(SponsorsCountryOrRegionCode.GB)
case __StringValue ("GD") => Right(SponsorsCountryOrRegionCode.GD)
case __StringValue ("GE") => Right(SponsorsCountryOrRegionCode.GE)
case __StringValue ("GF") => Right(SponsorsCountryOrRegionCode.GF)
case __StringValue ("GG") => Right(SponsorsCountryOrRegionCode.GG)
case __StringValue ("GH") => Right(SponsorsCountryOrRegionCode.GH)
case __StringValue ("GI") => Right(SponsorsCountryOrRegionCode.GI)
case __StringValue ("GL") => Right(SponsorsCountryOrRegionCode.GL)
case __StringValue ("GM") => Right(SponsorsCountryOrRegionCode.GM)
case __StringValue ("GN") => Right(SponsorsCountryOrRegionCode.GN)
case __StringValue ("GP") => Right(SponsorsCountryOrRegionCode.GP)
case __StringValue ("GQ") => Right(SponsorsCountryOrRegionCode.GQ)
case __StringValue ("GR") => Right(SponsorsCountryOrRegionCode.GR)
case __StringValue ("GS") => Right(SponsorsCountryOrRegionCode.GS)
case __StringValue ("GT") => Right(SponsorsCountryOrRegionCode.GT)
case __StringValue ("GU") => Right(SponsorsCountryOrRegionCode.GU)
case __StringValue ("GW") => Right(SponsorsCountryOrRegionCode.GW)
case __StringValue ("GY") => Right(SponsorsCountryOrRegionCode.GY)
case __StringValue ("HK") => Right(SponsorsCountryOrRegionCode.HK)
case __StringValue ("HM") => Right(SponsorsCountryOrRegionCode.HM)
case __StringValue ("HN") => Right(SponsorsCountryOrRegionCode.HN)
case __StringValue ("HR") => Right(SponsorsCountryOrRegionCode.HR)
case __StringValue ("HT") => Right(SponsorsCountryOrRegionCode.HT)
case __StringValue ("HU") => Right(SponsorsCountryOrRegionCode.HU)
case __StringValue ("ID") => Right(SponsorsCountryOrRegionCode.ID)
case __StringValue ("IE") => Right(SponsorsCountryOrRegionCode.IE)
case __StringValue ("IL") => Right(SponsorsCountryOrRegionCode.IL)
case __StringValue ("IM") => Right(SponsorsCountryOrRegionCode.IM)
case __StringValue ("IN") => Right(SponsorsCountryOrRegionCode.IN)
case __StringValue ("IO") => Right(SponsorsCountryOrRegionCode.IO)
case __StringValue ("IQ") => Right(SponsorsCountryOrRegionCode.IQ)
case __StringValue ("IR") => Right(SponsorsCountryOrRegionCode.IR)
case __StringValue ("IS") => Right(SponsorsCountryOrRegionCode.IS)
case __StringValue ("IT") => Right(SponsorsCountryOrRegionCode.IT)
case __StringValue ("JE") => Right(SponsorsCountryOrRegionCode.JE)
case __StringValue ("JM") => Right(SponsorsCountryOrRegionCode.JM)
case __StringValue ("JO") => Right(SponsorsCountryOrRegionCode.JO)
case __StringValue ("JP") => Right(SponsorsCountryOrRegionCode.JP)
case __StringValue ("KE") => Right(SponsorsCountryOrRegionCode.KE)
case __StringValue ("KG") => Right(SponsorsCountryOrRegionCode.KG)
case __StringValue ("KH") => Right(SponsorsCountryOrRegionCode.KH)
case __StringValue ("KI") => Right(SponsorsCountryOrRegionCode.KI)
case __StringValue ("KM") => Right(SponsorsCountryOrRegionCode.KM)
case __StringValue ("KN") => Right(SponsorsCountryOrRegionCode.KN)
case __StringValue ("KR") => Right(SponsorsCountryOrRegionCode.KR)
case __StringValue ("KW") => Right(SponsorsCountryOrRegionCode.KW)
case __StringValue ("KY") => Right(SponsorsCountryOrRegionCode.KY)
case __StringValue ("KZ") => Right(SponsorsCountryOrRegionCode.KZ)
case __StringValue ("LA") => Right(SponsorsCountryOrRegionCode.LA)
case __StringValue ("LB") => Right(SponsorsCountryOrRegionCode.LB)
case __StringValue ("LC") => Right(SponsorsCountryOrRegionCode.LC)
case __StringValue ("LI") => Right(SponsorsCountryOrRegionCode.LI)
case __StringValue ("LK") => Right(SponsorsCountryOrRegionCode.LK)
case __StringValue ("LR") => Right(SponsorsCountryOrRegionCode.LR)
case __StringValue ("LS") => Right(SponsorsCountryOrRegionCode.LS)
case __StringValue ("LT") => Right(SponsorsCountryOrRegionCode.LT)
case __StringValue ("LU") => Right(SponsorsCountryOrRegionCode.LU)
case __StringValue ("LV") => Right(SponsorsCountryOrRegionCode.LV)
case __StringValue ("LY") => Right(SponsorsCountryOrRegionCode.LY)
case __StringValue ("MA") => Right(SponsorsCountryOrRegionCode.MA)
case __StringValue ("MC") => Right(SponsorsCountryOrRegionCode.MC)
case __StringValue ("MD") => Right(SponsorsCountryOrRegionCode.MD)
case __StringValue ("ME") => Right(SponsorsCountryOrRegionCode.ME)
case __StringValue ("MF") => Right(SponsorsCountryOrRegionCode.MF)
case __StringValue ("MG") => Right(SponsorsCountryOrRegionCode.MG)
case __StringValue ("MH") => Right(SponsorsCountryOrRegionCode.MH)
case __StringValue ("MK") => Right(SponsorsCountryOrRegionCode.MK)
case __StringValue ("ML") => Right(SponsorsCountryOrRegionCode.ML)
case __StringValue ("MM") => Right(SponsorsCountryOrRegionCode.MM)
case __StringValue ("MN") => Right(SponsorsCountryOrRegionCode.MN)
case __StringValue ("MO") => Right(SponsorsCountryOrRegionCode.MO)
case __StringValue ("MP") => Right(SponsorsCountryOrRegionCode.MP)
case __StringValue ("MQ") => Right(SponsorsCountryOrRegionCode.MQ)
case __StringValue ("MR") => Right(SponsorsCountryOrRegionCode.MR)
case __StringValue ("MS") => Right(SponsorsCountryOrRegionCode.MS)
case __StringValue ("MT") => Right(SponsorsCountryOrRegionCode.MT)
case __StringValue ("MU") => Right(SponsorsCountryOrRegionCode.MU)
case __StringValue ("MV") => Right(SponsorsCountryOrRegionCode.MV)
case __StringValue ("MW") => Right(SponsorsCountryOrRegionCode.MW)
case __StringValue ("MX") => Right(SponsorsCountryOrRegionCode.MX)
case __StringValue ("MY") => Right(SponsorsCountryOrRegionCode.MY)
case __StringValue ("MZ") => Right(SponsorsCountryOrRegionCode.MZ)
case __StringValue ("NA") => Right(SponsorsCountryOrRegionCode.NA)
case __StringValue ("NC") => Right(SponsorsCountryOrRegionCode.NC)
case __StringValue ("NE") => Right(SponsorsCountryOrRegionCode.NE)
case __StringValue ("NF") => Right(SponsorsCountryOrRegionCode.NF)
case __StringValue ("NG") => Right(SponsorsCountryOrRegionCode.NG)
case __StringValue ("NI") => Right(SponsorsCountryOrRegionCode.NI)
case __StringValue ("NL") => Right(SponsorsCountryOrRegionCode.NL)
case __StringValue ("NO") => Right(SponsorsCountryOrRegionCode.NO)
case __StringValue ("NP") => Right(SponsorsCountryOrRegionCode.NP)
case __StringValue ("NR") => Right(SponsorsCountryOrRegionCode.NR)
case __StringValue ("NU") => Right(SponsorsCountryOrRegionCode.NU)
case __StringValue ("NZ") => Right(SponsorsCountryOrRegionCode.NZ)
case __StringValue ("OM") => Right(SponsorsCountryOrRegionCode.OM)
case __StringValue ("PA") => Right(SponsorsCountryOrRegionCode.PA)
case __StringValue ("PE") => Right(SponsorsCountryOrRegionCode.PE)
case __StringValue ("PF") => Right(SponsorsCountryOrRegionCode.PF)
case __StringValue ("PG") => Right(SponsorsCountryOrRegionCode.PG)
case __StringValue ("PH") => Right(SponsorsCountryOrRegionCode.PH)
case __StringValue ("PK") => Right(SponsorsCountryOrRegionCode.PK)
case __StringValue ("PL") => Right(SponsorsCountryOrRegionCode.PL)
case __StringValue ("PM") => Right(SponsorsCountryOrRegionCode.PM)
case __StringValue ("PN") => Right(SponsorsCountryOrRegionCode.PN)
case __StringValue ("PR") => Right(SponsorsCountryOrRegionCode.PR)
case __StringValue ("PS") => Right(SponsorsCountryOrRegionCode.PS)
case __StringValue ("PT") => Right(SponsorsCountryOrRegionCode.PT)
case __StringValue ("PW") => Right(SponsorsCountryOrRegionCode.PW)
case __StringValue ("PY") => Right(SponsorsCountryOrRegionCode.PY)
case __StringValue ("QA") => Right(SponsorsCountryOrRegionCode.QA)
case __StringValue ("RE") => Right(SponsorsCountryOrRegionCode.RE)
case __StringValue ("RO") => Right(SponsorsCountryOrRegionCode.RO)
case __StringValue ("RS") => Right(SponsorsCountryOrRegionCode.RS)
case __StringValue ("RU") => Right(SponsorsCountryOrRegionCode.RU)
case __StringValue ("RW") => Right(SponsorsCountryOrRegionCode.RW)
case __StringValue ("SA") => Right(SponsorsCountryOrRegionCode.SA)
case __StringValue ("SB") => Right(SponsorsCountryOrRegionCode.SB)
case __StringValue ("SC") => Right(SponsorsCountryOrRegionCode.SC)
case __StringValue ("SD") => Right(SponsorsCountryOrRegionCode.SD)
case __StringValue ("SE") => Right(SponsorsCountryOrRegionCode.SE)
case __StringValue ("SG") => Right(SponsorsCountryOrRegionCode.SG)
case __StringValue ("SH") => Right(SponsorsCountryOrRegionCode.SH)
case __StringValue ("SI") => Right(SponsorsCountryOrRegionCode.SI)
case __StringValue ("SJ") => Right(SponsorsCountryOrRegionCode.SJ)
case __StringValue ("SK") => Right(SponsorsCountryOrRegionCode.SK)
case __StringValue ("SL") => Right(SponsorsCountryOrRegionCode.SL)
case __StringValue ("SM") => Right(SponsorsCountryOrRegionCode.SM)
case __StringValue ("SN") => Right(SponsorsCountryOrRegionCode.SN)
case __StringValue ("SO") => Right(SponsorsCountryOrRegionCode.SO)
case __StringValue ("SR") => Right(SponsorsCountryOrRegionCode.SR)
case __StringValue ("SS") => Right(SponsorsCountryOrRegionCode.SS)
case __StringValue ("ST") => Right(SponsorsCountryOrRegionCode.ST)
case __StringValue ("SV") => Right(SponsorsCountryOrRegionCode.SV)
case __StringValue ("SX") => Right(SponsorsCountryOrRegionCode.SX)
case __StringValue ("SZ") => Right(SponsorsCountryOrRegionCode.SZ)
case __StringValue ("TC") => Right(SponsorsCountryOrRegionCode.TC)
case __StringValue ("TD") => Right(SponsorsCountryOrRegionCode.TD)
case __StringValue ("TF") => Right(SponsorsCountryOrRegionCode.TF)
case __StringValue ("TG") => Right(SponsorsCountryOrRegionCode.TG)
case __StringValue ("TH") => Right(SponsorsCountryOrRegionCode.TH)
case __StringValue ("TJ") => Right(SponsorsCountryOrRegionCode.TJ)
case __StringValue ("TK") => Right(SponsorsCountryOrRegionCode.TK)
case __StringValue ("TL") => Right(SponsorsCountryOrRegionCode.TL)
case __StringValue ("TM") => Right(SponsorsCountryOrRegionCode.TM)
case __StringValue ("TN") => Right(SponsorsCountryOrRegionCode.TN)
case __StringValue ("TO") => Right(SponsorsCountryOrRegionCode.TO)
case __StringValue ("TR") => Right(SponsorsCountryOrRegionCode.TR)
case __StringValue ("TT") => Right(SponsorsCountryOrRegionCode.TT)
case __StringValue ("TV") => Right(SponsorsCountryOrRegionCode.TV)
case __StringValue ("TW") => Right(SponsorsCountryOrRegionCode.TW)
case __StringValue ("TZ") => Right(SponsorsCountryOrRegionCode.TZ)
case __StringValue ("UA") => Right(SponsorsCountryOrRegionCode.UA)
case __StringValue ("UG") => Right(SponsorsCountryOrRegionCode.UG)
case __StringValue ("UM") => Right(SponsorsCountryOrRegionCode.UM)
case __StringValue ("US") => Right(SponsorsCountryOrRegionCode.US)
case __StringValue ("UY") => Right(SponsorsCountryOrRegionCode.UY)
case __StringValue ("UZ") => Right(SponsorsCountryOrRegionCode.UZ)
case __StringValue ("VA") => Right(SponsorsCountryOrRegionCode.VA)
case __StringValue ("VC") => Right(SponsorsCountryOrRegionCode.VC)
case __StringValue ("VE") => Right(SponsorsCountryOrRegionCode.VE)
case __StringValue ("VG") => Right(SponsorsCountryOrRegionCode.VG)
case __StringValue ("VI") => Right(SponsorsCountryOrRegionCode.VI)
case __StringValue ("VN") => Right(SponsorsCountryOrRegionCode.VN)
case __StringValue ("VU") => Right(SponsorsCountryOrRegionCode.VU)
case __StringValue ("WF") => Right(SponsorsCountryOrRegionCode.WF)
case __StringValue ("WS") => Right(SponsorsCountryOrRegionCode.WS)
case __StringValue ("YE") => Right(SponsorsCountryOrRegionCode.YE)
case __StringValue ("YT") => Right(SponsorsCountryOrRegionCode.YT)
case __StringValue ("ZA") => Right(SponsorsCountryOrRegionCode.ZA)
case __StringValue ("ZM") => Right(SponsorsCountryOrRegionCode.ZM)
case __StringValue ("ZW") => Right(SponsorsCountryOrRegionCode.ZW)
            case other => Left(DecodingError(s"Can't build SponsorsCountryOrRegionCode from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsCountryOrRegionCode] = {
            case SponsorsCountryOrRegionCode.AD => __EnumValue("AD")
case SponsorsCountryOrRegionCode.AE => __EnumValue("AE")
case SponsorsCountryOrRegionCode.AF => __EnumValue("AF")
case SponsorsCountryOrRegionCode.AG => __EnumValue("AG")
case SponsorsCountryOrRegionCode.AI => __EnumValue("AI")
case SponsorsCountryOrRegionCode.AL => __EnumValue("AL")
case SponsorsCountryOrRegionCode.AM => __EnumValue("AM")
case SponsorsCountryOrRegionCode.AO => __EnumValue("AO")
case SponsorsCountryOrRegionCode.AQ => __EnumValue("AQ")
case SponsorsCountryOrRegionCode.AR => __EnumValue("AR")
case SponsorsCountryOrRegionCode.AS => __EnumValue("AS")
case SponsorsCountryOrRegionCode.AT => __EnumValue("AT")
case SponsorsCountryOrRegionCode.AU => __EnumValue("AU")
case SponsorsCountryOrRegionCode.AW => __EnumValue("AW")
case SponsorsCountryOrRegionCode.AX => __EnumValue("AX")
case SponsorsCountryOrRegionCode.AZ => __EnumValue("AZ")
case SponsorsCountryOrRegionCode.BA => __EnumValue("BA")
case SponsorsCountryOrRegionCode.BB => __EnumValue("BB")
case SponsorsCountryOrRegionCode.BD => __EnumValue("BD")
case SponsorsCountryOrRegionCode.BE => __EnumValue("BE")
case SponsorsCountryOrRegionCode.BF => __EnumValue("BF")
case SponsorsCountryOrRegionCode.BG => __EnumValue("BG")
case SponsorsCountryOrRegionCode.BH => __EnumValue("BH")
case SponsorsCountryOrRegionCode.BI => __EnumValue("BI")
case SponsorsCountryOrRegionCode.BJ => __EnumValue("BJ")
case SponsorsCountryOrRegionCode.BL => __EnumValue("BL")
case SponsorsCountryOrRegionCode.BM => __EnumValue("BM")
case SponsorsCountryOrRegionCode.BN => __EnumValue("BN")
case SponsorsCountryOrRegionCode.BO => __EnumValue("BO")
case SponsorsCountryOrRegionCode.BQ => __EnumValue("BQ")
case SponsorsCountryOrRegionCode.BR => __EnumValue("BR")
case SponsorsCountryOrRegionCode.BS => __EnumValue("BS")
case SponsorsCountryOrRegionCode.BT => __EnumValue("BT")
case SponsorsCountryOrRegionCode.BV => __EnumValue("BV")
case SponsorsCountryOrRegionCode.BW => __EnumValue("BW")
case SponsorsCountryOrRegionCode.BY => __EnumValue("BY")
case SponsorsCountryOrRegionCode.BZ => __EnumValue("BZ")
case SponsorsCountryOrRegionCode.CA => __EnumValue("CA")
case SponsorsCountryOrRegionCode.CC => __EnumValue("CC")
case SponsorsCountryOrRegionCode.CD => __EnumValue("CD")
case SponsorsCountryOrRegionCode.CF => __EnumValue("CF")
case SponsorsCountryOrRegionCode.CG => __EnumValue("CG")
case SponsorsCountryOrRegionCode.CH => __EnumValue("CH")
case SponsorsCountryOrRegionCode.CI => __EnumValue("CI")
case SponsorsCountryOrRegionCode.CK => __EnumValue("CK")
case SponsorsCountryOrRegionCode.CL => __EnumValue("CL")
case SponsorsCountryOrRegionCode.CM => __EnumValue("CM")
case SponsorsCountryOrRegionCode.CN => __EnumValue("CN")
case SponsorsCountryOrRegionCode.CO => __EnumValue("CO")
case SponsorsCountryOrRegionCode.CR => __EnumValue("CR")
case SponsorsCountryOrRegionCode.CV => __EnumValue("CV")
case SponsorsCountryOrRegionCode.CW => __EnumValue("CW")
case SponsorsCountryOrRegionCode.CX => __EnumValue("CX")
case SponsorsCountryOrRegionCode.CY => __EnumValue("CY")
case SponsorsCountryOrRegionCode.CZ => __EnumValue("CZ")
case SponsorsCountryOrRegionCode.DE => __EnumValue("DE")
case SponsorsCountryOrRegionCode.DJ => __EnumValue("DJ")
case SponsorsCountryOrRegionCode.DK => __EnumValue("DK")
case SponsorsCountryOrRegionCode.DM => __EnumValue("DM")
case SponsorsCountryOrRegionCode.DO => __EnumValue("DO")
case SponsorsCountryOrRegionCode.DZ => __EnumValue("DZ")
case SponsorsCountryOrRegionCode.EC => __EnumValue("EC")
case SponsorsCountryOrRegionCode.EE => __EnumValue("EE")
case SponsorsCountryOrRegionCode.EG => __EnumValue("EG")
case SponsorsCountryOrRegionCode.EH => __EnumValue("EH")
case SponsorsCountryOrRegionCode.ER => __EnumValue("ER")
case SponsorsCountryOrRegionCode.ES => __EnumValue("ES")
case SponsorsCountryOrRegionCode.ET => __EnumValue("ET")
case SponsorsCountryOrRegionCode.FI => __EnumValue("FI")
case SponsorsCountryOrRegionCode.FJ => __EnumValue("FJ")
case SponsorsCountryOrRegionCode.FK => __EnumValue("FK")
case SponsorsCountryOrRegionCode.FM => __EnumValue("FM")
case SponsorsCountryOrRegionCode.FO => __EnumValue("FO")
case SponsorsCountryOrRegionCode.FR => __EnumValue("FR")
case SponsorsCountryOrRegionCode.GA => __EnumValue("GA")
case SponsorsCountryOrRegionCode.GB => __EnumValue("GB")
case SponsorsCountryOrRegionCode.GD => __EnumValue("GD")
case SponsorsCountryOrRegionCode.GE => __EnumValue("GE")
case SponsorsCountryOrRegionCode.GF => __EnumValue("GF")
case SponsorsCountryOrRegionCode.GG => __EnumValue("GG")
case SponsorsCountryOrRegionCode.GH => __EnumValue("GH")
case SponsorsCountryOrRegionCode.GI => __EnumValue("GI")
case SponsorsCountryOrRegionCode.GL => __EnumValue("GL")
case SponsorsCountryOrRegionCode.GM => __EnumValue("GM")
case SponsorsCountryOrRegionCode.GN => __EnumValue("GN")
case SponsorsCountryOrRegionCode.GP => __EnumValue("GP")
case SponsorsCountryOrRegionCode.GQ => __EnumValue("GQ")
case SponsorsCountryOrRegionCode.GR => __EnumValue("GR")
case SponsorsCountryOrRegionCode.GS => __EnumValue("GS")
case SponsorsCountryOrRegionCode.GT => __EnumValue("GT")
case SponsorsCountryOrRegionCode.GU => __EnumValue("GU")
case SponsorsCountryOrRegionCode.GW => __EnumValue("GW")
case SponsorsCountryOrRegionCode.GY => __EnumValue("GY")
case SponsorsCountryOrRegionCode.HK => __EnumValue("HK")
case SponsorsCountryOrRegionCode.HM => __EnumValue("HM")
case SponsorsCountryOrRegionCode.HN => __EnumValue("HN")
case SponsorsCountryOrRegionCode.HR => __EnumValue("HR")
case SponsorsCountryOrRegionCode.HT => __EnumValue("HT")
case SponsorsCountryOrRegionCode.HU => __EnumValue("HU")
case SponsorsCountryOrRegionCode.ID => __EnumValue("ID")
case SponsorsCountryOrRegionCode.IE => __EnumValue("IE")
case SponsorsCountryOrRegionCode.IL => __EnumValue("IL")
case SponsorsCountryOrRegionCode.IM => __EnumValue("IM")
case SponsorsCountryOrRegionCode.IN => __EnumValue("IN")
case SponsorsCountryOrRegionCode.IO => __EnumValue("IO")
case SponsorsCountryOrRegionCode.IQ => __EnumValue("IQ")
case SponsorsCountryOrRegionCode.IR => __EnumValue("IR")
case SponsorsCountryOrRegionCode.IS => __EnumValue("IS")
case SponsorsCountryOrRegionCode.IT => __EnumValue("IT")
case SponsorsCountryOrRegionCode.JE => __EnumValue("JE")
case SponsorsCountryOrRegionCode.JM => __EnumValue("JM")
case SponsorsCountryOrRegionCode.JO => __EnumValue("JO")
case SponsorsCountryOrRegionCode.JP => __EnumValue("JP")
case SponsorsCountryOrRegionCode.KE => __EnumValue("KE")
case SponsorsCountryOrRegionCode.KG => __EnumValue("KG")
case SponsorsCountryOrRegionCode.KH => __EnumValue("KH")
case SponsorsCountryOrRegionCode.KI => __EnumValue("KI")
case SponsorsCountryOrRegionCode.KM => __EnumValue("KM")
case SponsorsCountryOrRegionCode.KN => __EnumValue("KN")
case SponsorsCountryOrRegionCode.KR => __EnumValue("KR")
case SponsorsCountryOrRegionCode.KW => __EnumValue("KW")
case SponsorsCountryOrRegionCode.KY => __EnumValue("KY")
case SponsorsCountryOrRegionCode.KZ => __EnumValue("KZ")
case SponsorsCountryOrRegionCode.LA => __EnumValue("LA")
case SponsorsCountryOrRegionCode.LB => __EnumValue("LB")
case SponsorsCountryOrRegionCode.LC => __EnumValue("LC")
case SponsorsCountryOrRegionCode.LI => __EnumValue("LI")
case SponsorsCountryOrRegionCode.LK => __EnumValue("LK")
case SponsorsCountryOrRegionCode.LR => __EnumValue("LR")
case SponsorsCountryOrRegionCode.LS => __EnumValue("LS")
case SponsorsCountryOrRegionCode.LT => __EnumValue("LT")
case SponsorsCountryOrRegionCode.LU => __EnumValue("LU")
case SponsorsCountryOrRegionCode.LV => __EnumValue("LV")
case SponsorsCountryOrRegionCode.LY => __EnumValue("LY")
case SponsorsCountryOrRegionCode.MA => __EnumValue("MA")
case SponsorsCountryOrRegionCode.MC => __EnumValue("MC")
case SponsorsCountryOrRegionCode.MD => __EnumValue("MD")
case SponsorsCountryOrRegionCode.ME => __EnumValue("ME")
case SponsorsCountryOrRegionCode.MF => __EnumValue("MF")
case SponsorsCountryOrRegionCode.MG => __EnumValue("MG")
case SponsorsCountryOrRegionCode.MH => __EnumValue("MH")
case SponsorsCountryOrRegionCode.MK => __EnumValue("MK")
case SponsorsCountryOrRegionCode.ML => __EnumValue("ML")
case SponsorsCountryOrRegionCode.MM => __EnumValue("MM")
case SponsorsCountryOrRegionCode.MN => __EnumValue("MN")
case SponsorsCountryOrRegionCode.MO => __EnumValue("MO")
case SponsorsCountryOrRegionCode.MP => __EnumValue("MP")
case SponsorsCountryOrRegionCode.MQ => __EnumValue("MQ")
case SponsorsCountryOrRegionCode.MR => __EnumValue("MR")
case SponsorsCountryOrRegionCode.MS => __EnumValue("MS")
case SponsorsCountryOrRegionCode.MT => __EnumValue("MT")
case SponsorsCountryOrRegionCode.MU => __EnumValue("MU")
case SponsorsCountryOrRegionCode.MV => __EnumValue("MV")
case SponsorsCountryOrRegionCode.MW => __EnumValue("MW")
case SponsorsCountryOrRegionCode.MX => __EnumValue("MX")
case SponsorsCountryOrRegionCode.MY => __EnumValue("MY")
case SponsorsCountryOrRegionCode.MZ => __EnumValue("MZ")
case SponsorsCountryOrRegionCode.NA => __EnumValue("NA")
case SponsorsCountryOrRegionCode.NC => __EnumValue("NC")
case SponsorsCountryOrRegionCode.NE => __EnumValue("NE")
case SponsorsCountryOrRegionCode.NF => __EnumValue("NF")
case SponsorsCountryOrRegionCode.NG => __EnumValue("NG")
case SponsorsCountryOrRegionCode.NI => __EnumValue("NI")
case SponsorsCountryOrRegionCode.NL => __EnumValue("NL")
case SponsorsCountryOrRegionCode.NO => __EnumValue("NO")
case SponsorsCountryOrRegionCode.NP => __EnumValue("NP")
case SponsorsCountryOrRegionCode.NR => __EnumValue("NR")
case SponsorsCountryOrRegionCode.NU => __EnumValue("NU")
case SponsorsCountryOrRegionCode.NZ => __EnumValue("NZ")
case SponsorsCountryOrRegionCode.OM => __EnumValue("OM")
case SponsorsCountryOrRegionCode.PA => __EnumValue("PA")
case SponsorsCountryOrRegionCode.PE => __EnumValue("PE")
case SponsorsCountryOrRegionCode.PF => __EnumValue("PF")
case SponsorsCountryOrRegionCode.PG => __EnumValue("PG")
case SponsorsCountryOrRegionCode.PH => __EnumValue("PH")
case SponsorsCountryOrRegionCode.PK => __EnumValue("PK")
case SponsorsCountryOrRegionCode.PL => __EnumValue("PL")
case SponsorsCountryOrRegionCode.PM => __EnumValue("PM")
case SponsorsCountryOrRegionCode.PN => __EnumValue("PN")
case SponsorsCountryOrRegionCode.PR => __EnumValue("PR")
case SponsorsCountryOrRegionCode.PS => __EnumValue("PS")
case SponsorsCountryOrRegionCode.PT => __EnumValue("PT")
case SponsorsCountryOrRegionCode.PW => __EnumValue("PW")
case SponsorsCountryOrRegionCode.PY => __EnumValue("PY")
case SponsorsCountryOrRegionCode.QA => __EnumValue("QA")
case SponsorsCountryOrRegionCode.RE => __EnumValue("RE")
case SponsorsCountryOrRegionCode.RO => __EnumValue("RO")
case SponsorsCountryOrRegionCode.RS => __EnumValue("RS")
case SponsorsCountryOrRegionCode.RU => __EnumValue("RU")
case SponsorsCountryOrRegionCode.RW => __EnumValue("RW")
case SponsorsCountryOrRegionCode.SA => __EnumValue("SA")
case SponsorsCountryOrRegionCode.SB => __EnumValue("SB")
case SponsorsCountryOrRegionCode.SC => __EnumValue("SC")
case SponsorsCountryOrRegionCode.SD => __EnumValue("SD")
case SponsorsCountryOrRegionCode.SE => __EnumValue("SE")
case SponsorsCountryOrRegionCode.SG => __EnumValue("SG")
case SponsorsCountryOrRegionCode.SH => __EnumValue("SH")
case SponsorsCountryOrRegionCode.SI => __EnumValue("SI")
case SponsorsCountryOrRegionCode.SJ => __EnumValue("SJ")
case SponsorsCountryOrRegionCode.SK => __EnumValue("SK")
case SponsorsCountryOrRegionCode.SL => __EnumValue("SL")
case SponsorsCountryOrRegionCode.SM => __EnumValue("SM")
case SponsorsCountryOrRegionCode.SN => __EnumValue("SN")
case SponsorsCountryOrRegionCode.SO => __EnumValue("SO")
case SponsorsCountryOrRegionCode.SR => __EnumValue("SR")
case SponsorsCountryOrRegionCode.SS => __EnumValue("SS")
case SponsorsCountryOrRegionCode.ST => __EnumValue("ST")
case SponsorsCountryOrRegionCode.SV => __EnumValue("SV")
case SponsorsCountryOrRegionCode.SX => __EnumValue("SX")
case SponsorsCountryOrRegionCode.SZ => __EnumValue("SZ")
case SponsorsCountryOrRegionCode.TC => __EnumValue("TC")
case SponsorsCountryOrRegionCode.TD => __EnumValue("TD")
case SponsorsCountryOrRegionCode.TF => __EnumValue("TF")
case SponsorsCountryOrRegionCode.TG => __EnumValue("TG")
case SponsorsCountryOrRegionCode.TH => __EnumValue("TH")
case SponsorsCountryOrRegionCode.TJ => __EnumValue("TJ")
case SponsorsCountryOrRegionCode.TK => __EnumValue("TK")
case SponsorsCountryOrRegionCode.TL => __EnumValue("TL")
case SponsorsCountryOrRegionCode.TM => __EnumValue("TM")
case SponsorsCountryOrRegionCode.TN => __EnumValue("TN")
case SponsorsCountryOrRegionCode.TO => __EnumValue("TO")
case SponsorsCountryOrRegionCode.TR => __EnumValue("TR")
case SponsorsCountryOrRegionCode.TT => __EnumValue("TT")
case SponsorsCountryOrRegionCode.TV => __EnumValue("TV")
case SponsorsCountryOrRegionCode.TW => __EnumValue("TW")
case SponsorsCountryOrRegionCode.TZ => __EnumValue("TZ")
case SponsorsCountryOrRegionCode.UA => __EnumValue("UA")
case SponsorsCountryOrRegionCode.UG => __EnumValue("UG")
case SponsorsCountryOrRegionCode.UM => __EnumValue("UM")
case SponsorsCountryOrRegionCode.US => __EnumValue("US")
case SponsorsCountryOrRegionCode.UY => __EnumValue("UY")
case SponsorsCountryOrRegionCode.UZ => __EnumValue("UZ")
case SponsorsCountryOrRegionCode.VA => __EnumValue("VA")
case SponsorsCountryOrRegionCode.VC => __EnumValue("VC")
case SponsorsCountryOrRegionCode.VE => __EnumValue("VE")
case SponsorsCountryOrRegionCode.VG => __EnumValue("VG")
case SponsorsCountryOrRegionCode.VI => __EnumValue("VI")
case SponsorsCountryOrRegionCode.VN => __EnumValue("VN")
case SponsorsCountryOrRegionCode.VU => __EnumValue("VU")
case SponsorsCountryOrRegionCode.WF => __EnumValue("WF")
case SponsorsCountryOrRegionCode.WS => __EnumValue("WS")
case SponsorsCountryOrRegionCode.YE => __EnumValue("YE")
case SponsorsCountryOrRegionCode.YT => __EnumValue("YT")
case SponsorsCountryOrRegionCode.ZA => __EnumValue("ZA")
case SponsorsCountryOrRegionCode.ZM => __EnumValue("ZM")
case SponsorsCountryOrRegionCode.ZW => __EnumValue("ZW")
          }

          val values: scala.collection.immutable.Vector[SponsorsCountryOrRegionCode] = scala.collection.immutable.Vector(AD, AE, AF, AG, AI, AL, AM, AO, AQ, AR, AS, AT, AU, AW, AX, AZ, BA, BB, BD, BE, BF, BG, BH, BI, BJ, BL, BM, BN, BO, BQ, BR, BS, BT, BV, BW, BY, BZ, CA, CC, CD, CF, CG, CH, CI, CK, CL, CM, CN, CO, CR, CV, CW, CX, CY, CZ, DE, DJ, DK, DM, DO, DZ, EC, EE, EG, EH, ER, ES, ET, FI, FJ, FK, FM, FO, FR, GA, GB, GD, GE, GF, GG, GH, GI, GL, GM, GN, GP, GQ, GR, GS, GT, GU, GW, GY, HK, HM, HN, HR, HT, HU, ID, IE, IL, IM, IN, IO, IQ, IR, IS, IT, JE, JM, JO, JP, KE, KG, KH, KI, KM, KN, KR, KW, KY, KZ, LA, LB, LC, LI, LK, LR, LS, LT, LU, LV, LY, MA, MC, MD, ME, MF, MG, MH, MK, ML, MM, MN, MO, MP, MQ, MR, MS, MT, MU, MV, MW, MX, MY, MZ, NA, NC, NE, NF, NG, NI, NL, NO, NP, NR, NU, NZ, OM, PA, PE, PF, PG, PH, PK, PL, PM, PN, PR, PS, PT, PW, PY, QA, RE, RO, RS, RU, RW, SA, SB, SC, SD, SE, SG, SH, SI, SJ, SK, SL, SM, SN, SO, SR, SS, ST, SV, SX, SZ, TC, TD, TF, TG, TH, TJ, TK, TL, TM, TN, TO, TR, TT, TV, TW, TZ, UA, UG, UM, US, UY, UZ, VA, VC, VE, VG, VI, VN, VU, WF, WS, YE, YT, ZA, ZM, ZW)
        }
       
sealed trait SponsorsGoalKind extends scala.Product with scala.Serializable { def value: String }
        object SponsorsGoalKind {
          case object MONTHLY_SPONSORSHIP_AMOUNT extends SponsorsGoalKind { val value: String = "MONTHLY_SPONSORSHIP_AMOUNT" }
case object TOTAL_SPONSORS_COUNT extends SponsorsGoalKind { val value: String = "TOTAL_SPONSORS_COUNT" }

          implicit val decoder: ScalarDecoder[SponsorsGoalKind] = {
            case __StringValue ("MONTHLY_SPONSORSHIP_AMOUNT") => Right(SponsorsGoalKind.MONTHLY_SPONSORSHIP_AMOUNT)
case __StringValue ("TOTAL_SPONSORS_COUNT") => Right(SponsorsGoalKind.TOTAL_SPONSORS_COUNT)
            case other => Left(DecodingError(s"Can't build SponsorsGoalKind from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsGoalKind] = {
            case SponsorsGoalKind.MONTHLY_SPONSORSHIP_AMOUNT => __EnumValue("MONTHLY_SPONSORSHIP_AMOUNT")
case SponsorsGoalKind.TOTAL_SPONSORS_COUNT => __EnumValue("TOTAL_SPONSORS_COUNT")
          }

          val values: scala.collection.immutable.Vector[SponsorsGoalKind] = scala.collection.immutable.Vector(MONTHLY_SPONSORSHIP_AMOUNT, TOTAL_SPONSORS_COUNT)
        }
       
sealed trait SponsorsListingFeaturedItemFeatureableType extends scala.Product with scala.Serializable { def value: String }
        object SponsorsListingFeaturedItemFeatureableType {
          case object REPOSITORY extends SponsorsListingFeaturedItemFeatureableType { val value: String = "REPOSITORY" }
case object USER extends SponsorsListingFeaturedItemFeatureableType { val value: String = "USER" }

          implicit val decoder: ScalarDecoder[SponsorsListingFeaturedItemFeatureableType] = {
            case __StringValue ("REPOSITORY") => Right(SponsorsListingFeaturedItemFeatureableType.REPOSITORY)
case __StringValue ("USER") => Right(SponsorsListingFeaturedItemFeatureableType.USER)
            case other => Left(DecodingError(s"Can't build SponsorsListingFeaturedItemFeatureableType from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsListingFeaturedItemFeatureableType] = {
            case SponsorsListingFeaturedItemFeatureableType.REPOSITORY => __EnumValue("REPOSITORY")
case SponsorsListingFeaturedItemFeatureableType.USER => __EnumValue("USER")
          }

          val values: scala.collection.immutable.Vector[SponsorsListingFeaturedItemFeatureableType] = scala.collection.immutable.Vector(REPOSITORY, USER)
        }
       
sealed trait SponsorsTierOrderField extends scala.Product with scala.Serializable { def value: String }
        object SponsorsTierOrderField {
          case object CREATED_AT extends SponsorsTierOrderField { val value: String = "CREATED_AT" }
case object MONTHLY_PRICE_IN_CENTS extends SponsorsTierOrderField { val value: String = "MONTHLY_PRICE_IN_CENTS" }

          implicit val decoder: ScalarDecoder[SponsorsTierOrderField] = {
            case __StringValue ("CREATED_AT") => Right(SponsorsTierOrderField.CREATED_AT)
case __StringValue ("MONTHLY_PRICE_IN_CENTS") => Right(SponsorsTierOrderField.MONTHLY_PRICE_IN_CENTS)
            case other => Left(DecodingError(s"Can't build SponsorsTierOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorsTierOrderField] = {
            case SponsorsTierOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case SponsorsTierOrderField.MONTHLY_PRICE_IN_CENTS => __EnumValue("MONTHLY_PRICE_IN_CENTS")
          }

          val values: scala.collection.immutable.Vector[SponsorsTierOrderField] = scala.collection.immutable.Vector(CREATED_AT, MONTHLY_PRICE_IN_CENTS)
        }
       
sealed trait SponsorshipNewsletterOrderField extends scala.Product with scala.Serializable { def value: String }
        object SponsorshipNewsletterOrderField {
          case object CREATED_AT extends SponsorshipNewsletterOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[SponsorshipNewsletterOrderField] = {
            case __StringValue ("CREATED_AT") => Right(SponsorshipNewsletterOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build SponsorshipNewsletterOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorshipNewsletterOrderField] = {
            case SponsorshipNewsletterOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[SponsorshipNewsletterOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait SponsorshipOrderField extends scala.Product with scala.Serializable { def value: String }
        object SponsorshipOrderField {
          case object CREATED_AT extends SponsorshipOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[SponsorshipOrderField] = {
            case __StringValue ("CREATED_AT") => Right(SponsorshipOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build SponsorshipOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorshipOrderField] = {
            case SponsorshipOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[SponsorshipOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait SponsorshipPrivacy extends scala.Product with scala.Serializable { def value: String }
        object SponsorshipPrivacy {
          case object PRIVATE extends SponsorshipPrivacy { val value: String = "PRIVATE" }
case object PUBLIC extends SponsorshipPrivacy { val value: String = "PUBLIC" }

          implicit val decoder: ScalarDecoder[SponsorshipPrivacy] = {
            case __StringValue ("PRIVATE") => Right(SponsorshipPrivacy.PRIVATE)
case __StringValue ("PUBLIC") => Right(SponsorshipPrivacy.PUBLIC)
            case other => Left(DecodingError(s"Can't build SponsorshipPrivacy from input $other"))
          }
          implicit val encoder: ArgEncoder[SponsorshipPrivacy] = {
            case SponsorshipPrivacy.PRIVATE => __EnumValue("PRIVATE")
case SponsorshipPrivacy.PUBLIC => __EnumValue("PUBLIC")
          }

          val values: scala.collection.immutable.Vector[SponsorshipPrivacy] = scala.collection.immutable.Vector(PRIVATE, PUBLIC)
        }
       
sealed trait SquashMergeCommitMessage extends scala.Product with scala.Serializable { def value: String }
        object SquashMergeCommitMessage {
          case object BLANK extends SquashMergeCommitMessage { val value: String = "BLANK" }
case object COMMIT_MESSAGES extends SquashMergeCommitMessage { val value: String = "COMMIT_MESSAGES" }
case object PR_BODY extends SquashMergeCommitMessage { val value: String = "PR_BODY" }

          implicit val decoder: ScalarDecoder[SquashMergeCommitMessage] = {
            case __StringValue ("BLANK") => Right(SquashMergeCommitMessage.BLANK)
case __StringValue ("COMMIT_MESSAGES") => Right(SquashMergeCommitMessage.COMMIT_MESSAGES)
case __StringValue ("PR_BODY") => Right(SquashMergeCommitMessage.PR_BODY)
            case other => Left(DecodingError(s"Can't build SquashMergeCommitMessage from input $other"))
          }
          implicit val encoder: ArgEncoder[SquashMergeCommitMessage] = {
            case SquashMergeCommitMessage.BLANK => __EnumValue("BLANK")
case SquashMergeCommitMessage.COMMIT_MESSAGES => __EnumValue("COMMIT_MESSAGES")
case SquashMergeCommitMessage.PR_BODY => __EnumValue("PR_BODY")
          }

          val values: scala.collection.immutable.Vector[SquashMergeCommitMessage] = scala.collection.immutable.Vector(BLANK, COMMIT_MESSAGES, PR_BODY)
        }
       
sealed trait SquashMergeCommitTitle extends scala.Product with scala.Serializable { def value: String }
        object SquashMergeCommitTitle {
          case object COMMIT_OR_PR_TITLE extends SquashMergeCommitTitle { val value: String = "COMMIT_OR_PR_TITLE" }
case object PR_TITLE extends SquashMergeCommitTitle { val value: String = "PR_TITLE" }

          implicit val decoder: ScalarDecoder[SquashMergeCommitTitle] = {
            case __StringValue ("COMMIT_OR_PR_TITLE") => Right(SquashMergeCommitTitle.COMMIT_OR_PR_TITLE)
case __StringValue ("PR_TITLE") => Right(SquashMergeCommitTitle.PR_TITLE)
            case other => Left(DecodingError(s"Can't build SquashMergeCommitTitle from input $other"))
          }
          implicit val encoder: ArgEncoder[SquashMergeCommitTitle] = {
            case SquashMergeCommitTitle.COMMIT_OR_PR_TITLE => __EnumValue("COMMIT_OR_PR_TITLE")
case SquashMergeCommitTitle.PR_TITLE => __EnumValue("PR_TITLE")
          }

          val values: scala.collection.immutable.Vector[SquashMergeCommitTitle] = scala.collection.immutable.Vector(COMMIT_OR_PR_TITLE, PR_TITLE)
        }
       
sealed trait StarOrderField extends scala.Product with scala.Serializable { def value: String }
        object StarOrderField {
          case object STARRED_AT extends StarOrderField { val value: String = "STARRED_AT" }

          implicit val decoder: ScalarDecoder[StarOrderField] = {
            case __StringValue ("STARRED_AT") => Right(StarOrderField.STARRED_AT)
            case other => Left(DecodingError(s"Can't build StarOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[StarOrderField] = {
            case StarOrderField.STARRED_AT => __EnumValue("STARRED_AT")
          }

          val values: scala.collection.immutable.Vector[StarOrderField] = scala.collection.immutable.Vector(STARRED_AT)
        }
       
sealed trait StatusState extends scala.Product with scala.Serializable { def value: String }
        object StatusState {
          case object ERROR extends StatusState { val value: String = "ERROR" }
case object EXPECTED extends StatusState { val value: String = "EXPECTED" }
case object FAILURE extends StatusState { val value: String = "FAILURE" }
case object PENDING extends StatusState { val value: String = "PENDING" }
case object SUCCESS extends StatusState { val value: String = "SUCCESS" }

          implicit val decoder: ScalarDecoder[StatusState] = {
            case __StringValue ("ERROR") => Right(StatusState.ERROR)
case __StringValue ("EXPECTED") => Right(StatusState.EXPECTED)
case __StringValue ("FAILURE") => Right(StatusState.FAILURE)
case __StringValue ("PENDING") => Right(StatusState.PENDING)
case __StringValue ("SUCCESS") => Right(StatusState.SUCCESS)
            case other => Left(DecodingError(s"Can't build StatusState from input $other"))
          }
          implicit val encoder: ArgEncoder[StatusState] = {
            case StatusState.ERROR => __EnumValue("ERROR")
case StatusState.EXPECTED => __EnumValue("EXPECTED")
case StatusState.FAILURE => __EnumValue("FAILURE")
case StatusState.PENDING => __EnumValue("PENDING")
case StatusState.SUCCESS => __EnumValue("SUCCESS")
          }

          val values: scala.collection.immutable.Vector[StatusState] = scala.collection.immutable.Vector(ERROR, EXPECTED, FAILURE, PENDING, SUCCESS)
        }
       
sealed trait SubscriptionState extends scala.Product with scala.Serializable { def value: String }
        object SubscriptionState {
          case object IGNORED extends SubscriptionState { val value: String = "IGNORED" }
case object SUBSCRIBED extends SubscriptionState { val value: String = "SUBSCRIBED" }
case object UNSUBSCRIBED extends SubscriptionState { val value: String = "UNSUBSCRIBED" }

          implicit val decoder: ScalarDecoder[SubscriptionState] = {
            case __StringValue ("IGNORED") => Right(SubscriptionState.IGNORED)
case __StringValue ("SUBSCRIBED") => Right(SubscriptionState.SUBSCRIBED)
case __StringValue ("UNSUBSCRIBED") => Right(SubscriptionState.UNSUBSCRIBED)
            case other => Left(DecodingError(s"Can't build SubscriptionState from input $other"))
          }
          implicit val encoder: ArgEncoder[SubscriptionState] = {
            case SubscriptionState.IGNORED => __EnumValue("IGNORED")
case SubscriptionState.SUBSCRIBED => __EnumValue("SUBSCRIBED")
case SubscriptionState.UNSUBSCRIBED => __EnumValue("UNSUBSCRIBED")
          }

          val values: scala.collection.immutable.Vector[SubscriptionState] = scala.collection.immutable.Vector(IGNORED, SUBSCRIBED, UNSUBSCRIBED)
        }
       
sealed trait TeamDiscussionCommentOrderField extends scala.Product with scala.Serializable { def value: String }
        object TeamDiscussionCommentOrderField {
          case object NUMBER extends TeamDiscussionCommentOrderField { val value: String = "NUMBER" }

          implicit val decoder: ScalarDecoder[TeamDiscussionCommentOrderField] = {
            case __StringValue ("NUMBER") => Right(TeamDiscussionCommentOrderField.NUMBER)
            case other => Left(DecodingError(s"Can't build TeamDiscussionCommentOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamDiscussionCommentOrderField] = {
            case TeamDiscussionCommentOrderField.NUMBER => __EnumValue("NUMBER")
          }

          val values: scala.collection.immutable.Vector[TeamDiscussionCommentOrderField] = scala.collection.immutable.Vector(NUMBER)
        }
       
sealed trait TeamDiscussionOrderField extends scala.Product with scala.Serializable { def value: String }
        object TeamDiscussionOrderField {
          case object CREATED_AT extends TeamDiscussionOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[TeamDiscussionOrderField] = {
            case __StringValue ("CREATED_AT") => Right(TeamDiscussionOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build TeamDiscussionOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamDiscussionOrderField] = {
            case TeamDiscussionOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[TeamDiscussionOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait TeamMemberOrderField extends scala.Product with scala.Serializable { def value: String }
        object TeamMemberOrderField {
          case object CREATED_AT extends TeamMemberOrderField { val value: String = "CREATED_AT" }
case object LOGIN extends TeamMemberOrderField { val value: String = "LOGIN" }

          implicit val decoder: ScalarDecoder[TeamMemberOrderField] = {
            case __StringValue ("CREATED_AT") => Right(TeamMemberOrderField.CREATED_AT)
case __StringValue ("LOGIN") => Right(TeamMemberOrderField.LOGIN)
            case other => Left(DecodingError(s"Can't build TeamMemberOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamMemberOrderField] = {
            case TeamMemberOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case TeamMemberOrderField.LOGIN => __EnumValue("LOGIN")
          }

          val values: scala.collection.immutable.Vector[TeamMemberOrderField] = scala.collection.immutable.Vector(CREATED_AT, LOGIN)
        }
       
sealed trait TeamMemberRole extends scala.Product with scala.Serializable { def value: String }
        object TeamMemberRole {
          case object MAINTAINER extends TeamMemberRole { val value: String = "MAINTAINER" }
case object MEMBER extends TeamMemberRole { val value: String = "MEMBER" }

          implicit val decoder: ScalarDecoder[TeamMemberRole] = {
            case __StringValue ("MAINTAINER") => Right(TeamMemberRole.MAINTAINER)
case __StringValue ("MEMBER") => Right(TeamMemberRole.MEMBER)
            case other => Left(DecodingError(s"Can't build TeamMemberRole from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamMemberRole] = {
            case TeamMemberRole.MAINTAINER => __EnumValue("MAINTAINER")
case TeamMemberRole.MEMBER => __EnumValue("MEMBER")
          }

          val values: scala.collection.immutable.Vector[TeamMemberRole] = scala.collection.immutable.Vector(MAINTAINER, MEMBER)
        }
       
sealed trait TeamMembershipType extends scala.Product with scala.Serializable { def value: String }
        object TeamMembershipType {
          case object ALL extends TeamMembershipType { val value: String = "ALL" }
case object CHILD_TEAM extends TeamMembershipType { val value: String = "CHILD_TEAM" }
case object IMMEDIATE extends TeamMembershipType { val value: String = "IMMEDIATE" }

          implicit val decoder: ScalarDecoder[TeamMembershipType] = {
            case __StringValue ("ALL") => Right(TeamMembershipType.ALL)
case __StringValue ("CHILD_TEAM") => Right(TeamMembershipType.CHILD_TEAM)
case __StringValue ("IMMEDIATE") => Right(TeamMembershipType.IMMEDIATE)
            case other => Left(DecodingError(s"Can't build TeamMembershipType from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamMembershipType] = {
            case TeamMembershipType.ALL => __EnumValue("ALL")
case TeamMembershipType.CHILD_TEAM => __EnumValue("CHILD_TEAM")
case TeamMembershipType.IMMEDIATE => __EnumValue("IMMEDIATE")
          }

          val values: scala.collection.immutable.Vector[TeamMembershipType] = scala.collection.immutable.Vector(ALL, CHILD_TEAM, IMMEDIATE)
        }
       
sealed trait TeamNotificationSetting extends scala.Product with scala.Serializable { def value: String }
        object TeamNotificationSetting {
          case object NOTIFICATIONS_DISABLED extends TeamNotificationSetting { val value: String = "NOTIFICATIONS_DISABLED" }
case object NOTIFICATIONS_ENABLED extends TeamNotificationSetting { val value: String = "NOTIFICATIONS_ENABLED" }

          implicit val decoder: ScalarDecoder[TeamNotificationSetting] = {
            case __StringValue ("NOTIFICATIONS_DISABLED") => Right(TeamNotificationSetting.NOTIFICATIONS_DISABLED)
case __StringValue ("NOTIFICATIONS_ENABLED") => Right(TeamNotificationSetting.NOTIFICATIONS_ENABLED)
            case other => Left(DecodingError(s"Can't build TeamNotificationSetting from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamNotificationSetting] = {
            case TeamNotificationSetting.NOTIFICATIONS_DISABLED => __EnumValue("NOTIFICATIONS_DISABLED")
case TeamNotificationSetting.NOTIFICATIONS_ENABLED => __EnumValue("NOTIFICATIONS_ENABLED")
          }

          val values: scala.collection.immutable.Vector[TeamNotificationSetting] = scala.collection.immutable.Vector(NOTIFICATIONS_DISABLED, NOTIFICATIONS_ENABLED)
        }
       
sealed trait TeamOrderField extends scala.Product with scala.Serializable { def value: String }
        object TeamOrderField {
          case object NAME extends TeamOrderField { val value: String = "NAME" }

          implicit val decoder: ScalarDecoder[TeamOrderField] = {
            case __StringValue ("NAME") => Right(TeamOrderField.NAME)
            case other => Left(DecodingError(s"Can't build TeamOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamOrderField] = {
            case TeamOrderField.NAME => __EnumValue("NAME")
          }

          val values: scala.collection.immutable.Vector[TeamOrderField] = scala.collection.immutable.Vector(NAME)
        }
       
sealed trait TeamPrivacy extends scala.Product with scala.Serializable { def value: String }
        object TeamPrivacy {
          case object SECRET extends TeamPrivacy { val value: String = "SECRET" }
case object VISIBLE extends TeamPrivacy { val value: String = "VISIBLE" }

          implicit val decoder: ScalarDecoder[TeamPrivacy] = {
            case __StringValue ("SECRET") => Right(TeamPrivacy.SECRET)
case __StringValue ("VISIBLE") => Right(TeamPrivacy.VISIBLE)
            case other => Left(DecodingError(s"Can't build TeamPrivacy from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamPrivacy] = {
            case TeamPrivacy.SECRET => __EnumValue("SECRET")
case TeamPrivacy.VISIBLE => __EnumValue("VISIBLE")
          }

          val values: scala.collection.immutable.Vector[TeamPrivacy] = scala.collection.immutable.Vector(SECRET, VISIBLE)
        }
       
sealed trait TeamRepositoryOrderField extends scala.Product with scala.Serializable { def value: String }
        object TeamRepositoryOrderField {
          case object CREATED_AT extends TeamRepositoryOrderField { val value: String = "CREATED_AT" }
case object NAME extends TeamRepositoryOrderField { val value: String = "NAME" }
case object PERMISSION extends TeamRepositoryOrderField { val value: String = "PERMISSION" }
case object PUSHED_AT extends TeamRepositoryOrderField { val value: String = "PUSHED_AT" }
case object STARGAZERS extends TeamRepositoryOrderField { val value: String = "STARGAZERS" }
case object UPDATED_AT extends TeamRepositoryOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[TeamRepositoryOrderField] = {
            case __StringValue ("CREATED_AT") => Right(TeamRepositoryOrderField.CREATED_AT)
case __StringValue ("NAME") => Right(TeamRepositoryOrderField.NAME)
case __StringValue ("PERMISSION") => Right(TeamRepositoryOrderField.PERMISSION)
case __StringValue ("PUSHED_AT") => Right(TeamRepositoryOrderField.PUSHED_AT)
case __StringValue ("STARGAZERS") => Right(TeamRepositoryOrderField.STARGAZERS)
case __StringValue ("UPDATED_AT") => Right(TeamRepositoryOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build TeamRepositoryOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamRepositoryOrderField] = {
            case TeamRepositoryOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case TeamRepositoryOrderField.NAME => __EnumValue("NAME")
case TeamRepositoryOrderField.PERMISSION => __EnumValue("PERMISSION")
case TeamRepositoryOrderField.PUSHED_AT => __EnumValue("PUSHED_AT")
case TeamRepositoryOrderField.STARGAZERS => __EnumValue("STARGAZERS")
case TeamRepositoryOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[TeamRepositoryOrderField] = scala.collection.immutable.Vector(CREATED_AT, NAME, PERMISSION, PUSHED_AT, STARGAZERS, UPDATED_AT)
        }
       
sealed trait TeamReviewAssignmentAlgorithm extends scala.Product with scala.Serializable { def value: String }
        object TeamReviewAssignmentAlgorithm {
          case object LOAD_BALANCE extends TeamReviewAssignmentAlgorithm { val value: String = "LOAD_BALANCE" }
case object ROUND_ROBIN extends TeamReviewAssignmentAlgorithm { val value: String = "ROUND_ROBIN" }

          implicit val decoder: ScalarDecoder[TeamReviewAssignmentAlgorithm] = {
            case __StringValue ("LOAD_BALANCE") => Right(TeamReviewAssignmentAlgorithm.LOAD_BALANCE)
case __StringValue ("ROUND_ROBIN") => Right(TeamReviewAssignmentAlgorithm.ROUND_ROBIN)
            case other => Left(DecodingError(s"Can't build TeamReviewAssignmentAlgorithm from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamReviewAssignmentAlgorithm] = {
            case TeamReviewAssignmentAlgorithm.LOAD_BALANCE => __EnumValue("LOAD_BALANCE")
case TeamReviewAssignmentAlgorithm.ROUND_ROBIN => __EnumValue("ROUND_ROBIN")
          }

          val values: scala.collection.immutable.Vector[TeamReviewAssignmentAlgorithm] = scala.collection.immutable.Vector(LOAD_BALANCE, ROUND_ROBIN)
        }
       
sealed trait TeamRole extends scala.Product with scala.Serializable { def value: String }
        object TeamRole {
          case object ADMIN extends TeamRole { val value: String = "ADMIN" }
case object MEMBER extends TeamRole { val value: String = "MEMBER" }

          implicit val decoder: ScalarDecoder[TeamRole] = {
            case __StringValue ("ADMIN") => Right(TeamRole.ADMIN)
case __StringValue ("MEMBER") => Right(TeamRole.MEMBER)
            case other => Left(DecodingError(s"Can't build TeamRole from input $other"))
          }
          implicit val encoder: ArgEncoder[TeamRole] = {
            case TeamRole.ADMIN => __EnumValue("ADMIN")
case TeamRole.MEMBER => __EnumValue("MEMBER")
          }

          val values: scala.collection.immutable.Vector[TeamRole] = scala.collection.immutable.Vector(ADMIN, MEMBER)
        }
       
sealed trait TopicSuggestionDeclineReason extends scala.Product with scala.Serializable { def value: String }
        object TopicSuggestionDeclineReason {
          case object NOT_RELEVANT extends TopicSuggestionDeclineReason { val value: String = "NOT_RELEVANT" }
case object PERSONAL_PREFERENCE extends TopicSuggestionDeclineReason { val value: String = "PERSONAL_PREFERENCE" }
case object TOO_GENERAL extends TopicSuggestionDeclineReason { val value: String = "TOO_GENERAL" }
case object TOO_SPECIFIC extends TopicSuggestionDeclineReason { val value: String = "TOO_SPECIFIC" }

          implicit val decoder: ScalarDecoder[TopicSuggestionDeclineReason] = {
            case __StringValue ("NOT_RELEVANT") => Right(TopicSuggestionDeclineReason.NOT_RELEVANT)
case __StringValue ("PERSONAL_PREFERENCE") => Right(TopicSuggestionDeclineReason.PERSONAL_PREFERENCE)
case __StringValue ("TOO_GENERAL") => Right(TopicSuggestionDeclineReason.TOO_GENERAL)
case __StringValue ("TOO_SPECIFIC") => Right(TopicSuggestionDeclineReason.TOO_SPECIFIC)
            case other => Left(DecodingError(s"Can't build TopicSuggestionDeclineReason from input $other"))
          }
          implicit val encoder: ArgEncoder[TopicSuggestionDeclineReason] = {
            case TopicSuggestionDeclineReason.NOT_RELEVANT => __EnumValue("NOT_RELEVANT")
case TopicSuggestionDeclineReason.PERSONAL_PREFERENCE => __EnumValue("PERSONAL_PREFERENCE")
case TopicSuggestionDeclineReason.TOO_GENERAL => __EnumValue("TOO_GENERAL")
case TopicSuggestionDeclineReason.TOO_SPECIFIC => __EnumValue("TOO_SPECIFIC")
          }

          val values: scala.collection.immutable.Vector[TopicSuggestionDeclineReason] = scala.collection.immutable.Vector(NOT_RELEVANT, PERSONAL_PREFERENCE, TOO_GENERAL, TOO_SPECIFIC)
        }
       
sealed trait TrackedIssueStates extends scala.Product with scala.Serializable { def value: String }
        object TrackedIssueStates {
          case object CLOSED extends TrackedIssueStates { val value: String = "CLOSED" }
case object OPEN extends TrackedIssueStates { val value: String = "OPEN" }

          implicit val decoder: ScalarDecoder[TrackedIssueStates] = {
            case __StringValue ("CLOSED") => Right(TrackedIssueStates.CLOSED)
case __StringValue ("OPEN") => Right(TrackedIssueStates.OPEN)
            case other => Left(DecodingError(s"Can't build TrackedIssueStates from input $other"))
          }
          implicit val encoder: ArgEncoder[TrackedIssueStates] = {
            case TrackedIssueStates.CLOSED => __EnumValue("CLOSED")
case TrackedIssueStates.OPEN => __EnumValue("OPEN")
          }

          val values: scala.collection.immutable.Vector[TrackedIssueStates] = scala.collection.immutable.Vector(CLOSED, OPEN)
        }
       
sealed trait UserBlockDuration extends scala.Product with scala.Serializable { def value: String }
        object UserBlockDuration {
          case object ONE_DAY extends UserBlockDuration { val value: String = "ONE_DAY" }
case object ONE_MONTH extends UserBlockDuration { val value: String = "ONE_MONTH" }
case object ONE_WEEK extends UserBlockDuration { val value: String = "ONE_WEEK" }
case object PERMANENT extends UserBlockDuration { val value: String = "PERMANENT" }
case object THREE_DAYS extends UserBlockDuration { val value: String = "THREE_DAYS" }

          implicit val decoder: ScalarDecoder[UserBlockDuration] = {
            case __StringValue ("ONE_DAY") => Right(UserBlockDuration.ONE_DAY)
case __StringValue ("ONE_MONTH") => Right(UserBlockDuration.ONE_MONTH)
case __StringValue ("ONE_WEEK") => Right(UserBlockDuration.ONE_WEEK)
case __StringValue ("PERMANENT") => Right(UserBlockDuration.PERMANENT)
case __StringValue ("THREE_DAYS") => Right(UserBlockDuration.THREE_DAYS)
            case other => Left(DecodingError(s"Can't build UserBlockDuration from input $other"))
          }
          implicit val encoder: ArgEncoder[UserBlockDuration] = {
            case UserBlockDuration.ONE_DAY => __EnumValue("ONE_DAY")
case UserBlockDuration.ONE_MONTH => __EnumValue("ONE_MONTH")
case UserBlockDuration.ONE_WEEK => __EnumValue("ONE_WEEK")
case UserBlockDuration.PERMANENT => __EnumValue("PERMANENT")
case UserBlockDuration.THREE_DAYS => __EnumValue("THREE_DAYS")
          }

          val values: scala.collection.immutable.Vector[UserBlockDuration] = scala.collection.immutable.Vector(ONE_DAY, ONE_MONTH, ONE_WEEK, PERMANENT, THREE_DAYS)
        }
       
sealed trait UserStatusOrderField extends scala.Product with scala.Serializable { def value: String }
        object UserStatusOrderField {
          case object UPDATED_AT extends UserStatusOrderField { val value: String = "UPDATED_AT" }

          implicit val decoder: ScalarDecoder[UserStatusOrderField] = {
            case __StringValue ("UPDATED_AT") => Right(UserStatusOrderField.UPDATED_AT)
            case other => Left(DecodingError(s"Can't build UserStatusOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[UserStatusOrderField] = {
            case UserStatusOrderField.UPDATED_AT => __EnumValue("UPDATED_AT")
          }

          val values: scala.collection.immutable.Vector[UserStatusOrderField] = scala.collection.immutable.Vector(UPDATED_AT)
        }
       
sealed trait VerifiableDomainOrderField extends scala.Product with scala.Serializable { def value: String }
        object VerifiableDomainOrderField {
          case object CREATED_AT extends VerifiableDomainOrderField { val value: String = "CREATED_AT" }
case object DOMAIN extends VerifiableDomainOrderField { val value: String = "DOMAIN" }

          implicit val decoder: ScalarDecoder[VerifiableDomainOrderField] = {
            case __StringValue ("CREATED_AT") => Right(VerifiableDomainOrderField.CREATED_AT)
case __StringValue ("DOMAIN") => Right(VerifiableDomainOrderField.DOMAIN)
            case other => Left(DecodingError(s"Can't build VerifiableDomainOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[VerifiableDomainOrderField] = {
            case VerifiableDomainOrderField.CREATED_AT => __EnumValue("CREATED_AT")
case VerifiableDomainOrderField.DOMAIN => __EnumValue("DOMAIN")
          }

          val values: scala.collection.immutable.Vector[VerifiableDomainOrderField] = scala.collection.immutable.Vector(CREATED_AT, DOMAIN)
        }
       
sealed trait WorkflowRunOrderField extends scala.Product with scala.Serializable { def value: String }
        object WorkflowRunOrderField {
          case object CREATED_AT extends WorkflowRunOrderField { val value: String = "CREATED_AT" }

          implicit val decoder: ScalarDecoder[WorkflowRunOrderField] = {
            case __StringValue ("CREATED_AT") => Right(WorkflowRunOrderField.CREATED_AT)
            case other => Left(DecodingError(s"Can't build WorkflowRunOrderField from input $other"))
          }
          implicit val encoder: ArgEncoder[WorkflowRunOrderField] = {
            case WorkflowRunOrderField.CREATED_AT => __EnumValue("CREATED_AT")
          }

          val values: scala.collection.immutable.Vector[WorkflowRunOrderField] = scala.collection.immutable.Vector(CREATED_AT)
        }
       
sealed trait WorkflowState extends scala.Product with scala.Serializable { def value: String }
        object WorkflowState {
          case object ACTIVE extends WorkflowState { val value: String = "ACTIVE" }
case object DELETED extends WorkflowState { val value: String = "DELETED" }
case object DISABLED_FORK extends WorkflowState { val value: String = "DISABLED_FORK" }
case object DISABLED_INACTIVITY extends WorkflowState { val value: String = "DISABLED_INACTIVITY" }
case object DISABLED_MANUALLY extends WorkflowState { val value: String = "DISABLED_MANUALLY" }

          implicit val decoder: ScalarDecoder[WorkflowState] = {
            case __StringValue ("ACTIVE") => Right(WorkflowState.ACTIVE)
case __StringValue ("DELETED") => Right(WorkflowState.DELETED)
case __StringValue ("DISABLED_FORK") => Right(WorkflowState.DISABLED_FORK)
case __StringValue ("DISABLED_INACTIVITY") => Right(WorkflowState.DISABLED_INACTIVITY)
case __StringValue ("DISABLED_MANUALLY") => Right(WorkflowState.DISABLED_MANUALLY)
            case other => Left(DecodingError(s"Can't build WorkflowState from input $other"))
          }
          implicit val encoder: ArgEncoder[WorkflowState] = {
            case WorkflowState.ACTIVE => __EnumValue("ACTIVE")
case WorkflowState.DELETED => __EnumValue("DELETED")
case WorkflowState.DISABLED_FORK => __EnumValue("DISABLED_FORK")
case WorkflowState.DISABLED_INACTIVITY => __EnumValue("DISABLED_INACTIVITY")
case WorkflowState.DISABLED_MANUALLY => __EnumValue("DISABLED_MANUALLY")
          }

          val values: scala.collection.immutable.Vector[WorkflowState] = scala.collection.immutable.Vector(ACTIVE, DELETED, DISABLED_FORK, DISABLED_INACTIVITY, DISABLED_MANUALLY)
        }
       
  type Actor
object Actor {
  /**
 * A URL pointing to the actor's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Actor, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * The username of the actor.
 */
def login: SelectionBuilder[Actor, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The HTTP path for this actor.
 */
def resourcePath: SelectionBuilder[Actor, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this actor.
 */
def url: SelectionBuilder[Actor, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type AnnouncementBanner
object AnnouncementBanner {
  /**
 * The text of the announcement
 */
def announcement: SelectionBuilder[AnnouncementBanner, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("announcement", OptionOf(Scalar()))
  /**
 * The expiration date of the announcement, if any
 */
def announcementExpiresAt: SelectionBuilder[AnnouncementBanner, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("announcementExpiresAt", OptionOf(Scalar()))
  /**
 * Whether the announcement can be dismissed by the user
 */
def announcementUserDismissible: SelectionBuilder[AnnouncementBanner, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("announcementUserDismissible", OptionOf(Scalar()))
}


type Assignable
object Assignable {
  /**
 * A list of Users assigned to this object.
 */
def assignees[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Assignable, A] = _root_.caliban.client.SelectionBuilder.Field("assignees", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type AuditEntry
object AuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[AuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[AuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[AuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[AuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[AuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[AuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[AuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[AuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[AuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[AuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[AuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type Closable
object Closable {
  /**
 * Indicates if the object is closed (definition of closed may depend on type)
 */
def closed: SelectionBuilder[Closable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[Closable, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[Closable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[Closable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
}


type Comment
object Comment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Comment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[Comment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The body as Markdown.
 */
def body: SelectionBuilder[Comment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[Comment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[Comment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Comment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[Comment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Comment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[Comment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[Comment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[Comment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[Comment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Comment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Comment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[Comment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Comment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[Comment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Comment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[Comment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type Contribution
object Contribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[Contribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[Contribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[Contribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[Contribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[Contribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type Deletable
object Deletable {
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[Deletable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
}


type EnterpriseAuditEntryData
object EnterpriseAuditEntryData {
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[EnterpriseAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[EnterpriseAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[EnterpriseAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
}


type GitObject
object GitObject {
  /**
 * An abbreviated version of the Git object ID
 */
def abbreviatedOid: SelectionBuilder[GitObject, String] = _root_.caliban.client.SelectionBuilder.Field("abbreviatedOid", Scalar())
  /**
 * The HTTP path for this Git object
 */
def commitResourcePath: SelectionBuilder[GitObject, URI] = _root_.caliban.client.SelectionBuilder.Field("commitResourcePath", Scalar())
  /**
 * The HTTP URL for this Git object
 */
def commitUrl: SelectionBuilder[GitObject, URI] = _root_.caliban.client.SelectionBuilder.Field("commitUrl", Scalar())
  def id: SelectionBuilder[GitObject, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The Git object ID
 */
def oid: SelectionBuilder[GitObject, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())
  /**
 * The Repository the Git object belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[GitObject, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type GitSignature
object GitSignature {
  /**
 * Email used to sign this object.
 */
def email: SelectionBuilder[GitSignature, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  /**
 * True if the signature is valid and verified by GitHub.
 */
def isValid: SelectionBuilder[GitSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isValid", Scalar())
  /**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
def payload: SelectionBuilder[GitSignature, String] = _root_.caliban.client.SelectionBuilder.Field("payload", Scalar())
  /**
 * ASCII-armored signature header from object.
 */
def signature: SelectionBuilder[GitSignature, String] = _root_.caliban.client.SelectionBuilder.Field("signature", Scalar())
  /**
 * GitHub user corresponding to the email signing this commit.
 */
def signer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[GitSignature, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signer", OptionOf(Obj(innerSelection)))
  /**
 * The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid.
 */
def state: SelectionBuilder[GitSignature, GitSignatureState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * True if the signature was made with GitHub's signing key.
 */
def wasSignedByGitHub: SelectionBuilder[GitSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("wasSignedByGitHub", Scalar())
}


type HovercardContext
object HovercardContext {
  /**
 * A string describing this context
 */
def message: SelectionBuilder[HovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * An octicon to accompany this context
 */
def octicon: SelectionBuilder[HovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("octicon", Scalar())
}


type Labelable
object Labelable {
  /**
 * A list of labels associated with the object.
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LabelOrder] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LabelOrder]]): SelectionBuilder[Labelable, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LabelOrder")(encoder4)))
}


type Lockable
object Lockable {
  /**
 * Reason that the conversation was locked.
 */
def activeLockReason: SelectionBuilder[Lockable, scala.Option[LockReason]] = _root_.caliban.client.SelectionBuilder.Field("activeLockReason", OptionOf(Scalar()))
  /**
 * `true` if the object is locked
 */
def locked: SelectionBuilder[Lockable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("locked", Scalar())
}


type MemberStatusable
object MemberStatusable {
  /**
 * Get the status messages members of this entity have set that are either public or visible only to the organization.
 */
def memberStatuses[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[UserStatusOrder] = None)(innerSelection: SelectionBuilder[UserStatusConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[UserStatusOrder]]): SelectionBuilder[MemberStatusable, A] = _root_.caliban.client.SelectionBuilder.Field("memberStatuses", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "UserStatusOrder")(encoder4)))
}


type Migration
object Migration {
  /**
 * The migration flag to continue on error.
 */
def continueOnError: SelectionBuilder[Migration, Boolean] = _root_.caliban.client.SelectionBuilder.Field("continueOnError", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Migration, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Migration, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The reason the migration failed.
 */
def failureReason: SelectionBuilder[Migration, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("failureReason", OptionOf(Scalar()))
  def id: SelectionBuilder[Migration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The URL for the migration log (expires 1 day after migration completes).
 */
def migrationLogUrl: SelectionBuilder[Migration, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("migrationLogUrl", OptionOf(Scalar()))
  /**
 * The migration source.
 */
def migrationSource[A](innerSelection: SelectionBuilder[MigrationSource, A]): SelectionBuilder[Migration, A] = _root_.caliban.client.SelectionBuilder.Field("migrationSource", Obj(innerSelection))
  /**
 * The target repository name.
 */
def repositoryName: SelectionBuilder[Migration, String] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", Scalar())
  /**
 * The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
 */
def sourceUrl: SelectionBuilder[Migration, URI] = _root_.caliban.client.SelectionBuilder.Field("sourceUrl", Scalar())
  /**
 * The migration state.
 */
def state: SelectionBuilder[Migration, MigrationState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The number of warnings encountered for this migration. To review the warnings,
check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
 */
def warningsCount: SelectionBuilder[Migration, Int] = _root_.caliban.client.SelectionBuilder.Field("warningsCount", Scalar())
}


type Minimizable
object Minimizable {
  /**
 * Returns whether or not a comment has been minimized.
 */
def isMinimized: SelectionBuilder[Minimizable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMinimized", Scalar())
  /**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
def minimizedReason: SelectionBuilder[Minimizable, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("minimizedReason", OptionOf(Scalar()))
  /**
 * Check if the current viewer can minimize this object.
 */
def viewerCanMinimize: SelectionBuilder[Minimizable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMinimize", Scalar())
}


type Node
object Node {
  /**
 * ID of the object.
 */
def id: SelectionBuilder[Node, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
}


type OauthApplicationAuditEntryData
object OauthApplicationAuditEntryData {
  /**
 * The name of the OAuth Application.
 */
def oauthApplicationName: SelectionBuilder[OauthApplicationAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the OAuth Application
 */
def oauthApplicationResourcePath: SelectionBuilder[OauthApplicationAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the OAuth Application
 */
def oauthApplicationUrl: SelectionBuilder[OauthApplicationAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationUrl", OptionOf(Scalar()))
}


type OrganizationAuditEntryData
object OrganizationAuditEntryData {
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrganizationAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrganizationAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrganizationAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrganizationAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
}


type PackageOwner
object PackageOwner {
  def id: SelectionBuilder[PackageOwner, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * A list of packages under the owner.
 */
def packages[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, names : scala.Option[List[scala.Option[String]]] = None, orderBy : scala.Option[PackageOrder] = None, packageType : scala.Option[PackageType] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[PackageConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[scala.Option[String]]]], encoder5: ArgEncoder[scala.Option[PackageOrder]], encoder6: ArgEncoder[scala.Option[PackageType]], encoder7: ArgEncoder[scala.Option[String]]): SelectionBuilder[PackageOwner, A] = _root_.caliban.client.SelectionBuilder.Field("packages", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("names", names, "[String]")(encoder4), Argument("orderBy", orderBy, "PackageOrder")(encoder5), Argument("packageType", packageType, "PackageType")(encoder6), Argument("repositoryId", repositoryId, "ID")(encoder7)))
}


type ProfileOwner
object ProfileOwner {
  /**
 * Determine if this repository owner has any items that can be pinned to their profile.
 */
def anyPinnableItems(`type` : scala.Option[PinnableItemType] = None)(implicit encoder0: ArgEncoder[scala.Option[PinnableItemType]]): SelectionBuilder[ProfileOwner, Boolean] = _root_.caliban.client.SelectionBuilder.Field("anyPinnableItems", Scalar(), arguments = List(Argument("type", `type`, "PinnableItemType")(encoder0)))
  /**
 * The public profile email.
 */
def email: SelectionBuilder[ProfileOwner, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  def id: SelectionBuilder[ProfileOwner, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity.
 */
def itemShowcase[A](innerSelection: SelectionBuilder[ProfileItemShowcase, A]): SelectionBuilder[ProfileOwner, A] = _root_.caliban.client.SelectionBuilder.Field("itemShowcase", Obj(innerSelection))
  /**
 * The public profile location.
 */
def location: SelectionBuilder[ProfileOwner, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))
  /**
 * The username used to login.
 */
def login: SelectionBuilder[ProfileOwner, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The public profile name.
 */
def name: SelectionBuilder[ProfileOwner, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * A list of repositories and gists this profile owner can pin to their profile.
 */
def pinnableItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, types : scala.Option[List[PinnableItemType]] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[PinnableItemType]]]): SelectionBuilder[ProfileOwner, A] = _root_.caliban.client.SelectionBuilder.Field("pinnableItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("types", types, "[PinnableItemType!]")(encoder4)))
  /**
 * A list of repositories and gists this profile owner has pinned to their profile
 */
def pinnedItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, types : scala.Option[List[PinnableItemType]] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[PinnableItemType]]]): SelectionBuilder[ProfileOwner, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("types", types, "[PinnableItemType!]")(encoder4)))
  /**
 * Returns how many more items this profile owner can pin to their profile.
 */
def pinnedItemsRemaining: SelectionBuilder[ProfileOwner, Int] = _root_.caliban.client.SelectionBuilder.Field("pinnedItemsRemaining", Scalar())
  /**
 * Can the viewer pin repositories and gists to the profile?
 */
def viewerCanChangePinnedItems: SelectionBuilder[ProfileOwner, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanChangePinnedItems", Scalar())
  /**
 * The public profile website URL.
 */
def websiteUrl: SelectionBuilder[ProfileOwner, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("websiteUrl", OptionOf(Scalar()))
}


type ProjectOwner
object ProjectOwner {
  def id: SelectionBuilder[ProjectOwner, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Find project by number.
 */
def project[A](number : Int)(innerSelection: SelectionBuilder[Project, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[ProjectOwner, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectOrder] = None, search : scala.Option[String] = None, states : scala.Option[List[ProjectState]] = None)(innerSelection: SelectionBuilder[ProjectConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[List[ProjectState]]]): SelectionBuilder[ProjectOwner, A] = _root_.caliban.client.SelectionBuilder.Field("projects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectOrder")(encoder4), Argument("search", search, "String")(encoder5), Argument("states", states, "[ProjectState!]")(encoder6)))
  /**
 * The HTTP path listing owners projects
 */
def projectsResourcePath: SelectionBuilder[ProjectOwner, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsResourcePath", Scalar())
  /**
 * The HTTP URL listing owners projects
 */
def projectsUrl: SelectionBuilder[ProjectOwner, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsUrl", Scalar())
  /**
 * Can the current viewer create new projects on this owner.
 */
def viewerCanCreateProjects: SelectionBuilder[ProjectOwner, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanCreateProjects", Scalar())
}


type ProjectV2FieldCommon
object ProjectV2FieldCommon {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2FieldCommon, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The field's type.
 */
def dataType: SelectionBuilder[ProjectV2FieldCommon, ProjectV2FieldType] = _root_.caliban.client.SelectionBuilder.Field("dataType", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2FieldCommon, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ProjectV2FieldCommon, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project field's name.
 */
def name: SelectionBuilder[ProjectV2FieldCommon, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The project that contains this field.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2FieldCommon, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2FieldCommon, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type ProjectV2ItemFieldValueCommon
object ProjectV2ItemFieldValueCommon {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2ItemFieldValueCommon, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2ItemFieldValueCommon, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2ItemFieldValueCommon, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The project field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldValueCommon, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  def id: SelectionBuilder[ProjectV2ItemFieldValueCommon, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project item that contains this value.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemFieldValueCommon, A] = _root_.caliban.client.SelectionBuilder.Field("item", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2ItemFieldValueCommon, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The project field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldValueCommon, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2ItemFieldValueCommon, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2ItemFieldValueCommon, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2Owner
object ProjectV2Owner {
  def id: SelectionBuilder[ProjectV2Owner, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Find a project by number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[ProjectV2Owner, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2Order]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[ProjectV2Owner, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2Order")(encoder4), Argument("query", query, "String")(encoder5)))
}


type ProjectV2Recent
object ProjectV2Recent {
  /**
 * Recent projects that this user has modified in the context of the owner.
 */
def recentProjects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectV2Recent, A] = _root_.caliban.client.SelectionBuilder.Field("recentProjects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type Reactable
object Reactable {
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Reactable, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[Reactable, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[Reactable, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[Reactable, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[Reactable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
}


type RepositoryAuditEntryData
object RepositoryAuditEntryData {
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepositoryAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepositoryAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepositoryAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
}


type RepositoryDiscussionAuthor
object RepositoryDiscussionAuthor {
  /**
 * Discussions this user has started.
 */
def repositoryDiscussions[A](after : scala.Option[String] = None, answered : scala.Option[Boolean] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DiscussionOrder] = None, repositoryId : scala.Option[String] = None, states : scala.Option[List[DiscussionState]] = None)(innerSelection: SelectionBuilder[DiscussionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[Boolean]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DiscussionOrder]], encoder6: ArgEncoder[scala.Option[String]], encoder7: ArgEncoder[scala.Option[List[DiscussionState]]]): SelectionBuilder[RepositoryDiscussionAuthor, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryDiscussions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("answered", answered, "Boolean")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "DiscussionOrder")(encoder5), Argument("repositoryId", repositoryId, "ID")(encoder6), Argument("states", states, "[DiscussionState!]")(encoder7)))
}


type RepositoryDiscussionCommentAuthor
object RepositoryDiscussionCommentAuthor {
  /**
 * Discussion comments this user has authored.
 */
def repositoryDiscussionComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, onlyAnswers : scala.Option[Boolean] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[DiscussionCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[RepositoryDiscussionCommentAuthor, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryDiscussionComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("onlyAnswers", onlyAnswers, "Boolean")(encoder4), Argument("repositoryId", repositoryId, "ID")(encoder5)))
}


type RepositoryInfo
object RepositoryInfo {
  /**
 * Identifies the date and time when the repository was archived.
 */
def archivedAt: SelectionBuilder[RepositoryInfo, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("archivedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[RepositoryInfo, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The description of the repository.
 */
def description: SelectionBuilder[RepositoryInfo, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The description of the repository rendered to HTML.
 */
def descriptionHTML: SelectionBuilder[RepositoryInfo, HTML] = _root_.caliban.client.SelectionBuilder.Field("descriptionHTML", Scalar())
  /**
 * Returns how many forks there are of this repository in the whole network.
 */
def forkCount: SelectionBuilder[RepositoryInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("forkCount", Scalar())
  /**
 * Indicates if the repository has the Discussions feature enabled.
 */
def hasDiscussionsEnabled: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasDiscussionsEnabled", Scalar())
  /**
 * Indicates if the repository has issues feature enabled.
 */
def hasIssuesEnabled: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasIssuesEnabled", Scalar())
  /**
 * Indicates if the repository has the Projects feature enabled.
 */
def hasProjectsEnabled: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasProjectsEnabled", Scalar())
  /**
 * Indicates if the repository has wiki feature enabled.
 */
def hasWikiEnabled: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasWikiEnabled", Scalar())
  /**
 * The repository's URL.
 */
def homepageUrl: SelectionBuilder[RepositoryInfo, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("homepageUrl", OptionOf(Scalar()))
  /**
 * Indicates if the repository is unmaintained.
 */
def isArchived: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isArchived", Scalar())
  /**
 * Identifies if the repository is a fork.
 */
def isFork: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isFork", Scalar())
  /**
 * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
 */
def isInOrganization: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isInOrganization", Scalar())
  /**
 * Indicates if the repository has been locked or not.
 */
def isLocked: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isLocked", Scalar())
  /**
 * Identifies if the repository is a mirror.
 */
def isMirror: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMirror", Scalar())
  /**
 * Identifies if the repository is private or internal.
 */
def isPrivate: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPrivate", Scalar())
  /**
 * Identifies if the repository is a template that can be used to generate new repositories.
 */
def isTemplate: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isTemplate", Scalar())
  /**
 * The license associated with the repository
 */
def licenseInfo[A](innerSelection: SelectionBuilder[License, A]): SelectionBuilder[RepositoryInfo, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("licenseInfo", OptionOf(Obj(innerSelection)))
  /**
 * The reason the repository has been locked.
 */
def lockReason: SelectionBuilder[RepositoryInfo, scala.Option[RepositoryLockReason]] = _root_.caliban.client.SelectionBuilder.Field("lockReason", OptionOf(Scalar()))
  /**
 * The repository's original mirror URL.
 */
def mirrorUrl: SelectionBuilder[RepositoryInfo, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("mirrorUrl", OptionOf(Scalar()))
  /**
 * The name of the repository.
 */
def name: SelectionBuilder[RepositoryInfo, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The repository's name with owner.
 */
def nameWithOwner: SelectionBuilder[RepositoryInfo, String] = _root_.caliban.client.SelectionBuilder.Field("nameWithOwner", Scalar())
  /**
 * The image used to represent this repository in Open Graph data.
 */
def openGraphImageUrl: SelectionBuilder[RepositoryInfo, URI] = _root_.caliban.client.SelectionBuilder.Field("openGraphImageUrl", Scalar())
  /**
 * The User owner of the repository.
 */
def owner[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepositoryInfo, A] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * Identifies the date and time when the repository was last pushed to.
 */
def pushedAt: SelectionBuilder[RepositoryInfo, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("pushedAt", OptionOf(Scalar()))
  /**
 * The HTTP path for this repository
 */
def resourcePath: SelectionBuilder[RepositoryInfo, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * A description of the repository, rendered to HTML without any links in it.
 */
def shortDescriptionHTML(limit : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[RepositoryInfo, HTML] = _root_.caliban.client.SelectionBuilder.Field("shortDescriptionHTML", Scalar(), arguments = List(Argument("limit", limit, "Int")(encoder0)))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[RepositoryInfo, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this repository
 */
def url: SelectionBuilder[RepositoryInfo, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
 */
def usesCustomOpenGraphImage: SelectionBuilder[RepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("usesCustomOpenGraphImage", Scalar())
  /**
 * Indicates the repository's visibility level.
 */
def visibility: SelectionBuilder[RepositoryInfo, RepositoryVisibility] = _root_.caliban.client.SelectionBuilder.Field("visibility", Scalar())
  /**
 * The User owner of the repository.
 */
def ownerOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepositoryInfo, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The User owner of the repository.
 */
def ownerInterface[A](owner: SelectionBuilder[RepositoryOwner, A]): SelectionBuilder[RepositoryInfo, A] = _root_.caliban.client.SelectionBuilder.Field("owner", Obj(owner))
}


type RepositoryNode
object RepositoryNode {
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryNode, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type RepositoryOwner
object RepositoryOwner {
  /**
 * A URL pointing to the owner's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[RepositoryOwner, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  def id: SelectionBuilder[RepositoryOwner, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The username used to login.
 */
def login: SelectionBuilder[RepositoryOwner, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * A list of repositories that the user owns.
 */
def repositories[A](affiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isFork : scala.Option[Boolean] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, ownerAffiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, privacy : scala.Option[RepositoryPrivacy] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[RepositoryOrder]], encoder8: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder9: ArgEncoder[scala.Option[RepositoryPrivacy]]): SelectionBuilder[RepositoryOwner, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("affiliations", affiliations, "[RepositoryAffiliation]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("isFork", isFork, "Boolean")(encoder4), Argument("isLocked", isLocked, "Boolean")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "RepositoryOrder")(encoder7), Argument("ownerAffiliations", ownerAffiliations, "[RepositoryAffiliation]")(encoder8), Argument("privacy", privacy, "RepositoryPrivacy")(encoder9)))
  /**
 * Find Repository.
 */
def repository[A](followRenames : scala.Option[Boolean] = None, name : String)(innerSelection: SelectionBuilder[Repository, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[String]): SelectionBuilder[RepositoryOwner, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)), arguments = List(Argument("followRenames", followRenames, "Boolean")(encoder0), Argument("name", name, "String!")(encoder1)))
  /**
 * The HTTP URL for the owner.
 */
def resourcePath: SelectionBuilder[RepositoryOwner, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for the owner.
 */
def url: SelectionBuilder[RepositoryOwner, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type RequirableByPullRequest
object RequirableByPullRequest {
  /**
 * Whether this is required to pass before merging for a specific pull request.
 */
def isRequired(pullRequestId : scala.Option[String] = None, pullRequestNumber : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[Int]]): SelectionBuilder[RequirableByPullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRequired", Scalar(), arguments = List(Argument("pullRequestId", pullRequestId, "ID")(encoder0), Argument("pullRequestNumber", pullRequestNumber, "Int")(encoder1)))
}


type Sponsorable
object Sponsorable {
  /**
 * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
 */
def estimatedNextSponsorsPayoutInCents: SelectionBuilder[Sponsorable, Int] = _root_.caliban.client.SelectionBuilder.Field("estimatedNextSponsorsPayoutInCents", Scalar())
  /**
 * True if this user/organization has a GitHub Sponsors listing.
 */
def hasSponsorsListing: SelectionBuilder[Sponsorable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasSponsorsListing", Scalar())
  /**
 * Whether the given account is sponsoring this user/organization.
 */
def isSponsoredBy(accountLogin : String)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Sponsorable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSponsoredBy", Scalar(), arguments = List(Argument("accountLogin", accountLogin, "String!")(encoder0)))
  /**
 * True if the viewer is sponsored by this user/organization.
 */
def isSponsoringViewer: SelectionBuilder[Sponsorable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSponsoringViewer", Scalar())
  /**
 * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
 */
def monthlyEstimatedSponsorsIncomeInCents: SelectionBuilder[Sponsorable, Int] = _root_.caliban.client.SelectionBuilder.Field("monthlyEstimatedSponsorsIncomeInCents", Scalar())
  /**
 * List of users and organizations this entity is sponsoring.
 */
def sponsoring[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorOrder] = None)(innerSelection: SelectionBuilder[SponsorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorOrder]]): SelectionBuilder[Sponsorable, A] = _root_.caliban.client.SelectionBuilder.Field("sponsoring", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorOrder")(encoder4)))
  /**
 * List of sponsors for this user or organization.
 */
def sponsors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorOrder] = None, tierId : scala.Option[String] = None)(innerSelection: SelectionBuilder[SponsorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Sponsorable, A] = _root_.caliban.client.SelectionBuilder.Field("sponsors", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorOrder")(encoder4), Argument("tierId", tierId, "ID")(encoder5)))
  /**
 * Events involving this sponsorable, such as new sponsorships.
 */
def sponsorsActivities[A](actions : scala.Option[List[SponsorsActivityAction]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeAsSponsor : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorsActivityOrder] = None, period : scala.Option[SponsorsActivityPeriod] = None, since : scala.Option[DateTime] = None, until : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[SponsorsActivityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[SponsorsActivityAction]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SponsorsActivityOrder]], encoder7: ArgEncoder[scala.Option[SponsorsActivityPeriod]], encoder8: ArgEncoder[scala.Option[DateTime]], encoder9: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[Sponsorable, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorsActivities", Obj(innerSelection), arguments = List(Argument("actions", actions, "[SponsorsActivityAction!]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includeAsSponsor", includeAsSponsor, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SponsorsActivityOrder")(encoder6), Argument("period", period, "SponsorsActivityPeriod")(encoder7), Argument("since", since, "DateTime")(encoder8), Argument("until", until, "DateTime")(encoder9)))
  /**
 * The GitHub Sponsors listing for this user or organization.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[Sponsorable, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", OptionOf(Obj(innerSelection)))
  /**
 * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
 */
def sponsorshipForViewerAsSponsor[A](activeOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Sponsorship, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Sponsorable, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipForViewerAsSponsor", OptionOf(Obj(innerSelection)), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0)))
  /**
 * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
 */
def sponsorshipForViewerAsSponsorable[A](activeOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Sponsorship, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Sponsorable, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipForViewerAsSponsorable", OptionOf(Obj(innerSelection)), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0)))
  /**
 * List of sponsorship updates sent from this sponsorable to sponsors.
 */
def sponsorshipNewsletters[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipNewsletterOrder] = None)(innerSelection: SelectionBuilder[SponsorshipNewsletterConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorshipNewsletterOrder]]): SelectionBuilder[Sponsorable, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipNewsletters", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorshipNewsletterOrder")(encoder4)))
  /**
 * The sponsorships where this user or organization is the maintainer receiving the funds.
 */
def sponsorshipsAsMaintainer[A](activeOnly : scala.Option[Boolean] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includePrivate : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[Sponsorable, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipsAsMaintainer", Obj(innerSelection), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includePrivate", includePrivate, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder6)))
  /**
 * The sponsorships where this user or organization is the funder.
 */
def sponsorshipsAsSponsor[A](activeOnly : scala.Option[Boolean] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, maintainerLogins : scala.Option[List[String]] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[Sponsorable, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipsAsSponsor", Obj(innerSelection), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("maintainerLogins", maintainerLogins, "[String!]")(encoder5), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder6)))
  /**
 * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
spent on GitHub to fund sponsorships. Only returns a value when viewed by the
user themselves or by a user who can manage sponsorships for the requested organization.
 */
def totalSponsorshipAmountAsSponsorInCents(since : scala.Option[DateTime] = None, sponsorableLogins : scala.Option[List[String]] = None, until : scala.Option[DateTime] = None)(implicit encoder0: ArgEncoder[scala.Option[DateTime]], encoder1: ArgEncoder[scala.Option[List[String]]], encoder2: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[Sponsorable, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("totalSponsorshipAmountAsSponsorInCents", OptionOf(Scalar()), arguments = List(Argument("since", since, "DateTime")(encoder0), Argument("sponsorableLogins", sponsorableLogins, "[String!]")(encoder1), Argument("until", until, "DateTime")(encoder2)))
  /**
 * Whether or not the viewer is able to sponsor this user/organization.
 */
def viewerCanSponsor: SelectionBuilder[Sponsorable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSponsor", Scalar())
  /**
 * True if the viewer is sponsoring this user/organization.
 */
def viewerIsSponsoring: SelectionBuilder[Sponsorable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsSponsoring", Scalar())
}


type Starrable
object Starrable {
  def id: SelectionBuilder[Starrable, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Returns a count of how many stargazers there are on this object
 */
def stargazerCount: SelectionBuilder[Starrable, Int] = _root_.caliban.client.SelectionBuilder.Field("stargazerCount", Scalar())
  /**
 * A list of users who have starred this starrable.
 */
def stargazers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[StarOrder] = None)(innerSelection: SelectionBuilder[StargazerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[StarOrder]]): SelectionBuilder[Starrable, A] = _root_.caliban.client.SelectionBuilder.Field("stargazers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "StarOrder")(encoder4)))
  /**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
def viewerHasStarred: SelectionBuilder[Starrable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasStarred", Scalar())
}


type Subscribable
object Subscribable {
  def id: SelectionBuilder[Subscribable, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[Subscribable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[Subscribable, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
}


type TeamAuditEntryData
object TeamAuditEntryData {
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[TeamAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[TeamAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[TeamAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
}


type TopicAuditEntryData
object TopicAuditEntryData {
  /**
 * The name of the topic added to the repository
 */
def topic[A](innerSelection: SelectionBuilder[Topic, A]): SelectionBuilder[TopicAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("topic", OptionOf(Obj(innerSelection)))
  /**
 * The name of the topic added to the repository
 */
def topicName: SelectionBuilder[TopicAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("topicName", OptionOf(Scalar()))
}


type UniformResourceLocatable
object UniformResourceLocatable {
  /**
 * The HTML path to this resource.
 */
def resourcePath: SelectionBuilder[UniformResourceLocatable, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The URL to this resource.
 */
def url: SelectionBuilder[UniformResourceLocatable, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type Updatable
object Updatable {
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[Updatable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
}


type UpdatableComment
object UpdatableComment {
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[UpdatableComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
}


type Votable
object Votable {
  /**
 * Number of upvotes that this subject has received.
 */
def upvoteCount: SelectionBuilder[Votable, Int] = _root_.caliban.client.SelectionBuilder.Field("upvoteCount", Scalar())
  /**
 * Whether or not the current user can add or remove an upvote on this subject.
 */
def viewerCanUpvote: SelectionBuilder[Votable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpvote", Scalar())
  /**
 * Whether or not the current user has already upvoted this subject.
 */
def viewerHasUpvoted: SelectionBuilder[Votable, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasUpvoted", Scalar())
}


  type AbortQueuedMigrationsPayload
object AbortQueuedMigrationsPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AbortQueuedMigrationsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * Did the operation succeed?
 */
def success: SelectionBuilder[AbortQueuedMigrationsPayload, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("success", OptionOf(Scalar()))
}


type AcceptEnterpriseAdministratorInvitationPayload
object AcceptEnterpriseAdministratorInvitationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AcceptEnterpriseAdministratorInvitationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The invitation that was accepted.
 */
def invitation[A](innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]): SelectionBuilder[AcceptEnterpriseAdministratorInvitationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitation", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of accepting an administrator invitation.
 */
def message: SelectionBuilder[AcceptEnterpriseAdministratorInvitationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type AcceptTopicSuggestionPayload
object AcceptTopicSuggestionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AcceptTopicSuggestionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The accepted topic.
 */
def topic[A](innerSelection: SelectionBuilder[Topic, A]): SelectionBuilder[AcceptTopicSuggestionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("topic", OptionOf(Obj(innerSelection)))
}


type ActorLocation
object ActorLocation {
  /**
 * City
 */
def city: SelectionBuilder[ActorLocation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("city", OptionOf(Scalar()))
  /**
 * Country name
 */
def country: SelectionBuilder[ActorLocation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("country", OptionOf(Scalar()))
  /**
 * Country code
 */
def countryCode: SelectionBuilder[ActorLocation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("countryCode", OptionOf(Scalar()))
  /**
 * Region name
 */
def region: SelectionBuilder[ActorLocation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("region", OptionOf(Scalar()))
  /**
 * Region or state code
 */
def regionCode: SelectionBuilder[ActorLocation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("regionCode", OptionOf(Scalar()))
}


type AddAssigneesToAssignablePayload
object AddAssigneesToAssignablePayload {
  /**
 * The item that was assigned.
 */
def assignable[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[AddAssigneesToAssignablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignable", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddAssigneesToAssignablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item that was assigned.
 */
def assignableOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[AddAssigneesToAssignablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("assignable", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The item that was assigned.
 */
def assignableInterface[A](assignable: SelectionBuilder[Assignable, A]): SelectionBuilder[AddAssigneesToAssignablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignable", OptionOf(Obj(assignable)))
}


type AddCommentPayload
object AddCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The edge from the subject's comment connection.
 */
def commentEdge[A](innerSelection: SelectionBuilder[IssueCommentEdge, A]): SelectionBuilder[AddCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commentEdge", OptionOf(Obj(innerSelection)))
  /**
 * The subject
 */
def subject[A](onAddedToMergeQueueEvent: SelectionBuilder[AddedToMergeQueueEvent, A], onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onApp: SelectionBuilder[App, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onAutoMergeDisabledEvent: SelectionBuilder[AutoMergeDisabledEvent, A], onAutoMergeEnabledEvent: SelectionBuilder[AutoMergeEnabledEvent, A], onAutoRebaseEnabledEvent: SelectionBuilder[AutoRebaseEnabledEvent, A], onAutoSquashEnabledEvent: SelectionBuilder[AutoSquashEnabledEvent, A], onAutomaticBaseChangeFailedEvent: SelectionBuilder[AutomaticBaseChangeFailedEvent, A], onAutomaticBaseChangeSucceededEvent: SelectionBuilder[AutomaticBaseChangeSucceededEvent, A], onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onBlob: SelectionBuilder[Blob, A], onBot: SelectionBuilder[Bot, A], onBranchProtectionRule: SelectionBuilder[BranchProtectionRule, A], onBypassForcePushAllowance: SelectionBuilder[BypassForcePushAllowance, A], onBypassPullRequestAllowance: SelectionBuilder[BypassPullRequestAllowance, A], onCWE: SelectionBuilder[CWE, A], onCheckRun: SelectionBuilder[CheckRun, A], onCheckSuite: SelectionBuilder[CheckSuite, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCodeOfConduct: SelectionBuilder[CodeOfConduct, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onCommit: SelectionBuilder[Commit, A], onCommitComment: SelectionBuilder[CommitComment, A], onCommitCommentThread: SelectionBuilder[CommitCommentThread, A], onComparison: SelectionBuilder[Comparison, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDependencyGraphManifest: SelectionBuilder[DependencyGraphManifest, A], onDeployKey: SelectionBuilder[DeployKey, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeployment: SelectionBuilder[Deployment, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onDeploymentReview: SelectionBuilder[DeploymentReview, A], onDeploymentStatus: SelectionBuilder[DeploymentStatus, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionCategory: SelectionBuilder[DiscussionCategory, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onDiscussionPoll: SelectionBuilder[DiscussionPoll, A], onDiscussionPollOption: SelectionBuilder[DiscussionPollOption, A], onDraftIssue: SelectionBuilder[DraftIssue, A], onEnterprise: SelectionBuilder[Enterprise, A], onEnterpriseAdministratorInvitation: SelectionBuilder[EnterpriseAdministratorInvitation, A], onEnterpriseIdentityProvider: SelectionBuilder[EnterpriseIdentityProvider, A], onEnterpriseRepositoryInfo: SelectionBuilder[EnterpriseRepositoryInfo, A], onEnterpriseServerInstallation: SelectionBuilder[EnterpriseServerInstallation, A], onEnterpriseServerUserAccount: SelectionBuilder[EnterpriseServerUserAccount, A], onEnterpriseServerUserAccountEmail: SelectionBuilder[EnterpriseServerUserAccountEmail, A], onEnterpriseServerUserAccountsUpload: SelectionBuilder[EnterpriseServerUserAccountsUpload, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onEnvironment: SelectionBuilder[Environment, A], onExternalIdentity: SelectionBuilder[ExternalIdentity, A], onGist: SelectionBuilder[Gist, A], onGistComment: SelectionBuilder[GistComment, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIpAllowListEntry: SelectionBuilder[IpAllowListEntry, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabel: SelectionBuilder[Label, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLanguage: SelectionBuilder[Language, A], onLicense: SelectionBuilder[License, A], onLinkedBranch: SelectionBuilder[LinkedBranch, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMannequin: SelectionBuilder[Mannequin, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMarketplaceCategory: SelectionBuilder[MarketplaceCategory, A], onMarketplaceListing: SelectionBuilder[MarketplaceListing, A], onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A], onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A], onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMergeQueue: SelectionBuilder[MergeQueue, A], onMergeQueueEntry: SelectionBuilder[MergeQueueEntry, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMigrationSource: SelectionBuilder[MigrationSource, A], onMilestone: SelectionBuilder[Milestone, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onOIDCProvider: SelectionBuilder[OIDCProvider, A], onOauthApplicationCreateAuditEntry: SelectionBuilder[OauthApplicationCreateAuditEntry, A], onOrgAddBillingManagerAuditEntry: SelectionBuilder[OrgAddBillingManagerAuditEntry, A], onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A], onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A], onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A], onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A], onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A], onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A], onOrgDisableSamlAuditEntry: SelectionBuilder[OrgDisableSamlAuditEntry, A], onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A], onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A], onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A], onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A], onOrgInviteMemberAuditEntry: SelectionBuilder[OrgInviteMemberAuditEntry, A], onOrgInviteToBusinessAuditEntry: SelectionBuilder[OrgInviteToBusinessAuditEntry, A], onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A], onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A], onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A], onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A], onOrgRemoveMemberAuditEntry: SelectionBuilder[OrgRemoveMemberAuditEntry, A], onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A], onOrgRestoreMemberAuditEntry: SelectionBuilder[OrgRestoreMemberAuditEntry, A], onOrgUnblockUserAuditEntry: SelectionBuilder[OrgUnblockUserAuditEntry, A], onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A], onOrgUpdateMemberAuditEntry: SelectionBuilder[OrgUpdateMemberAuditEntry, A], onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A], onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A], onOrganization: SelectionBuilder[Organization, A], onOrganizationIdentityProvider: SelectionBuilder[OrganizationIdentityProvider, A], onOrganizationInvitation: SelectionBuilder[OrganizationInvitation, A], onOrganizationMigration: SelectionBuilder[OrganizationMigration, A], onPackage: SelectionBuilder[Package, A], onPackageFile: SelectionBuilder[PackageFile, A], onPackageTag: SelectionBuilder[PackageTag, A], onPackageVersion: SelectionBuilder[PackageVersion, A], onPinnedDiscussion: SelectionBuilder[PinnedDiscussion, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onPinnedIssue: SelectionBuilder[PinnedIssue, A], onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A], onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A], onProject: SelectionBuilder[Project, A], onProjectCard: SelectionBuilder[ProjectCard, A], onProjectColumn: SelectionBuilder[ProjectColumn, A], onProjectV2: SelectionBuilder[ProjectV2, A], onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2Item: SelectionBuilder[ProjectV2Item, A], onProjectV2ItemFieldDateValue: SelectionBuilder[ProjectV2ItemFieldDateValue, A], onProjectV2ItemFieldIterationValue: SelectionBuilder[ProjectV2ItemFieldIterationValue, A], onProjectV2ItemFieldNumberValue: SelectionBuilder[ProjectV2ItemFieldNumberValue, A], onProjectV2ItemFieldSingleSelectValue: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A], onProjectV2ItemFieldTextValue: SelectionBuilder[ProjectV2ItemFieldTextValue, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A], onProjectV2View: SelectionBuilder[ProjectV2View, A], onProjectV2Workflow: SelectionBuilder[ProjectV2Workflow, A], onPublicKey: SelectionBuilder[PublicKey, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestCommit: SelectionBuilder[PullRequestCommit, A], onPullRequestCommitCommentThread: SelectionBuilder[PullRequestCommitCommentThread, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onPullRequestThread: SelectionBuilder[PullRequestThread, A], onPush: SelectionBuilder[Push, A], onPushAllowance: SelectionBuilder[PushAllowance, A], onReaction: SelectionBuilder[Reaction, A], onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A], onRef: SelectionBuilder[Ref, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRelease: SelectionBuilder[Release, A], onReleaseAsset: SelectionBuilder[ReleaseAsset, A], onRemovedFromMergeQueueEvent: SelectionBuilder[RemovedFromMergeQueueEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A], onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A], onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A], onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A], onRepoChangeMergeSettingAuditEntry: SelectionBuilder[RepoChangeMergeSettingAuditEntry, A], onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A], onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A], onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A], onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A], onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A], onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A], onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A], onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A], onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A], onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A], onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A], onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A], onRepoRemoveMemberAuditEntry: SelectionBuilder[RepoRemoveMemberAuditEntry, A], onRepoRemoveTopicAuditEntry: SelectionBuilder[RepoRemoveTopicAuditEntry, A], onRepository: SelectionBuilder[Repository, A], onRepositoryInvitation: SelectionBuilder[RepositoryInvitation, A], onRepositoryMigration: SelectionBuilder[RepositoryMigration, A], onRepositoryRule: SelectionBuilder[RepositoryRule, A], onRepositoryRuleset: SelectionBuilder[RepositoryRuleset, A], onRepositoryRulesetBypassActor: SelectionBuilder[RepositoryRulesetBypassActor, A], onRepositoryTopic: SelectionBuilder[RepositoryTopic, A], onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A], onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A], onRepositoryVulnerabilityAlert: SelectionBuilder[RepositoryVulnerabilityAlert, A], onReviewDismissalAllowance: SelectionBuilder[ReviewDismissalAllowance, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequest: SelectionBuilder[ReviewRequest, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSavedReply: SelectionBuilder[SavedReply, A], onSecurityAdvisory: SelectionBuilder[SecurityAdvisory, A], onSponsorsActivity: SelectionBuilder[SponsorsActivity, A], onSponsorsListing: SelectionBuilder[SponsorsListing, A], onSponsorsListingFeaturedItem: SelectionBuilder[SponsorsListingFeaturedItem, A], onSponsorsTier: SelectionBuilder[SponsorsTier, A], onSponsorship: SelectionBuilder[Sponsorship, A], onSponsorshipNewsletter: SelectionBuilder[SponsorshipNewsletter, A], onStatus: SelectionBuilder[Status, A], onStatusCheckRollup: SelectionBuilder[StatusCheckRollup, A], onStatusContext: SelectionBuilder[StatusContext, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTag: SelectionBuilder[Tag, A], onTeam: SelectionBuilder[Team, A], onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A], onTeamAddRepositoryAuditEntry: SelectionBuilder[TeamAddRepositoryAuditEntry, A], onTeamChangeParentTeamAuditEntry: SelectionBuilder[TeamChangeParentTeamAuditEntry, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A], onTeamRemoveMemberAuditEntry: SelectionBuilder[TeamRemoveMemberAuditEntry, A], onTeamRemoveRepositoryAuditEntry: SelectionBuilder[TeamRemoveRepositoryAuditEntry, A], onTopic: SelectionBuilder[Topic, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onTree: SelectionBuilder[Tree, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUser: SelectionBuilder[User, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A], onUserContentEdit: SelectionBuilder[UserContentEdit, A], onUserStatus: SelectionBuilder[UserStatus, A], onVerifiableDomain: SelectionBuilder[VerifiableDomain, A], onWorkflow: SelectionBuilder[Workflow, A], onWorkflowRun: SelectionBuilder[WorkflowRun, A], onWorkflowRunFile: SelectionBuilder[WorkflowRunFile, A]): SelectionBuilder[AddCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> Obj(onAddedToMergeQueueEvent), "AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "App" -> Obj(onApp), "AssignedEvent" -> Obj(onAssignedEvent), "AutoMergeDisabledEvent" -> Obj(onAutoMergeDisabledEvent), "AutoMergeEnabledEvent" -> Obj(onAutoMergeEnabledEvent), "AutoRebaseEnabledEvent" -> Obj(onAutoRebaseEnabledEvent), "AutoSquashEnabledEvent" -> Obj(onAutoSquashEnabledEvent), "AutomaticBaseChangeFailedEvent" -> Obj(onAutomaticBaseChangeFailedEvent), "AutomaticBaseChangeSucceededEvent" -> Obj(onAutomaticBaseChangeSucceededEvent), "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "Blob" -> Obj(onBlob), "Bot" -> Obj(onBot), "BranchProtectionRule" -> Obj(onBranchProtectionRule), "BypassForcePushAllowance" -> Obj(onBypassForcePushAllowance), "BypassPullRequestAllowance" -> Obj(onBypassPullRequestAllowance), "CWE" -> Obj(onCWE), "CheckRun" -> Obj(onCheckRun), "CheckSuite" -> Obj(onCheckSuite), "ClosedEvent" -> Obj(onClosedEvent), "CodeOfConduct" -> Obj(onCodeOfConduct), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "Commit" -> Obj(onCommit), "CommitComment" -> Obj(onCommitComment), "CommitCommentThread" -> Obj(onCommitCommentThread), "Comparison" -> Obj(onComparison), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DependencyGraphManifest" -> Obj(onDependencyGraphManifest), "DeployKey" -> Obj(onDeployKey), "DeployedEvent" -> Obj(onDeployedEvent), "Deployment" -> Obj(onDeployment), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "DeploymentReview" -> Obj(onDeploymentReview), "DeploymentStatus" -> Obj(onDeploymentStatus), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "Discussion" -> Obj(onDiscussion), "DiscussionCategory" -> Obj(onDiscussionCategory), "DiscussionComment" -> Obj(onDiscussionComment), "DiscussionPoll" -> Obj(onDiscussionPoll), "DiscussionPollOption" -> Obj(onDiscussionPollOption), "DraftIssue" -> Obj(onDraftIssue), "Enterprise" -> Obj(onEnterprise), "EnterpriseAdministratorInvitation" -> Obj(onEnterpriseAdministratorInvitation), "EnterpriseIdentityProvider" -> Obj(onEnterpriseIdentityProvider), "EnterpriseRepositoryInfo" -> Obj(onEnterpriseRepositoryInfo), "EnterpriseServerInstallation" -> Obj(onEnterpriseServerInstallation), "EnterpriseServerUserAccount" -> Obj(onEnterpriseServerUserAccount), "EnterpriseServerUserAccountEmail" -> Obj(onEnterpriseServerUserAccountEmail), "EnterpriseServerUserAccountsUpload" -> Obj(onEnterpriseServerUserAccountsUpload), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Environment" -> Obj(onEnvironment), "ExternalIdentity" -> Obj(onExternalIdentity), "Gist" -> Obj(onGist), "GistComment" -> Obj(onGistComment), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IpAllowListEntry" -> Obj(onIpAllowListEntry), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "Label" -> Obj(onLabel), "LabeledEvent" -> Obj(onLabeledEvent), "Language" -> Obj(onLanguage), "License" -> Obj(onLicense), "LinkedBranch" -> Obj(onLinkedBranch), "LockedEvent" -> Obj(onLockedEvent), "Mannequin" -> Obj(onMannequin), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MarketplaceCategory" -> Obj(onMarketplaceCategory), "MarketplaceListing" -> Obj(onMarketplaceListing), "MembersCanDeleteReposClearAuditEntry" -> Obj(onMembersCanDeleteReposClearAuditEntry), "MembersCanDeleteReposDisableAuditEntry" -> Obj(onMembersCanDeleteReposDisableAuditEntry), "MembersCanDeleteReposEnableAuditEntry" -> Obj(onMembersCanDeleteReposEnableAuditEntry), "MentionedEvent" -> Obj(onMentionedEvent), "MergeQueue" -> Obj(onMergeQueue), "MergeQueueEntry" -> Obj(onMergeQueueEntry), "MergedEvent" -> Obj(onMergedEvent), "MigrationSource" -> Obj(onMigrationSource), "Milestone" -> Obj(onMilestone), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "OIDCProvider" -> Obj(onOIDCProvider), "OauthApplicationCreateAuditEntry" -> Obj(onOauthApplicationCreateAuditEntry), "OrgAddBillingManagerAuditEntry" -> Obj(onOrgAddBillingManagerAuditEntry), "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry), "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigDisableCollaboratorsOnlyAuditEntry), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigEnableCollaboratorsOnlyAuditEntry), "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry), "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(onOrgDisableOauthAppRestrictionsAuditEntry), "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry), "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(onOrgDisableTwoFactorRequirementAuditEntry), "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(onOrgEnableOauthAppRestrictionsAuditEntry), "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry), "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(onOrgEnableTwoFactorRequirementAuditEntry), "OrgInviteMemberAuditEntry" -> Obj(onOrgInviteMemberAuditEntry), "OrgInviteToBusinessAuditEntry" -> Obj(onOrgInviteToBusinessAuditEntry), "OrgOauthAppAccessApprovedAuditEntry" -> Obj(onOrgOauthAppAccessApprovedAuditEntry), "OrgOauthAppAccessDeniedAuditEntry" -> Obj(onOrgOauthAppAccessDeniedAuditEntry), "OrgOauthAppAccessRequestedAuditEntry" -> Obj(onOrgOauthAppAccessRequestedAuditEntry), "OrgRemoveBillingManagerAuditEntry" -> Obj(onOrgRemoveBillingManagerAuditEntry), "OrgRemoveMemberAuditEntry" -> Obj(onOrgRemoveMemberAuditEntry), "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(onOrgRemoveOutsideCollaboratorAuditEntry), "OrgRestoreMemberAuditEntry" -> Obj(onOrgRestoreMemberAuditEntry), "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(onOrgUpdateDefaultRepositoryPermissionAuditEntry), "OrgUpdateMemberAuditEntry" -> Obj(onOrgUpdateMemberAuditEntry), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryCreationPermissionAuditEntry), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry), "Organization" -> Obj(onOrganization), "OrganizationIdentityProvider" -> Obj(onOrganizationIdentityProvider), "OrganizationInvitation" -> Obj(onOrganizationInvitation), "OrganizationMigration" -> Obj(onOrganizationMigration), "Package" -> Obj(onPackage), "PackageFile" -> Obj(onPackageFile), "PackageTag" -> Obj(onPackageTag), "PackageVersion" -> Obj(onPackageVersion), "PinnedDiscussion" -> Obj(onPinnedDiscussion), "PinnedEvent" -> Obj(onPinnedEvent), "PinnedIssue" -> Obj(onPinnedIssue), "PrivateRepositoryForkingDisableAuditEntry" -> Obj(onPrivateRepositoryForkingDisableAuditEntry), "PrivateRepositoryForkingEnableAuditEntry" -> Obj(onPrivateRepositoryForkingEnableAuditEntry), "Project" -> Obj(onProject), "ProjectCard" -> Obj(onProjectCard), "ProjectColumn" -> Obj(onProjectColumn), "ProjectV2" -> Obj(onProjectV2), "ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2Item" -> Obj(onProjectV2Item), "ProjectV2ItemFieldDateValue" -> Obj(onProjectV2ItemFieldDateValue), "ProjectV2ItemFieldIterationValue" -> Obj(onProjectV2ItemFieldIterationValue), "ProjectV2ItemFieldNumberValue" -> Obj(onProjectV2ItemFieldNumberValue), "ProjectV2ItemFieldSingleSelectValue" -> Obj(onProjectV2ItemFieldSingleSelectValue), "ProjectV2ItemFieldTextValue" -> Obj(onProjectV2ItemFieldTextValue), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField), "ProjectV2View" -> Obj(onProjectV2View), "ProjectV2Workflow" -> Obj(onProjectV2Workflow), "PublicKey" -> Obj(onPublicKey), "PullRequest" -> Obj(onPullRequest), "PullRequestCommit" -> Obj(onPullRequestCommit), "PullRequestCommitCommentThread" -> Obj(onPullRequestCommitCommentThread), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "PullRequestThread" -> Obj(onPullRequestThread), "Push" -> Obj(onPush), "PushAllowance" -> Obj(onPushAllowance), "Reaction" -> Obj(onReaction), "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent), "Ref" -> Obj(onRef), "ReferencedEvent" -> Obj(onReferencedEvent), "Release" -> Obj(onRelease), "ReleaseAsset" -> Obj(onReleaseAsset), "RemovedFromMergeQueueEvent" -> Obj(onRemovedFromMergeQueueEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry), "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry), "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry), "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry), "RepoChangeMergeSettingAuditEntry" -> Obj(onRepoChangeMergeSettingAuditEntry), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigDisableAnonymousGitAccessAuditEntry), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigDisableCollaboratorsOnlyAuditEntry), "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(onRepoConfigDisableContributorsOnlyAuditEntry), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigDisableSockpuppetDisallowedAuditEntry), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigEnableAnonymousGitAccessAuditEntry), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigEnableCollaboratorsOnlyAuditEntry), "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(onRepoConfigEnableContributorsOnlyAuditEntry), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigEnableSockpuppetDisallowedAuditEntry), "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigLockAnonymousGitAccessAuditEntry), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigUnlockAnonymousGitAccessAuditEntry), "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry), "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry), "RepoRemoveMemberAuditEntry" -> Obj(onRepoRemoveMemberAuditEntry), "RepoRemoveTopicAuditEntry" -> Obj(onRepoRemoveTopicAuditEntry), "Repository" -> Obj(onRepository), "RepositoryInvitation" -> Obj(onRepositoryInvitation), "RepositoryMigration" -> Obj(onRepositoryMigration), "RepositoryRule" -> Obj(onRepositoryRule), "RepositoryRuleset" -> Obj(onRepositoryRuleset), "RepositoryRulesetBypassActor" -> Obj(onRepositoryRulesetBypassActor), "RepositoryTopic" -> Obj(onRepositoryTopic), "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(onRepositoryVisibilityChangeDisableAuditEntry), "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(onRepositoryVisibilityChangeEnableAuditEntry), "RepositoryVulnerabilityAlert" -> Obj(onRepositoryVulnerabilityAlert), "ReviewDismissalAllowance" -> Obj(onReviewDismissalAllowance), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequest" -> Obj(onReviewRequest), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SavedReply" -> Obj(onSavedReply), "SecurityAdvisory" -> Obj(onSecurityAdvisory), "SponsorsActivity" -> Obj(onSponsorsActivity), "SponsorsListing" -> Obj(onSponsorsListing), "SponsorsListingFeaturedItem" -> Obj(onSponsorsListingFeaturedItem), "SponsorsTier" -> Obj(onSponsorsTier), "Sponsorship" -> Obj(onSponsorship), "SponsorshipNewsletter" -> Obj(onSponsorshipNewsletter), "Status" -> Obj(onStatus), "StatusCheckRollup" -> Obj(onStatusCheckRollup), "StatusContext" -> Obj(onStatusContext), "SubscribedEvent" -> Obj(onSubscribedEvent), "Tag" -> Obj(onTag), "Team" -> Obj(onTeam), "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry), "TeamAddRepositoryAuditEntry" -> Obj(onTeamAddRepositoryAuditEntry), "TeamChangeParentTeamAuditEntry" -> Obj(onTeamChangeParentTeamAuditEntry), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment), "TeamRemoveMemberAuditEntry" -> Obj(onTeamRemoveMemberAuditEntry), "TeamRemoveRepositoryAuditEntry" -> Obj(onTeamRemoveRepositoryAuditEntry), "Topic" -> Obj(onTopic), "TransferredEvent" -> Obj(onTransferredEvent), "Tree" -> Obj(onTree), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "User" -> Obj(onUser), "UserBlockedEvent" -> Obj(onUserBlockedEvent), "UserContentEdit" -> Obj(onUserContentEdit), "UserStatus" -> Obj(onUserStatus), "VerifiableDomain" -> Obj(onVerifiableDomain), "Workflow" -> Obj(onWorkflow), "WorkflowRun" -> Obj(onWorkflowRun), "WorkflowRunFile" -> Obj(onWorkflowRunFile)))))
  /**
 * The edge from the subject's timeline connection.
 */
def timelineEdge[A](innerSelection: SelectionBuilder[IssueTimelineItemEdge, A]): SelectionBuilder[AddCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("timelineEdge", OptionOf(Obj(innerSelection)))
  /**
 * The subject
 */
def subjectOption[A](onAddedToMergeQueueEvent: scala.Option[SelectionBuilder[AddedToMergeQueueEvent, A]] = None, onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onApp: scala.Option[SelectionBuilder[App, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onAutoMergeDisabledEvent: scala.Option[SelectionBuilder[AutoMergeDisabledEvent, A]] = None, onAutoMergeEnabledEvent: scala.Option[SelectionBuilder[AutoMergeEnabledEvent, A]] = None, onAutoRebaseEnabledEvent: scala.Option[SelectionBuilder[AutoRebaseEnabledEvent, A]] = None, onAutoSquashEnabledEvent: scala.Option[SelectionBuilder[AutoSquashEnabledEvent, A]] = None, onAutomaticBaseChangeFailedEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeFailedEvent, A]] = None, onAutomaticBaseChangeSucceededEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]] = None, onBaseRefChangedEvent: scala.Option[SelectionBuilder[BaseRefChangedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onBranchProtectionRule: scala.Option[SelectionBuilder[BranchProtectionRule, A]] = None, onBypassForcePushAllowance: scala.Option[SelectionBuilder[BypassForcePushAllowance, A]] = None, onBypassPullRequestAllowance: scala.Option[SelectionBuilder[BypassPullRequestAllowance, A]] = None, onCWE: scala.Option[SelectionBuilder[CWE, A]] = None, onCheckRun: scala.Option[SelectionBuilder[CheckRun, A]] = None, onCheckSuite: scala.Option[SelectionBuilder[CheckSuite, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCodeOfConduct: scala.Option[SelectionBuilder[CodeOfConduct, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onCommitCommentThread: scala.Option[SelectionBuilder[CommitCommentThread, A]] = None, onComparison: scala.Option[SelectionBuilder[Comparison, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertToDraftEvent: scala.Option[SelectionBuilder[ConvertToDraftEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDependencyGraphManifest: scala.Option[SelectionBuilder[DependencyGraphManifest, A]] = None, onDeployKey: scala.Option[SelectionBuilder[DeployKey, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeployment: scala.Option[SelectionBuilder[Deployment, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onDeploymentReview: scala.Option[SelectionBuilder[DeploymentReview, A]] = None, onDeploymentStatus: scala.Option[SelectionBuilder[DeploymentStatus, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionCategory: scala.Option[SelectionBuilder[DiscussionCategory, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onDiscussionPoll: scala.Option[SelectionBuilder[DiscussionPoll, A]] = None, onDiscussionPollOption: scala.Option[SelectionBuilder[DiscussionPollOption, A]] = None, onDraftIssue: scala.Option[SelectionBuilder[DraftIssue, A]] = None, onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onEnterpriseAdministratorInvitation: scala.Option[SelectionBuilder[EnterpriseAdministratorInvitation, A]] = None, onEnterpriseIdentityProvider: scala.Option[SelectionBuilder[EnterpriseIdentityProvider, A]] = None, onEnterpriseRepositoryInfo: scala.Option[SelectionBuilder[EnterpriseRepositoryInfo, A]] = None, onEnterpriseServerInstallation: scala.Option[SelectionBuilder[EnterpriseServerInstallation, A]] = None, onEnterpriseServerUserAccount: scala.Option[SelectionBuilder[EnterpriseServerUserAccount, A]] = None, onEnterpriseServerUserAccountEmail: scala.Option[SelectionBuilder[EnterpriseServerUserAccountEmail, A]] = None, onEnterpriseServerUserAccountsUpload: scala.Option[SelectionBuilder[EnterpriseServerUserAccountsUpload, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onEnvironment: scala.Option[SelectionBuilder[Environment, A]] = None, onExternalIdentity: scala.Option[SelectionBuilder[ExternalIdentity, A]] = None, onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onGistComment: scala.Option[SelectionBuilder[GistComment, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIpAllowListEntry: scala.Option[SelectionBuilder[IpAllowListEntry, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabel: scala.Option[SelectionBuilder[Label, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLanguage: scala.Option[SelectionBuilder[Language, A]] = None, onLicense: scala.Option[SelectionBuilder[License, A]] = None, onLinkedBranch: scala.Option[SelectionBuilder[LinkedBranch, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMarketplaceCategory: scala.Option[SelectionBuilder[MarketplaceCategory, A]] = None, onMarketplaceListing: scala.Option[SelectionBuilder[MarketplaceListing, A]] = None, onMembersCanDeleteReposClearAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]] = None, onMembersCanDeleteReposDisableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]] = None, onMembersCanDeleteReposEnableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMergeQueue: scala.Option[SelectionBuilder[MergeQueue, A]] = None, onMergeQueueEntry: scala.Option[SelectionBuilder[MergeQueueEntry, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMigrationSource: scala.Option[SelectionBuilder[MigrationSource, A]] = None, onMilestone: scala.Option[SelectionBuilder[Milestone, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onOIDCProvider: scala.Option[SelectionBuilder[OIDCProvider, A]] = None, onOauthApplicationCreateAuditEntry: scala.Option[SelectionBuilder[OauthApplicationCreateAuditEntry, A]] = None, onOrgAddBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgAddBillingManagerAuditEntry, A]] = None, onOrgAddMemberAuditEntry: scala.Option[SelectionBuilder[OrgAddMemberAuditEntry, A]] = None, onOrgBlockUserAuditEntry: scala.Option[SelectionBuilder[OrgBlockUserAuditEntry, A]] = None, onOrgConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onOrgConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onOrgCreateAuditEntry: scala.Option[SelectionBuilder[OrgCreateAuditEntry, A]] = None, onOrgDisableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]] = None, onOrgDisableSamlAuditEntry: scala.Option[SelectionBuilder[OrgDisableSamlAuditEntry, A]] = None, onOrgDisableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]] = None, onOrgEnableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]] = None, onOrgEnableSamlAuditEntry: scala.Option[SelectionBuilder[OrgEnableSamlAuditEntry, A]] = None, onOrgEnableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]] = None, onOrgInviteMemberAuditEntry: scala.Option[SelectionBuilder[OrgInviteMemberAuditEntry, A]] = None, onOrgInviteToBusinessAuditEntry: scala.Option[SelectionBuilder[OrgInviteToBusinessAuditEntry, A]] = None, onOrgOauthAppAccessApprovedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]] = None, onOrgOauthAppAccessDeniedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]] = None, onOrgOauthAppAccessRequestedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]] = None, onOrgRemoveBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]] = None, onOrgRemoveMemberAuditEntry: scala.Option[SelectionBuilder[OrgRemoveMemberAuditEntry, A]] = None, onOrgRemoveOutsideCollaboratorAuditEntry: scala.Option[SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]] = None, onOrgRestoreMemberAuditEntry: scala.Option[SelectionBuilder[OrgRestoreMemberAuditEntry, A]] = None, onOrgUnblockUserAuditEntry: scala.Option[SelectionBuilder[OrgUnblockUserAuditEntry, A]] = None, onOrgUpdateDefaultRepositoryPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]] = None, onOrgUpdateMemberAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberAuditEntry, A]] = None, onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A]] = None, onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onOrganizationIdentityProvider: scala.Option[SelectionBuilder[OrganizationIdentityProvider, A]] = None, onOrganizationInvitation: scala.Option[SelectionBuilder[OrganizationInvitation, A]] = None, onOrganizationMigration: scala.Option[SelectionBuilder[OrganizationMigration, A]] = None, onPackage: scala.Option[SelectionBuilder[Package, A]] = None, onPackageFile: scala.Option[SelectionBuilder[PackageFile, A]] = None, onPackageTag: scala.Option[SelectionBuilder[PackageTag, A]] = None, onPackageVersion: scala.Option[SelectionBuilder[PackageVersion, A]] = None, onPinnedDiscussion: scala.Option[SelectionBuilder[PinnedDiscussion, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onPinnedIssue: scala.Option[SelectionBuilder[PinnedIssue, A]] = None, onPrivateRepositoryForkingDisableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]] = None, onPrivateRepositoryForkingEnableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]] = None, onProject: scala.Option[SelectionBuilder[Project, A]] = None, onProjectCard: scala.Option[SelectionBuilder[ProjectCard, A]] = None, onProjectColumn: scala.Option[SelectionBuilder[ProjectColumn, A]] = None, onProjectV2: scala.Option[SelectionBuilder[ProjectV2, A]] = None, onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2Item: scala.Option[SelectionBuilder[ProjectV2Item, A]] = None, onProjectV2ItemFieldDateValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldDateValue, A]] = None, onProjectV2ItemFieldIterationValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldIterationValue, A]] = None, onProjectV2ItemFieldNumberValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldNumberValue, A]] = None, onProjectV2ItemFieldSingleSelectValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A]] = None, onProjectV2ItemFieldTextValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldTextValue, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None, onProjectV2View: scala.Option[SelectionBuilder[ProjectV2View, A]] = None, onProjectV2Workflow: scala.Option[SelectionBuilder[ProjectV2Workflow, A]] = None, onPublicKey: scala.Option[SelectionBuilder[PublicKey, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestCommit: scala.Option[SelectionBuilder[PullRequestCommit, A]] = None, onPullRequestCommitCommentThread: scala.Option[SelectionBuilder[PullRequestCommitCommentThread, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onPullRequestThread: scala.Option[SelectionBuilder[PullRequestThread, A]] = None, onPush: scala.Option[SelectionBuilder[Push, A]] = None, onPushAllowance: scala.Option[SelectionBuilder[PushAllowance, A]] = None, onReaction: scala.Option[SelectionBuilder[Reaction, A]] = None, onReadyForReviewEvent: scala.Option[SelectionBuilder[ReadyForReviewEvent, A]] = None, onRef: scala.Option[SelectionBuilder[Ref, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onReleaseAsset: scala.Option[SelectionBuilder[ReleaseAsset, A]] = None, onRemovedFromMergeQueueEvent: scala.Option[SelectionBuilder[RemovedFromMergeQueueEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onRepoAccessAuditEntry: scala.Option[SelectionBuilder[RepoAccessAuditEntry, A]] = None, onRepoAddMemberAuditEntry: scala.Option[SelectionBuilder[RepoAddMemberAuditEntry, A]] = None, onRepoAddTopicAuditEntry: scala.Option[SelectionBuilder[RepoAddTopicAuditEntry, A]] = None, onRepoArchivedAuditEntry: scala.Option[SelectionBuilder[RepoArchivedAuditEntry, A]] = None, onRepoChangeMergeSettingAuditEntry: scala.Option[SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]] = None, onRepoConfigDisableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigDisableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]] = None, onRepoConfigDisableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigEnableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigEnableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]] = None, onRepoConfigEnableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigLockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigUnlockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]] = None, onRepoCreateAuditEntry: scala.Option[SelectionBuilder[RepoCreateAuditEntry, A]] = None, onRepoDestroyAuditEntry: scala.Option[SelectionBuilder[RepoDestroyAuditEntry, A]] = None, onRepoRemoveMemberAuditEntry: scala.Option[SelectionBuilder[RepoRemoveMemberAuditEntry, A]] = None, onRepoRemoveTopicAuditEntry: scala.Option[SelectionBuilder[RepoRemoveTopicAuditEntry, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onRepositoryInvitation: scala.Option[SelectionBuilder[RepositoryInvitation, A]] = None, onRepositoryMigration: scala.Option[SelectionBuilder[RepositoryMigration, A]] = None, onRepositoryRule: scala.Option[SelectionBuilder[RepositoryRule, A]] = None, onRepositoryRuleset: scala.Option[SelectionBuilder[RepositoryRuleset, A]] = None, onRepositoryRulesetBypassActor: scala.Option[SelectionBuilder[RepositoryRulesetBypassActor, A]] = None, onRepositoryTopic: scala.Option[SelectionBuilder[RepositoryTopic, A]] = None, onRepositoryVisibilityChangeDisableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]] = None, onRepositoryVisibilityChangeEnableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]] = None, onRepositoryVulnerabilityAlert: scala.Option[SelectionBuilder[RepositoryVulnerabilityAlert, A]] = None, onReviewDismissalAllowance: scala.Option[SelectionBuilder[ReviewDismissalAllowance, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequest: scala.Option[SelectionBuilder[ReviewRequest, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSavedReply: scala.Option[SelectionBuilder[SavedReply, A]] = None, onSecurityAdvisory: scala.Option[SelectionBuilder[SecurityAdvisory, A]] = None, onSponsorsActivity: scala.Option[SelectionBuilder[SponsorsActivity, A]] = None, onSponsorsListing: scala.Option[SelectionBuilder[SponsorsListing, A]] = None, onSponsorsListingFeaturedItem: scala.Option[SelectionBuilder[SponsorsListingFeaturedItem, A]] = None, onSponsorsTier: scala.Option[SelectionBuilder[SponsorsTier, A]] = None, onSponsorship: scala.Option[SelectionBuilder[Sponsorship, A]] = None, onSponsorshipNewsletter: scala.Option[SelectionBuilder[SponsorshipNewsletter, A]] = None, onStatus: scala.Option[SelectionBuilder[Status, A]] = None, onStatusCheckRollup: scala.Option[SelectionBuilder[StatusCheckRollup, A]] = None, onStatusContext: scala.Option[SelectionBuilder[StatusContext, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onTeamAddMemberAuditEntry: scala.Option[SelectionBuilder[TeamAddMemberAuditEntry, A]] = None, onTeamAddRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamAddRepositoryAuditEntry, A]] = None, onTeamChangeParentTeamAuditEntry: scala.Option[SelectionBuilder[TeamChangeParentTeamAuditEntry, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None, onTeamRemoveMemberAuditEntry: scala.Option[SelectionBuilder[TeamRemoveMemberAuditEntry, A]] = None, onTeamRemoveRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]] = None, onTopic: scala.Option[SelectionBuilder[Topic, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None, onUserContentEdit: scala.Option[SelectionBuilder[UserContentEdit, A]] = None, onUserStatus: scala.Option[SelectionBuilder[UserStatus, A]] = None, onVerifiableDomain: scala.Option[SelectionBuilder[VerifiableDomain, A]] = None, onWorkflow: scala.Option[SelectionBuilder[Workflow, A]] = None, onWorkflowRun: scala.Option[SelectionBuilder[WorkflowRun, A]] = None, onWorkflowRunFile: scala.Option[SelectionBuilder[WorkflowRunFile, A]] = None): SelectionBuilder[AddCommentPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> onAddedToMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeDisabledEvent" -> onAutoMergeDisabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeEnabledEvent" -> onAutoMergeEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoRebaseEnabledEvent" -> onAutoRebaseEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoSquashEnabledEvent" -> onAutoSquashEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefChangedEvent" -> onBaseRefChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BranchProtectionRule" -> onBranchProtectionRule.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BypassForcePushAllowance" -> onBypassForcePushAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BypassPullRequestAllowance" -> onBypassPullRequestAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CWE" -> onCWE.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckRun" -> onCheckRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckSuite" -> onCheckSuite.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CodeOfConduct" -> onCodeOfConduct.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitCommentThread" -> onCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Comparison" -> onComparison.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertToDraftEvent" -> onConvertToDraftEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DependencyGraphManifest" -> onDependencyGraphManifest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployKey" -> onDeployKey.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Deployment" -> onDeployment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentReview" -> onDeploymentReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentStatus" -> onDeploymentStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionCategory" -> onDiscussionCategory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionPoll" -> onDiscussionPoll.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionPollOption" -> onDiscussionPollOption.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DraftIssue" -> onDraftIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseAdministratorInvitation" -> onEnterpriseAdministratorInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseIdentityProvider" -> onEnterpriseIdentityProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseRepositoryInfo" -> onEnterpriseRepositoryInfo.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerInstallation" -> onEnterpriseServerInstallation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccount" -> onEnterpriseServerUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccountEmail" -> onEnterpriseServerUserAccountEmail.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccountsUpload" -> onEnterpriseServerUserAccountsUpload.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Environment" -> onEnvironment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ExternalIdentity" -> onExternalIdentity.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "GistComment" -> onGistComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IpAllowListEntry" -> onIpAllowListEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Label" -> onLabel.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Language" -> onLanguage.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "License" -> onLicense.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LinkedBranch" -> onLinkedBranch.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceCategory" -> onMarketplaceCategory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceListing" -> onMarketplaceListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergeQueue" -> onMergeQueue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergeQueueEntry" -> onMergeQueueEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MigrationSource" -> onMigrationSource.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Milestone" -> onMilestone.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OIDCProvider" -> onOIDCProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgCreateAuditEntry" -> onOrgCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationIdentityProvider" -> onOrganizationIdentityProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationInvitation" -> onOrganizationInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationMigration" -> onOrganizationMigration.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Package" -> onPackage.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageFile" -> onPackageFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageTag" -> onPackageTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageVersion" -> onPackageVersion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedDiscussion" -> onPinnedDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedIssue" -> onPinnedIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Project" -> onProject.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectCard" -> onProjectCard.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectColumn" -> onProjectColumn.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2" -> onProjectV2.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Item" -> onProjectV2Item.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldDateValue" -> onProjectV2ItemFieldDateValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldIterationValue" -> onProjectV2ItemFieldIterationValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldNumberValue" -> onProjectV2ItemFieldNumberValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldSingleSelectValue" -> onProjectV2ItemFieldSingleSelectValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldTextValue" -> onProjectV2ItemFieldTextValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2View" -> onProjectV2View.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Workflow" -> onProjectV2Workflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PublicKey" -> onPublicKey.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommit" -> onPullRequestCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestThread" -> onPullRequestThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Push" -> onPush.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PushAllowance" -> onPushAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Reaction" -> onReaction.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReadyForReviewEvent" -> onReadyForReviewEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Ref" -> onRef.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReleaseAsset" -> onReleaseAsset.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromMergeQueueEvent" -> onRemovedFromMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAccessAuditEntry" -> onRepoAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoCreateAuditEntry" -> onRepoCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryInvitation" -> onRepositoryInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryMigration" -> onRepositoryMigration.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRule" -> onRepositoryRule.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRuleset" -> onRepositoryRuleset.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRulesetBypassActor" -> onRepositoryRulesetBypassActor.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryTopic" -> onRepositoryTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVulnerabilityAlert" -> onRepositoryVulnerabilityAlert.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissalAllowance" -> onReviewDismissalAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequest" -> onReviewRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SavedReply" -> onSavedReply.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SecurityAdvisory" -> onSecurityAdvisory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsActivity" -> onSponsorsActivity.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsListing" -> onSponsorsListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsListingFeaturedItem" -> onSponsorsListingFeaturedItem.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsTier" -> onSponsorsTier.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Sponsorship" -> onSponsorship.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorshipNewsletter" -> onSponsorshipNewsletter.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Status" -> onStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusCheckRollup" -> onStatusCheckRollup.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusContext" -> onStatusContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Topic" -> onTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserContentEdit" -> onUserContentEdit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserStatus" -> onUserStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "VerifiableDomain" -> onVerifiableDomain.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Workflow" -> onWorkflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRun" -> onWorkflowRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRunFile" -> onWorkflowRunFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The subject
 */
def subjectInterface[A](subject: SelectionBuilder[Node, A]): SelectionBuilder[AddCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(Obj(subject)))
}


type AddDiscussionCommentPayload
object AddDiscussionCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddDiscussionCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created discussion comment.
 */
def comment[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[AddDiscussionCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("comment", OptionOf(Obj(innerSelection)))
}


type AddDiscussionPollVotePayload
object AddDiscussionPollVotePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddDiscussionPollVotePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The poll option that a vote was added to.
 */
def pollOption[A](innerSelection: SelectionBuilder[DiscussionPollOption, A]): SelectionBuilder[AddDiscussionPollVotePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pollOption", OptionOf(Obj(innerSelection)))
}


type AddEnterpriseOrganizationMemberPayload
object AddEnterpriseOrganizationMemberPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddEnterpriseOrganizationMemberPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The users who were added to the organization.
 */
def users[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AddEnterpriseOrganizationMemberPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("users", OptionOf(ListOf(Obj(innerSelection))))
}


type AddEnterpriseSupportEntitlementPayload
object AddEnterpriseSupportEntitlementPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddEnterpriseSupportEntitlementPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of adding the support entitlement.
 */
def message: SelectionBuilder[AddEnterpriseSupportEntitlementPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type AddLabelsToLabelablePayload
object AddLabelsToLabelablePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddLabelsToLabelablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item that was labeled.
 */
def labelable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[AddLabelsToLabelablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * The item that was labeled.
 */
def labelableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[AddLabelsToLabelablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The item that was labeled.
 */
def labelableInterface[A](labelable: SelectionBuilder[Labelable, A]): SelectionBuilder[AddLabelsToLabelablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(Obj(labelable)))
}


type AddProjectCardPayload
object AddProjectCardPayload {
  /**
 * The edge from the ProjectColumn's card connection.
 */
def cardEdge[A](innerSelection: SelectionBuilder[ProjectCardEdge, A]): SelectionBuilder[AddProjectCardPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("cardEdge", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddProjectCardPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The ProjectColumn
 */
def projectColumn[A](innerSelection: SelectionBuilder[ProjectColumn, A]): SelectionBuilder[AddProjectCardPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectColumn", OptionOf(Obj(innerSelection)))
}


type AddProjectColumnPayload
object AddProjectColumnPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddProjectColumnPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The edge from the project's column connection.
 */
def columnEdge[A](innerSelection: SelectionBuilder[ProjectColumnEdge, A]): SelectionBuilder[AddProjectColumnPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("columnEdge", OptionOf(Obj(innerSelection)))
  /**
 * The project
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[AddProjectColumnPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
}


type AddProjectV2DraftIssuePayload
object AddProjectV2DraftIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddProjectV2DraftIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The draft issue added to the project.
 */
def projectItem[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[AddProjectV2DraftIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectItem", OptionOf(Obj(innerSelection)))
}


type AddProjectV2ItemByIdPayload
object AddProjectV2ItemByIdPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddProjectV2ItemByIdPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item added to the project.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[AddProjectV2ItemByIdPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("item", OptionOf(Obj(innerSelection)))
}


type AddPullRequestReviewCommentPayload
object AddPullRequestReviewCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddPullRequestReviewCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created comment.
 */
def comment[A](innerSelection: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[AddPullRequestReviewCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("comment", OptionOf(Obj(innerSelection)))
  /**
 * The edge from the review's comment connection.
 */
def commentEdge[A](innerSelection: SelectionBuilder[PullRequestReviewCommentEdge, A]): SelectionBuilder[AddPullRequestReviewCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commentEdge", OptionOf(Obj(innerSelection)))
}


type AddPullRequestReviewPayload
object AddPullRequestReviewPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddPullRequestReviewPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created pull request review.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[AddPullRequestReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  /**
 * The edge from the pull request's review connection.
 */
def reviewEdge[A](innerSelection: SelectionBuilder[PullRequestReviewEdge, A]): SelectionBuilder[AddPullRequestReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reviewEdge", OptionOf(Obj(innerSelection)))
}


type AddPullRequestReviewThreadPayload
object AddPullRequestReviewThreadPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddPullRequestReviewThreadPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created thread.
 */
def thread[A](innerSelection: SelectionBuilder[PullRequestReviewThread, A]): SelectionBuilder[AddPullRequestReviewThreadPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("thread", OptionOf(Obj(innerSelection)))
}


type AddReactionPayload
object AddReactionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddReactionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The reaction object.
 */
def reaction[A](innerSelection: SelectionBuilder[Reaction, A]): SelectionBuilder[AddReactionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reaction", OptionOf(Obj(innerSelection)))
  /**
 * The reaction groups for the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[AddReactionPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * The reactable subject.
 */
def subject[A](onCommitComment: SelectionBuilder[CommitComment, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onRelease: SelectionBuilder[Release, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[AddReactionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("CommitComment" -> Obj(onCommitComment), "Discussion" -> Obj(onDiscussion), "DiscussionComment" -> Obj(onDiscussionComment), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "PullRequest" -> Obj(onPullRequest), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "Release" -> Obj(onRelease), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment)))))
  /**
 * The reactable subject.
 */
def subjectOption[A](onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None): SelectionBuilder[AddReactionPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The reactable subject.
 */
def subjectInterface[A](subject: SelectionBuilder[Reactable, A]): SelectionBuilder[AddReactionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(Obj(subject)))
}


type AddStarPayload
object AddStarPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddStarPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The starrable.
 */
def starrable[A](onGist: SelectionBuilder[Gist, A], onRepository: SelectionBuilder[Repository, A], onTopic: SelectionBuilder[Topic, A]): SelectionBuilder[AddStarPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("starrable", OptionOf(ChoiceOf(Map("Gist" -> Obj(onGist), "Repository" -> Obj(onRepository), "Topic" -> Obj(onTopic)))))
  /**
 * The starrable.
 */
def starrableOption[A](onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onTopic: scala.Option[SelectionBuilder[Topic, A]] = None): SelectionBuilder[AddStarPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("starrable", OptionOf(ChoiceOf(Map("Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Topic" -> onTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The starrable.
 */
def starrableInterface[A](starrable: SelectionBuilder[Starrable, A]): SelectionBuilder[AddStarPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("starrable", OptionOf(Obj(starrable)))
}


type AddUpvotePayload
object AddUpvotePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddUpvotePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The votable subject.
 */
def subject[A](onDiscussion: SelectionBuilder[Discussion, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[AddUpvotePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "DiscussionComment" -> Obj(onDiscussionComment)))))
  /**
 * The votable subject.
 */
def subjectOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None): SelectionBuilder[AddUpvotePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The votable subject.
 */
def subjectInterface[A](subject: SelectionBuilder[Votable, A]): SelectionBuilder[AddUpvotePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(Obj(subject)))
}


type AddVerifiableDomainPayload
object AddVerifiableDomainPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[AddVerifiableDomainPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The verifiable domain that was added.
 */
def domain[A](innerSelection: SelectionBuilder[VerifiableDomain, A]): SelectionBuilder[AddVerifiableDomainPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("domain", OptionOf(Obj(innerSelection)))
}


type AddedToMergeQueueEvent
object AddedToMergeQueueEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AddedToMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AddedToMergeQueueEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who added this Pull Request to the merge queue
 */
def enqueuer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AddedToMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enqueuer", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[AddedToMergeQueueEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The merge queue where this pull request was added to.
 */
def mergeQueue[A](innerSelection: SelectionBuilder[MergeQueue, A]): SelectionBuilder[AddedToMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueue", OptionOf(Obj(innerSelection)))
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AddedToMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AddedToMergeQueueEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AddedToMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type AddedToProjectEvent
object AddedToProjectEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AddedToProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AddedToProjectEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[AddedToProjectEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[AddedToProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Project referenced by event.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[AddedToProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  /**
 * Project card referenced by this project event.
 */
def projectCard[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[AddedToProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectCard", OptionOf(Obj(innerSelection)))
  /**
 * Column name referenced by this project event.
 */
def projectColumnName: SelectionBuilder[AddedToProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("projectColumnName", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AddedToProjectEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AddedToProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type App
object App {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[App, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[App, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The description of the app.
 */
def description: SelectionBuilder[App, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  def id: SelectionBuilder[App, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The IP addresses of the app.
 */
def ipAllowListEntries[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IpAllowListEntryOrder] = None)(innerSelection: SelectionBuilder[IpAllowListEntryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IpAllowListEntryOrder]]): SelectionBuilder[App, A] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEntries", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IpAllowListEntryOrder")(encoder4)))
  /**
 * The hex color code, without the leading '#', for the logo background.
 */
def logoBackgroundColor: SelectionBuilder[App, String] = _root_.caliban.client.SelectionBuilder.Field("logoBackgroundColor", Scalar())
  /**
 * A URL pointing to the app's logo.
 */
def logoUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[App, URI] = _root_.caliban.client.SelectionBuilder.Field("logoUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * The name of the app.
 */
def name: SelectionBuilder[App, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * A slug based on the name of the app for use in URLs.
 */
def slug: SelectionBuilder[App, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[App, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The URL to the app's homepage.
 */
def url: SelectionBuilder[App, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type ApproveDeploymentsPayload
object ApproveDeploymentsPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ApproveDeploymentsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The affected deployments.
 */
def deployments[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[ApproveDeploymentsPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("deployments", OptionOf(ListOf(Obj(innerSelection))))
}


type ApproveVerifiableDomainPayload
object ApproveVerifiableDomainPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ApproveVerifiableDomainPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The verifiable domain that was approved.
 */
def domain[A](innerSelection: SelectionBuilder[VerifiableDomain, A]): SelectionBuilder[ApproveVerifiableDomainPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("domain", OptionOf(Obj(innerSelection)))
}


type ArchiveProjectV2ItemPayload
object ArchiveProjectV2ItemPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ArchiveProjectV2ItemPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item archived from the project.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ArchiveProjectV2ItemPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("item", OptionOf(Obj(innerSelection)))
}


type ArchiveRepositoryPayload
object ArchiveRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ArchiveRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository that was marked as archived.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[ArchiveRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type AssignedEvent
object AssignedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AssignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the assignable associated with the event.
 */
def assignable[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[AssignedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("assignable", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the user or mannequin that was assigned.
 */
def assignee[A](onBot: SelectionBuilder[Bot, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AssignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignee", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AssignedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[AssignedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the user who was assigned.
 */
@deprecated("Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.", "")
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AssignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the user or mannequin that was assigned.
 */
def assigneeOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AssignedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("assignee", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AssignedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AssignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Identifies the assignable associated with the event.
 */
def assignableOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[AssignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignable", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the assignable associated with the event.
 */
def assignableInterface[A](assignable: SelectionBuilder[Assignable, A]): SelectionBuilder[AssignedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("assignable", Obj(assignable))
}


type AutoMergeDisabledEvent
object AutoMergeDisabledEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutoMergeDisabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AutoMergeDisabledEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who disabled auto-merge for this Pull Request
 */
def disabler[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AutoMergeDisabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("disabler", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[AutoMergeDisabledEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutoMergeDisabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * The reason auto-merge was disabled
 */
def reason: SelectionBuilder[AutoMergeDisabledEvent, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("reason", OptionOf(Scalar()))
  /**
 * The reason_code relating to why auto-merge was disabled
 */
def reasonCode: SelectionBuilder[AutoMergeDisabledEvent, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("reasonCode", OptionOf(Scalar()))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutoMergeDisabledEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AutoMergeDisabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type AutoMergeEnabledEvent
object AutoMergeEnabledEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutoMergeEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AutoMergeEnabledEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who enabled auto-merge for this Pull Request
 */
def enabler[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AutoMergeEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enabler", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[AutoMergeEnabledEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutoMergeEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutoMergeEnabledEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AutoMergeEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type AutoMergeRequest
object AutoMergeRequest {
  /**
 * The email address of the author of this auto-merge request.
 */
def authorEmail: SelectionBuilder[AutoMergeRequest, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("authorEmail", OptionOf(Scalar()))
  /**
 * The commit message of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging.
 */
def commitBody: SelectionBuilder[AutoMergeRequest, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("commitBody", OptionOf(Scalar()))
  /**
 * The commit title of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging
 */
def commitHeadline: SelectionBuilder[AutoMergeRequest, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("commitHeadline", OptionOf(Scalar()))
  /**
 * When was this auto-merge request was enabled.
 */
def enabledAt: SelectionBuilder[AutoMergeRequest, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("enabledAt", OptionOf(Scalar()))
  /**
 * The actor who created the auto-merge request.
 */
def enabledBy[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutoMergeRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enabledBy", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The merge method of the auto-merge request. If a merge queue is required by
the base branch, this value will be set by the merge queue when merging.
 */
def mergeMethod: SelectionBuilder[AutoMergeRequest, PullRequestMergeMethod] = _root_.caliban.client.SelectionBuilder.Field("mergeMethod", Scalar())
  /**
 * The pull request that this auto-merge request is set against.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutoMergeRequest, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The actor who created the auto-merge request.
 */
def enabledByOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutoMergeRequest, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("enabledBy", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the auto-merge request.
 */
def enabledByInterface[A](enabledBy: SelectionBuilder[Actor, A]): SelectionBuilder[AutoMergeRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enabledBy", OptionOf(Obj(enabledBy)))
}


type AutoRebaseEnabledEvent
object AutoRebaseEnabledEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutoRebaseEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AutoRebaseEnabledEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who enabled auto-merge (rebase) for this Pull Request
 */
def enabler[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AutoRebaseEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enabler", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[AutoRebaseEnabledEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutoRebaseEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutoRebaseEnabledEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AutoRebaseEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type AutoSquashEnabledEvent
object AutoSquashEnabledEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutoSquashEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AutoSquashEnabledEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who enabled auto-merge (squash) for this Pull Request
 */
def enabler[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[AutoSquashEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enabler", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[AutoSquashEnabledEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutoSquashEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutoSquashEnabledEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AutoSquashEnabledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type AutomaticBaseChangeFailedEvent
object AutomaticBaseChangeFailedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutomaticBaseChangeFailedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AutomaticBaseChangeFailedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[AutomaticBaseChangeFailedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The new base for this PR
 */
def newBase: SelectionBuilder[AutomaticBaseChangeFailedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("newBase", Scalar())
  /**
 * The old base for this PR
 */
def oldBase: SelectionBuilder[AutomaticBaseChangeFailedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("oldBase", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutomaticBaseChangeFailedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutomaticBaseChangeFailedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AutomaticBaseChangeFailedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type AutomaticBaseChangeSucceededEvent
object AutomaticBaseChangeSucceededEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[AutomaticBaseChangeSucceededEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[AutomaticBaseChangeSucceededEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[AutomaticBaseChangeSucceededEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The new base for this PR
 */
def newBase: SelectionBuilder[AutomaticBaseChangeSucceededEvent, String] = _root_.caliban.client.SelectionBuilder.Field("newBase", Scalar())
  /**
 * The old base for this PR
 */
def oldBase: SelectionBuilder[AutomaticBaseChangeSucceededEvent, String] = _root_.caliban.client.SelectionBuilder.Field("oldBase", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[AutomaticBaseChangeSucceededEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[AutomaticBaseChangeSucceededEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[AutomaticBaseChangeSucceededEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type BaseRefChangedEvent
object BaseRefChangedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[BaseRefChangedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[BaseRefChangedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the name of the base ref for the pull request after it was changed.
 */
def currentRefName: SelectionBuilder[BaseRefChangedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("currentRefName", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[BaseRefChangedEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[BaseRefChangedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the name of the base ref for the pull request before it was changed.
 */
def previousRefName: SelectionBuilder[BaseRefChangedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("previousRefName", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[BaseRefChangedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[BaseRefChangedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[BaseRefChangedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type BaseRefDeletedEvent
object BaseRefDeletedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[BaseRefDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the name of the Ref associated with the `base_ref_deleted` event.
 */
def baseRefName: SelectionBuilder[BaseRefDeletedEvent, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("baseRefName", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[BaseRefDeletedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[BaseRefDeletedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[BaseRefDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[BaseRefDeletedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[BaseRefDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type BaseRefForcePushedEvent
object BaseRefForcePushedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[BaseRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
 */
def afterCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[BaseRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("afterCommit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
 */
def beforeCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[BaseRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("beforeCommit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[BaseRefForcePushedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[BaseRefForcePushedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[BaseRefForcePushedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[BaseRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[BaseRefForcePushedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[BaseRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type Blame
object Blame {
  /**
 * The list of ranges from a Git blame.
 */
def ranges[A](innerSelection: SelectionBuilder[BlameRange, A]): SelectionBuilder[Blame, List[A]] = _root_.caliban.client.SelectionBuilder.Field("ranges", ListOf(Obj(innerSelection)))
}


type BlameRange
object BlameRange {
  /**
 * Identifies the recency of the change, from 1 (new) to 10 (old). This is
calculated as a 2-quantile and determines the length of distance between the
median age of all the changes in the file and the recency of the current
range's change.
 */
def age: SelectionBuilder[BlameRange, Int] = _root_.caliban.client.SelectionBuilder.Field("age", Scalar())
  /**
 * Identifies the line author
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[BlameRange, A] = _root_.caliban.client.SelectionBuilder.Field("commit", Obj(innerSelection))
  /**
 * The ending line for the range
 */
def endingLine: SelectionBuilder[BlameRange, Int] = _root_.caliban.client.SelectionBuilder.Field("endingLine", Scalar())
  /**
 * The starting line for the range
 */
def startingLine: SelectionBuilder[BlameRange, Int] = _root_.caliban.client.SelectionBuilder.Field("startingLine", Scalar())
}


type Blob
object Blob {
  /**
 * An abbreviated version of the Git object ID
 */
def abbreviatedOid: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("abbreviatedOid", Scalar())
  /**
 * Byte size of Blob object
 */
def byteSize: SelectionBuilder[Blob, Int] = _root_.caliban.client.SelectionBuilder.Field("byteSize", Scalar())
  /**
 * The HTTP path for this Git object
 */
def commitResourcePath: SelectionBuilder[Blob, URI] = _root_.caliban.client.SelectionBuilder.Field("commitResourcePath", Scalar())
  /**
 * The HTTP URL for this Git object
 */
def commitUrl: SelectionBuilder[Blob, URI] = _root_.caliban.client.SelectionBuilder.Field("commitUrl", Scalar())
  def id: SelectionBuilder[Blob, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
 */
def isBinary: SelectionBuilder[Blob, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isBinary", OptionOf(Scalar()))
  /**
 * Indicates whether the contents is truncated
 */
def isTruncated: SelectionBuilder[Blob, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isTruncated", Scalar())
  /**
 * The Git object ID
 */
def oid: SelectionBuilder[Blob, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())
  /**
 * The Repository the Git object belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Blob, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * UTF8 text data or null if the Blob is binary
 */
def text: SelectionBuilder[Blob, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("text", OptionOf(Scalar()))
}


type Bot
object Bot {
  /**
 * A URL pointing to the GitHub App's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Bot, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Bot, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Bot, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[Bot, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The username of the actor.
 */
def login: SelectionBuilder[Bot, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The HTTP path for this bot
 */
def resourcePath: SelectionBuilder[Bot, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Bot, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this bot
 */
def url: SelectionBuilder[Bot, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type BranchNamePatternParameters
object BranchNamePatternParameters {
  /**
 * How this rule will appear to users.
 */
def name: SelectionBuilder[BranchNamePatternParameters, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * If true, the rule will fail if the pattern matches.
 */
def negate: SelectionBuilder[BranchNamePatternParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("negate", Scalar())
  /**
 * The operator to use for matching.
 */
def operator: SelectionBuilder[BranchNamePatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("operator", Scalar())
  /**
 * The pattern to match with.
 */
def pattern: SelectionBuilder[BranchNamePatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
}


type BranchProtectionRule
object BranchProtectionRule {
  /**
 * Can this branch be deleted.
 */
def allowsDeletions: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("allowsDeletions", Scalar())
  /**
 * Are force pushes allowed on this branch.
 */
def allowsForcePushes: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("allowsForcePushes", Scalar())
  /**
 * Is branch creation a protected operation.
 */
def blocksCreations: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("blocksCreations", Scalar())
  /**
 * A list of conflicts matching branches protection rule and other branch protection rules
 */
def branchProtectionRuleConflicts[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[BranchProtectionRuleConflictConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[BranchProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRuleConflicts", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of actors able to force push for this branch protection rule.
 */
def bypassForcePushAllowances[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[BypassForcePushAllowanceConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[BranchProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("bypassForcePushAllowances", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of actors able to bypass PRs for this branch protection rule.
 */
def bypassPullRequestAllowances[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[BypassPullRequestAllowanceConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[BranchProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("bypassPullRequestAllowances", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The actor who created this branch protection rule.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[BranchProtectionRule, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[BranchProtectionRule, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * Will new commits pushed to matching branches dismiss pull request review approvals.
 */
def dismissesStaleReviews: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("dismissesStaleReviews", Scalar())
  def id: SelectionBuilder[BranchProtectionRule, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Can admins overwrite branch protection.
 */
def isAdminEnforced: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isAdminEnforced", Scalar())
  /**
 * Whether users can pull changes from upstream when the branch is locked. Set to
`true` to allow fork syncing. Set to `false` to prevent fork syncing.
 */
def lockAllowsFetchAndMerge: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("lockAllowsFetchAndMerge", Scalar())
  /**
 * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
 */
def lockBranch: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("lockBranch", Scalar())
  /**
 * Repository refs that are protected by this rule
 */
def matchingRefs[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[RefConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]]): SelectionBuilder[BranchProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("matchingRefs", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("query", query, "String")(encoder4)))
  /**
 * Identifies the protection rule pattern.
 */
def pattern: SelectionBuilder[BranchProtectionRule, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
  /**
 * A list push allowances for this branch protection rule.
 */
def pushAllowances[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PushAllowanceConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[BranchProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("pushAllowances", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The repository associated with this branch protection rule.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[BranchProtectionRule, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * Whether the most recent push must be approved by someone other than the person who pushed it
 */
def requireLastPushApproval: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requireLastPushApproval", Scalar())
  /**
 * Number of approving reviews required to update matching branches.
 */
def requiredApprovingReviewCount: SelectionBuilder[BranchProtectionRule, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("requiredApprovingReviewCount", OptionOf(Scalar()))
  /**
 * List of required deployment environments that must be deployed successfully to update matching branches
 */
def requiredDeploymentEnvironments: SelectionBuilder[BranchProtectionRule, scala.Option[List[scala.Option[String]]]] = _root_.caliban.client.SelectionBuilder.Field("requiredDeploymentEnvironments", OptionOf(ListOf(OptionOf(Scalar()))))
  /**
 * List of required status check contexts that must pass for commits to be accepted to matching branches.
 */
def requiredStatusCheckContexts: SelectionBuilder[BranchProtectionRule, scala.Option[List[scala.Option[String]]]] = _root_.caliban.client.SelectionBuilder.Field("requiredStatusCheckContexts", OptionOf(ListOf(OptionOf(Scalar()))))
  /**
 * List of required status checks that must pass for commits to be accepted to matching branches.
 */
def requiredStatusChecks[A](innerSelection: SelectionBuilder[RequiredStatusCheckDescription, A]): SelectionBuilder[BranchProtectionRule, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("requiredStatusChecks", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * Are approving reviews required to update matching branches.
 */
def requiresApprovingReviews: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresApprovingReviews", Scalar())
  /**
 * Are reviews from code owners required to update matching branches.
 */
def requiresCodeOwnerReviews: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresCodeOwnerReviews", Scalar())
  /**
 * Are commits required to be signed.
 */
def requiresCommitSignatures: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresCommitSignatures", Scalar())
  /**
 * Are conversations required to be resolved before merging.
 */
def requiresConversationResolution: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresConversationResolution", Scalar())
  /**
 * Does this branch require deployment to specific environments before merging
 */
def requiresDeployments: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresDeployments", Scalar())
  /**
 * Are merge commits prohibited from being pushed to this branch.
 */
def requiresLinearHistory: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresLinearHistory", Scalar())
  /**
 * Are status checks required to update matching branches.
 */
def requiresStatusChecks: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresStatusChecks", Scalar())
  /**
 * Are branches required to be up to date before merging.
 */
def requiresStrictStatusChecks: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresStrictStatusChecks", Scalar())
  /**
 * Is pushing to matching branches restricted.
 */
def restrictsPushes: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("restrictsPushes", Scalar())
  /**
 * Is dismissal of pull request reviews restricted.
 */
def restrictsReviewDismissals: SelectionBuilder[BranchProtectionRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("restrictsReviewDismissals", Scalar())
  /**
 * A list review dismissal allowances for this branch protection rule.
 */
def reviewDismissalAllowances[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ReviewDismissalAllowanceConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[BranchProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("reviewDismissalAllowances", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The actor who created this branch protection rule.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[BranchProtectionRule, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created this branch protection rule.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[BranchProtectionRule, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type BranchProtectionRuleConflict
object BranchProtectionRuleConflict {
  /**
 * Identifies the branch protection rule.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[BranchProtectionRuleConflict, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the conflicting branch protection rule.
 */
def conflictingBranchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[BranchProtectionRuleConflict, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("conflictingBranchProtectionRule", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the branch ref that has conflicting rules
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[BranchProtectionRuleConflict, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
}


type BranchProtectionRuleConflictConnection
object BranchProtectionRuleConflictConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[BranchProtectionRuleConflictEdge, A]): SelectionBuilder[BranchProtectionRuleConflictConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[BranchProtectionRuleConflict, A]): SelectionBuilder[BranchProtectionRuleConflictConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BranchProtectionRuleConflictConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[BranchProtectionRuleConflictConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type BranchProtectionRuleConflictEdge
object BranchProtectionRuleConflictEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[BranchProtectionRuleConflictEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[BranchProtectionRuleConflict, A]): SelectionBuilder[BranchProtectionRuleConflictEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type BranchProtectionRuleConnection
object BranchProtectionRuleConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[BranchProtectionRuleEdge, A]): SelectionBuilder[BranchProtectionRuleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[BranchProtectionRuleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BranchProtectionRuleConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[BranchProtectionRuleConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type BranchProtectionRuleEdge
object BranchProtectionRuleEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[BranchProtectionRuleEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[BranchProtectionRuleEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type BypassForcePushAllowance
object BypassForcePushAllowance {
  /**
 * The actor that can force push.
 */
def actor[A](onApp: SelectionBuilder[App, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[BypassForcePushAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[BypassForcePushAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[BypassForcePushAllowance, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The actor that can force push.
 */
def actorOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[BypassForcePushAllowance, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type BypassForcePushAllowanceConnection
object BypassForcePushAllowanceConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[BypassForcePushAllowanceEdge, A]): SelectionBuilder[BypassForcePushAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[BypassForcePushAllowance, A]): SelectionBuilder[BypassForcePushAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BypassForcePushAllowanceConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[BypassForcePushAllowanceConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type BypassForcePushAllowanceEdge
object BypassForcePushAllowanceEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[BypassForcePushAllowanceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[BypassForcePushAllowance, A]): SelectionBuilder[BypassForcePushAllowanceEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type BypassPullRequestAllowance
object BypassPullRequestAllowance {
  /**
 * The actor that can bypass.
 */
def actor[A](onApp: SelectionBuilder[App, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[BypassPullRequestAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[BypassPullRequestAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[BypassPullRequestAllowance, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The actor that can bypass.
 */
def actorOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[BypassPullRequestAllowance, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type BypassPullRequestAllowanceConnection
object BypassPullRequestAllowanceConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[BypassPullRequestAllowanceEdge, A]): SelectionBuilder[BypassPullRequestAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[BypassPullRequestAllowance, A]): SelectionBuilder[BypassPullRequestAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[BypassPullRequestAllowanceConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[BypassPullRequestAllowanceConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type BypassPullRequestAllowanceEdge
object BypassPullRequestAllowanceEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[BypassPullRequestAllowanceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[BypassPullRequestAllowance, A]): SelectionBuilder[BypassPullRequestAllowanceEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CVSS
object CVSS {
  /**
 * The CVSS score associated with this advisory
 */
def score: SelectionBuilder[CVSS, Double] = _root_.caliban.client.SelectionBuilder.Field("score", Scalar())
  /**
 * The CVSS vector string associated with this advisory
 */
def vectorString: SelectionBuilder[CVSS, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("vectorString", OptionOf(Scalar()))
}


type CWE
object CWE {
  /**
 * The id of the CWE
 */
def cweId: SelectionBuilder[CWE, String] = _root_.caliban.client.SelectionBuilder.Field("cweId", Scalar())
  /**
 * A detailed description of this CWE
 */
def description: SelectionBuilder[CWE, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())
  def id: SelectionBuilder[CWE, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of this CWE
 */
def name: SelectionBuilder[CWE, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
}


type CWEConnection
object CWEConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CWEEdge, A]): SelectionBuilder[CWEConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CWE, A]): SelectionBuilder[CWEConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CWEConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CWEConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CWEEdge
object CWEEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CWEEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CWE, A]): SelectionBuilder[CWEEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CancelEnterpriseAdminInvitationPayload
object CancelEnterpriseAdminInvitationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CancelEnterpriseAdminInvitationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The invitation that was canceled.
 */
def invitation[A](innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]): SelectionBuilder[CancelEnterpriseAdminInvitationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitation", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of canceling an administrator invitation.
 */
def message: SelectionBuilder[CancelEnterpriseAdminInvitationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type CancelSponsorshipPayload
object CancelSponsorshipPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CancelSponsorshipPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The tier that was being used at the time of cancellation.
 */
def sponsorsTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[CancelSponsorshipPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsTier", OptionOf(Obj(innerSelection)))
}


type ChangeUserStatusPayload
object ChangeUserStatusPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ChangeUserStatusPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * Your updated status.
 */
def status[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[ChangeUserStatusPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Obj(innerSelection)))
}


type CheckAnnotation
object CheckAnnotation {
  /**
 * The annotation's severity level.
 */
def annotationLevel: SelectionBuilder[CheckAnnotation, scala.Option[CheckAnnotationLevel]] = _root_.caliban.client.SelectionBuilder.Field("annotationLevel", OptionOf(Scalar()))
  /**
 * The path to the file that this annotation was made on.
 */
def blobUrl: SelectionBuilder[CheckAnnotation, URI] = _root_.caliban.client.SelectionBuilder.Field("blobUrl", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[CheckAnnotation, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The position of this annotation.
 */
def location[A](innerSelection: SelectionBuilder[CheckAnnotationSpan, A]): SelectionBuilder[CheckAnnotation, A] = _root_.caliban.client.SelectionBuilder.Field("location", Obj(innerSelection))
  /**
 * The annotation's message.
 */
def message: SelectionBuilder[CheckAnnotation, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * The path that this annotation was made on.
 */
def path: SelectionBuilder[CheckAnnotation, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * Additional information about the annotation.
 */
def rawDetails: SelectionBuilder[CheckAnnotation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("rawDetails", OptionOf(Scalar()))
  /**
 * The annotation's title
 */
def title: SelectionBuilder[CheckAnnotation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))
}


type CheckAnnotationConnection
object CheckAnnotationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CheckAnnotationEdge, A]): SelectionBuilder[CheckAnnotationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CheckAnnotation, A]): SelectionBuilder[CheckAnnotationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CheckAnnotationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CheckAnnotationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CheckAnnotationEdge
object CheckAnnotationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CheckAnnotationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CheckAnnotation, A]): SelectionBuilder[CheckAnnotationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CheckAnnotationPosition
object CheckAnnotationPosition {
  /**
 * Column number (1 indexed).
 */
def column: SelectionBuilder[CheckAnnotationPosition, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("column", OptionOf(Scalar()))
  /**
 * Line number (1 indexed).
 */
def line: SelectionBuilder[CheckAnnotationPosition, Int] = _root_.caliban.client.SelectionBuilder.Field("line", Scalar())
}


type CheckAnnotationSpan
object CheckAnnotationSpan {
  /**
 * End position (inclusive).
 */
def end[A](innerSelection: SelectionBuilder[CheckAnnotationPosition, A]): SelectionBuilder[CheckAnnotationSpan, A] = _root_.caliban.client.SelectionBuilder.Field("end", Obj(innerSelection))
  /**
 * Start position (inclusive).
 */
def start[A](innerSelection: SelectionBuilder[CheckAnnotationPosition, A]): SelectionBuilder[CheckAnnotationSpan, A] = _root_.caliban.client.SelectionBuilder.Field("start", Obj(innerSelection))
}


type CheckRun
object CheckRun {
  /**
 * The check run's annotations
 */
def annotations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CheckAnnotationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[CheckRun, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("annotations", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The check suite that this run is a part of.
 */
def checkSuite[A](innerSelection: SelectionBuilder[CheckSuite, A]): SelectionBuilder[CheckRun, A] = _root_.caliban.client.SelectionBuilder.Field("checkSuite", Obj(innerSelection))
  /**
 * Identifies the date and time when the check run was completed.
 */
def completedAt: SelectionBuilder[CheckRun, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("completedAt", OptionOf(Scalar()))
  /**
 * The conclusion of the check run.
 */
def conclusion: SelectionBuilder[CheckRun, scala.Option[CheckConclusionState]] = _root_.caliban.client.SelectionBuilder.Field("conclusion", OptionOf(Scalar()))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[CheckRun, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The corresponding deployment for this job, if any
 */
def deployment[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[CheckRun, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deployment", OptionOf(Obj(innerSelection)))
  /**
 * The URL from which to find full details of the check run on the integrator's site.
 */
def detailsUrl: SelectionBuilder[CheckRun, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("detailsUrl", OptionOf(Scalar()))
  /**
 * A reference for the check run on the integrator's system.
 */
def externalId: SelectionBuilder[CheckRun, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("externalId", OptionOf(Scalar()))
  def id: SelectionBuilder[CheckRun, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this is required to pass before merging for a specific pull request.
 */
def isRequired(pullRequestId : scala.Option[String] = None, pullRequestNumber : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[Int]]): SelectionBuilder[CheckRun, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRequired", Scalar(), arguments = List(Argument("pullRequestId", pullRequestId, "ID")(encoder0), Argument("pullRequestNumber", pullRequestNumber, "Int")(encoder1)))
  /**
 * The name of the check for this check run.
 */
def name: SelectionBuilder[CheckRun, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Information about a pending deployment, if any, in this check run
 */
def pendingDeploymentRequest[A](innerSelection: SelectionBuilder[DeploymentRequest, A]): SelectionBuilder[CheckRun, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pendingDeploymentRequest", OptionOf(Obj(innerSelection)))
  /**
 * The permalink to the check run summary.
 */
def permalink: SelectionBuilder[CheckRun, URI] = _root_.caliban.client.SelectionBuilder.Field("permalink", Scalar())
  /**
 * The repository associated with this check run.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CheckRun, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this check run.
 */
def resourcePath: SelectionBuilder[CheckRun, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the check run was started.
 */
def startedAt: SelectionBuilder[CheckRun, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("startedAt", OptionOf(Scalar()))
  /**
 * The current status of the check run.
 */
def status: SelectionBuilder[CheckRun, CheckStatusState] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())
  /**
 * The check run's steps
 */
def steps[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, number : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CheckStepConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[CheckRun, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("steps", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("number", number, "Int")(encoder4)))
  /**
 * A string representing the check run's summary
 */
def summary: SelectionBuilder[CheckRun, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("summary", OptionOf(Scalar()))
  /**
 * A string representing the check run's text
 */
def text: SelectionBuilder[CheckRun, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("text", OptionOf(Scalar()))
  /**
 * A string representing the check run
 */
def title: SelectionBuilder[CheckRun, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))
  /**
 * The HTTP URL for this check run.
 */
def url: SelectionBuilder[CheckRun, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type CheckRunConnection
object CheckRunConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CheckRunEdge, A]): SelectionBuilder[CheckRunConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CheckRun, A]): SelectionBuilder[CheckRunConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CheckRunConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CheckRunConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CheckRunEdge
object CheckRunEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CheckRunEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CheckRun, A]): SelectionBuilder[CheckRunEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CheckRunStateCount
object CheckRunStateCount {
  /**
 * The number of check runs with this state.
 */
def count: SelectionBuilder[CheckRunStateCount, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())
  /**
 * The state of a check run.
 */
def state: SelectionBuilder[CheckRunStateCount, CheckRunState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
}


type CheckStep
object CheckStep {
  /**
 * Identifies the date and time when the check step was completed.
 */
def completedAt: SelectionBuilder[CheckStep, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("completedAt", OptionOf(Scalar()))
  /**
 * The conclusion of the check step.
 */
def conclusion: SelectionBuilder[CheckStep, scala.Option[CheckConclusionState]] = _root_.caliban.client.SelectionBuilder.Field("conclusion", OptionOf(Scalar()))
  /**
 * A reference for the check step on the integrator's system.
 */
def externalId: SelectionBuilder[CheckStep, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("externalId", OptionOf(Scalar()))
  /**
 * The step's name.
 */
def name: SelectionBuilder[CheckStep, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The index of the step in the list of steps of the parent check run.
 */
def number: SelectionBuilder[CheckStep, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * Number of seconds to completion.
 */
def secondsToCompletion: SelectionBuilder[CheckStep, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("secondsToCompletion", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the check step was started.
 */
def startedAt: SelectionBuilder[CheckStep, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("startedAt", OptionOf(Scalar()))
  /**
 * The current status of the check step.
 */
def status: SelectionBuilder[CheckStep, CheckStatusState] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())
}


type CheckStepConnection
object CheckStepConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CheckStepEdge, A]): SelectionBuilder[CheckStepConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CheckStep, A]): SelectionBuilder[CheckStepConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CheckStepConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CheckStepConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CheckStepEdge
object CheckStepEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CheckStepEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CheckStep, A]): SelectionBuilder[CheckStepEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CheckSuite
object CheckSuite {
  /**
 * The GitHub App which created this check suite.
 */
def app[A](innerSelection: SelectionBuilder[App, A]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("app", OptionOf(Obj(innerSelection)))
  /**
 * The name of the branch for this check suite.
 */
def branch[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Obj(innerSelection)))
  /**
 * The check runs associated with a check suite.
 */
def checkRuns[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[CheckRunFilter] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CheckRunConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[CheckRunFilter]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("checkRuns", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "CheckRunFilter")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * The commit for this check suite
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CheckSuite, A] = _root_.caliban.client.SelectionBuilder.Field("commit", Obj(innerSelection))
  /**
 * The conclusion of this check suite.
 */
def conclusion: SelectionBuilder[CheckSuite, scala.Option[CheckConclusionState]] = _root_.caliban.client.SelectionBuilder.Field("conclusion", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[CheckSuite, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who triggered the check suite.
 */
def creator[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[CheckSuite, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[CheckSuite, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * A list of open pull requests matching the check suite.
 */
def matchingPullRequests[A](after : scala.Option[String] = None, baseRefName : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, headRefName : scala.Option[String] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[PullRequestState]] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[IssueOrder]], encoder8: ArgEncoder[scala.Option[List[PullRequestState]]]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("matchingPullRequests", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("baseRefName", baseRefName, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("headRefName", headRefName, "String")(encoder4), Argument("labels", labels, "[String!]")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "IssueOrder")(encoder7), Argument("states", states, "[PullRequestState!]")(encoder8)))
  /**
 * The push that triggered this check suite.
 */
def push[A](innerSelection: SelectionBuilder[Push, A]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("push", OptionOf(Obj(innerSelection)))
  /**
 * The repository associated with this check suite.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CheckSuite, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this check suite
 */
def resourcePath: SelectionBuilder[CheckSuite, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The status of this check suite.
 */
def status: SelectionBuilder[CheckSuite, CheckStatusState] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[CheckSuite, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this check suite
 */
def url: SelectionBuilder[CheckSuite, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The workflow run associated with this check suite.
 */
def workflowRun[A](innerSelection: SelectionBuilder[WorkflowRun, A]): SelectionBuilder[CheckSuite, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("workflowRun", OptionOf(Obj(innerSelection)))
}


type CheckSuiteConnection
object CheckSuiteConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CheckSuiteEdge, A]): SelectionBuilder[CheckSuiteConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CheckSuite, A]): SelectionBuilder[CheckSuiteConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CheckSuiteConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CheckSuiteConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CheckSuiteEdge
object CheckSuiteEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CheckSuiteEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CheckSuite, A]): SelectionBuilder[CheckSuiteEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ClearLabelsFromLabelablePayload
object ClearLabelsFromLabelablePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ClearLabelsFromLabelablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item that was unlabeled.
 */
def labelable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ClearLabelsFromLabelablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * The item that was unlabeled.
 */
def labelableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ClearLabelsFromLabelablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The item that was unlabeled.
 */
def labelableInterface[A](labelable: SelectionBuilder[Labelable, A]): SelectionBuilder[ClearLabelsFromLabelablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(Obj(labelable)))
}


type ClearProjectV2ItemFieldValuePayload
object ClearProjectV2ItemFieldValuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ClearProjectV2ItemFieldValuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated item.
 */
def projectV2Item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ClearProjectV2ItemFieldValuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2Item", OptionOf(Obj(innerSelection)))
}


type CloneProjectPayload
object CloneProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CloneProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The id of the JobStatus for populating cloned fields.
 */
def jobStatusId: SelectionBuilder[CloneProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("jobStatusId", OptionOf(Scalar()))
  /**
 * The new cloned project.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[CloneProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
}


type CloneTemplateRepositoryPayload
object CloneTemplateRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CloneTemplateRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CloneTemplateRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type CloseDiscussionPayload
object CloseDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CloseDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion that was closed.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[CloseDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type CloseIssuePayload
object CloseIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CloseIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue that was closed.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[CloseIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type ClosePullRequestPayload
object ClosePullRequestPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ClosePullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that was closed.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ClosePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type ClosedEvent
object ClosedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ClosedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Object that was closed.
 */
def closable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onMilestone: SelectionBuilder[Milestone, A], onProject: SelectionBuilder[Project, A], onProjectV2: SelectionBuilder[ProjectV2, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ClosedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("closable", ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "Milestone" -> Obj(onMilestone), "Project" -> Obj(onProject), "ProjectV2" -> Obj(onProjectV2), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Object which triggered the creation of this event.
 */
def closer[A](onCommit: SelectionBuilder[Commit, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ClosedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closer", OptionOf(ChoiceOf(Map("Commit" -> Obj(onCommit), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ClosedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ClosedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The HTTP path for this closed event.
 */
def resourcePath: SelectionBuilder[ClosedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The reason the issue state was changed to closed.
 */
def stateReason: SelectionBuilder[ClosedEvent, scala.Option[IssueStateReason]] = _root_.caliban.client.SelectionBuilder.Field("stateReason", OptionOf(Scalar()))
  /**
 * The HTTP URL for this closed event.
 */
def url: SelectionBuilder[ClosedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Object which triggered the creation of this event.
 */
def closerOption[A](onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ClosedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("closer", OptionOf(ChoiceOf(Map("Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ClosedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ClosedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Object that was closed.
 */
def closableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onMilestone: scala.Option[SelectionBuilder[Milestone, A]] = None, onProject: scala.Option[SelectionBuilder[Project, A]] = None, onProjectV2: scala.Option[SelectionBuilder[ProjectV2, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ClosedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closable", ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Milestone" -> onMilestone.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Project" -> onProject.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2" -> onProjectV2.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Object that was closed.
 */
def closableInterface[A](closable: SelectionBuilder[Closable, A]): SelectionBuilder[ClosedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("closable", Obj(closable))
}


type CodeOfConduct
object CodeOfConduct {
  /**
 * The body of the Code of Conduct
 */
def body: SelectionBuilder[CodeOfConduct, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("body", OptionOf(Scalar()))
  def id: SelectionBuilder[CodeOfConduct, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The key for the Code of Conduct
 */
def key: SelectionBuilder[CodeOfConduct, String] = _root_.caliban.client.SelectionBuilder.Field("key", Scalar())
  /**
 * The formal name of the Code of Conduct
 */
def name: SelectionBuilder[CodeOfConduct, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The HTTP path for this Code of Conduct
 */
def resourcePath: SelectionBuilder[CodeOfConduct, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this Code of Conduct
 */
def url: SelectionBuilder[CodeOfConduct, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
}


type CommentDeletedEvent
object CommentDeletedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CommentDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[CommentDeletedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[CommentDeletedEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The user who authored the deleted comment.
 */
def deletedCommentAuthor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CommentDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletedCommentAuthor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[CommentDeletedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CommentDeletedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[CommentDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * The user who authored the deleted comment.
 */
def deletedCommentAuthorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CommentDeletedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("deletedCommentAuthor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The user who authored the deleted comment.
 */
def deletedCommentAuthorInterface[A](deletedCommentAuthor: SelectionBuilder[Actor, A]): SelectionBuilder[CommentDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletedCommentAuthor", OptionOf(Obj(deletedCommentAuthor)))
}


type Commit
object Commit {
  /**
 * An abbreviated version of the Git object ID
 */
def abbreviatedOid: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("abbreviatedOid", Scalar())
  /**
 * The number of additions in this commit.
 */
def additions: SelectionBuilder[Commit, Int] = _root_.caliban.client.SelectionBuilder.Field("additions", Scalar())
  /**
 * The merged Pull Request that introduced the commit to the repository. If the
commit is not present in the default branch, additionally returns open Pull
Requests associated with the commit
 */
def associatedPullRequests[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[PullRequestOrder] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[PullRequestOrder]]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("associatedPullRequests", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "PullRequestOrder")(encoder4)))
  /**
 * Authorship details of the commit.
 */
def author[A](innerSelection: SelectionBuilder[GitActor, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))
  /**
 * Check if the committer and the author match.
 */
def authoredByCommitter: SelectionBuilder[Commit, Boolean] = _root_.caliban.client.SelectionBuilder.Field("authoredByCommitter", Scalar())
  /**
 * The datetime when this commit was authored.
 */
def authoredDate: SelectionBuilder[Commit, DateTime] = _root_.caliban.client.SelectionBuilder.Field("authoredDate", Scalar())
  /**
 * The list of authors for this commit based on the git author and the Co-authored-by
message trailer. The git author will always be first.
 */
def authors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[GitActorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("authors", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Fetches `git blame` information.
 */
def blame[A](path : String)(innerSelection: SelectionBuilder[Blame, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("blame", Obj(innerSelection), arguments = List(Argument("path", path, "String!")(encoder0)))
  /**
 * We recommend using the `changedFilesIfAvailable` field instead of
`changedFiles`, as `changedFiles` will cause your request to return an error
if GitHub is unable to calculate the number of changed files.
 */
@deprecated("`changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.", "")
def changedFiles: SelectionBuilder[Commit, Int] = _root_.caliban.client.SelectionBuilder.Field("changedFiles", Scalar())
  /**
 * The number of changed files in this commit. If GitHub is unable to calculate
the number of changed files (for example due to a timeout), this will return
`null`. We recommend using this field instead of `changedFiles`.
 */
def changedFilesIfAvailable: SelectionBuilder[Commit, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("changedFilesIfAvailable", OptionOf(Scalar()))
  /**
 * The check suites associated with a commit.
 */
def checkSuites[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[CheckSuiteFilter] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CheckSuiteConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[CheckSuiteFilter]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("checkSuites", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "CheckSuiteFilter")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * Comments made on the commit.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The HTTP path for this Git object
 */
def commitResourcePath: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("commitResourcePath", Scalar())
  /**
 * The HTTP URL for this Git object
 */
def commitUrl: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("commitUrl", Scalar())
  /**
 * The datetime when this commit was committed.
 */
def committedDate: SelectionBuilder[Commit, DateTime] = _root_.caliban.client.SelectionBuilder.Field("committedDate", Scalar())
  /**
 * Check if committed via GitHub web UI.
 */
def committedViaWeb: SelectionBuilder[Commit, Boolean] = _root_.caliban.client.SelectionBuilder.Field("committedViaWeb", Scalar())
  /**
 * Committer details of the commit.
 */
def committer[A](innerSelection: SelectionBuilder[GitActor, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("committer", OptionOf(Obj(innerSelection)))
  /**
 * The number of deletions in this commit.
 */
def deletions: SelectionBuilder[Commit, Int] = _root_.caliban.client.SelectionBuilder.Field("deletions", Scalar())
  /**
 * The deployments associated with a commit.
 */
def deployments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, environments : scala.Option[List[String]] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DeploymentOrder] = None)(innerSelection: SelectionBuilder[DeploymentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[String]]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DeploymentOrder]]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deployments", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("environments", environments, "[String!]")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "DeploymentOrder")(encoder5)))
  /**
 * The tree entry representing the file located at the given path.
 */
def file[A](path : String)(innerSelection: SelectionBuilder[TreeEntry, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Obj(innerSelection)), arguments = List(Argument("path", path, "String!")(encoder0)))
  /**
 * The linear commit history starting from (and including) this commit, in the same order as `git log`.
 */
def history[A](after : scala.Option[String] = None, author : scala.Option[CommitAuthor] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, path : scala.Option[String] = None, since : scala.Option[GitTimestamp] = None, until : scala.Option[GitTimestamp] = None)(innerSelection: SelectionBuilder[CommitHistoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[CommitAuthor]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[GitTimestamp]], encoder7: ArgEncoder[scala.Option[GitTimestamp]]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("history", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("author", author, "CommitAuthor")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("path", path, "String")(encoder5), Argument("since", since, "GitTimestamp")(encoder6), Argument("until", until, "GitTimestamp")(encoder7)))
  def id: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The Git commit message
 */
def message: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * The Git commit message body
 */
def messageBody: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("messageBody", Scalar())
  /**
 * The commit message body rendered to HTML.
 */
def messageBodyHTML: SelectionBuilder[Commit, HTML] = _root_.caliban.client.SelectionBuilder.Field("messageBodyHTML", Scalar())
  /**
 * The Git commit message headline
 */
def messageHeadline: SelectionBuilder[Commit, String] = _root_.caliban.client.SelectionBuilder.Field("messageHeadline", Scalar())
  /**
 * The commit message headline rendered to HTML.
 */
def messageHeadlineHTML: SelectionBuilder[Commit, HTML] = _root_.caliban.client.SelectionBuilder.Field("messageHeadlineHTML", Scalar())
  /**
 * The Git object ID
 */
def oid: SelectionBuilder[Commit, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())
  /**
 * The organization this commit was made on behalf of.
 */
def onBehalfOf[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("onBehalfOf", OptionOf(Obj(innerSelection)))
  /**
 * The parents of a commit.
 */
def parents[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("parents", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The datetime when this commit was pushed.
 */
@deprecated("`pushedDate` is no longer supported. Removal on 2023-07-01 UTC.", "")
def pushedDate: SelectionBuilder[Commit, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("pushedDate", OptionOf(Scalar()))
  /**
 * The Repository this commit belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this commit
 */
def resourcePath: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Commit signing information, if present.
 */
def signature[A](onGpgSignature: SelectionBuilder[GpgSignature, A], onSmimeSignature: SelectionBuilder[SmimeSignature, A], onSshSignature: SelectionBuilder[SshSignature, A], onUnknownSignature: SelectionBuilder[UnknownSignature, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signature", OptionOf(ChoiceOf(Map("GpgSignature" -> Obj(onGpgSignature), "SmimeSignature" -> Obj(onSmimeSignature), "SshSignature" -> Obj(onSshSignature), "UnknownSignature" -> Obj(onUnknownSignature)))))
  /**
 * Status information for this commit
 */
def status[A](innerSelection: SelectionBuilder[Status, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Obj(innerSelection)))
  /**
 * Check and Status rollup information for this commit.
 */
def statusCheckRollup[A](innerSelection: SelectionBuilder[StatusCheckRollup, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("statusCheckRollup", OptionOf(Obj(innerSelection)))
  /**
 * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
 */
def submodules[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[SubmoduleConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("submodules", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Returns a URL to download a tarball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes.
 */
def tarballUrl: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("tarballUrl", Scalar())
  /**
 * Commit's root Tree
 */
def tree[A](innerSelection: SelectionBuilder[Tree, A]): SelectionBuilder[Commit, A] = _root_.caliban.client.SelectionBuilder.Field("tree", Obj(innerSelection))
  /**
 * The HTTP path for the tree of this commit
 */
def treeResourcePath: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("treeResourcePath", Scalar())
  /**
 * The HTTP URL for the tree of this commit
 */
def treeUrl: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("treeUrl", Scalar())
  /**
 * The HTTP URL for this commit
 */
def url: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[Commit, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[Commit, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
  /**
 * Returns a URL to download a zipball archive for a repository.
Note: For private repositories, these links are temporary and expire after five minutes.
 */
def zipballUrl: SelectionBuilder[Commit, URI] = _root_.caliban.client.SelectionBuilder.Field("zipballUrl", Scalar())
  /**
 * Commit signing information, if present.
 */
def signatureOption[A](onGpgSignature: scala.Option[SelectionBuilder[GpgSignature, A]] = None, onSmimeSignature: scala.Option[SelectionBuilder[SmimeSignature, A]] = None, onSshSignature: scala.Option[SelectionBuilder[SshSignature, A]] = None, onUnknownSignature: scala.Option[SelectionBuilder[UnknownSignature, A]] = None): SelectionBuilder[Commit, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("signature", OptionOf(ChoiceOf(Map("GpgSignature" -> onGpgSignature.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SmimeSignature" -> onSmimeSignature.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SshSignature" -> onSshSignature.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnknownSignature" -> onUnknownSignature.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Commit signing information, if present.
 */
def signatureInterface[A](signature: SelectionBuilder[GitSignature, A]): SelectionBuilder[Commit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signature", OptionOf(Obj(signature)))
}


type CommitAuthorEmailPatternParameters
object CommitAuthorEmailPatternParameters {
  /**
 * How this rule will appear to users.
 */
def name: SelectionBuilder[CommitAuthorEmailPatternParameters, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * If true, the rule will fail if the pattern matches.
 */
def negate: SelectionBuilder[CommitAuthorEmailPatternParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("negate", Scalar())
  /**
 * The operator to use for matching.
 */
def operator: SelectionBuilder[CommitAuthorEmailPatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("operator", Scalar())
  /**
 * The pattern to match with.
 */
def pattern: SelectionBuilder[CommitAuthorEmailPatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
}


type CommitComment
object CommitComment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CommitComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[CommitComment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * Identifies the comment body.
 */
def body: SelectionBuilder[CommitComment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[CommitComment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[CommitComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the commit associated with the comment, if the commit exists.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[CommitComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[CommitComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CommitComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[CommitComment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Returns whether or not a comment has been minimized.
 */
def isMinimized: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMinimized", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[CommitComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
def minimizedReason: SelectionBuilder[CommitComment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("minimizedReason", OptionOf(Scalar()))
  /**
 * Identifies the file path associated with the comment.
 */
def path: SelectionBuilder[CommitComment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))
  /**
 * Identifies the line position associated with the comment.
 */
def position: SelectionBuilder[CommitComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Scalar()))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[CommitComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[CommitComment, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[CommitComment, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CommitComment, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path permalink for this commit comment.
 */
def resourcePath: SelectionBuilder[CommitComment, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[CommitComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL permalink for this commit comment.
 */
def url: SelectionBuilder[CommitComment, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[CommitComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Check if the current viewer can minimize this object.
 */
def viewerCanMinimize: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMinimize", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[CommitComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[CommitComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CommitComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[CommitComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CommitComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[CommitComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type CommitCommentConnection
object CommitCommentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CommitCommentEdge, A]): SelectionBuilder[CommitCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CommitComment, A]): SelectionBuilder[CommitCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CommitCommentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CommitCommentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CommitCommentEdge
object CommitCommentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CommitCommentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CommitComment, A]): SelectionBuilder[CommitCommentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CommitCommentThread
object CommitCommentThread {
  /**
 * The comments that exist in this thread.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[CommitCommentThread, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The commit the comments were made on.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitCommentThread, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[CommitCommentThread, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The file the comments were made on.
 */
def path: SelectionBuilder[CommitCommentThread, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))
  /**
 * The position in the diff for the commit that the comment was made on.
 */
def position: SelectionBuilder[CommitCommentThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Scalar()))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CommitCommentThread, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type CommitConnection
object CommitConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CommitEdge, A]): SelectionBuilder[CommitConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CommitConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CommitConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CommitContributionsByRepository
object CommitContributionsByRepository {
  /**
 * The commit contributions, each representing a day.
 */
def contributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[CommitContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedCommitContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[CommitContributionOrder]]): SelectionBuilder[CommitContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("contributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "CommitContributionOrder")(encoder4)))
  /**
 * The repository in which the commits were made.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CommitContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for the user's commits to the repository in this time range.
 */
def resourcePath: SelectionBuilder[CommitContributionsByRepository, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for the user's commits to the repository in this time range.
 */
def url: SelectionBuilder[CommitContributionsByRepository, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type CommitEdge
object CommitEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CommitEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CommitHistoryConnection
object CommitHistoryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CommitEdge, A]): SelectionBuilder[CommitHistoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CommitHistoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CommitHistoryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CommitHistoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CommitMessagePatternParameters
object CommitMessagePatternParameters {
  /**
 * How this rule will appear to users.
 */
def name: SelectionBuilder[CommitMessagePatternParameters, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * If true, the rule will fail if the pattern matches.
 */
def negate: SelectionBuilder[CommitMessagePatternParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("negate", Scalar())
  /**
 * The operator to use for matching.
 */
def operator: SelectionBuilder[CommitMessagePatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("operator", Scalar())
  /**
 * The pattern to match with.
 */
def pattern: SelectionBuilder[CommitMessagePatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
}


type CommitterEmailPatternParameters
object CommitterEmailPatternParameters {
  /**
 * How this rule will appear to users.
 */
def name: SelectionBuilder[CommitterEmailPatternParameters, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * If true, the rule will fail if the pattern matches.
 */
def negate: SelectionBuilder[CommitterEmailPatternParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("negate", Scalar())
  /**
 * The operator to use for matching.
 */
def operator: SelectionBuilder[CommitterEmailPatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("operator", Scalar())
  /**
 * The pattern to match with.
 */
def pattern: SelectionBuilder[CommitterEmailPatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
}


type Comparison
object Comparison {
  /**
 * The number of commits ahead of the base branch.
 */
def aheadBy: SelectionBuilder[Comparison, Int] = _root_.caliban.client.SelectionBuilder.Field("aheadBy", Scalar())
  /**
 * The base revision of this comparison.
 */
def baseTarget[A](onBlob: SelectionBuilder[Blob, A], onCommit: SelectionBuilder[Commit, A], onTag: SelectionBuilder[Tag, A], onTree: SelectionBuilder[Tree, A]): SelectionBuilder[Comparison, A] = _root_.caliban.client.SelectionBuilder.Field("baseTarget", ChoiceOf(Map("Blob" -> Obj(onBlob), "Commit" -> Obj(onCommit), "Tag" -> Obj(onTag), "Tree" -> Obj(onTree))))
  /**
 * The number of commits behind the base branch.
 */
def behindBy: SelectionBuilder[Comparison, Int] = _root_.caliban.client.SelectionBuilder.Field("behindBy", Scalar())
  /**
 * The commits which compose this comparison.
 */
def commits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ComparisonCommitConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Comparison, A] = _root_.caliban.client.SelectionBuilder.Field("commits", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The head revision of this comparison.
 */
def headTarget[A](onBlob: SelectionBuilder[Blob, A], onCommit: SelectionBuilder[Commit, A], onTag: SelectionBuilder[Tag, A], onTree: SelectionBuilder[Tree, A]): SelectionBuilder[Comparison, A] = _root_.caliban.client.SelectionBuilder.Field("headTarget", ChoiceOf(Map("Blob" -> Obj(onBlob), "Commit" -> Obj(onCommit), "Tag" -> Obj(onTag), "Tree" -> Obj(onTree))))
  def id: SelectionBuilder[Comparison, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The status of this comparison.
 */
def status: SelectionBuilder[Comparison, ComparisonStatus] = _root_.caliban.client.SelectionBuilder.Field("status", Scalar())
  /**
 * The base revision of this comparison.
 */
def baseTargetOption[A](onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None): SelectionBuilder[Comparison, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("baseTarget", ChoiceOf(Map("Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The base revision of this comparison.
 */
def baseTargetInterface[A](baseTarget: SelectionBuilder[GitObject, A]): SelectionBuilder[Comparison, A] = _root_.caliban.client.SelectionBuilder.Field("baseTarget", Obj(baseTarget))
  /**
 * The head revision of this comparison.
 */
def headTargetOption[A](onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None): SelectionBuilder[Comparison, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headTarget", ChoiceOf(Map("Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The head revision of this comparison.
 */
def headTargetInterface[A](headTarget: SelectionBuilder[GitObject, A]): SelectionBuilder[Comparison, A] = _root_.caliban.client.SelectionBuilder.Field("headTarget", Obj(headTarget))
}


type ComparisonCommitConnection
object ComparisonCommitConnection {
  /**
 * The total count of authors and co-authors across all commits.
 */
def authorCount: SelectionBuilder[ComparisonCommitConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("authorCount", Scalar())
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CommitEdge, A]): SelectionBuilder[ComparisonCommitConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[ComparisonCommitConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ComparisonCommitConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ComparisonCommitConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ConnectedEvent
object ConnectedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ConnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ConnectedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ConnectedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Reference originated in a different repository.
 */
def isCrossRepository: SelectionBuilder[ConnectedEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * Issue or pull request that made the reference.
 */
def source[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ConnectedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Issue or pull request which was connected.
 */
def subject[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ConnectedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Issue or pull request that made the reference.
 */
def sourceOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ConnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Issue or pull request which was connected.
 */
def subjectOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ConnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ConnectedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ConnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ContributionCalendar
object ContributionCalendar {
  /**
 * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
 */
def colors: SelectionBuilder[ContributionCalendar, List[String]] = _root_.caliban.client.SelectionBuilder.Field("colors", ListOf(Scalar()))
  /**
 * Determine if the color set was chosen because it's currently Halloween.
 */
def isHalloween: SelectionBuilder[ContributionCalendar, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isHalloween", Scalar())
  /**
 * A list of the months of contributions in this calendar.
 */
def months[A](innerSelection: SelectionBuilder[ContributionCalendarMonth, A]): SelectionBuilder[ContributionCalendar, List[A]] = _root_.caliban.client.SelectionBuilder.Field("months", ListOf(Obj(innerSelection)))
  /**
 * The count of total contributions in the calendar.
 */
def totalContributions: SelectionBuilder[ContributionCalendar, Int] = _root_.caliban.client.SelectionBuilder.Field("totalContributions", Scalar())
  /**
 * A list of the weeks of contributions in this calendar.
 */
def weeks[A](innerSelection: SelectionBuilder[ContributionCalendarWeek, A]): SelectionBuilder[ContributionCalendar, List[A]] = _root_.caliban.client.SelectionBuilder.Field("weeks", ListOf(Obj(innerSelection)))
}


type ContributionCalendarDay
object ContributionCalendarDay {
  /**
 * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
 */
def color: SelectionBuilder[ContributionCalendarDay, String] = _root_.caliban.client.SelectionBuilder.Field("color", Scalar())
  /**
 * How many contributions were made by the user on this day.
 */
def contributionCount: SelectionBuilder[ContributionCalendarDay, Int] = _root_.caliban.client.SelectionBuilder.Field("contributionCount", Scalar())
  /**
 * Indication of contributions, relative to other days. Can be used to indicate
which color to represent this day on a calendar.
 */
def contributionLevel: SelectionBuilder[ContributionCalendarDay, ContributionLevel] = _root_.caliban.client.SelectionBuilder.Field("contributionLevel", Scalar())
  /**
 * The day this square represents.
 */
def date: SelectionBuilder[ContributionCalendarDay, Date] = _root_.caliban.client.SelectionBuilder.Field("date", Scalar())
  /**
 * A number representing which day of the week this square represents, e.g., 1 is Monday.
 */
def weekday: SelectionBuilder[ContributionCalendarDay, Int] = _root_.caliban.client.SelectionBuilder.Field("weekday", Scalar())
}


type ContributionCalendarMonth
object ContributionCalendarMonth {
  /**
 * The date of the first day of this month.
 */
def firstDay: SelectionBuilder[ContributionCalendarMonth, Date] = _root_.caliban.client.SelectionBuilder.Field("firstDay", Scalar())
  /**
 * The name of the month.
 */
def name: SelectionBuilder[ContributionCalendarMonth, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * How many weeks started in this month.
 */
def totalWeeks: SelectionBuilder[ContributionCalendarMonth, Int] = _root_.caliban.client.SelectionBuilder.Field("totalWeeks", Scalar())
  /**
 * The year the month occurred in.
 */
def year: SelectionBuilder[ContributionCalendarMonth, Int] = _root_.caliban.client.SelectionBuilder.Field("year", Scalar())
}


type ContributionCalendarWeek
object ContributionCalendarWeek {
  /**
 * The days of contributions in this week.
 */
def contributionDays[A](innerSelection: SelectionBuilder[ContributionCalendarDay, A]): SelectionBuilder[ContributionCalendarWeek, List[A]] = _root_.caliban.client.SelectionBuilder.Field("contributionDays", ListOf(Obj(innerSelection)))
  /**
 * The date of the earliest square in this week.
 */
def firstDay: SelectionBuilder[ContributionCalendarWeek, Date] = _root_.caliban.client.SelectionBuilder.Field("firstDay", Scalar())
}


type ContributionsCollection
object ContributionsCollection {
  /**
 * Commit contributions made by the user, grouped by repository.
 */
def commitContributionsByRepository[A](maxRepositories : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitContributionsByRepository, A])(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ContributionsCollection, List[A]] = _root_.caliban.client.SelectionBuilder.Field("commitContributionsByRepository", ListOf(Obj(innerSelection)), arguments = List(Argument("maxRepositories", maxRepositories, "Int")(encoder0)))
  /**
 * A calendar of this user's contributions on GitHub.
 */
def contributionCalendar[A](innerSelection: SelectionBuilder[ContributionCalendar, A]): SelectionBuilder[ContributionsCollection, A] = _root_.caliban.client.SelectionBuilder.Field("contributionCalendar", Obj(innerSelection))
  /**
 * The years the user has been making contributions with the most recent year first.
 */
def contributionYears: SelectionBuilder[ContributionsCollection, List[Int]] = _root_.caliban.client.SelectionBuilder.Field("contributionYears", ListOf(Scalar()))
  /**
 * Determine if this collection's time span ends in the current month.
 */
def doesEndInCurrentMonth: SelectionBuilder[ContributionsCollection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("doesEndInCurrentMonth", Scalar())
  /**
 * The date of the first restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts.
 */
def earliestRestrictedContributionDate: SelectionBuilder[ContributionsCollection, scala.Option[Date]] = _root_.caliban.client.SelectionBuilder.Field("earliestRestrictedContributionDate", OptionOf(Scalar()))
  /**
 * The ending date and time of this collection.
 */
def endedAt: SelectionBuilder[ContributionsCollection, DateTime] = _root_.caliban.client.SelectionBuilder.Field("endedAt", Scalar())
  /**
 * The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned.
 */
def firstIssueContribution[A](onCreatedIssueContribution: SelectionBuilder[CreatedIssueContribution, A], onRestrictedContribution: SelectionBuilder[RestrictedContribution, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("firstIssueContribution", OptionOf(ChoiceOf(Map("CreatedIssueContribution" -> Obj(onCreatedIssueContribution), "RestrictedContribution" -> Obj(onRestrictedContribution)))))
  /**
 * The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned.
 */
def firstPullRequestContribution[A](onCreatedPullRequestContribution: SelectionBuilder[CreatedPullRequestContribution, A], onRestrictedContribution: SelectionBuilder[RestrictedContribution, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("firstPullRequestContribution", OptionOf(ChoiceOf(Map("CreatedPullRequestContribution" -> Obj(onCreatedPullRequestContribution), "RestrictedContribution" -> Obj(onRestrictedContribution)))))
  /**
 * The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned.
 */
def firstRepositoryContribution[A](onCreatedRepositoryContribution: SelectionBuilder[CreatedRepositoryContribution, A], onRestrictedContribution: SelectionBuilder[RestrictedContribution, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("firstRepositoryContribution", OptionOf(ChoiceOf(Map("CreatedRepositoryContribution" -> Obj(onCreatedRepositoryContribution), "RestrictedContribution" -> Obj(onRestrictedContribution)))))
  /**
 * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
 */
def hasActivityInThePast: SelectionBuilder[ContributionsCollection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasActivityInThePast", Scalar())
  /**
 * Determine if there are any contributions in this collection.
 */
def hasAnyContributions: SelectionBuilder[ContributionsCollection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasAnyContributions", Scalar())
  /**
 * Determine if the user made any contributions in this time frame whose details
are not visible because they were made in a private repository. Can only be
true if the user enabled private contribution counts.
 */
def hasAnyRestrictedContributions: SelectionBuilder[ContributionsCollection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasAnyRestrictedContributions", Scalar())
  /**
 * Whether or not the collector's time span is all within the same day.
 */
def isSingleDay: SelectionBuilder[ContributionsCollection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSingleDay", Scalar())
  /**
 * A list of issues the user opened.
 */
def issueContributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedIssueContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Boolean]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[ContributionsCollection, A] = _root_.caliban.client.SelectionBuilder.Field("issueContributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("excludeFirst", excludeFirst, "Boolean")(encoder2), Argument("excludePopular", excludePopular, "Boolean")(encoder3), Argument("first", first, "Int")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "ContributionOrder")(encoder6)))
  /**
 * Issue contributions made by the user, grouped by repository.
 */
def issueContributionsByRepository[A](excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None, maxRepositories : scala.Option[Int] = None)(innerSelection: SelectionBuilder[IssueContributionsByRepository, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]], encoder2: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ContributionsCollection, List[A]] = _root_.caliban.client.SelectionBuilder.Field("issueContributionsByRepository", ListOf(Obj(innerSelection)), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0), Argument("excludePopular", excludePopular, "Boolean")(encoder1), Argument("maxRepositories", maxRepositories, "Int")(encoder2)))
  /**
 * When the user signed up for GitHub. This will be null if that sign up date
falls outside the collection's time range and ignoreTimeRange is false.
 */
def joinedGitHubContribution[A](innerSelection: SelectionBuilder[JoinedGitHubContribution, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("joinedGitHubContribution", OptionOf(Obj(innerSelection)))
  /**
 * The date of the most recent restricted contribution the user made in this time
period. Can only be non-null when the user has enabled private contribution counts.
 */
def latestRestrictedContributionDate: SelectionBuilder[ContributionsCollection, scala.Option[Date]] = _root_.caliban.client.SelectionBuilder.Field("latestRestrictedContributionDate", OptionOf(Scalar()))
  /**
 * When this collection's time range does not include any activity from the user, use this
to get a different collection from an earlier time range that does have activity.
 */
def mostRecentCollectionWithActivity[A](innerSelection: SelectionBuilder[ContributionsCollection, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mostRecentCollectionWithActivity", OptionOf(Obj(innerSelection)))
  /**
 * Returns a different contributions collection from an earlier time range than this one
that does not have any contributions.
 */
def mostRecentCollectionWithoutActivity[A](innerSelection: SelectionBuilder[ContributionsCollection, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mostRecentCollectionWithoutActivity", OptionOf(Obj(innerSelection)))
  /**
 * The issue the user opened on GitHub that received the most comments in the specified
time frame.
 */
def popularIssueContribution[A](innerSelection: SelectionBuilder[CreatedIssueContribution, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("popularIssueContribution", OptionOf(Obj(innerSelection)))
  /**
 * The pull request the user opened on GitHub that received the most comments in the
specified time frame.
 */
def popularPullRequestContribution[A](innerSelection: SelectionBuilder[CreatedPullRequestContribution, A]): SelectionBuilder[ContributionsCollection, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("popularPullRequestContribution", OptionOf(Obj(innerSelection)))
  /**
 * Pull request contributions made by the user.
 */
def pullRequestContributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedPullRequestContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Boolean]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[ContributionsCollection, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequestContributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("excludeFirst", excludeFirst, "Boolean")(encoder2), Argument("excludePopular", excludePopular, "Boolean")(encoder3), Argument("first", first, "Int")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "ContributionOrder")(encoder6)))
  /**
 * Pull request contributions made by the user, grouped by repository.
 */
def pullRequestContributionsByRepository[A](excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None, maxRepositories : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestContributionsByRepository, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]], encoder2: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ContributionsCollection, List[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestContributionsByRepository", ListOf(Obj(innerSelection)), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0), Argument("excludePopular", excludePopular, "Boolean")(encoder1), Argument("maxRepositories", maxRepositories, "Int")(encoder2)))
  /**
 * Pull request review contributions made by the user. Returns the most recently
submitted review for each PR reviewed by the user.
 */
def pullRequestReviewContributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedPullRequestReviewContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[ContributionsCollection, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReviewContributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ContributionOrder")(encoder4)))
  /**
 * Pull request review contributions made by the user, grouped by repository.
 */
def pullRequestReviewContributionsByRepository[A](maxRepositories : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestReviewContributionsByRepository, A])(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ContributionsCollection, List[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReviewContributionsByRepository", ListOf(Obj(innerSelection)), arguments = List(Argument("maxRepositories", maxRepositories, "Int")(encoder0)))
  /**
 * A list of repositories owned by the user that the user created in this time range.
 */
def repositoryContributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, excludeFirst : scala.Option[Boolean] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedRepositoryContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Boolean]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[ContributionsCollection, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryContributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("excludeFirst", excludeFirst, "Boolean")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ContributionOrder")(encoder5)))
  /**
 * A count of contributions made by the user that the viewer cannot access. Only
non-zero when the user has chosen to share their private contribution counts.
 */
def restrictedContributionsCount: SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("restrictedContributionsCount", Scalar())
  /**
 * The beginning date and time of this collection.
 */
def startedAt: SelectionBuilder[ContributionsCollection, DateTime] = _root_.caliban.client.SelectionBuilder.Field("startedAt", Scalar())
  /**
 * How many commits were made by the user in this time span.
 */
def totalCommitContributions: SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCommitContributions", Scalar())
  /**
 * How many issues the user opened.
 */
def totalIssueContributions(excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None)(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalIssueContributions", Scalar(), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0), Argument("excludePopular", excludePopular, "Boolean")(encoder1)))
  /**
 * How many pull requests the user opened.
 */
def totalPullRequestContributions(excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None)(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalPullRequestContributions", Scalar(), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0), Argument("excludePopular", excludePopular, "Boolean")(encoder1)))
  /**
 * How many pull request reviews the user left.
 */
def totalPullRequestReviewContributions: SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalPullRequestReviewContributions", Scalar())
  /**
 * How many different repositories the user committed to.
 */
def totalRepositoriesWithContributedCommits: SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRepositoriesWithContributedCommits", Scalar())
  /**
 * How many different repositories the user opened issues in.
 */
def totalRepositoriesWithContributedIssues(excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None)(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRepositoriesWithContributedIssues", Scalar(), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0), Argument("excludePopular", excludePopular, "Boolean")(encoder1)))
  /**
 * How many different repositories the user left pull request reviews in.
 */
def totalRepositoriesWithContributedPullRequestReviews: SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRepositoriesWithContributedPullRequestReviews", Scalar())
  /**
 * How many different repositories the user opened pull requests in.
 */
def totalRepositoriesWithContributedPullRequests(excludeFirst : scala.Option[Boolean] = None, excludePopular : scala.Option[Boolean] = None)(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRepositoriesWithContributedPullRequests", Scalar(), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0), Argument("excludePopular", excludePopular, "Boolean")(encoder1)))
  /**
 * How many repositories the user created.
 */
def totalRepositoryContributions(excludeFirst : scala.Option[Boolean] = None)(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[ContributionsCollection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRepositoryContributions", Scalar(), arguments = List(Argument("excludeFirst", excludeFirst, "Boolean")(encoder0)))
  /**
 * The user who made the contributions in this collection.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[ContributionsCollection, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
  /**
 * The first issue the user opened on GitHub. This will be null if that issue was
opened outside the collection's time range and ignoreTimeRange is false. If
the issue is not visible but the user has opted to show private contributions,
a RestrictedContribution will be returned.
 */
def firstIssueContributionOption[A](onCreatedIssueContribution: scala.Option[SelectionBuilder[CreatedIssueContribution, A]] = None, onRestrictedContribution: scala.Option[SelectionBuilder[RestrictedContribution, A]] = None): SelectionBuilder[ContributionsCollection, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("firstIssueContribution", OptionOf(ChoiceOf(Map("CreatedIssueContribution" -> onCreatedIssueContribution.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RestrictedContribution" -> onRestrictedContribution.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The first pull request the user opened on GitHub. This will be null if that
pull request was opened outside the collection's time range and
ignoreTimeRange is not true. If the pull request is not visible but the user
has opted to show private contributions, a RestrictedContribution will be returned.
 */
def firstPullRequestContributionOption[A](onCreatedPullRequestContribution: scala.Option[SelectionBuilder[CreatedPullRequestContribution, A]] = None, onRestrictedContribution: scala.Option[SelectionBuilder[RestrictedContribution, A]] = None): SelectionBuilder[ContributionsCollection, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("firstPullRequestContribution", OptionOf(ChoiceOf(Map("CreatedPullRequestContribution" -> onCreatedPullRequestContribution.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RestrictedContribution" -> onRestrictedContribution.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The first repository the user created on GitHub. This will be null if that
first repository was created outside the collection's time range and
ignoreTimeRange is false. If the repository is not visible, then a
RestrictedContribution is returned.
 */
def firstRepositoryContributionOption[A](onCreatedRepositoryContribution: scala.Option[SelectionBuilder[CreatedRepositoryContribution, A]] = None, onRestrictedContribution: scala.Option[SelectionBuilder[RestrictedContribution, A]] = None): SelectionBuilder[ContributionsCollection, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("firstRepositoryContribution", OptionOf(ChoiceOf(Map("CreatedRepositoryContribution" -> onCreatedRepositoryContribution.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RestrictedContribution" -> onRestrictedContribution.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type ConvertProjectCardNoteToIssuePayload
object ConvertProjectCardNoteToIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ConvertProjectCardNoteToIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated ProjectCard.
 */
def projectCard[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[ConvertProjectCardNoteToIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectCard", OptionOf(Obj(innerSelection)))
}


type ConvertPullRequestToDraftPayload
object ConvertPullRequestToDraftPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ConvertPullRequestToDraftPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that is now a draft.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ConvertPullRequestToDraftPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type ConvertToDraftEvent
object ConvertToDraftEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ConvertToDraftEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ConvertToDraftEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ConvertToDraftEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ConvertToDraftEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The HTTP path for this convert to draft event.
 */
def resourcePath: SelectionBuilder[ConvertToDraftEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this convert to draft event.
 */
def url: SelectionBuilder[ConvertToDraftEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ConvertToDraftEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ConvertToDraftEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ConvertedNoteToIssueEvent
object ConvertedNoteToIssueEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ConvertedNoteToIssueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ConvertedNoteToIssueEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ConvertedNoteToIssueEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ConvertedNoteToIssueEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Project referenced by event.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ConvertedNoteToIssueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  /**
 * Project card referenced by this project event.
 */
def projectCard[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[ConvertedNoteToIssueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectCard", OptionOf(Obj(innerSelection)))
  /**
 * Column name referenced by this project event.
 */
def projectColumnName: SelectionBuilder[ConvertedNoteToIssueEvent, String] = _root_.caliban.client.SelectionBuilder.Field("projectColumnName", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ConvertedNoteToIssueEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ConvertedNoteToIssueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ConvertedToDiscussionEvent
object ConvertedToDiscussionEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ConvertedToDiscussionEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ConvertedToDiscussionEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The discussion that the issue was converted into.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[ConvertedToDiscussionEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[ConvertedToDiscussionEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ConvertedToDiscussionEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ConvertedToDiscussionEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type CopyProjectV2Payload
object CopyProjectV2Payload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CopyProjectV2Payload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The copied project.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[CopyProjectV2Payload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type CreateAttributionInvitationPayload
object CreateAttributionInvitationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateAttributionInvitationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The owner scoping the reattributable data.
 */
def owner[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[CreateAttributionInvitationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(Obj(innerSelection)))
  /**
 * The account owning the data to reattribute.
 */
def source[A](onMannequin: SelectionBuilder[Mannequin, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CreateAttributionInvitationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("source", OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "User" -> Obj(onUser)))))
  /**
 * The account which may claim the data.
 */
def target[A](onMannequin: SelectionBuilder[Mannequin, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CreateAttributionInvitationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("target", OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "User" -> Obj(onUser)))))
  /**
 * The account owning the data to reattribute.
 */
def sourceOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CreateAttributionInvitationPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("source", OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The account which may claim the data.
 */
def targetOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CreateAttributionInvitationPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("target", OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type CreateBranchProtectionRulePayload
object CreateBranchProtectionRulePayload {
  /**
 * The newly created BranchProtectionRule.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[CreateBranchProtectionRulePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateBranchProtectionRulePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type CreateCheckRunPayload
object CreateCheckRunPayload {
  /**
 * The newly created check run.
 */
def checkRun[A](innerSelection: SelectionBuilder[CheckRun, A]): SelectionBuilder[CreateCheckRunPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("checkRun", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateCheckRunPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type CreateCheckSuitePayload
object CreateCheckSuitePayload {
  /**
 * The newly created check suite.
 */
def checkSuite[A](innerSelection: SelectionBuilder[CheckSuite, A]): SelectionBuilder[CreateCheckSuitePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("checkSuite", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateCheckSuitePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type CreateCommitOnBranchPayload
object CreateCommitOnBranchPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateCommitOnBranchPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new commit.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[CreateCommitOnBranchPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * The ref which has been updated to point to the new commit.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[CreateCommitOnBranchPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
}


type CreateDeploymentPayload
object CreateDeploymentPayload {
  /**
 * True if the default branch has been auto-merged into the deployment ref.
 */
def autoMerged: SelectionBuilder[CreateDeploymentPayload, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("autoMerged", OptionOf(Scalar()))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateDeploymentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new deployment.
 */
def deployment[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[CreateDeploymentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deployment", OptionOf(Obj(innerSelection)))
}


type CreateDeploymentStatusPayload
object CreateDeploymentStatusPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateDeploymentStatusPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new deployment status.
 */
def deploymentStatus[A](innerSelection: SelectionBuilder[DeploymentStatus, A]): SelectionBuilder[CreateDeploymentStatusPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deploymentStatus", OptionOf(Obj(innerSelection)))
}


type CreateDiscussionPayload
object CreateDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion that was just created.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[CreateDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type CreateEnterpriseOrganizationPayload
object CreateEnterpriseOrganizationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateEnterpriseOrganizationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise that owns the created organization.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[CreateEnterpriseOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * The organization that was created.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[CreateEnterpriseOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type CreateEnvironmentPayload
object CreateEnvironmentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateEnvironmentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new or existing environment.
 */
def environment[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[CreateEnvironmentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Obj(innerSelection)))
}


type CreateIpAllowListEntryPayload
object CreateIpAllowListEntryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateIpAllowListEntryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The IP allow list entry that was created.
 */
def ipAllowListEntry[A](innerSelection: SelectionBuilder[IpAllowListEntry, A]): SelectionBuilder[CreateIpAllowListEntryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEntry", OptionOf(Obj(innerSelection)))
}


type CreateIssuePayload
object CreateIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new issue.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[CreateIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type CreateLabelPayload
object CreateLabelPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateLabelPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new label.
 */
def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[CreateLabelPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Obj(innerSelection)))
}


type CreateLinkedBranchPayload
object CreateLinkedBranchPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateLinkedBranchPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new branch issue reference.
 */
def linkedBranch[A](innerSelection: SelectionBuilder[LinkedBranch, A]): SelectionBuilder[CreateLinkedBranchPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("linkedBranch", OptionOf(Obj(innerSelection)))
}


type CreateMigrationSourcePayload
object CreateMigrationSourcePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateMigrationSourcePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The created migration source.
 */
def migrationSource[A](innerSelection: SelectionBuilder[MigrationSource, A]): SelectionBuilder[CreateMigrationSourcePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("migrationSource", OptionOf(Obj(innerSelection)))
}


type CreateProjectPayload
object CreateProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new project.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[CreateProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
}


type CreateProjectV2FieldPayload
object CreateProjectV2FieldPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateProjectV2FieldPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new field.
 */
def projectV2Field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[CreateProjectV2FieldPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2Field", OptionOf(ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField)))))
  /**
 * The new field.
 */
def projectV2FieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[CreateProjectV2FieldPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("projectV2Field", OptionOf(ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type CreateProjectV2Payload
object CreateProjectV2Payload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateProjectV2Payload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new project.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[CreateProjectV2Payload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type CreatePullRequestPayload
object CreatePullRequestPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreatePullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new pull request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[CreatePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type CreateRefPayload
object CreateRefPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateRefPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created ref.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[CreateRefPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
}


type CreateRepositoryPayload
object CreateRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CreateRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type CreateRepositoryRulesetPayload
object CreateRepositoryRulesetPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateRepositoryRulesetPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created Ruleset.
 */
def ruleset[A](innerSelection: SelectionBuilder[RepositoryRuleset, A]): SelectionBuilder[CreateRepositoryRulesetPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ruleset", OptionOf(Obj(innerSelection)))
}


type CreateSponsorsListingPayload
object CreateSponsorsListingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateSponsorsListingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new GitHub Sponsors profile.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[CreateSponsorsListingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", OptionOf(Obj(innerSelection)))
}


type CreateSponsorsTierPayload
object CreateSponsorsTierPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateSponsorsTierPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new tier.
 */
def sponsorsTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[CreateSponsorsTierPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsTier", OptionOf(Obj(innerSelection)))
}


type CreateSponsorshipPayload
object CreateSponsorshipPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateSponsorshipPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The sponsorship that was started.
 */
def sponsorship[A](innerSelection: SelectionBuilder[Sponsorship, A]): SelectionBuilder[CreateSponsorshipPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorship", OptionOf(Obj(innerSelection)))
}


type CreateSponsorshipsPayload
object CreateSponsorshipsPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateSponsorshipsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The users and organizations who received a sponsorship.
 */
def sponsorables[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CreateSponsorshipsPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("sponsorables", OptionOf(ListOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))))
  /**
 * The users and organizations who received a sponsorship.
 */
def sponsorablesOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CreateSponsorshipsPayload, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("sponsorables", OptionOf(ListOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))))
  /**
 * The users and organizations who received a sponsorship.
 */
def sponsorablesInterface[A](sponsorables: SelectionBuilder[Sponsorable, A]): SelectionBuilder[CreateSponsorshipsPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("sponsorables", OptionOf(ListOf(Obj(sponsorables))))
}


type CreateTeamDiscussionCommentPayload
object CreateTeamDiscussionCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateTeamDiscussionCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new comment.
 */
def teamDiscussionComment[A](innerSelection: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[CreateTeamDiscussionCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("teamDiscussionComment", OptionOf(Obj(innerSelection)))
}


type CreateTeamDiscussionPayload
object CreateTeamDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[CreateTeamDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new discussion.
 */
def teamDiscussion[A](innerSelection: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[CreateTeamDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("teamDiscussion", OptionOf(Obj(innerSelection)))
}


type CreatedCommitContribution
object CreatedCommitContribution {
  /**
 * How many commits were made on this day to this repository by the user.
 */
def commitCount: SelectionBuilder[CreatedCommitContribution, Int] = _root_.caliban.client.SelectionBuilder.Field("commitCount", Scalar())
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[CreatedCommitContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[CreatedCommitContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The repository the user made a commit in.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CreatedCommitContribution, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[CreatedCommitContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[CreatedCommitContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[CreatedCommitContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type CreatedCommitContributionConnection
object CreatedCommitContributionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CreatedCommitContributionEdge, A]): SelectionBuilder[CreatedCommitContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CreatedCommitContribution, A]): SelectionBuilder[CreatedCommitContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CreatedCommitContributionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of commits across days and repositories in the connection.
 */
def totalCount: SelectionBuilder[CreatedCommitContributionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CreatedCommitContributionEdge
object CreatedCommitContributionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CreatedCommitContributionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CreatedCommitContribution, A]): SelectionBuilder[CreatedCommitContributionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CreatedIssueContribution
object CreatedIssueContribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[CreatedIssueContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * The issue that was opened.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[CreatedIssueContribution, A] = _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[CreatedIssueContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[CreatedIssueContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[CreatedIssueContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[CreatedIssueContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type CreatedIssueContributionConnection
object CreatedIssueContributionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CreatedIssueContributionEdge, A]): SelectionBuilder[CreatedIssueContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CreatedIssueContribution, A]): SelectionBuilder[CreatedIssueContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CreatedIssueContributionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CreatedIssueContributionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CreatedIssueContributionEdge
object CreatedIssueContributionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CreatedIssueContributionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CreatedIssueContribution, A]): SelectionBuilder[CreatedIssueContributionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CreatedPullRequestContribution
object CreatedPullRequestContribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[CreatedPullRequestContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[CreatedPullRequestContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The pull request that was opened.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[CreatedPullRequestContribution, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[CreatedPullRequestContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[CreatedPullRequestContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[CreatedPullRequestContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type CreatedPullRequestContributionConnection
object CreatedPullRequestContributionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CreatedPullRequestContributionEdge, A]): SelectionBuilder[CreatedPullRequestContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CreatedPullRequestContribution, A]): SelectionBuilder[CreatedPullRequestContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CreatedPullRequestContributionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CreatedPullRequestContributionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CreatedPullRequestContributionEdge
object CreatedPullRequestContributionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CreatedPullRequestContributionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CreatedPullRequestContribution, A]): SelectionBuilder[CreatedPullRequestContributionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CreatedPullRequestReviewContribution
object CreatedPullRequestReviewContribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[CreatedPullRequestReviewContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[CreatedPullRequestReviewContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The pull request the user reviewed.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[CreatedPullRequestReviewContribution, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The review the user left on the pull request.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[CreatedPullRequestReviewContribution, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", Obj(innerSelection))
  /**
 * The repository containing the pull request that the user reviewed.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CreatedPullRequestReviewContribution, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[CreatedPullRequestReviewContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[CreatedPullRequestReviewContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[CreatedPullRequestReviewContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type CreatedPullRequestReviewContributionConnection
object CreatedPullRequestReviewContributionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CreatedPullRequestReviewContributionEdge, A]): SelectionBuilder[CreatedPullRequestReviewContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CreatedPullRequestReviewContribution, A]): SelectionBuilder[CreatedPullRequestReviewContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CreatedPullRequestReviewContributionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CreatedPullRequestReviewContributionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CreatedPullRequestReviewContributionEdge
object CreatedPullRequestReviewContributionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CreatedPullRequestReviewContributionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CreatedPullRequestReviewContribution, A]): SelectionBuilder[CreatedPullRequestReviewContributionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CreatedRepositoryContribution
object CreatedRepositoryContribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[CreatedRepositoryContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[CreatedRepositoryContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The repository that was created.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[CreatedRepositoryContribution, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[CreatedRepositoryContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[CreatedRepositoryContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[CreatedRepositoryContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type CreatedRepositoryContributionConnection
object CreatedRepositoryContributionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[CreatedRepositoryContributionEdge, A]): SelectionBuilder[CreatedRepositoryContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[CreatedRepositoryContribution, A]): SelectionBuilder[CreatedRepositoryContributionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[CreatedRepositoryContributionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[CreatedRepositoryContributionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type CreatedRepositoryContributionEdge
object CreatedRepositoryContributionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[CreatedRepositoryContributionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[CreatedRepositoryContribution, A]): SelectionBuilder[CreatedRepositoryContributionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type CrossReferencedEvent
object CrossReferencedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[CrossReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[CrossReferencedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[CrossReferencedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Reference originated in a different repository.
 */
def isCrossRepository: SelectionBuilder[CrossReferencedEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * Identifies when the reference was made.
 */
def referencedAt: SelectionBuilder[CrossReferencedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("referencedAt", Scalar())
  /**
 * The HTTP path for this pull request.
 */
def resourcePath: SelectionBuilder[CrossReferencedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Issue or pull request that made the reference.
 */
def source[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[CrossReferencedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Issue or pull request to which the reference was made.
 */
def target[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[CrossReferencedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("target", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * The HTTP URL for this pull request.
 */
def url: SelectionBuilder[CrossReferencedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Checks if the target will be closed when the source is merged.
 */
def willCloseTarget: SelectionBuilder[CrossReferencedEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("willCloseTarget", Scalar())
  /**
 * Issue or pull request that made the reference.
 */
def sourceOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[CrossReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Issue or pull request to which the reference was made.
 */
def targetOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[CrossReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("target", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[CrossReferencedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[CrossReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type DeclineTopicSuggestionPayload
object DeclineTopicSuggestionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeclineTopicSuggestionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The declined topic.
 */
def topic[A](innerSelection: SelectionBuilder[Topic, A]): SelectionBuilder[DeclineTopicSuggestionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("topic", OptionOf(Obj(innerSelection)))
}


type DeleteBranchProtectionRulePayload
object DeleteBranchProtectionRulePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteBranchProtectionRulePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteDeploymentPayload
object DeleteDeploymentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteDeploymentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteDiscussionCommentPayload
object DeleteDiscussionCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteDiscussionCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion comment that was just deleted.
 */
def comment[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[DeleteDiscussionCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("comment", OptionOf(Obj(innerSelection)))
}


type DeleteDiscussionPayload
object DeleteDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion that was just deleted.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DeleteDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type DeleteEnvironmentPayload
object DeleteEnvironmentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteEnvironmentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteIpAllowListEntryPayload
object DeleteIpAllowListEntryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteIpAllowListEntryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The IP allow list entry that was deleted.
 */
def ipAllowListEntry[A](innerSelection: SelectionBuilder[IpAllowListEntry, A]): SelectionBuilder[DeleteIpAllowListEntryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEntry", OptionOf(Obj(innerSelection)))
}


type DeleteIssueCommentPayload
object DeleteIssueCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteIssueCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteIssuePayload
object DeleteIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository the issue belonged to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[DeleteIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type DeleteLabelPayload
object DeleteLabelPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteLabelPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteLinkedBranchPayload
object DeleteLinkedBranchPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteLinkedBranchPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue the linked branch was unlinked from.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[DeleteLinkedBranchPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type DeletePackageVersionPayload
object DeletePackageVersionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeletePackageVersionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * Whether or not the operation succeeded.
 */
def success: SelectionBuilder[DeletePackageVersionPayload, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("success", OptionOf(Scalar()))
}


type DeleteProjectCardPayload
object DeleteProjectCardPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectCardPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The column the deleted card was in.
 */
def column[A](innerSelection: SelectionBuilder[ProjectColumn, A]): SelectionBuilder[DeleteProjectCardPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("column", OptionOf(Obj(innerSelection)))
  /**
 * The deleted card ID.
 */
def deletedCardId: SelectionBuilder[DeleteProjectCardPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("deletedCardId", OptionOf(Scalar()))
}


type DeleteProjectColumnPayload
object DeleteProjectColumnPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectColumnPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The deleted column ID.
 */
def deletedColumnId: SelectionBuilder[DeleteProjectColumnPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("deletedColumnId", OptionOf(Scalar()))
  /**
 * The project the deleted column was in.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[DeleteProjectColumnPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
}


type DeleteProjectPayload
object DeleteProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository or organization the project was removed from.
 */
def owner[A](onOrganization: SelectionBuilder[Organization, A], onRepository: SelectionBuilder[Repository, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DeleteProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "Repository" -> Obj(onRepository), "User" -> Obj(onUser)))))
  /**
 * The repository or organization the project was removed from.
 */
def ownerOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DeleteProjectPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The repository or organization the project was removed from.
 */
def ownerInterface[A](owner: SelectionBuilder[ProjectOwner, A]): SelectionBuilder[DeleteProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(Obj(owner)))
}


type DeleteProjectV2FieldPayload
object DeleteProjectV2FieldPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectV2FieldPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The deleted field.
 */
def projectV2Field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[DeleteProjectV2FieldPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2Field", OptionOf(ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField)))))
  /**
 * The deleted field.
 */
def projectV2FieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[DeleteProjectV2FieldPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("projectV2Field", OptionOf(ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type DeleteProjectV2ItemPayload
object DeleteProjectV2ItemPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectV2ItemPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The ID of the deleted item.
 */
def deletedItemId: SelectionBuilder[DeleteProjectV2ItemPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("deletedItemId", OptionOf(Scalar()))
}


type DeleteProjectV2Payload
object DeleteProjectV2Payload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectV2Payload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The deleted Project.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[DeleteProjectV2Payload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type DeleteProjectV2WorkflowPayload
object DeleteProjectV2WorkflowPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteProjectV2WorkflowPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The ID of the deleted workflow.
 */
def deletedWorkflowId: SelectionBuilder[DeleteProjectV2WorkflowPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("deletedWorkflowId", OptionOf(Scalar()))
  /**
 * The project the deleted workflow was in.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[DeleteProjectV2WorkflowPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type DeletePullRequestReviewCommentPayload
object DeletePullRequestReviewCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeletePullRequestReviewCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request review the deleted comment belonged to.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[DeletePullRequestReviewCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  /**
 * The deleted pull request review comment.
 */
def pullRequestReviewComment[A](innerSelection: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[DeletePullRequestReviewCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReviewComment", OptionOf(Obj(innerSelection)))
}


type DeletePullRequestReviewPayload
object DeletePullRequestReviewPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeletePullRequestReviewPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The deleted pull request review.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[DeletePullRequestReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
}


type DeleteRefPayload
object DeleteRefPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteRefPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteRepositoryRulesetPayload
object DeleteRepositoryRulesetPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteRepositoryRulesetPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteTeamDiscussionCommentPayload
object DeleteTeamDiscussionCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteTeamDiscussionCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteTeamDiscussionPayload
object DeleteTeamDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteTeamDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type DeleteVerifiableDomainPayload
object DeleteVerifiableDomainPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DeleteVerifiableDomainPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The owning account from which the domain was deleted.
 */
def owner[A](onEnterprise: SelectionBuilder[Enterprise, A], onOrganization: SelectionBuilder[Organization, A]): SelectionBuilder[DeleteVerifiableDomainPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Enterprise" -> Obj(onEnterprise), "Organization" -> Obj(onOrganization)))))
  /**
 * The owning account from which the domain was deleted.
 */
def ownerOption[A](onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None): SelectionBuilder[DeleteVerifiableDomainPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type DemilestonedEvent
object DemilestonedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DemilestonedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DemilestonedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[DemilestonedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the milestone title associated with the 'demilestoned' event.
 */
def milestoneTitle: SelectionBuilder[DemilestonedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("milestoneTitle", Scalar())
  /**
 * Object referenced by event.
 */
def subject[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[DemilestonedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Object referenced by event.
 */
def subjectOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[DemilestonedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DemilestonedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[DemilestonedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type DependabotUpdate
object DependabotUpdate {
  /**
 * The error from a dependency update
 */
def error[A](innerSelection: SelectionBuilder[DependabotUpdateError, A]): SelectionBuilder[DependabotUpdate, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("error", OptionOf(Obj(innerSelection)))
  /**
 * The associated pull request
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[DependabotUpdate, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[DependabotUpdate, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type DependabotUpdateError
object DependabotUpdateError {
  /**
 * The body of the error
 */
def body: SelectionBuilder[DependabotUpdateError, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The error code
 */
def errorType: SelectionBuilder[DependabotUpdateError, String] = _root_.caliban.client.SelectionBuilder.Field("errorType", Scalar())
  /**
 * The title of the error
 */
def title: SelectionBuilder[DependabotUpdateError, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
}


type DependencyGraphDependency
object DependencyGraphDependency {
  /**
 * Does the dependency itself have dependencies?
 */
def hasDependencies: SelectionBuilder[DependencyGraphDependency, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasDependencies", Scalar())
  /**
 * The original name of the package, as it appears in the manifest.
 */
@deprecated("`packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC.", "")
def packageLabel: SelectionBuilder[DependencyGraphDependency, String] = _root_.caliban.client.SelectionBuilder.Field("packageLabel", Scalar())
  /**
 * The dependency package manager
 */
def packageManager: SelectionBuilder[DependencyGraphDependency, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("packageManager", OptionOf(Scalar()))
  /**
 * The name of the package in the canonical form used by the package manager.
 */
def packageName: SelectionBuilder[DependencyGraphDependency, String] = _root_.caliban.client.SelectionBuilder.Field("packageName", Scalar())
  /**
 * The repository containing the package
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[DependencyGraphDependency, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The dependency version requirements
 */
def requirements: SelectionBuilder[DependencyGraphDependency, String] = _root_.caliban.client.SelectionBuilder.Field("requirements", Scalar())
}


type DependencyGraphDependencyConnection
object DependencyGraphDependencyConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DependencyGraphDependencyEdge, A]): SelectionBuilder[DependencyGraphDependencyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DependencyGraphDependency, A]): SelectionBuilder[DependencyGraphDependencyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DependencyGraphDependencyConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DependencyGraphDependencyConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DependencyGraphDependencyEdge
object DependencyGraphDependencyEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DependencyGraphDependencyEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DependencyGraphDependency, A]): SelectionBuilder[DependencyGraphDependencyEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DependencyGraphManifest
object DependencyGraphManifest {
  /**
 * Path to view the manifest file blob
 */
def blobPath: SelectionBuilder[DependencyGraphManifest, String] = _root_.caliban.client.SelectionBuilder.Field("blobPath", Scalar())
  /**
 * A list of manifest dependencies
 */
def dependencies[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DependencyGraphDependencyConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DependencyGraphManifest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dependencies", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The number of dependencies listed in the manifest
 */
def dependenciesCount: SelectionBuilder[DependencyGraphManifest, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("dependenciesCount", OptionOf(Scalar()))
  /**
 * Is the manifest too big to parse?
 */
def exceedsMaxSize: SelectionBuilder[DependencyGraphManifest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("exceedsMaxSize", Scalar())
  /**
 * Fully qualified manifest filename
 */
def filename: SelectionBuilder[DependencyGraphManifest, String] = _root_.caliban.client.SelectionBuilder.Field("filename", Scalar())
  def id: SelectionBuilder[DependencyGraphManifest, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Were we able to parse the manifest?
 */
def parseable: SelectionBuilder[DependencyGraphManifest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("parseable", Scalar())
  /**
 * The repository containing the manifest
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[DependencyGraphManifest, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type DependencyGraphManifestConnection
object DependencyGraphManifestConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DependencyGraphManifestEdge, A]): SelectionBuilder[DependencyGraphManifestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DependencyGraphManifest, A]): SelectionBuilder[DependencyGraphManifestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DependencyGraphManifestConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DependencyGraphManifestConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DependencyGraphManifestEdge
object DependencyGraphManifestEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DependencyGraphManifestEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DependencyGraphManifest, A]): SelectionBuilder[DependencyGraphManifestEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DeployKey
object DeployKey {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DeployKey, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[DeployKey, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The deploy key.
 */
def key: SelectionBuilder[DeployKey, String] = _root_.caliban.client.SelectionBuilder.Field("key", Scalar())
  /**
 * Whether or not the deploy key is read only.
 */
def readOnly: SelectionBuilder[DeployKey, Boolean] = _root_.caliban.client.SelectionBuilder.Field("readOnly", Scalar())
  /**
 * The deploy key title.
 */
def title: SelectionBuilder[DeployKey, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Whether or not the deploy key has been verified.
 */
def verified: SelectionBuilder[DeployKey, Boolean] = _root_.caliban.client.SelectionBuilder.Field("verified", Scalar())
}


type DeployKeyConnection
object DeployKeyConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeployKeyEdge, A]): SelectionBuilder[DeployKeyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DeployKey, A]): SelectionBuilder[DeployKeyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeployKeyConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeployKeyConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DeployKeyEdge
object DeployKeyEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeployKeyEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DeployKey, A]): SelectionBuilder[DeployKeyEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DeployedEvent
object DeployedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DeployedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DeployedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[DeployedEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The deployment associated with the 'deployed' event.
 */
def deployment[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[DeployedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("deployment", Obj(innerSelection))
  def id: SelectionBuilder[DeployedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[DeployedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The ref associated with the 'deployed' event.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[DeployedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DeployedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[DeployedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type Deployment
object Deployment {
  /**
 * Identifies the commit sha of the deployment.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[Deployment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the oid of the deployment commit, even if the commit has been deleted.
 */
def commitOid: SelectionBuilder[Deployment, String] = _root_.caliban.client.SelectionBuilder.Field("commitOid", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Deployment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the actor who triggered the deployment.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Deployment, A] = _root_.caliban.client.SelectionBuilder.Field("creator", ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Deployment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The deployment description.
 */
def description: SelectionBuilder[Deployment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The latest environment to which this deployment was made.
 */
def environment: SelectionBuilder[Deployment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Scalar()))
  def id: SelectionBuilder[Deployment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The latest environment to which this deployment was made.
 */
def latestEnvironment: SelectionBuilder[Deployment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("latestEnvironment", OptionOf(Scalar()))
  /**
 * The latest status of this deployment.
 */
def latestStatus[A](innerSelection: SelectionBuilder[DeploymentStatus, A]): SelectionBuilder[Deployment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("latestStatus", OptionOf(Obj(innerSelection)))
  /**
 * The original environment to which this deployment was made.
 */
def originalEnvironment: SelectionBuilder[Deployment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("originalEnvironment", OptionOf(Scalar()))
  /**
 * Extra information that a deployment system might need.
 */
def payload: SelectionBuilder[Deployment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("payload", OptionOf(Scalar()))
  /**
 * Identifies the Ref of the deployment, if the deployment was created by ref.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[Deployment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the repository associated with the deployment.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Deployment, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The current state of the deployment.
 */
def state: SelectionBuilder[Deployment, scala.Option[DeploymentState]] = _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  /**
 * A list of statuses associated with the deployment.
 */
def statuses[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeploymentStatusConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Deployment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("statuses", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The deployment task.
 */
def task: SelectionBuilder[Deployment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("task", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Deployment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * Identifies the actor who triggered the deployment.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Deployment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who triggered the deployment.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[Deployment, A] = _root_.caliban.client.SelectionBuilder.Field("creator", Obj(creator))
}


type DeploymentConnection
object DeploymentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeploymentEdge, A]): SelectionBuilder[DeploymentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[DeploymentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeploymentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeploymentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DeploymentEdge
object DeploymentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeploymentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[DeploymentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DeploymentEnvironmentChangedEvent
object DeploymentEnvironmentChangedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DeploymentEnvironmentChangedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DeploymentEnvironmentChangedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The deployment status that updated the deployment environment.
 */
def deploymentStatus[A](innerSelection: SelectionBuilder[DeploymentStatus, A]): SelectionBuilder[DeploymentEnvironmentChangedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("deploymentStatus", Obj(innerSelection))
  def id: SelectionBuilder[DeploymentEnvironmentChangedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[DeploymentEnvironmentChangedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DeploymentEnvironmentChangedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[DeploymentEnvironmentChangedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type DeploymentProtectionRule
object DeploymentProtectionRule {
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[DeploymentProtectionRule, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The teams or users that can review the deployment
 */
def reviewers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeploymentReviewerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DeploymentProtectionRule, A] = _root_.caliban.client.SelectionBuilder.Field("reviewers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The timeout in minutes for this protection rule.
 */
def timeout: SelectionBuilder[DeploymentProtectionRule, Int] = _root_.caliban.client.SelectionBuilder.Field("timeout", Scalar())
  /**
 * The type of protection rule.
 */
def `type`: SelectionBuilder[DeploymentProtectionRule, DeploymentProtectionRuleType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
}


type DeploymentProtectionRuleConnection
object DeploymentProtectionRuleConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeploymentProtectionRuleEdge, A]): SelectionBuilder[DeploymentProtectionRuleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DeploymentProtectionRule, A]): SelectionBuilder[DeploymentProtectionRuleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeploymentProtectionRuleConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeploymentProtectionRuleConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DeploymentProtectionRuleEdge
object DeploymentProtectionRuleEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeploymentProtectionRuleEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DeploymentProtectionRule, A]): SelectionBuilder[DeploymentProtectionRuleEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DeploymentRequest
object DeploymentRequest {
  /**
 * Whether or not the current user can approve the deployment
 */
def currentUserCanApprove: SelectionBuilder[DeploymentRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("currentUserCanApprove", Scalar())
  /**
 * The target environment of the deployment
 */
def environment[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[DeploymentRequest, A] = _root_.caliban.client.SelectionBuilder.Field("environment", Obj(innerSelection))
  /**
 * The teams or users that can review the deployment
 */
def reviewers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeploymentReviewerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DeploymentRequest, A] = _root_.caliban.client.SelectionBuilder.Field("reviewers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The wait timer in minutes configured in the environment
 */
def waitTimer: SelectionBuilder[DeploymentRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("waitTimer", Scalar())
  /**
 * The wait timer in minutes configured in the environment
 */
def waitTimerStartedAt: SelectionBuilder[DeploymentRequest, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("waitTimerStartedAt", OptionOf(Scalar()))
}


type DeploymentRequestConnection
object DeploymentRequestConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeploymentRequestEdge, A]): SelectionBuilder[DeploymentRequestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DeploymentRequest, A]): SelectionBuilder[DeploymentRequestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeploymentRequestConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeploymentRequestConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DeploymentRequestEdge
object DeploymentRequestEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeploymentRequestEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DeploymentRequest, A]): SelectionBuilder[DeploymentRequestEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DeploymentReview
object DeploymentReview {
  /**
 * The comment the user left.
 */
def comment: SelectionBuilder[DeploymentReview, String] = _root_.caliban.client.SelectionBuilder.Field("comment", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[DeploymentReview, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The environments approved or rejected
 */
def environments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[EnvironmentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DeploymentReview, A] = _root_.caliban.client.SelectionBuilder.Field("environments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  def id: SelectionBuilder[DeploymentReview, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The decision of the user.
 */
def state: SelectionBuilder[DeploymentReview, DeploymentReviewState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The user that reviewed the deployment.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[DeploymentReview, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type DeploymentReviewConnection
object DeploymentReviewConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeploymentReviewEdge, A]): SelectionBuilder[DeploymentReviewConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DeploymentReview, A]): SelectionBuilder[DeploymentReviewConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeploymentReviewConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeploymentReviewConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DeploymentReviewEdge
object DeploymentReviewEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeploymentReviewEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DeploymentReview, A]): SelectionBuilder[DeploymentReviewEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DeploymentReviewerConnection
object DeploymentReviewerConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeploymentReviewerEdge, A]): SelectionBuilder[DeploymentReviewerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DeploymentReviewerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Team" -> Obj(onTeam), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeploymentReviewerConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeploymentReviewerConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DeploymentReviewerConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type DeploymentReviewerEdge
object DeploymentReviewerEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeploymentReviewerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DeploymentReviewerEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DeploymentReviewerEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type DeploymentStatus
object DeploymentStatus {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DeploymentStatus, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the actor who triggered the deployment.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DeploymentStatus, A] = _root_.caliban.client.SelectionBuilder.Field("creator", ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * Identifies the deployment associated with status.
 */
def deployment[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[DeploymentStatus, A] = _root_.caliban.client.SelectionBuilder.Field("deployment", Obj(innerSelection))
  /**
 * Identifies the description of the deployment.
 */
def description: SelectionBuilder[DeploymentStatus, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * Identifies the environment of the deployment at the time of this deployment status
 */
def environment: SelectionBuilder[DeploymentStatus, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Scalar()))
  /**
 * Identifies the environment URL of the deployment.
 */
def environmentUrl: SelectionBuilder[DeploymentStatus, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("environmentUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[DeploymentStatus, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the log URL of the deployment.
 */
def logUrl: SelectionBuilder[DeploymentStatus, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("logUrl", OptionOf(Scalar()))
  /**
 * Identifies the current state of the deployment.
 */
def state: SelectionBuilder[DeploymentStatus, DeploymentStatusState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[DeploymentStatus, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * Identifies the actor who triggered the deployment.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DeploymentStatus, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who triggered the deployment.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[DeploymentStatus, A] = _root_.caliban.client.SelectionBuilder.Field("creator", Obj(creator))
}


type DeploymentStatusConnection
object DeploymentStatusConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DeploymentStatusEdge, A]): SelectionBuilder[DeploymentStatusConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DeploymentStatus, A]): SelectionBuilder[DeploymentStatusConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DeploymentStatusConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DeploymentStatusConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DeploymentStatusEdge
object DeploymentStatusEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DeploymentStatusEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DeploymentStatus, A]): SelectionBuilder[DeploymentStatusEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DequeuePullRequestPayload
object DequeuePullRequestPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DequeuePullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The merge queue entry of the dequeued pull request.
 */
def mergeQueueEntry[A](innerSelection: SelectionBuilder[MergeQueueEntry, A]): SelectionBuilder[DequeuePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueueEntry", OptionOf(Obj(innerSelection)))
}


type DisablePullRequestAutoMergePayload
object DisablePullRequestAutoMergePayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DisablePullRequestAutoMergePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DisablePullRequestAutoMergePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request auto merge was disabled on.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[DisablePullRequestAutoMergePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DisablePullRequestAutoMergePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[DisablePullRequestAutoMergePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type DisconnectedEvent
object DisconnectedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DisconnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DisconnectedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[DisconnectedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Reference originated in a different repository.
 */
def isCrossRepository: SelectionBuilder[DisconnectedEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * Issue or pull request from which the issue was disconnected.
 */
def source[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[DisconnectedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Issue or pull request which was disconnected.
 */
def subject[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[DisconnectedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Issue or pull request from which the issue was disconnected.
 */
def sourceOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[DisconnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Issue or pull request which was disconnected.
 */
def subjectOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[DisconnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DisconnectedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[DisconnectedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type Discussion
object Discussion {
  /**
 * Reason that the conversation was locked.
 */
def activeLockReason: SelectionBuilder[Discussion, scala.Option[LockReason]] = _root_.caliban.client.SelectionBuilder.Field("activeLockReason", OptionOf(Scalar()))
  /**
 * The comment chosen as this discussion's answer, if any.
 */
def answer[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("answer", OptionOf(Obj(innerSelection)))
  /**
 * The time when a user chose this discussion's answer, if answered.
 */
def answerChosenAt: SelectionBuilder[Discussion, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("answerChosenAt", OptionOf(Scalar()))
  /**
 * The user who chose this discussion's answer, if answered.
 */
def answerChosenBy[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("answerChosenBy", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[Discussion, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The main text of the discussion post.
 */
def body: SelectionBuilder[Discussion, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[Discussion, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[Discussion, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * The category for this discussion.
 */
def category[A](innerSelection: SelectionBuilder[DiscussionCategory, A]): SelectionBuilder[Discussion, A] = _root_.caliban.client.SelectionBuilder.Field("category", Obj(innerSelection))
  /**
 * Indicates if the object is closed (definition of closed may depend on type)
 */
def closed: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[Discussion, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * The replies to the discussion.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DiscussionCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Discussion, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Discussion, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Discussion, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[Discussion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * A list of labels associated with the object.
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LabelOrder] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LabelOrder]]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LabelOrder")(encoder4)))
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[Discussion, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * `true` if the object is locked
 */
def locked: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("locked", Scalar())
  /**
 * The number identifying this discussion within the repository.
 */
def number: SelectionBuilder[Discussion, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * The poll associated with this discussion, if one exists.
 */
def poll[A](innerSelection: SelectionBuilder[DiscussionPoll, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("poll", OptionOf(Obj(innerSelection)))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[Discussion, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[Discussion, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[Discussion, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Discussion, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The path for this discussion.
 */
def resourcePath: SelectionBuilder[Discussion, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the reason for the discussion's state.
 */
def stateReason: SelectionBuilder[Discussion, scala.Option[DiscussionStateReason]] = _root_.caliban.client.SelectionBuilder.Field("stateReason", OptionOf(Scalar()))
  /**
 * The title of this discussion.
 */
def title: SelectionBuilder[Discussion, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Discussion, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * Number of upvotes that this subject has received.
 */
def upvoteCount: SelectionBuilder[Discussion, Int] = _root_.caliban.client.SelectionBuilder.Field("upvoteCount", Scalar())
  /**
 * The URL for this discussion.
 */
def url: SelectionBuilder[Discussion, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Whether or not the current user can add or remove an upvote on this subject.
 */
def viewerCanUpvote: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpvote", Scalar())
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * Whether or not the current user has already upvoted this subject.
 */
def viewerHasUpvoted: SelectionBuilder[Discussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasUpvoted", Scalar())
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[Discussion, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
  /**
 * The user who chose this discussion's answer, if answered.
 */
def answerChosenByOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Discussion, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("answerChosenBy", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The user who chose this discussion's answer, if answered.
 */
def answerChosenByInterface[A](answerChosenBy: SelectionBuilder[Actor, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("answerChosenBy", OptionOf(Obj(answerChosenBy)))
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Discussion, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Discussion, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[Discussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type DiscussionCategory
object DiscussionCategory {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DiscussionCategory, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * A description of this category.
 */
def description: SelectionBuilder[DiscussionCategory, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * An emoji representing this category.
 */
def emoji: SelectionBuilder[DiscussionCategory, String] = _root_.caliban.client.SelectionBuilder.Field("emoji", Scalar())
  /**
 * This category's emoji rendered as HTML.
 */
def emojiHTML: SelectionBuilder[DiscussionCategory, HTML] = _root_.caliban.client.SelectionBuilder.Field("emojiHTML", Scalar())
  def id: SelectionBuilder[DiscussionCategory, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation.
 */
def isAnswerable: SelectionBuilder[DiscussionCategory, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isAnswerable", Scalar())
  /**
 * The name of this category.
 */
def name: SelectionBuilder[DiscussionCategory, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[DiscussionCategory, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The slug of this category.
 */
def slug: SelectionBuilder[DiscussionCategory, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[DiscussionCategory, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type DiscussionCategoryConnection
object DiscussionCategoryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DiscussionCategoryEdge, A]): SelectionBuilder[DiscussionCategoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DiscussionCategory, A]): SelectionBuilder[DiscussionCategoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DiscussionCategoryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DiscussionCategoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DiscussionCategoryEdge
object DiscussionCategoryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DiscussionCategoryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DiscussionCategory, A]): SelectionBuilder[DiscussionCategoryEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DiscussionComment
object DiscussionComment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[DiscussionComment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The body as Markdown.
 */
def body: SelectionBuilder[DiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[DiscussionComment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[DiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DiscussionComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[DiscussionComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The time when this replied-to comment was deleted
 */
def deletedAt: SelectionBuilder[DiscussionComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("deletedAt", OptionOf(Scalar()))
  /**
 * The discussion this comment was created in
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[DiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Has this comment been chosen as the answer of its discussion?
 */
def isAnswer: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isAnswer", Scalar())
  /**
 * Returns whether or not a comment has been minimized.
 */
def isMinimized: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMinimized", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[DiscussionComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
def minimizedReason: SelectionBuilder[DiscussionComment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("minimizedReason", OptionOf(Scalar()))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[DiscussionComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[DiscussionComment, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[DiscussionComment, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The threaded replies to this comment.
 */
def replies[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DiscussionCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DiscussionComment, A] = _root_.caliban.client.SelectionBuilder.Field("replies", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The discussion comment this comment is a reply to
 */
def replyTo[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("replyTo", OptionOf(Obj(innerSelection)))
  /**
 * The path for this discussion comment.
 */
def resourcePath: SelectionBuilder[DiscussionComment, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[DiscussionComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * Number of upvotes that this subject has received.
 */
def upvoteCount: SelectionBuilder[DiscussionComment, Int] = _root_.caliban.client.SelectionBuilder.Field("upvoteCount", Scalar())
  /**
 * The URL for this discussion comment.
 */
def url: SelectionBuilder[DiscussionComment, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Can the current user mark this comment as an answer?
 */
def viewerCanMarkAsAnswer: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMarkAsAnswer", Scalar())
  /**
 * Check if the current viewer can minimize this object.
 */
def viewerCanMinimize: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMinimize", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Can the current user unmark this comment as an answer?
 */
def viewerCanUnmarkAsAnswer: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUnmarkAsAnswer", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Whether or not the current user can add or remove an upvote on this subject.
 */
def viewerCanUpvote: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpvote", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[DiscussionComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * Whether or not the current user has already upvoted this subject.
 */
def viewerHasUpvoted: SelectionBuilder[DiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasUpvoted", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DiscussionComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DiscussionComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[DiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type DiscussionCommentConnection
object DiscussionCommentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DiscussionCommentEdge, A]): SelectionBuilder[DiscussionCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[DiscussionCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DiscussionCommentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DiscussionCommentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DiscussionCommentEdge
object DiscussionCommentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DiscussionCommentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[DiscussionCommentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DiscussionConnection
object DiscussionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DiscussionEdge, A]): SelectionBuilder[DiscussionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DiscussionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DiscussionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DiscussionEdge
object DiscussionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DiscussionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DiscussionPoll
object DiscussionPoll {
  /**
 * The discussion that this poll belongs to.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[DiscussionPoll, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[DiscussionPoll, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The options for this poll.
 */
def options[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DiscussionPollOptionOrder] = None)(innerSelection: SelectionBuilder[DiscussionPollOptionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[DiscussionPollOptionOrder]]): SelectionBuilder[DiscussionPoll, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("options", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "DiscussionPollOptionOrder")(encoder4)))
  /**
 * The question that is being asked by this poll.
 */
def question: SelectionBuilder[DiscussionPoll, String] = _root_.caliban.client.SelectionBuilder.Field("question", Scalar())
  /**
 * The total number of votes that have been cast for this poll.
 */
def totalVoteCount: SelectionBuilder[DiscussionPoll, Int] = _root_.caliban.client.SelectionBuilder.Field("totalVoteCount", Scalar())
  /**
 * Indicates if the viewer has permission to vote in this poll.
 */
def viewerCanVote: SelectionBuilder[DiscussionPoll, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanVote", Scalar())
  /**
 * Indicates if the viewer has voted for any option in this poll.
 */
def viewerHasVoted: SelectionBuilder[DiscussionPoll, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasVoted", Scalar())
}


type DiscussionPollOption
object DiscussionPollOption {
  def id: SelectionBuilder[DiscussionPollOption, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The text for this option.
 */
def option: SelectionBuilder[DiscussionPollOption, String] = _root_.caliban.client.SelectionBuilder.Field("option", Scalar())
  /**
 * The discussion poll that this option belongs to.
 */
def poll[A](innerSelection: SelectionBuilder[DiscussionPoll, A]): SelectionBuilder[DiscussionPollOption, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("poll", OptionOf(Obj(innerSelection)))
  /**
 * The total number of votes that have been cast for this option.
 */
def totalVoteCount: SelectionBuilder[DiscussionPollOption, Int] = _root_.caliban.client.SelectionBuilder.Field("totalVoteCount", Scalar())
  /**
 * Indicates if the viewer has voted for this option in the poll.
 */
def viewerHasVoted: SelectionBuilder[DiscussionPollOption, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasVoted", Scalar())
}


type DiscussionPollOptionConnection
object DiscussionPollOptionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[DiscussionPollOptionEdge, A]): SelectionBuilder[DiscussionPollOptionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[DiscussionPollOption, A]): SelectionBuilder[DiscussionPollOptionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[DiscussionPollOptionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[DiscussionPollOptionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type DiscussionPollOptionEdge
object DiscussionPollOptionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[DiscussionPollOptionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[DiscussionPollOption, A]): SelectionBuilder[DiscussionPollOptionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type DismissPullRequestReviewPayload
object DismissPullRequestReviewPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DismissPullRequestReviewPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The dismissed pull request review.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[DismissPullRequestReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
}


type DismissRepositoryVulnerabilityAlertPayload
object DismissRepositoryVulnerabilityAlertPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[DismissRepositoryVulnerabilityAlertPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The Dependabot alert that was dismissed
 */
def repositoryVulnerabilityAlert[A](innerSelection: SelectionBuilder[RepositoryVulnerabilityAlert, A]): SelectionBuilder[DismissRepositoryVulnerabilityAlertPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repositoryVulnerabilityAlert", OptionOf(Obj(innerSelection)))
}


type DraftIssue
object DraftIssue {
  /**
 * A list of users to assigned to this draft issue.
 */
def assignees[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DraftIssue, A] = _root_.caliban.client.SelectionBuilder.Field("assignees", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The body of the draft issue.
 */
def body: SelectionBuilder[DraftIssue, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body of the draft issue rendered to HTML.
 */
def bodyHTML: SelectionBuilder[DraftIssue, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body of the draft issue rendered to text.
 */
def bodyText: SelectionBuilder[DraftIssue, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[DraftIssue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created this draft issue.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[DraftIssue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[DraftIssue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * List of items linked with the draft issue (currently draft issue can be linked to only one item).
 */
def projectV2Items[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2ItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DraftIssue, A] = _root_.caliban.client.SelectionBuilder.Field("projectV2Items", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Projects that link to this draft issue (currently draft issue can be linked to only one project).
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[DraftIssue, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The title of the draft issue
 */
def title: SelectionBuilder[DraftIssue, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[DraftIssue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The actor who created this draft issue.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[DraftIssue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created this draft issue.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[DraftIssue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type EnablePullRequestAutoMergePayload
object EnablePullRequestAutoMergePayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[EnablePullRequestAutoMergePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[EnablePullRequestAutoMergePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request auto-merge was enabled on.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[EnablePullRequestAutoMergePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[EnablePullRequestAutoMergePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[EnablePullRequestAutoMergePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type EnqueuePullRequestPayload
object EnqueuePullRequestPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[EnqueuePullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The merge queue entry for the enqueued pull request.
 */
def mergeQueueEntry[A](innerSelection: SelectionBuilder[MergeQueueEntry, A]): SelectionBuilder[EnqueuePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueueEntry", OptionOf(Obj(innerSelection)))
}


type Enterprise
object Enterprise {
  /**
 * The text of the announcement
 */
def announcement: SelectionBuilder[Enterprise, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("announcement", OptionOf(Scalar()))
  /**
 * The expiration date of the announcement, if any
 */
def announcementExpiresAt: SelectionBuilder[Enterprise, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("announcementExpiresAt", OptionOf(Scalar()))
  /**
 * Whether the announcement can be dismissed by the user
 */
def announcementUserDismissible: SelectionBuilder[Enterprise, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("announcementUserDismissible", OptionOf(Scalar()))
  /**
 * A URL pointing to the enterprise's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Enterprise, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * Enterprise billing information visible to enterprise billing managers.
 */
def billingInfo[A](innerSelection: SelectionBuilder[EnterpriseBillingInfo, A]): SelectionBuilder[Enterprise, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("billingInfo", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Enterprise, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Enterprise, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The description of the enterprise.
 */
def description: SelectionBuilder[Enterprise, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The description of the enterprise as HTML.
 */
def descriptionHTML: SelectionBuilder[Enterprise, HTML] = _root_.caliban.client.SelectionBuilder.Field("descriptionHTML", Scalar())
  def id: SelectionBuilder[Enterprise, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The location of the enterprise.
 */
def location: SelectionBuilder[Enterprise, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))
  /**
 * A list of users who are members of this enterprise.
 */
def members[A](after : scala.Option[String] = None, before : scala.Option[String] = None, deployment : scala.Option[EnterpriseUserDeployment] = None, first : scala.Option[Int] = None, hasTwoFactorEnabled : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseMemberOrder] = None, organizationLogins : scala.Option[List[String]] = None, query : scala.Option[String] = None, role : scala.Option[EnterpriseUserAccountMembershipRole] = None)(innerSelection: SelectionBuilder[EnterpriseMemberConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[EnterpriseUserDeployment]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[EnterpriseMemberOrder]], encoder7: ArgEncoder[scala.Option[List[String]]], encoder8: ArgEncoder[scala.Option[String]], encoder9: ArgEncoder[scala.Option[EnterpriseUserAccountMembershipRole]]): SelectionBuilder[Enterprise, A] = _root_.caliban.client.SelectionBuilder.Field("members", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("deployment", deployment, "EnterpriseUserDeployment")(encoder2), Argument("first", first, "Int")(encoder3), Argument("hasTwoFactorEnabled", hasTwoFactorEnabled, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "EnterpriseMemberOrder")(encoder6), Argument("organizationLogins", organizationLogins, "[String!]")(encoder7), Argument("query", query, "String")(encoder8), Argument("role", role, "EnterpriseUserAccountMembershipRole")(encoder9)))
  /**
 * The name of the enterprise.
 */
def name: SelectionBuilder[Enterprise, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * A list of organizations that belong to this enterprise.
 */
def organizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, query : scala.Option[String] = None, viewerOrganizationRole : scala.Option[RoleInOrganization] = None)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[RoleInOrganization]]): SelectionBuilder[Enterprise, A] = _root_.caliban.client.SelectionBuilder.Field("organizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("query", query, "String")(encoder5), Argument("viewerOrganizationRole", viewerOrganizationRole, "RoleInOrganization")(encoder6)))
  /**
 * Enterprise information visible to enterprise owners or enterprise owners'
personal access tokens (classic) with read:enterprise or admin:enterprise scope.
 */
def ownerInfo[A](innerSelection: SelectionBuilder[EnterpriseOwnerInfo, A]): SelectionBuilder[Enterprise, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ownerInfo", OptionOf(Obj(innerSelection)))
  /**
 * The HTTP path for this enterprise.
 */
def resourcePath: SelectionBuilder[Enterprise, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The URL-friendly identifier for the enterprise.
 */
def slug: SelectionBuilder[Enterprise, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * The HTTP URL for this enterprise.
 */
def url: SelectionBuilder[Enterprise, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Is the current viewer an admin of this enterprise?
 */
def viewerIsAdmin: SelectionBuilder[Enterprise, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsAdmin", Scalar())
  /**
 * The URL of the enterprise website.
 */
def websiteUrl: SelectionBuilder[Enterprise, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("websiteUrl", OptionOf(Scalar()))
}


type EnterpriseAdministratorConnection
object EnterpriseAdministratorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseAdministratorEdge, A]): SelectionBuilder[EnterpriseAdministratorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseAdministratorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseAdministratorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseAdministratorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseAdministratorEdge
object EnterpriseAdministratorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseAdministratorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseAdministratorEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  /**
 * The role of the administrator.
 */
def role: SelectionBuilder[EnterpriseAdministratorEdge, EnterpriseAdministratorRole] = _root_.caliban.client.SelectionBuilder.Field("role", Scalar())
}


type EnterpriseAdministratorInvitation
object EnterpriseAdministratorInvitation {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[EnterpriseAdministratorInvitation, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The email of the person who was invited to the enterprise.
 */
def email: SelectionBuilder[EnterpriseAdministratorInvitation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  /**
 * The enterprise the invitation is for.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[EnterpriseAdministratorInvitation, A] = _root_.caliban.client.SelectionBuilder.Field("enterprise", Obj(innerSelection))
  def id: SelectionBuilder[EnterpriseAdministratorInvitation, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The user who was invited to the enterprise.
 */
def invitee[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseAdministratorInvitation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitee", OptionOf(Obj(innerSelection)))
  /**
 * The user who created the invitation.
 */
def inviter[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseAdministratorInvitation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("inviter", OptionOf(Obj(innerSelection)))
  /**
 * The invitee's pending role in the enterprise (owner or billing_manager).
 */
def role: SelectionBuilder[EnterpriseAdministratorInvitation, EnterpriseAdministratorRole] = _root_.caliban.client.SelectionBuilder.Field("role", Scalar())
}


type EnterpriseAdministratorInvitationConnection
object EnterpriseAdministratorInvitationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseAdministratorInvitationEdge, A]): SelectionBuilder[EnterpriseAdministratorInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]): SelectionBuilder[EnterpriseAdministratorInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseAdministratorInvitationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseAdministratorInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseAdministratorInvitationEdge
object EnterpriseAdministratorInvitationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseAdministratorInvitationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]): SelectionBuilder[EnterpriseAdministratorInvitationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseBillingInfo
object EnterpriseBillingInfo {
  /**
 * The number of licenseable users/emails across the enterprise.
 */
def allLicensableUsersCount: SelectionBuilder[EnterpriseBillingInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("allLicensableUsersCount", Scalar())
  /**
 * The number of data packs used by all organizations owned by the enterprise.
 */
def assetPacks: SelectionBuilder[EnterpriseBillingInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("assetPacks", Scalar())
  /**
 * The bandwidth quota in GB for all organizations owned by the enterprise.
 */
def bandwidthQuota: SelectionBuilder[EnterpriseBillingInfo, Double] = _root_.caliban.client.SelectionBuilder.Field("bandwidthQuota", Scalar())
  /**
 * The bandwidth usage in GB for all organizations owned by the enterprise.
 */
def bandwidthUsage: SelectionBuilder[EnterpriseBillingInfo, Double] = _root_.caliban.client.SelectionBuilder.Field("bandwidthUsage", Scalar())
  /**
 * The bandwidth usage as a percentage of the bandwidth quota.
 */
def bandwidthUsagePercentage: SelectionBuilder[EnterpriseBillingInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("bandwidthUsagePercentage", Scalar())
  /**
 * The storage quota in GB for all organizations owned by the enterprise.
 */
def storageQuota: SelectionBuilder[EnterpriseBillingInfo, Double] = _root_.caliban.client.SelectionBuilder.Field("storageQuota", Scalar())
  /**
 * The storage usage in GB for all organizations owned by the enterprise.
 */
def storageUsage: SelectionBuilder[EnterpriseBillingInfo, Double] = _root_.caliban.client.SelectionBuilder.Field("storageUsage", Scalar())
  /**
 * The storage usage as a percentage of the storage quota.
 */
def storageUsagePercentage: SelectionBuilder[EnterpriseBillingInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("storageUsagePercentage", Scalar())
  /**
 * The number of available licenses across all owned organizations based on the unique number of billable users.
 */
def totalAvailableLicenses: SelectionBuilder[EnterpriseBillingInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("totalAvailableLicenses", Scalar())
  /**
 * The total number of licenses allocated.
 */
def totalLicenses: SelectionBuilder[EnterpriseBillingInfo, Int] = _root_.caliban.client.SelectionBuilder.Field("totalLicenses", Scalar())
}


type EnterpriseFailedInvitationConnection
object EnterpriseFailedInvitationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseFailedInvitationEdge, A]): SelectionBuilder[EnterpriseFailedInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[EnterpriseFailedInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseFailedInvitationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseFailedInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * Identifies the total count of unique users in the connection.
 */
def totalUniqueUserCount: SelectionBuilder[EnterpriseFailedInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalUniqueUserCount", Scalar())
}


type EnterpriseFailedInvitationEdge
object EnterpriseFailedInvitationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseFailedInvitationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[EnterpriseFailedInvitationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseIdentityProvider
object EnterpriseIdentityProvider {
  /**
 * The digest algorithm used to sign SAML requests for the identity provider.
 */
def digestMethod: SelectionBuilder[EnterpriseIdentityProvider, scala.Option[SamlDigestAlgorithm]] = _root_.caliban.client.SelectionBuilder.Field("digestMethod", OptionOf(Scalar()))
  /**
 * The enterprise this identity provider belongs to.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[EnterpriseIdentityProvider, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * ExternalIdentities provisioned by this identity provider.
 */
def externalIdentities[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, login : scala.Option[String] = None, membersOnly : scala.Option[Boolean] = None, userName : scala.Option[String] = None)(innerSelection: SelectionBuilder[ExternalIdentityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[EnterpriseIdentityProvider, A] = _root_.caliban.client.SelectionBuilder.Field("externalIdentities", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("login", login, "String")(encoder4), Argument("membersOnly", membersOnly, "Boolean")(encoder5), Argument("userName", userName, "String")(encoder6)))
  def id: SelectionBuilder[EnterpriseIdentityProvider, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The x509 certificate used by the identity provider to sign assertions and responses.
 */
def idpCertificate: SelectionBuilder[EnterpriseIdentityProvider, scala.Option[X509Certificate]] = _root_.caliban.client.SelectionBuilder.Field("idpCertificate", OptionOf(Scalar()))
  /**
 * The Issuer Entity ID for the SAML identity provider.
 */
def issuer: SelectionBuilder[EnterpriseIdentityProvider, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("issuer", OptionOf(Scalar()))
  /**
 * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
 */
def recoveryCodes: SelectionBuilder[EnterpriseIdentityProvider, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("recoveryCodes", OptionOf(ListOf(Scalar())))
  /**
 * The signature algorithm used to sign SAML requests for the identity provider.
 */
def signatureMethod: SelectionBuilder[EnterpriseIdentityProvider, scala.Option[SamlSignatureAlgorithm]] = _root_.caliban.client.SelectionBuilder.Field("signatureMethod", OptionOf(Scalar()))
  /**
 * The URL endpoint for the identity provider's SAML SSO.
 */
def ssoUrl: SelectionBuilder[EnterpriseIdentityProvider, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("ssoUrl", OptionOf(Scalar()))
}


type EnterpriseMemberConnection
object EnterpriseMemberConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseMemberEdge, A]): SelectionBuilder[EnterpriseMemberConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseMemberConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseMemberConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseMemberConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[EnterpriseMemberConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type EnterpriseMemberEdge
object EnterpriseMemberEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseMemberEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseMemberEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "User" -> Obj(onUser)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[EnterpriseMemberEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type EnterpriseOrganizationMembershipConnection
object EnterpriseOrganizationMembershipConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseOrganizationMembershipEdge, A]): SelectionBuilder[EnterpriseOrganizationMembershipConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[EnterpriseOrganizationMembershipConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseOrganizationMembershipConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseOrganizationMembershipConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseOrganizationMembershipEdge
object EnterpriseOrganizationMembershipEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseOrganizationMembershipEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[EnterpriseOrganizationMembershipEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  /**
 * The role of the user in the enterprise membership.
 */
def role: SelectionBuilder[EnterpriseOrganizationMembershipEdge, EnterpriseUserAccountMembershipRole] = _root_.caliban.client.SelectionBuilder.Field("role", Scalar())
}


type EnterpriseOutsideCollaboratorConnection
object EnterpriseOutsideCollaboratorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseOutsideCollaboratorEdge, A]): SelectionBuilder[EnterpriseOutsideCollaboratorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseOutsideCollaboratorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseOutsideCollaboratorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseOutsideCollaboratorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseOutsideCollaboratorEdge
object EnterpriseOutsideCollaboratorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseOutsideCollaboratorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseOutsideCollaboratorEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  /**
 * The enterprise organization repositories this user is a member of.
 */
def repositories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None)(innerSelection: SelectionBuilder[EnterpriseRepositoryInfoConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[RepositoryOrder]]): SelectionBuilder[EnterpriseOutsideCollaboratorEdge, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "RepositoryOrder")(encoder4)))
}


type EnterpriseOwnerInfo
object EnterpriseOwnerInfo {
  /**
 * A list of all of the administrators for this enterprise.
 */
def admins[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, hasTwoFactorEnabled : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseMemberOrder] = None, organizationLogins : scala.Option[List[String]] = None, query : scala.Option[String] = None, role : scala.Option[EnterpriseAdministratorRole] = None)(innerSelection: SelectionBuilder[EnterpriseAdministratorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[EnterpriseMemberOrder]], encoder6: ArgEncoder[scala.Option[List[String]]], encoder7: ArgEncoder[scala.Option[String]], encoder8: ArgEncoder[scala.Option[EnterpriseAdministratorRole]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("admins", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("hasTwoFactorEnabled", hasTwoFactorEnabled, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "EnterpriseMemberOrder")(encoder5), Argument("organizationLogins", organizationLogins, "[String!]")(encoder6), Argument("query", query, "String")(encoder7), Argument("role", role, "EnterpriseAdministratorRole")(encoder8)))
  /**
 * A list of users in the enterprise who currently have two-factor authentication disabled.
 */
def affiliatedUsersWithTwoFactorDisabled[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("affiliatedUsersWithTwoFactorDisabled", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
 */
def affiliatedUsersWithTwoFactorDisabledExist: SelectionBuilder[EnterpriseOwnerInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("affiliatedUsersWithTwoFactorDisabledExist", Scalar())
  /**
 * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
 */
def allowPrivateRepositoryForkingSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("allowPrivateRepositoryForkingSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided private repository forking setting value.
 */
def allowPrivateRepositoryForkingSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("allowPrivateRepositoryForkingSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The value for the allow private repository forking policy on the enterprise.
 */
def allowPrivateRepositoryForkingSettingPolicyValue: SelectionBuilder[EnterpriseOwnerInfo, scala.Option[EnterpriseAllowPrivateRepositoryForkingPolicyValue]] = _root_.caliban.client.SelectionBuilder.Field("allowPrivateRepositoryForkingSettingPolicyValue", OptionOf(Scalar()))
  /**
 * The setting value for base repository permissions for organizations in this enterprise.
 */
def defaultRepositoryPermissionSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseDefaultRepositoryPermissionSettingValue] = _root_.caliban.client.SelectionBuilder.Field("defaultRepositoryPermissionSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided base repository permission.
 */
def defaultRepositoryPermissionSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : DefaultRepositoryPermissionField)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[DefaultRepositoryPermissionField]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("defaultRepositoryPermissionSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "DefaultRepositoryPermissionField!")(encoder5)))
  /**
 * A list of domains owned by the enterprise. Visible to enterprise owners or
enterprise owners' personal access tokens (classic) with admin:enterprise scope.
 */
def domains[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isApproved : scala.Option[Boolean] = None, isVerified : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[VerifiableDomainOrder] = None)(innerSelection: SelectionBuilder[VerifiableDomainConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[VerifiableDomainOrder]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("domains", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("isApproved", isApproved, "Boolean")(encoder3), Argument("isVerified", isVerified, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "VerifiableDomainOrder")(encoder6)))
  /**
 * Enterprise Server installations owned by the enterprise.
 */
def enterpriseServerInstallations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, connectedOnly : scala.Option[Boolean] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseServerInstallationOrder] = None)(innerSelection: SelectionBuilder[EnterpriseServerInstallationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Boolean]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[EnterpriseServerInstallationOrder]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("enterpriseServerInstallations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("connectedOnly", connectedOnly, "Boolean")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "EnterpriseServerInstallationOrder")(encoder5)))
  /**
 * A list of failed invitations in the enterprise.
 */
def failedInvitations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[EnterpriseFailedInvitationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("failedInvitations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("query", query, "String")(encoder4)))
  /**
 * The setting value for whether the enterprise has an IP allow list enabled.
 */
def ipAllowListEnabledSetting: SelectionBuilder[EnterpriseOwnerInfo, IpAllowListEnabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEnabledSetting", Scalar())
  /**
 * The IP addresses that are allowed to access resources owned by the enterprise.
Visible to enterprise owners or enterprise owners' personal access tokens
(classic) with admin:enterprise scope.
 */
def ipAllowListEntries[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IpAllowListEntryOrder] = None)(innerSelection: SelectionBuilder[IpAllowListEntryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IpAllowListEntryOrder]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEntries", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IpAllowListEntryOrder")(encoder4)))
  /**
 * The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled.
 */
def ipAllowListForInstalledAppsEnabledSetting: SelectionBuilder[EnterpriseOwnerInfo, IpAllowListForInstalledAppsEnabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListForInstalledAppsEnabledSetting", Scalar())
  /**
 * Whether or not the base repository permission is currently being updated.
 */
def isUpdatingDefaultRepositoryPermission: SelectionBuilder[EnterpriseOwnerInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isUpdatingDefaultRepositoryPermission", Scalar())
  /**
 * Whether the two-factor authentication requirement is currently being enforced.
 */
def isUpdatingTwoFactorRequirement: SelectionBuilder[EnterpriseOwnerInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isUpdatingTwoFactorRequirement", Scalar())
  /**
 * The setting value for whether organization members with admin permissions on a
repository can change repository visibility.
 */
def membersCanChangeRepositoryVisibilitySetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanChangeRepositoryVisibilitySetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided can change repository visibility setting value.
 */
def membersCanChangeRepositoryVisibilitySettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanChangeRepositoryVisibilitySettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The setting value for whether members of organizations in the enterprise can create internal repositories.
 */
def membersCanCreateInternalRepositoriesSetting: SelectionBuilder[EnterpriseOwnerInfo, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("membersCanCreateInternalRepositoriesSetting", OptionOf(Scalar()))
  /**
 * The setting value for whether members of organizations in the enterprise can create private repositories.
 */
def membersCanCreatePrivateRepositoriesSetting: SelectionBuilder[EnterpriseOwnerInfo, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("membersCanCreatePrivateRepositoriesSetting", OptionOf(Scalar()))
  /**
 * The setting value for whether members of organizations in the enterprise can create public repositories.
 */
def membersCanCreatePublicRepositoriesSetting: SelectionBuilder[EnterpriseOwnerInfo, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("membersCanCreatePublicRepositoriesSetting", OptionOf(Scalar()))
  /**
 * The setting value for whether members of organizations in the enterprise can create repositories.
 */
def membersCanCreateRepositoriesSetting: SelectionBuilder[EnterpriseOwnerInfo, scala.Option[EnterpriseMembersCanCreateRepositoriesSettingValue]] = _root_.caliban.client.SelectionBuilder.Field("membersCanCreateRepositoriesSetting", OptionOf(Scalar()))
  /**
 * A list of enterprise organizations configured with the provided repository creation setting value.
 */
def membersCanCreateRepositoriesSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : OrganizationMembersCanCreateRepositoriesSettingValue)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[OrganizationMembersCanCreateRepositoriesSettingValue]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanCreateRepositoriesSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "OrganizationMembersCanCreateRepositoriesSettingValue!")(encoder5)))
  /**
 * The setting value for whether members with admin permissions for repositories can delete issues.
 */
def membersCanDeleteIssuesSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanDeleteIssuesSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided members can delete issues setting value.
 */
def membersCanDeleteIssuesSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanDeleteIssuesSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
 */
def membersCanDeleteRepositoriesSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanDeleteRepositoriesSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided members can delete repositories setting value.
 */
def membersCanDeleteRepositoriesSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanDeleteRepositoriesSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
 */
def membersCanInviteCollaboratorsSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanInviteCollaboratorsSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
 */
def membersCanInviteCollaboratorsSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanInviteCollaboratorsSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
 */
def membersCanMakePurchasesSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseMembersCanMakePurchasesSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanMakePurchasesSetting", Scalar())
  /**
 * The setting value for whether members with admin permissions for repositories can update protected branches.
 */
def membersCanUpdateProtectedBranchesSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanUpdateProtectedBranchesSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided members can update protected branches setting value.
 */
def membersCanUpdateProtectedBranchesSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanUpdateProtectedBranchesSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The setting value for whether members can view dependency insights.
 */
def membersCanViewDependencyInsightsSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("membersCanViewDependencyInsightsSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
 */
def membersCanViewDependencyInsightsSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("membersCanViewDependencyInsightsSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * Indicates if email notification delivery for this enterprise is restricted to verified or approved domains.
 */
def notificationDeliveryRestrictionEnabledSetting: SelectionBuilder[EnterpriseOwnerInfo, NotificationRestrictionSettingValue] = _root_.caliban.client.SelectionBuilder.Field("notificationDeliveryRestrictionEnabledSetting", Scalar())
  /**
 * The OIDC Identity Provider for the enterprise.
 */
def oidcProvider[A](innerSelection: SelectionBuilder[OIDCProvider, A]): SelectionBuilder[EnterpriseOwnerInfo, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("oidcProvider", OptionOf(Obj(innerSelection)))
  /**
 * The setting value for whether organization projects are enabled for organizations in this enterprise.
 */
def organizationProjectsSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("organizationProjectsSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided organization projects setting value.
 */
def organizationProjectsSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("organizationProjectsSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * A list of outside collaborators across the repositories in the enterprise.
 */
def outsideCollaborators[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, hasTwoFactorEnabled : scala.Option[Boolean] = None, last : scala.Option[Int] = None, login : scala.Option[String] = None, orderBy : scala.Option[EnterpriseMemberOrder] = None, organizationLogins : scala.Option[List[String]] = None, query : scala.Option[String] = None, visibility : scala.Option[RepositoryVisibility] = None)(innerSelection: SelectionBuilder[EnterpriseOutsideCollaboratorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[EnterpriseMemberOrder]], encoder7: ArgEncoder[scala.Option[List[String]]], encoder8: ArgEncoder[scala.Option[String]], encoder9: ArgEncoder[scala.Option[RepositoryVisibility]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("outsideCollaborators", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("hasTwoFactorEnabled", hasTwoFactorEnabled, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4), Argument("login", login, "String")(encoder5), Argument("orderBy", orderBy, "EnterpriseMemberOrder")(encoder6), Argument("organizationLogins", organizationLogins, "[String!]")(encoder7), Argument("query", query, "String")(encoder8), Argument("visibility", visibility, "RepositoryVisibility")(encoder9)))
  /**
 * A list of pending administrator invitations for the enterprise.
 */
def pendingAdminInvitations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseAdministratorInvitationOrder] = None, query : scala.Option[String] = None, role : scala.Option[EnterpriseAdministratorRole] = None)(innerSelection: SelectionBuilder[EnterpriseAdministratorInvitationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[EnterpriseAdministratorInvitationOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[EnterpriseAdministratorRole]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("pendingAdminInvitations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "EnterpriseAdministratorInvitationOrder")(encoder4), Argument("query", query, "String")(encoder5), Argument("role", role, "EnterpriseAdministratorRole")(encoder6)))
  /**
 * A list of pending collaborator invitations across the repositories in the enterprise.
 */
def pendingCollaboratorInvitations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryInvitationOrder] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[RepositoryInvitationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[RepositoryInvitationOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("pendingCollaboratorInvitations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "RepositoryInvitationOrder")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * A list of pending member invitations for organizations in the enterprise.
 */
def pendingMemberInvitations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, invitationSource : scala.Option[OrganizationInvitationSource] = None, last : scala.Option[Int] = None, organizationLogins : scala.Option[List[String]] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[EnterprisePendingMemberInvitationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[OrganizationInvitationSource]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("pendingMemberInvitations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("invitationSource", invitationSource, "OrganizationInvitationSource")(encoder3), Argument("last", last, "Int")(encoder4), Argument("organizationLogins", organizationLogins, "[String!]")(encoder5), Argument("query", query, "String")(encoder6)))
  /**
 * The setting value for whether repository projects are enabled in this enterprise.
 */
def repositoryProjectsSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("repositoryProjectsSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided repository projects setting value.
 */
def repositoryProjectsSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryProjectsSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The SAML Identity Provider for the enterprise.
 */
def samlIdentityProvider[A](innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]): SelectionBuilder[EnterpriseOwnerInfo, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("samlIdentityProvider", OptionOf(Obj(innerSelection)))
  /**
 * A list of enterprise organizations configured with the SAML single sign-on setting value.
 */
def samlIdentityProviderSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : IdentityProviderConfigurationState)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[IdentityProviderConfigurationState]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("samlIdentityProviderSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "IdentityProviderConfigurationState!")(encoder5)))
  /**
 * A list of members with a support entitlement.
 */
def supportEntitlements[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseMemberOrder] = None)(innerSelection: SelectionBuilder[EnterpriseMemberConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[EnterpriseMemberOrder]]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("supportEntitlements", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "EnterpriseMemberOrder")(encoder4)))
  /**
 * The setting value for whether team discussions are enabled for organizations in this enterprise.
 */
def teamDiscussionsSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledDisabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("teamDiscussionsSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the provided team discussions setting value.
 */
def teamDiscussionsSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("teamDiscussionsSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
  /**
 * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
 */
def twoFactorRequiredSetting: SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("twoFactorRequiredSetting", Scalar())
  /**
 * A list of enterprise organizations configured with the two-factor authentication setting value.
 */
def twoFactorRequiredSettingOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, value : Boolean)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[Boolean]): SelectionBuilder[EnterpriseOwnerInfo, A] = _root_.caliban.client.SelectionBuilder.Field("twoFactorRequiredSettingOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("value", value, "Boolean!")(encoder5)))
}


type EnterprisePendingMemberInvitationConnection
object EnterprisePendingMemberInvitationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterprisePendingMemberInvitationEdge, A]): SelectionBuilder[EnterprisePendingMemberInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[EnterprisePendingMemberInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterprisePendingMemberInvitationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterprisePendingMemberInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * Identifies the total count of unique users in the connection.
 */
def totalUniqueUserCount: SelectionBuilder[EnterprisePendingMemberInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalUniqueUserCount", Scalar())
}


type EnterprisePendingMemberInvitationEdge
object EnterprisePendingMemberInvitationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterprisePendingMemberInvitationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[EnterprisePendingMemberInvitationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseRepositoryInfo
object EnterpriseRepositoryInfo {
  def id: SelectionBuilder[EnterpriseRepositoryInfo, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies if the repository is private or internal.
 */
def isPrivate: SelectionBuilder[EnterpriseRepositoryInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPrivate", Scalar())
  /**
 * The repository's name.
 */
def name: SelectionBuilder[EnterpriseRepositoryInfo, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The repository's name with owner.
 */
def nameWithOwner: SelectionBuilder[EnterpriseRepositoryInfo, String] = _root_.caliban.client.SelectionBuilder.Field("nameWithOwner", Scalar())
}


type EnterpriseRepositoryInfoConnection
object EnterpriseRepositoryInfoConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseRepositoryInfoEdge, A]): SelectionBuilder[EnterpriseRepositoryInfoConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseRepositoryInfo, A]): SelectionBuilder[EnterpriseRepositoryInfoConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseRepositoryInfoConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseRepositoryInfoConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseRepositoryInfoEdge
object EnterpriseRepositoryInfoEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseRepositoryInfoEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseRepositoryInfo, A]): SelectionBuilder[EnterpriseRepositoryInfoEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseServerInstallation
object EnterpriseServerInstallation {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[EnterpriseServerInstallation, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The customer name to which the Enterprise Server installation belongs.
 */
def customerName: SelectionBuilder[EnterpriseServerInstallation, String] = _root_.caliban.client.SelectionBuilder.Field("customerName", Scalar())
  /**
 * The host name of the Enterprise Server installation.
 */
def hostName: SelectionBuilder[EnterpriseServerInstallation, String] = _root_.caliban.client.SelectionBuilder.Field("hostName", Scalar())
  def id: SelectionBuilder[EnterpriseServerInstallation, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
 */
def isConnected: SelectionBuilder[EnterpriseServerInstallation, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isConnected", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[EnterpriseServerInstallation, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * User accounts on this Enterprise Server installation.
 */
def userAccounts[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseServerUserAccountOrder] = None)(innerSelection: SelectionBuilder[EnterpriseServerUserAccountConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[EnterpriseServerUserAccountOrder]]): SelectionBuilder[EnterpriseServerInstallation, A] = _root_.caliban.client.SelectionBuilder.Field("userAccounts", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "EnterpriseServerUserAccountOrder")(encoder4)))
  /**
 * User accounts uploads for the Enterprise Server installation.
 */
def userAccountsUploads[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseServerUserAccountsUploadOrder] = None)(innerSelection: SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[EnterpriseServerUserAccountsUploadOrder]]): SelectionBuilder[EnterpriseServerInstallation, A] = _root_.caliban.client.SelectionBuilder.Field("userAccountsUploads", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "EnterpriseServerUserAccountsUploadOrder")(encoder4)))
}


type EnterpriseServerInstallationConnection
object EnterpriseServerInstallationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseServerInstallationEdge, A]): SelectionBuilder[EnterpriseServerInstallationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]): SelectionBuilder[EnterpriseServerInstallationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseServerInstallationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseServerInstallationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseServerInstallationEdge
object EnterpriseServerInstallationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseServerInstallationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]): SelectionBuilder[EnterpriseServerInstallationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseServerInstallationMembershipConnection
object EnterpriseServerInstallationMembershipConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseServerInstallationMembershipEdge, A]): SelectionBuilder[EnterpriseServerInstallationMembershipConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]): SelectionBuilder[EnterpriseServerInstallationMembershipConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseServerInstallationMembershipConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseServerInstallationMembershipConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseServerInstallationMembershipEdge
object EnterpriseServerInstallationMembershipEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseServerInstallationMembershipEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]): SelectionBuilder[EnterpriseServerInstallationMembershipEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  /**
 * The role of the user in the enterprise membership.
 */
def role: SelectionBuilder[EnterpriseServerInstallationMembershipEdge, EnterpriseUserAccountMembershipRole] = _root_.caliban.client.SelectionBuilder.Field("role", Scalar())
}


type EnterpriseServerUserAccount
object EnterpriseServerUserAccount {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[EnterpriseServerUserAccount, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * User emails belonging to this user account.
 */
def emails[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseServerUserAccountEmailOrder] = None)(innerSelection: SelectionBuilder[EnterpriseServerUserAccountEmailConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[EnterpriseServerUserAccountEmailOrder]]): SelectionBuilder[EnterpriseServerUserAccount, A] = _root_.caliban.client.SelectionBuilder.Field("emails", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "EnterpriseServerUserAccountEmailOrder")(encoder4)))
  /**
 * The Enterprise Server installation on which this user account exists.
 */
def enterpriseServerInstallation[A](innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]): SelectionBuilder[EnterpriseServerUserAccount, A] = _root_.caliban.client.SelectionBuilder.Field("enterpriseServerInstallation", Obj(innerSelection))
  def id: SelectionBuilder[EnterpriseServerUserAccount, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the user account is a site administrator on the Enterprise Server installation.
 */
def isSiteAdmin: SelectionBuilder[EnterpriseServerUserAccount, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSiteAdmin", Scalar())
  /**
 * The login of the user account on the Enterprise Server installation.
 */
def login: SelectionBuilder[EnterpriseServerUserAccount, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The profile name of the user account on the Enterprise Server installation.
 */
def profileName: SelectionBuilder[EnterpriseServerUserAccount, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("profileName", OptionOf(Scalar()))
  /**
 * The date and time when the user account was created on the Enterprise Server installation.
 */
def remoteCreatedAt: SelectionBuilder[EnterpriseServerUserAccount, DateTime] = _root_.caliban.client.SelectionBuilder.Field("remoteCreatedAt", Scalar())
  /**
 * The ID of the user account on the Enterprise Server installation.
 */
def remoteUserId: SelectionBuilder[EnterpriseServerUserAccount, Int] = _root_.caliban.client.SelectionBuilder.Field("remoteUserId", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[EnterpriseServerUserAccount, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type EnterpriseServerUserAccountConnection
object EnterpriseServerUserAccountConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountEdge, A]): SelectionBuilder[EnterpriseServerUserAccountConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccount, A]): SelectionBuilder[EnterpriseServerUserAccountConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseServerUserAccountConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseServerUserAccountConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseServerUserAccountEdge
object EnterpriseServerUserAccountEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseServerUserAccountEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccount, A]): SelectionBuilder[EnterpriseServerUserAccountEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseServerUserAccountEmail
object EnterpriseServerUserAccountEmail {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[EnterpriseServerUserAccountEmail, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The email address.
 */
def email: SelectionBuilder[EnterpriseServerUserAccountEmail, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  def id: SelectionBuilder[EnterpriseServerUserAccountEmail, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Indicates whether this is the primary email of the associated user account.
 */
def isPrimary: SelectionBuilder[EnterpriseServerUserAccountEmail, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPrimary", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[EnterpriseServerUserAccountEmail, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The user account to which the email belongs.
 */
def userAccount[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccount, A]): SelectionBuilder[EnterpriseServerUserAccountEmail, A] = _root_.caliban.client.SelectionBuilder.Field("userAccount", Obj(innerSelection))
}


type EnterpriseServerUserAccountEmailConnection
object EnterpriseServerUserAccountEmailConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountEmailEdge, A]): SelectionBuilder[EnterpriseServerUserAccountEmailConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountEmail, A]): SelectionBuilder[EnterpriseServerUserAccountEmailConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseServerUserAccountEmailConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseServerUserAccountEmailConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseServerUserAccountEmailEdge
object EnterpriseServerUserAccountEmailEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseServerUserAccountEmailEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountEmail, A]): SelectionBuilder[EnterpriseServerUserAccountEmailEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseServerUserAccountsUpload
object EnterpriseServerUserAccountsUpload {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[EnterpriseServerUserAccountsUpload, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The enterprise to which this upload belongs.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[EnterpriseServerUserAccountsUpload, A] = _root_.caliban.client.SelectionBuilder.Field("enterprise", Obj(innerSelection))
  /**
 * The Enterprise Server installation for which this upload was generated.
 */
def enterpriseServerInstallation[A](innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]): SelectionBuilder[EnterpriseServerUserAccountsUpload, A] = _root_.caliban.client.SelectionBuilder.Field("enterpriseServerInstallation", Obj(innerSelection))
  def id: SelectionBuilder[EnterpriseServerUserAccountsUpload, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the file uploaded.
 */
def name: SelectionBuilder[EnterpriseServerUserAccountsUpload, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The synchronization state of the upload
 */
def syncState: SelectionBuilder[EnterpriseServerUserAccountsUpload, EnterpriseServerUserAccountsUploadSyncState] = _root_.caliban.client.SelectionBuilder.Field("syncState", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[EnterpriseServerUserAccountsUpload, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type EnterpriseServerUserAccountsUploadConnection
object EnterpriseServerUserAccountsUploadConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountsUploadEdge, A]): SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountsUpload, A]): SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnterpriseServerUserAccountsUploadEdge
object EnterpriseServerUserAccountsUploadEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnterpriseServerUserAccountsUploadEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[EnterpriseServerUserAccountsUpload, A]): SelectionBuilder[EnterpriseServerUserAccountsUploadEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type EnterpriseUserAccount
object EnterpriseUserAccount {
  /**
 * A URL pointing to the enterprise user account's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[EnterpriseUserAccount, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[EnterpriseUserAccount, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The enterprise in which this user account exists.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[EnterpriseUserAccount, A] = _root_.caliban.client.SelectionBuilder.Field("enterprise", Obj(innerSelection))
  /**
 * A list of Enterprise Server installations this user is a member of.
 */
def enterpriseInstallations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[EnterpriseServerInstallationOrder] = None, query : scala.Option[String] = None, role : scala.Option[EnterpriseUserAccountMembershipRole] = None)(innerSelection: SelectionBuilder[EnterpriseServerInstallationMembershipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[EnterpriseServerInstallationOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[EnterpriseUserAccountMembershipRole]]): SelectionBuilder[EnterpriseUserAccount, A] = _root_.caliban.client.SelectionBuilder.Field("enterpriseInstallations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "EnterpriseServerInstallationOrder")(encoder4), Argument("query", query, "String")(encoder5), Argument("role", role, "EnterpriseUserAccountMembershipRole")(encoder6)))
  def id: SelectionBuilder[EnterpriseUserAccount, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * An identifier for the enterprise user account, a login or email address
 */
def login: SelectionBuilder[EnterpriseUserAccount, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The name of the enterprise user account
 */
def name: SelectionBuilder[EnterpriseUserAccount, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * A list of enterprise organizations this user is a member of.
 */
def organizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None, query : scala.Option[String] = None, role : scala.Option[EnterpriseUserAccountMembershipRole] = None)(innerSelection: SelectionBuilder[EnterpriseOrganizationMembershipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[EnterpriseUserAccountMembershipRole]]): SelectionBuilder[EnterpriseUserAccount, A] = _root_.caliban.client.SelectionBuilder.Field("organizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4), Argument("query", query, "String")(encoder5), Argument("role", role, "EnterpriseUserAccountMembershipRole")(encoder6)))
  /**
 * The HTTP path for this user.
 */
def resourcePath: SelectionBuilder[EnterpriseUserAccount, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[EnterpriseUserAccount, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this user.
 */
def url: SelectionBuilder[EnterpriseUserAccount, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user within the enterprise.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[EnterpriseUserAccount, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
}


type Environment
object Environment {
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Environment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[Environment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the environment
 */
def name: SelectionBuilder[Environment, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The protection rules defined for this environment
 */
def protectionRules[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeploymentProtectionRuleConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Environment, A] = _root_.caliban.client.SelectionBuilder.Field("protectionRules", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type EnvironmentConnection
object EnvironmentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[EnvironmentEdge, A]): SelectionBuilder[EnvironmentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[EnvironmentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[EnvironmentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[EnvironmentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type EnvironmentEdge
object EnvironmentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[EnvironmentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[EnvironmentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ExternalIdentity
object ExternalIdentity {
  /**
 * The GUID for this identity
 */
def guid: SelectionBuilder[ExternalIdentity, String] = _root_.caliban.client.SelectionBuilder.Field("guid", Scalar())
  def id: SelectionBuilder[ExternalIdentity, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Organization invitation for this SCIM-provisioned external identity
 */
def organizationInvitation[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[ExternalIdentity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organizationInvitation", OptionOf(Obj(innerSelection)))
  /**
 * SAML Identity attributes
 */
def samlIdentity[A](innerSelection: SelectionBuilder[ExternalIdentitySamlAttributes, A]): SelectionBuilder[ExternalIdentity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("samlIdentity", OptionOf(Obj(innerSelection)))
  /**
 * SCIM Identity attributes
 */
def scimIdentity[A](innerSelection: SelectionBuilder[ExternalIdentityScimAttributes, A]): SelectionBuilder[ExternalIdentity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("scimIdentity", OptionOf(Obj(innerSelection)))
  /**
 * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[ExternalIdentity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
}


type ExternalIdentityAttribute
object ExternalIdentityAttribute {
  /**
 * The attribute metadata as JSON
 */
def metadata: SelectionBuilder[ExternalIdentityAttribute, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("metadata", OptionOf(Scalar()))
  /**
 * The attribute name
 */
def name: SelectionBuilder[ExternalIdentityAttribute, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The attribute value
 */
def value: SelectionBuilder[ExternalIdentityAttribute, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
}


type ExternalIdentityConnection
object ExternalIdentityConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ExternalIdentityEdge, A]): SelectionBuilder[ExternalIdentityConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ExternalIdentity, A]): SelectionBuilder[ExternalIdentityConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ExternalIdentityConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ExternalIdentityConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ExternalIdentityEdge
object ExternalIdentityEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ExternalIdentityEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ExternalIdentity, A]): SelectionBuilder[ExternalIdentityEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ExternalIdentitySamlAttributes
object ExternalIdentitySamlAttributes {
  /**
 * SAML Identity attributes
 */
def attributes[A](innerSelection: SelectionBuilder[ExternalIdentityAttribute, A]): SelectionBuilder[ExternalIdentitySamlAttributes, List[A]] = _root_.caliban.client.SelectionBuilder.Field("attributes", ListOf(Obj(innerSelection)))
  /**
 * The emails associated with the SAML identity
 */
def emails[A](innerSelection: SelectionBuilder[UserEmailMetadata, A]): SelectionBuilder[ExternalIdentitySamlAttributes, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("emails", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * Family name of the SAML identity
 */
def familyName: SelectionBuilder[ExternalIdentitySamlAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("familyName", OptionOf(Scalar()))
  /**
 * Given name of the SAML identity
 */
def givenName: SelectionBuilder[ExternalIdentitySamlAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("givenName", OptionOf(Scalar()))
  /**
 * The groups linked to this identity in IDP
 */
def groups: SelectionBuilder[ExternalIdentitySamlAttributes, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("groups", OptionOf(ListOf(Scalar())))
  /**
 * The NameID of the SAML identity
 */
def nameId: SelectionBuilder[ExternalIdentitySamlAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("nameId", OptionOf(Scalar()))
  /**
 * The userName of the SAML identity
 */
def username: SelectionBuilder[ExternalIdentitySamlAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("username", OptionOf(Scalar()))
}


type ExternalIdentityScimAttributes
object ExternalIdentityScimAttributes {
  /**
 * The emails associated with the SCIM identity
 */
def emails[A](innerSelection: SelectionBuilder[UserEmailMetadata, A]): SelectionBuilder[ExternalIdentityScimAttributes, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("emails", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * Family name of the SCIM identity
 */
def familyName: SelectionBuilder[ExternalIdentityScimAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("familyName", OptionOf(Scalar()))
  /**
 * Given name of the SCIM identity
 */
def givenName: SelectionBuilder[ExternalIdentityScimAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("givenName", OptionOf(Scalar()))
  /**
 * The groups linked to this identity in IDP
 */
def groups: SelectionBuilder[ExternalIdentityScimAttributes, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("groups", OptionOf(ListOf(Scalar())))
  /**
 * The userName of the SCIM identity
 */
def username: SelectionBuilder[ExternalIdentityScimAttributes, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("username", OptionOf(Scalar()))
}


type FollowOrganizationPayload
object FollowOrganizationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[FollowOrganizationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The organization that was followed.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[FollowOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type FollowUserPayload
object FollowUserPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[FollowUserPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The user that was followed.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[FollowUserPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
}


type FollowerConnection
object FollowerConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[UserEdge, A]): SelectionBuilder[FollowerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[FollowerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[FollowerConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[FollowerConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type FollowingConnection
object FollowingConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[UserEdge, A]): SelectionBuilder[FollowingConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[FollowingConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[FollowingConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[FollowingConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type FundingLink
object FundingLink {
  /**
 * The funding platform this link is for.
 */
def platform: SelectionBuilder[FundingLink, FundingPlatform] = _root_.caliban.client.SelectionBuilder.Field("platform", Scalar())
  /**
 * The configured URL for this funding link.
 */
def url: SelectionBuilder[FundingLink, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type GenericHovercardContext
object GenericHovercardContext {
  /**
 * A string describing this context
 */
def message: SelectionBuilder[GenericHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * An octicon to accompany this context
 */
def octicon: SelectionBuilder[GenericHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("octicon", Scalar())
}


type Gist
object Gist {
  /**
 * A list of comments associated with the gist
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[GistCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Gist, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Gist, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The gist description.
 */
def description: SelectionBuilder[Gist, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The files in this gist.
 */
def files[A](limit : scala.Option[Int] = None, oid : scala.Option[GitObjectID] = None)(innerSelection: SelectionBuilder[GistFile, A])(implicit encoder0: ArgEncoder[scala.Option[Int]], encoder1: ArgEncoder[scala.Option[GitObjectID]]): SelectionBuilder[Gist, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("files", OptionOf(ListOf(OptionOf(Obj(innerSelection)))), arguments = List(Argument("limit", limit, "Int")(encoder0), Argument("oid", oid, "GitObjectID")(encoder1)))
  /**
 * A list of forks associated with the gist
 */
def forks[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[GistOrder] = None)(innerSelection: SelectionBuilder[GistConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[GistOrder]]): SelectionBuilder[Gist, A] = _root_.caliban.client.SelectionBuilder.Field("forks", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "GistOrder")(encoder4)))
  def id: SelectionBuilder[Gist, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies if the gist is a fork.
 */
def isFork: SelectionBuilder[Gist, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isFork", Scalar())
  /**
 * Whether the gist is public or not.
 */
def isPublic: SelectionBuilder[Gist, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPublic", Scalar())
  /**
 * The gist name.
 */
def name: SelectionBuilder[Gist, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The gist owner.
 */
def owner[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Gist, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies when the gist was last pushed to.
 */
def pushedAt: SelectionBuilder[Gist, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("pushedAt", OptionOf(Scalar()))
  /**
 * The HTML path to this resource.
 */
def resourcePath: SelectionBuilder[Gist, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Returns a count of how many stargazers there are on this object
 */
def stargazerCount: SelectionBuilder[Gist, Int] = _root_.caliban.client.SelectionBuilder.Field("stargazerCount", Scalar())
  /**
 * A list of users who have starred this starrable.
 */
def stargazers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[StarOrder] = None)(innerSelection: SelectionBuilder[StargazerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[StarOrder]]): SelectionBuilder[Gist, A] = _root_.caliban.client.SelectionBuilder.Field("stargazers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "StarOrder")(encoder4)))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Gist, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this Gist.
 */
def url: SelectionBuilder[Gist, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
def viewerHasStarred: SelectionBuilder[Gist, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasStarred", Scalar())
  /**
 * The gist owner.
 */
def ownerOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Gist, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The gist owner.
 */
def ownerInterface[A](owner: SelectionBuilder[RepositoryOwner, A]): SelectionBuilder[Gist, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(Obj(owner)))
}


type GistComment
object GistComment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[GistComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the gist.
 */
def authorAssociation: SelectionBuilder[GistComment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * Identifies the comment body.
 */
def body: SelectionBuilder[GistComment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[GistComment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[GistComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[GistComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[GistComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[GistComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The associated gist.
 */
def gist[A](innerSelection: SelectionBuilder[Gist, A]): SelectionBuilder[GistComment, A] = _root_.caliban.client.SelectionBuilder.Field("gist", Obj(innerSelection))
  def id: SelectionBuilder[GistComment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Returns whether or not a comment has been minimized.
 */
def isMinimized: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMinimized", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[GistComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
def minimizedReason: SelectionBuilder[GistComment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("minimizedReason", OptionOf(Scalar()))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[GistComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[GistComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[GistComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Check if the current viewer can minimize this object.
 */
def viewerCanMinimize: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMinimize", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[GistComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[GistComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[GistComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[GistComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[GistComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[GistComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type GistCommentConnection
object GistCommentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[GistCommentEdge, A]): SelectionBuilder[GistCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[GistComment, A]): SelectionBuilder[GistCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[GistCommentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[GistCommentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type GistCommentEdge
object GistCommentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[GistCommentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[GistComment, A]): SelectionBuilder[GistCommentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type GistConnection
object GistConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[GistEdge, A]): SelectionBuilder[GistConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Gist, A]): SelectionBuilder[GistConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[GistConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[GistConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type GistEdge
object GistEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[GistEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Gist, A]): SelectionBuilder[GistEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type GistFile
object GistFile {
  /**
 * The file name encoded to remove characters that are invalid in URL paths.
 */
def encodedName: SelectionBuilder[GistFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("encodedName", OptionOf(Scalar()))
  /**
 * The gist file encoding.
 */
def encoding: SelectionBuilder[GistFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("encoding", OptionOf(Scalar()))
  /**
 * The file extension from the file name.
 */
def `extension`: SelectionBuilder[GistFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("extension", OptionOf(Scalar()))
  /**
 * Indicates if this file is an image.
 */
def isImage: SelectionBuilder[GistFile, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isImage", Scalar())
  /**
 * Whether the file's contents were truncated.
 */
def isTruncated: SelectionBuilder[GistFile, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isTruncated", Scalar())
  /**
 * The programming language this file is written in.
 */
def language[A](innerSelection: SelectionBuilder[Language, A]): SelectionBuilder[GistFile, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("language", OptionOf(Obj(innerSelection)))
  /**
 * The gist file name.
 */
def name: SelectionBuilder[GistFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * The gist file size in bytes.
 */
def size: SelectionBuilder[GistFile, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("size", OptionOf(Scalar()))
  /**
 * UTF8 text data or null if the file is binary
 */
def text(truncate : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[GistFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("text", OptionOf(Scalar()), arguments = List(Argument("truncate", truncate, "Int")(encoder0)))
}


type GitActor
object GitActor {
  /**
 * A URL pointing to the author's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[GitActor, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * The timestamp of the Git action (authoring or committing).
 */
def date: SelectionBuilder[GitActor, scala.Option[GitTimestamp]] = _root_.caliban.client.SelectionBuilder.Field("date", OptionOf(Scalar()))
  /**
 * The email in the Git commit.
 */
def email: SelectionBuilder[GitActor, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  /**
 * The name in the Git commit.
 */
def name: SelectionBuilder[GitActor, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * The GitHub user corresponding to the email field. Null if no such user exists.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[GitActor, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
}


type GitActorConnection
object GitActorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[GitActorEdge, A]): SelectionBuilder[GitActorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[GitActor, A]): SelectionBuilder[GitActorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[GitActorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[GitActorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type GitActorEdge
object GitActorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[GitActorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[GitActor, A]): SelectionBuilder[GitActorEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type GitHubMetadata
object GitHubMetadata {
  /**
 * Returns a String that's a SHA of `github-services`
 */
def gitHubServicesSha: SelectionBuilder[GitHubMetadata, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("gitHubServicesSha", Scalar())
  /**
 * IP addresses that users connect to for git operations
 */
def gitIpAddresses: SelectionBuilder[GitHubMetadata, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("gitIpAddresses", OptionOf(ListOf(Scalar())))
  /**
 * IP addresses that service hooks are sent from
 */
def hookIpAddresses: SelectionBuilder[GitHubMetadata, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("hookIpAddresses", OptionOf(ListOf(Scalar())))
  /**
 * IP addresses that the importer connects from
 */
def importerIpAddresses: SelectionBuilder[GitHubMetadata, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("importerIpAddresses", OptionOf(ListOf(Scalar())))
  /**
 * Whether or not users are verified
 */
def isPasswordAuthenticationVerifiable: SelectionBuilder[GitHubMetadata, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPasswordAuthenticationVerifiable", Scalar())
  /**
 * IP addresses for GitHub Pages' A records
 */
def pagesIpAddresses: SelectionBuilder[GitHubMetadata, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("pagesIpAddresses", OptionOf(ListOf(Scalar())))
}


type GpgSignature
object GpgSignature {
  /**
 * Email used to sign this object.
 */
def email: SelectionBuilder[GpgSignature, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  /**
 * True if the signature is valid and verified by GitHub.
 */
def isValid: SelectionBuilder[GpgSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isValid", Scalar())
  /**
 * Hex-encoded ID of the key that signed this object.
 */
def keyId: SelectionBuilder[GpgSignature, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("keyId", OptionOf(Scalar()))
  /**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
def payload: SelectionBuilder[GpgSignature, String] = _root_.caliban.client.SelectionBuilder.Field("payload", Scalar())
  /**
 * ASCII-armored signature header from object.
 */
def signature: SelectionBuilder[GpgSignature, String] = _root_.caliban.client.SelectionBuilder.Field("signature", Scalar())
  /**
 * GitHub user corresponding to the email signing this commit.
 */
def signer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[GpgSignature, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signer", OptionOf(Obj(innerSelection)))
  /**
 * The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid.
 */
def state: SelectionBuilder[GpgSignature, GitSignatureState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * True if the signature was made with GitHub's signing key.
 */
def wasSignedByGitHub: SelectionBuilder[GpgSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("wasSignedByGitHub", Scalar())
}


type GrantEnterpriseOrganizationsMigratorRolePayload
object GrantEnterpriseOrganizationsMigratorRolePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[GrantEnterpriseOrganizationsMigratorRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The organizations that had the migrator role applied to for the given user.
 */
def organizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[GrantEnterpriseOrganizationsMigratorRolePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organizations", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type GrantMigratorRolePayload
object GrantMigratorRolePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[GrantMigratorRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * Did the operation succeed?
 */
def success: SelectionBuilder[GrantMigratorRolePayload, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("success", OptionOf(Scalar()))
}


type HeadRefDeletedEvent
object HeadRefDeletedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[HeadRefDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[HeadRefDeletedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the Ref associated with the `head_ref_deleted` event.
 */
def headRef[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[HeadRefDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headRef", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the name of the Ref associated with the `head_ref_deleted` event.
 */
def headRefName: SelectionBuilder[HeadRefDeletedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("headRefName", Scalar())
  def id: SelectionBuilder[HeadRefDeletedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[HeadRefDeletedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[HeadRefDeletedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[HeadRefDeletedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type HeadRefForcePushedEvent
object HeadRefForcePushedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[HeadRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
 */
def afterCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[HeadRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("afterCommit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
 */
def beforeCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[HeadRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("beforeCommit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[HeadRefForcePushedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[HeadRefForcePushedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[HeadRefForcePushedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[HeadRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[HeadRefForcePushedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[HeadRefForcePushedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type HeadRefRestoredEvent
object HeadRefRestoredEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[HeadRefRestoredEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[HeadRefRestoredEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[HeadRefRestoredEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[HeadRefRestoredEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[HeadRefRestoredEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[HeadRefRestoredEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type Hovercard
object Hovercard {
  /**
 * Each of the contexts for this hovercard
 */
def contexts[A](onGenericHovercardContext: SelectionBuilder[GenericHovercardContext, A], onOrganizationTeamsHovercardContext: SelectionBuilder[OrganizationTeamsHovercardContext, A], onOrganizationsHovercardContext: SelectionBuilder[OrganizationsHovercardContext, A], onReviewStatusHovercardContext: SelectionBuilder[ReviewStatusHovercardContext, A], onViewerHovercardContext: SelectionBuilder[ViewerHovercardContext, A]): SelectionBuilder[Hovercard, List[A]] = _root_.caliban.client.SelectionBuilder.Field("contexts", ListOf(ChoiceOf(Map("GenericHovercardContext" -> Obj(onGenericHovercardContext), "OrganizationTeamsHovercardContext" -> Obj(onOrganizationTeamsHovercardContext), "OrganizationsHovercardContext" -> Obj(onOrganizationsHovercardContext), "ReviewStatusHovercardContext" -> Obj(onReviewStatusHovercardContext), "ViewerHovercardContext" -> Obj(onViewerHovercardContext)))))
  /**
 * Each of the contexts for this hovercard
 */
def contextsOption[A](onGenericHovercardContext: scala.Option[SelectionBuilder[GenericHovercardContext, A]] = None, onOrganizationTeamsHovercardContext: scala.Option[SelectionBuilder[OrganizationTeamsHovercardContext, A]] = None, onOrganizationsHovercardContext: scala.Option[SelectionBuilder[OrganizationsHovercardContext, A]] = None, onReviewStatusHovercardContext: scala.Option[SelectionBuilder[ReviewStatusHovercardContext, A]] = None, onViewerHovercardContext: scala.Option[SelectionBuilder[ViewerHovercardContext, A]] = None): SelectionBuilder[Hovercard, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("contexts", ListOf(ChoiceOf(Map("GenericHovercardContext" -> onGenericHovercardContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationTeamsHovercardContext" -> onOrganizationTeamsHovercardContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationsHovercardContext" -> onOrganizationsHovercardContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewStatusHovercardContext" -> onReviewStatusHovercardContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ViewerHovercardContext" -> onViewerHovercardContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Each of the contexts for this hovercard
 */
def contextsInterface[A](contexts: SelectionBuilder[HovercardContext, A]): SelectionBuilder[Hovercard, List[A]] = _root_.caliban.client.SelectionBuilder.Field("contexts", ListOf(Obj(contexts)))
}


type ImportProjectPayload
object ImportProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ImportProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new Project!
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ImportProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
}


type InviteEnterpriseAdminPayload
object InviteEnterpriseAdminPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[InviteEnterpriseAdminPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The created enterprise administrator invitation.
 */
def invitation[A](innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]): SelectionBuilder[InviteEnterpriseAdminPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitation", OptionOf(Obj(innerSelection)))
}


type IpAllowListEntry
object IpAllowListEntry {
  /**
 * A single IP address or range of IP addresses in CIDR notation.
 */
def allowListValue: SelectionBuilder[IpAllowListEntry, String] = _root_.caliban.client.SelectionBuilder.Field("allowListValue", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[IpAllowListEntry, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[IpAllowListEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the entry is currently active.
 */
def isActive: SelectionBuilder[IpAllowListEntry, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isActive", Scalar())
  /**
 * The name of the IP allow list entry.
 */
def name: SelectionBuilder[IpAllowListEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * The owner of the IP allow list entry.
 */
def owner[A](onApp: SelectionBuilder[App, A], onEnterprise: SelectionBuilder[Enterprise, A], onOrganization: SelectionBuilder[Organization, A]): SelectionBuilder[IpAllowListEntry, A] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("App" -> Obj(onApp), "Enterprise" -> Obj(onEnterprise), "Organization" -> Obj(onOrganization))))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[IpAllowListEntry, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The owner of the IP allow list entry.
 */
def ownerOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None): SelectionBuilder[IpAllowListEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type IpAllowListEntryConnection
object IpAllowListEntryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[IpAllowListEntryEdge, A]): SelectionBuilder[IpAllowListEntryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[IpAllowListEntry, A]): SelectionBuilder[IpAllowListEntryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IpAllowListEntryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[IpAllowListEntryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type IpAllowListEntryEdge
object IpAllowListEntryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[IpAllowListEntryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[IpAllowListEntry, A]): SelectionBuilder[IpAllowListEntryEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type Issue
object Issue {
  /**
 * Reason that the conversation was locked.
 */
def activeLockReason: SelectionBuilder[Issue, scala.Option[LockReason]] = _root_.caliban.client.SelectionBuilder.Field("activeLockReason", OptionOf(Scalar()))
  /**
 * A list of Users assigned to this object.
 */
def assignees[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("assignees", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[Issue, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * Identifies the body of the issue.
 */
def body: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[Issue, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The http path for this issue body
 */
def bodyResourcePath: SelectionBuilder[Issue, URI] = _root_.caliban.client.SelectionBuilder.Field("bodyResourcePath", Scalar())
  /**
 * Identifies the body of the issue rendered to text.
 */
def bodyText: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * The http URL for this issue body
 */
def bodyUrl: SelectionBuilder[Issue, URI] = _root_.caliban.client.SelectionBuilder.Field("bodyUrl", Scalar())
  /**
 * Indicates if the object is closed (definition of closed may depend on type)
 */
def closed: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[Issue, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * A list of comments associated with the Issue.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueCommentOrder] = None)(innerSelection: SelectionBuilder[IssueCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IssueCommentOrder]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IssueCommentOrder")(encoder4)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Issue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Issue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database as a BigInt.
 */
def fullDatabaseId: SelectionBuilder[Issue, scala.Option[BigInt]] = _root_.caliban.client.SelectionBuilder.Field("fullDatabaseId", OptionOf(Scalar()))
  /**
 * The hovercard information for this issue
 */
def hovercard[A](includeNotificationContexts : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Hovercard, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("hovercard", Obj(innerSelection), arguments = List(Argument("includeNotificationContexts", includeNotificationContexts, "Boolean")(encoder0)))
  def id: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Indicates whether or not this issue is currently pinned to the repository issues list
 */
def isPinned: SelectionBuilder[Issue, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isPinned", OptionOf(Scalar()))
  /**
 * Is this issue read by the viewer
 */
def isReadByViewer: SelectionBuilder[Issue, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isReadByViewer", OptionOf(Scalar()))
  /**
 * A list of labels associated with the object.
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LabelOrder] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LabelOrder]]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LabelOrder")(encoder4)))
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[Issue, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Branches linked to this issue.
 */
def linkedBranches[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[LinkedBranchConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("linkedBranches", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * `true` if the object is locked
 */
def locked: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("locked", Scalar())
  /**
 * Identifies the milestone associated with the issue.
 */
def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the issue number.
 */
def number: SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * A list of Users that are participating in the Issue conversation.
 */
def participants[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("participants", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * List of project cards associated with this issue.
 */
def projectCards[A](after : scala.Option[String] = None, archivedStates : scala.Option[List[scala.Option[ProjectCardArchivedState]]] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectCardConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[List[scala.Option[ProjectCardArchivedState]]]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("projectCards", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("archivedStates", archivedStates, "[ProjectCardArchivedState]")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * List of project items associated with this issue.
 */
def projectItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeArchived : scala.Option[Boolean] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2ItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("projectItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("includeArchived", includeArchived, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * Find a project by number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2Order]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2Order")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[Issue, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[Issue, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this issue
 */
def resourcePath: SelectionBuilder[Issue, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the state of the issue.
 */
def state: SelectionBuilder[Issue, IssueState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * Identifies the reason for the issue state.
 */
def stateReason: SelectionBuilder[Issue, scala.Option[IssueStateReason]] = _root_.caliban.client.SelectionBuilder.Field("stateReason", OptionOf(Scalar()))
  /**
 * A list of events, comments, commits, etc. associated with the issue.
 */
@deprecated("`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.", "")
def timeline[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, since : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[IssueTimelineConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("timeline", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("since", since, "DateTime")(encoder4)))
  /**
 * A list of events, comments, commits, etc. associated with the issue.
 */
def timelineItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, itemTypes : scala.Option[List[IssueTimelineItemsItemType]] = None, last : scala.Option[Int] = None, since : scala.Option[DateTime] = None, skip : scala.Option[Int] = None)(innerSelection: SelectionBuilder[IssueTimelineItemsConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[List[IssueTimelineItemsItemType]]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DateTime]], encoder6: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("timelineItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("itemTypes", itemTypes, "[IssueTimelineItemsItemType!]")(encoder3), Argument("last", last, "Int")(encoder4), Argument("since", since, "DateTime")(encoder5), Argument("skip", skip, "Int")(encoder6)))
  /**
 * Identifies the issue title.
 */
def title: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the issue title rendered to HTML.
 */
def titleHTML: SelectionBuilder[Issue, String] = _root_.caliban.client.SelectionBuilder.Field("titleHTML", Scalar())
  /**
 * A list of issues that track this issue
 */
def trackedInIssues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("trackedInIssues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of issues tracked inside the current issue
 */
def trackedIssues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, A] = _root_.caliban.client.SelectionBuilder.Field("trackedIssues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The number of tracked issues for this issue
 */
def trackedIssuesCount(states : scala.Option[List[scala.Option[TrackedIssueStates]]] = None)(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[TrackedIssueStates]]]]): SelectionBuilder[Issue, Int] = _root_.caliban.client.SelectionBuilder.Field("trackedIssuesCount", Scalar(), arguments = List(Argument("states", states, "[TrackedIssueStates]")(encoder0)))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Issue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this issue
 */
def url: SelectionBuilder[Issue, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[Issue, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[Issue, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[Issue, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Issue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Issue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[Issue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type IssueComment
object IssueComment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[IssueComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[IssueComment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The body as Markdown.
 */
def body: SelectionBuilder[IssueComment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[IssueComment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[IssueComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[IssueComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[IssueComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[IssueComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database as a BigInt.
 */
def fullDatabaseId: SelectionBuilder[IssueComment, scala.Option[BigInt]] = _root_.caliban.client.SelectionBuilder.Field("fullDatabaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[IssueComment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Returns whether or not a comment has been minimized.
 */
def isMinimized: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMinimized", Scalar())
  /**
 * Identifies the issue associated with the comment.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueComment, A] = _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[IssueComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
def minimizedReason: SelectionBuilder[IssueComment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("minimizedReason", OptionOf(Scalar()))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[IssueComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * Returns the pull request associated with the comment, if this comment was made on a
pull request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[IssueComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[IssueComment, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[IssueComment, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[IssueComment, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this issue comment
 */
def resourcePath: SelectionBuilder[IssueComment, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[IssueComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this issue comment
 */
def url: SelectionBuilder[IssueComment, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[IssueComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Check if the current viewer can minimize this object.
 */
def viewerCanMinimize: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMinimize", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[IssueComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[IssueComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[IssueComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[IssueComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[IssueComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[IssueComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type IssueCommentConnection
object IssueCommentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[IssueCommentEdge, A]): SelectionBuilder[IssueCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[IssueComment, A]): SelectionBuilder[IssueCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IssueCommentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[IssueCommentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type IssueCommentEdge
object IssueCommentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[IssueCommentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[IssueComment, A]): SelectionBuilder[IssueCommentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type IssueConnection
object IssueConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[IssueEdge, A]): SelectionBuilder[IssueConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IssueConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[IssueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type IssueContributionsByRepository
object IssueContributionsByRepository {
  /**
 * The issue contributions.
 */
def contributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedIssueContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[IssueContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("contributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ContributionOrder")(encoder4)))
  /**
 * The repository in which the issues were opened.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[IssueContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type IssueEdge
object IssueEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[IssueEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[IssueEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type IssueTemplate
object IssueTemplate {
  /**
 * The template purpose.
 */
def about: SelectionBuilder[IssueTemplate, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("about", OptionOf(Scalar()))
  /**
 * The suggested assignees.
 */
def assignees[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[IssueTemplate, A] = _root_.caliban.client.SelectionBuilder.Field("assignees", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The suggested issue body.
 */
def body: SelectionBuilder[IssueTemplate, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("body", OptionOf(Scalar()))
  /**
 * The template filename.
 */
def filename: SelectionBuilder[IssueTemplate, String] = _root_.caliban.client.SelectionBuilder.Field("filename", Scalar())
  /**
 * The suggested issue labels
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LabelOrder] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LabelOrder]]): SelectionBuilder[IssueTemplate, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LabelOrder")(encoder4)))
  /**
 * The template name.
 */
def name: SelectionBuilder[IssueTemplate, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The suggested issue title.
 */
def title: SelectionBuilder[IssueTemplate, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("title", OptionOf(Scalar()))
}


type IssueTimelineConnection
object IssueTimelineConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[IssueTimelineItemEdge, A]): SelectionBuilder[IssueTimelineConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onAssignedEvent: SelectionBuilder[AssignedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommit: SelectionBuilder[Commit, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[IssueTimelineConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AssignedEvent" -> Obj(onAssignedEvent), "ClosedEvent" -> Obj(onClosedEvent), "Commit" -> Obj(onCommit), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "ReferencedEvent" -> Obj(onReferencedEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "TransferredEvent" -> Obj(onTransferredEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IssueTimelineConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[IssueTimelineConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[IssueTimelineConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type IssueTimelineItemEdge
object IssueTimelineItemEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[IssueTimelineItemEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onAssignedEvent: SelectionBuilder[AssignedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommit: SelectionBuilder[Commit, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[IssueTimelineItemEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AssignedEvent" -> Obj(onAssignedEvent), "ClosedEvent" -> Obj(onClosedEvent), "Commit" -> Obj(onCommit), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "ReferencedEvent" -> Obj(onReferencedEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "TransferredEvent" -> Obj(onTransferredEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[IssueTimelineItemEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type IssueTimelineItemsConnection
object IssueTimelineItemsConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[IssueTimelineItemsEdge, A]): SelectionBuilder[IssueTimelineItemsConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Identifies the count of items after applying `before` and `after` filters.
 */
def filteredCount: SelectionBuilder[IssueTimelineItemsConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("filteredCount", Scalar())
  /**
 * A list of nodes.
 */
def nodes[A](onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[IssueTimelineItemsConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "AssignedEvent" -> Obj(onAssignedEvent), "ClosedEvent" -> Obj(onClosedEvent), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MentionedEvent" -> Obj(onMentionedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "PinnedEvent" -> Obj(onPinnedEvent), "ReferencedEvent" -> Obj(onReferencedEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "TransferredEvent" -> Obj(onTransferredEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))))
  /**
 * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
 */
def pageCount: SelectionBuilder[IssueTimelineItemsConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("pageCount", Scalar())
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[IssueTimelineItemsConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[IssueTimelineItemsConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * Identifies the date and time when the timeline was last updated.
 */
def updatedAt: SelectionBuilder[IssueTimelineItemsConnection, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[IssueTimelineItemsConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type IssueTimelineItemsEdge
object IssueTimelineItemsEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[IssueTimelineItemsEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[IssueTimelineItemsEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "AssignedEvent" -> Obj(onAssignedEvent), "ClosedEvent" -> Obj(onClosedEvent), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MentionedEvent" -> Obj(onMentionedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "PinnedEvent" -> Obj(onPinnedEvent), "ReferencedEvent" -> Obj(onReferencedEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "TransferredEvent" -> Obj(onTransferredEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[IssueTimelineItemsEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type JoinedGitHubContribution
object JoinedGitHubContribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[JoinedGitHubContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[JoinedGitHubContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[JoinedGitHubContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[JoinedGitHubContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[JoinedGitHubContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type Label
object Label {
  /**
 * Identifies the label color.
 */
def color: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("color", Scalar())
  /**
 * Identifies the date and time when the label was created.
 */
def createdAt: SelectionBuilder[Label, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))
  /**
 * A brief description of this label.
 */
def description: SelectionBuilder[Label, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  def id: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Indicates whether or not this is a default label.
 */
def isDefault: SelectionBuilder[Label, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDefault", Scalar())
  /**
 * A list of issues associated with this label.
 */
def issues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[IssueFilters] = None, first : scala.Option[Int] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[IssueState]] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[IssueFilters]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[String]]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[IssueOrder]], encoder7: ArgEncoder[scala.Option[List[IssueState]]]): SelectionBuilder[Label, A] = _root_.caliban.client.SelectionBuilder.Field("issues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "IssueFilters")(encoder2), Argument("first", first, "Int")(encoder3), Argument("labels", labels, "[String!]")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "IssueOrder")(encoder6), Argument("states", states, "[IssueState!]")(encoder7)))
  /**
 * Identifies the label name.
 */
def name: SelectionBuilder[Label, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * A list of pull requests associated with this label.
 */
def pullRequests[A](after : scala.Option[String] = None, baseRefName : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, headRefName : scala.Option[String] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[PullRequestState]] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[IssueOrder]], encoder8: ArgEncoder[scala.Option[List[PullRequestState]]]): SelectionBuilder[Label, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequests", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("baseRefName", baseRefName, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("headRefName", headRefName, "String")(encoder4), Argument("labels", labels, "[String!]")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "IssueOrder")(encoder7), Argument("states", states, "[PullRequestState!]")(encoder8)))
  /**
 * The repository associated with this label.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Label, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this label.
 */
def resourcePath: SelectionBuilder[Label, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the label was last updated.
 */
def updatedAt: SelectionBuilder[Label, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))
  /**
 * The HTTP URL for this label.
 */
def url: SelectionBuilder[Label, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type LabelConnection
object LabelConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[LabelEdge, A]): SelectionBuilder[LabelConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[LabelConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[LabelConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[LabelConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type LabelEdge
object LabelEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[LabelEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[LabelEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type LabeledEvent
object LabeledEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[LabeledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[LabeledEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[LabeledEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the label associated with the 'labeled' event.
 */
def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[LabeledEvent, A] = _root_.caliban.client.SelectionBuilder.Field("label", Obj(innerSelection))
  /**
 * Identifies the `Labelable` associated with the event.
 */
def labelable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[LabeledEvent, A] = _root_.caliban.client.SelectionBuilder.Field("labelable", ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[LabeledEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[LabeledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Identifies the `Labelable` associated with the event.
 */
def labelableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[LabeledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the `Labelable` associated with the event.
 */
def labelableInterface[A](labelable: SelectionBuilder[Labelable, A]): SelectionBuilder[LabeledEvent, A] = _root_.caliban.client.SelectionBuilder.Field("labelable", Obj(labelable))
}


type Language
object Language {
  /**
 * The color defined for the current language.
 */
def color: SelectionBuilder[Language, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("color", OptionOf(Scalar()))
  def id: SelectionBuilder[Language, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the current language.
 */
def name: SelectionBuilder[Language, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
}


type LanguageConnection
object LanguageConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[LanguageEdge, A]): SelectionBuilder[LanguageConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Language, A]): SelectionBuilder[LanguageConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[LanguageConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[LanguageConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * The total size in bytes of files written in that language.
 */
def totalSize: SelectionBuilder[LanguageConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalSize", Scalar())
}


type LanguageEdge
object LanguageEdge {
  def cursor: SelectionBuilder[LanguageEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  def node[A](innerSelection: SelectionBuilder[Language, A]): SelectionBuilder[LanguageEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * The number of bytes of code written in the language.
 */
def size: SelectionBuilder[LanguageEdge, Int] = _root_.caliban.client.SelectionBuilder.Field("size", Scalar())
}


type License
object License {
  /**
 * The full text of the license
 */
def body: SelectionBuilder[License, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The conditions set by the license
 */
def conditions[A](innerSelection: SelectionBuilder[LicenseRule, A]): SelectionBuilder[License, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("conditions", ListOf(OptionOf(Obj(innerSelection))))
  /**
 * A human-readable description of the license
 */
def description: SelectionBuilder[License, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * Whether the license should be featured
 */
def featured: SelectionBuilder[License, Boolean] = _root_.caliban.client.SelectionBuilder.Field("featured", Scalar())
  /**
 * Whether the license should be displayed in license pickers
 */
def hidden: SelectionBuilder[License, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hidden", Scalar())
  def id: SelectionBuilder[License, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Instructions on how to implement the license
 */
def implementation: SelectionBuilder[License, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("implementation", OptionOf(Scalar()))
  /**
 * The lowercased SPDX ID of the license
 */
def key: SelectionBuilder[License, String] = _root_.caliban.client.SelectionBuilder.Field("key", Scalar())
  /**
 * The limitations set by the license
 */
def limitations[A](innerSelection: SelectionBuilder[LicenseRule, A]): SelectionBuilder[License, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("limitations", ListOf(OptionOf(Obj(innerSelection))))
  /**
 * The license full name specified by <https://spdx.org/licenses>
 */
def name: SelectionBuilder[License, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Customary short name if applicable (e.g, GPLv3)
 */
def nickname: SelectionBuilder[License, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("nickname", OptionOf(Scalar()))
  /**
 * The permissions set by the license
 */
def permissions[A](innerSelection: SelectionBuilder[LicenseRule, A]): SelectionBuilder[License, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("permissions", ListOf(OptionOf(Obj(innerSelection))))
  /**
 * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
 */
def pseudoLicense: SelectionBuilder[License, Boolean] = _root_.caliban.client.SelectionBuilder.Field("pseudoLicense", Scalar())
  /**
 * Short identifier specified by <https://spdx.org/licenses>
 */
def spdxId: SelectionBuilder[License, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("spdxId", OptionOf(Scalar()))
  /**
 * URL to the license on <https://choosealicense.com>
 */
def url: SelectionBuilder[License, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
}


type LicenseRule
object LicenseRule {
  /**
 * A description of the rule
 */
def description: SelectionBuilder[LicenseRule, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())
  /**
 * The machine-readable rule key
 */
def key: SelectionBuilder[LicenseRule, String] = _root_.caliban.client.SelectionBuilder.Field("key", Scalar())
  /**
 * The human-readable rule label
 */
def label: SelectionBuilder[LicenseRule, String] = _root_.caliban.client.SelectionBuilder.Field("label", Scalar())
}


type LinkProjectV2ToRepositoryPayload
object LinkProjectV2ToRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[LinkProjectV2ToRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository the project is linked to.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[LinkProjectV2ToRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type LinkProjectV2ToTeamPayload
object LinkProjectV2ToTeamPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[LinkProjectV2ToTeamPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The team the project is linked to
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[LinkProjectV2ToTeamPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
}


type LinkRepositoryToProjectPayload
object LinkRepositoryToProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[LinkRepositoryToProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The linked Project.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[LinkRepositoryToProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  /**
 * The linked Repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[LinkRepositoryToProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type LinkedBranch
object LinkedBranch {
  def id: SelectionBuilder[LinkedBranch, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The branch's ref.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[LinkedBranch, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
}


type LinkedBranchConnection
object LinkedBranchConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[LinkedBranchEdge, A]): SelectionBuilder[LinkedBranchConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[LinkedBranch, A]): SelectionBuilder[LinkedBranchConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[LinkedBranchConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[LinkedBranchConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type LinkedBranchEdge
object LinkedBranchEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[LinkedBranchEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[LinkedBranch, A]): SelectionBuilder[LinkedBranchEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type LockLockablePayload
object LockLockablePayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[LockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[LockLockablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item that was locked.
 */
def lockedRecord[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[LockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("lockedRecord", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[LockLockablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[LockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * The item that was locked.
 */
def lockedRecordOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[LockLockablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("lockedRecord", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The item that was locked.
 */
def lockedRecordInterface[A](lockedRecord: SelectionBuilder[Lockable, A]): SelectionBuilder[LockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("lockedRecord", OptionOf(Obj(lockedRecord)))
}


type LockedEvent
object LockedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[LockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[LockedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[LockedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Reason that the conversation was locked (optional).
 */
def lockReason: SelectionBuilder[LockedEvent, scala.Option[LockReason]] = _root_.caliban.client.SelectionBuilder.Field("lockReason", OptionOf(Scalar()))
  /**
 * Object that was locked.
 */
def lockable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[LockedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("lockable", ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[LockedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[LockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Object that was locked.
 */
def lockableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[LockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("lockable", ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Object that was locked.
 */
def lockableInterface[A](lockable: SelectionBuilder[Lockable, A]): SelectionBuilder[LockedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("lockable", Obj(lockable))
}


type Mannequin
object Mannequin {
  /**
 * A URL pointing to the GitHub App's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Mannequin, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * The user that has claimed the data attributed to this mannequin.
 */
def claimant[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[Mannequin, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("claimant", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Mannequin, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Mannequin, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The mannequin's email on the source instance.
 */
def email: SelectionBuilder[Mannequin, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  def id: SelectionBuilder[Mannequin, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The username of the actor.
 */
def login: SelectionBuilder[Mannequin, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The HTML path to this resource.
 */
def resourcePath: SelectionBuilder[Mannequin, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Mannequin, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The URL to this resource.
 */
def url: SelectionBuilder[Mannequin, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type MannequinConnection
object MannequinConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[MannequinEdge, A]): SelectionBuilder[MannequinConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Mannequin, A]): SelectionBuilder[MannequinConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MannequinConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[MannequinConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type MannequinEdge
object MannequinEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[MannequinEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Mannequin, A]): SelectionBuilder[MannequinEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type MarkDiscussionCommentAsAnswerPayload
object MarkDiscussionCommentAsAnswerPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MarkDiscussionCommentAsAnswerPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion that includes the chosen comment.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[MarkDiscussionCommentAsAnswerPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type MarkFileAsViewedPayload
object MarkFileAsViewedPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MarkFileAsViewedPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated pull request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[MarkFileAsViewedPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type MarkProjectV2AsTemplatePayload
object MarkProjectV2AsTemplatePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MarkProjectV2AsTemplatePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The project.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[MarkProjectV2AsTemplatePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type MarkPullRequestReadyForReviewPayload
object MarkPullRequestReadyForReviewPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MarkPullRequestReadyForReviewPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that is ready for review.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[MarkPullRequestReadyForReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type MarkedAsDuplicateEvent
object MarkedAsDuplicateEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The authoritative issue or pull request which has been duplicated by another.
 */
def canonical[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("canonical", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[MarkedAsDuplicateEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The issue or pull request which has been marked as a duplicate of another.
 */
def duplicate[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("duplicate", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  def id: SelectionBuilder[MarkedAsDuplicateEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Canonical and duplicate belong to different repositories.
 */
def isCrossRepository: SelectionBuilder[MarkedAsDuplicateEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * The authoritative issue or pull request which has been duplicated by another.
 */
def canonicalOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("canonical", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The issue or pull request which has been marked as a duplicate of another.
 */
def duplicateOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("duplicate", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[MarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type MarketplaceCategory
object MarketplaceCategory {
  /**
 * The category's description.
 */
def description: SelectionBuilder[MarketplaceCategory, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The technical description of how apps listed in this category work with GitHub.
 */
def howItWorks: SelectionBuilder[MarketplaceCategory, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("howItWorks", OptionOf(Scalar()))
  def id: SelectionBuilder[MarketplaceCategory, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The category's name.
 */
def name: SelectionBuilder[MarketplaceCategory, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * How many Marketplace listings have this as their primary category.
 */
def primaryListingCount: SelectionBuilder[MarketplaceCategory, Int] = _root_.caliban.client.SelectionBuilder.Field("primaryListingCount", Scalar())
  /**
 * The HTTP path for this Marketplace category.
 */
def resourcePath: SelectionBuilder[MarketplaceCategory, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * How many Marketplace listings have this as their secondary category.
 */
def secondaryListingCount: SelectionBuilder[MarketplaceCategory, Int] = _root_.caliban.client.SelectionBuilder.Field("secondaryListingCount", Scalar())
  /**
 * The short name of the category used in its URL.
 */
def slug: SelectionBuilder[MarketplaceCategory, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * The HTTP URL for this Marketplace category.
 */
def url: SelectionBuilder[MarketplaceCategory, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type MarketplaceListing
object MarketplaceListing {
  /**
 * The GitHub App this listing represents.
 */
def app[A](innerSelection: SelectionBuilder[App, A]): SelectionBuilder[MarketplaceListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("app", OptionOf(Obj(innerSelection)))
  /**
 * URL to the listing owner's company site.
 */
def companyUrl: SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("companyUrl", OptionOf(Scalar()))
  /**
 * The HTTP path for configuring access to the listing's integration or OAuth app
 */
def configurationResourcePath: SelectionBuilder[MarketplaceListing, URI] = _root_.caliban.client.SelectionBuilder.Field("configurationResourcePath", Scalar())
  /**
 * The HTTP URL for configuring access to the listing's integration or OAuth app
 */
def configurationUrl: SelectionBuilder[MarketplaceListing, URI] = _root_.caliban.client.SelectionBuilder.Field("configurationUrl", Scalar())
  /**
 * URL to the listing's documentation.
 */
def documentationUrl: SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("documentationUrl", OptionOf(Scalar()))
  /**
 * The listing's detailed description.
 */
def extendedDescription: SelectionBuilder[MarketplaceListing, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("extendedDescription", OptionOf(Scalar()))
  /**
 * The listing's detailed description rendered to HTML.
 */
def extendedDescriptionHTML: SelectionBuilder[MarketplaceListing, HTML] = _root_.caliban.client.SelectionBuilder.Field("extendedDescriptionHTML", Scalar())
  /**
 * The listing's introductory description.
 */
def fullDescription: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("fullDescription", Scalar())
  /**
 * The listing's introductory description rendered to HTML.
 */
def fullDescriptionHTML: SelectionBuilder[MarketplaceListing, HTML] = _root_.caliban.client.SelectionBuilder.Field("fullDescriptionHTML", Scalar())
  /**
 * Does this listing have any plans with a free trial?
 */
def hasPublishedFreeTrialPlans: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasPublishedFreeTrialPlans", Scalar())
  /**
 * Does this listing have a terms of service link?
 */
def hasTermsOfService: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasTermsOfService", Scalar())
  /**
 * Whether the creator of the app is a verified org
 */
def hasVerifiedOwner: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasVerifiedOwner", Scalar())
  /**
 * A technical description of how this app works with GitHub.
 */
def howItWorks: SelectionBuilder[MarketplaceListing, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("howItWorks", OptionOf(Scalar()))
  /**
 * The listing's technical description rendered to HTML.
 */
def howItWorksHTML: SelectionBuilder[MarketplaceListing, HTML] = _root_.caliban.client.SelectionBuilder.Field("howItWorksHTML", Scalar())
  def id: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * URL to install the product to the viewer's account or organization.
 */
def installationUrl: SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("installationUrl", OptionOf(Scalar()))
  /**
 * Whether this listing's app has been installed for the current viewer
 */
def installedForViewer: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("installedForViewer", Scalar())
  /**
 * Whether this listing has been removed from the Marketplace.
 */
def isArchived: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isArchived", Scalar())
  /**
 * Whether this listing is still an editable draft that has not been submitted
for review and is not publicly visible in the Marketplace.
 */
def isDraft: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDraft", Scalar())
  /**
 * Whether the product this listing represents is available as part of a paid plan.
 */
def isPaid: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPaid", Scalar())
  /**
 * Whether this listing has been approved for display in the Marketplace.
 */
def isPublic: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPublic", Scalar())
  /**
 * Whether this listing has been rejected by GitHub for display in the Marketplace.
 */
def isRejected: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRejected", Scalar())
  /**
 * Whether this listing has been approved for unverified display in the Marketplace.
 */
def isUnverified: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isUnverified", Scalar())
  /**
 * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
 */
def isUnverifiedPending: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isUnverifiedPending", Scalar())
  /**
 * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
 */
def isVerificationPendingFromDraft: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isVerificationPendingFromDraft", Scalar())
  /**
 * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
 */
def isVerificationPendingFromUnverified: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isVerificationPendingFromUnverified", Scalar())
  /**
 * Whether this listing has been approved for verified display in the Marketplace.
 */
def isVerified: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isVerified", Scalar())
  /**
 * The hex color code, without the leading '#', for the logo background.
 */
def logoBackgroundColor: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("logoBackgroundColor", Scalar())
  /**
 * URL for the listing's logo image.
 */
def logoUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("logoUrl", OptionOf(Scalar()), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * The listing's full name.
 */
def name: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The listing's very short description without a trailing period or ampersands.
 */
def normalizedShortDescription: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("normalizedShortDescription", Scalar())
  /**
 * URL to the listing's detailed pricing.
 */
def pricingUrl: SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("pricingUrl", OptionOf(Scalar()))
  /**
 * The category that best describes the listing.
 */
def primaryCategory[A](innerSelection: SelectionBuilder[MarketplaceCategory, A]): SelectionBuilder[MarketplaceListing, A] = _root_.caliban.client.SelectionBuilder.Field("primaryCategory", Obj(innerSelection))
  /**
 * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
 */
def privacyPolicyUrl: SelectionBuilder[MarketplaceListing, URI] = _root_.caliban.client.SelectionBuilder.Field("privacyPolicyUrl", Scalar())
  /**
 * The HTTP path for the Marketplace listing.
 */
def resourcePath: SelectionBuilder[MarketplaceListing, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The URLs for the listing's screenshots.
 */
def screenshotUrls: SelectionBuilder[MarketplaceListing, List[scala.Option[String]]] = _root_.caliban.client.SelectionBuilder.Field("screenshotUrls", ListOf(OptionOf(Scalar())))
  /**
 * An alternate category that describes the listing.
 */
def secondaryCategory[A](innerSelection: SelectionBuilder[MarketplaceCategory, A]): SelectionBuilder[MarketplaceListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("secondaryCategory", OptionOf(Obj(innerSelection)))
  /**
 * The listing's very short description.
 */
def shortDescription: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("shortDescription", Scalar())
  /**
 * The short name of the listing used in its URL.
 */
def slug: SelectionBuilder[MarketplaceListing, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * URL to the listing's status page.
 */
def statusUrl: SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("statusUrl", OptionOf(Scalar()))
  /**
 * An email address for support for this listing's app.
 */
def supportEmail: SelectionBuilder[MarketplaceListing, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("supportEmail", OptionOf(Scalar()))
  /**
 * Either a URL or an email address for support for this listing's app, may
return an empty string for listings that do not require a support URL.
 */
def supportUrl: SelectionBuilder[MarketplaceListing, URI] = _root_.caliban.client.SelectionBuilder.Field("supportUrl", Scalar())
  /**
 * URL to the listing's terms of service.
 */
def termsOfServiceUrl: SelectionBuilder[MarketplaceListing, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("termsOfServiceUrl", OptionOf(Scalar()))
  /**
 * The HTTP URL for the Marketplace listing.
 */
def url: SelectionBuilder[MarketplaceListing, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Can the current viewer add plans for this Marketplace listing.
 */
def viewerCanAddPlans: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanAddPlans", Scalar())
  /**
 * Can the current viewer approve this Marketplace listing.
 */
def viewerCanApprove: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanApprove", Scalar())
  /**
 * Can the current viewer delist this Marketplace listing.
 */
def viewerCanDelist: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelist", Scalar())
  /**
 * Can the current viewer edit this Marketplace listing.
 */
def viewerCanEdit: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanEdit", Scalar())
  /**
 * Can the current viewer edit the primary and secondary category of this
Marketplace listing.
 */
def viewerCanEditCategories: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanEditCategories", Scalar())
  /**
 * Can the current viewer edit the plans for this Marketplace listing.
 */
def viewerCanEditPlans: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanEditPlans", Scalar())
  /**
 * Can the current viewer return this Marketplace listing to draft state
so it becomes editable again.
 */
def viewerCanRedraft: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanRedraft", Scalar())
  /**
 * Can the current viewer reject this Marketplace listing by returning it to
an editable draft state or rejecting it entirely.
 */
def viewerCanReject: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReject", Scalar())
  /**
 * Can the current viewer request this listing be reviewed for display in
the Marketplace as verified.
 */
def viewerCanRequestApproval: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanRequestApproval", Scalar())
  /**
 * Indicates whether the current user has an active subscription to this Marketplace listing.
 */
def viewerHasPurchased: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasPurchased", Scalar())
  /**
 * Indicates if the current user has purchased a subscription to this Marketplace listing
for all of the organizations the user owns.
 */
def viewerHasPurchasedForAllOrganizations: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasPurchasedForAllOrganizations", Scalar())
  /**
 * Does the current viewer role allow them to administer this Marketplace listing.
 */
def viewerIsListingAdmin: SelectionBuilder[MarketplaceListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsListingAdmin", Scalar())
}


type MarketplaceListingConnection
object MarketplaceListingConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[MarketplaceListingEdge, A]): SelectionBuilder[MarketplaceListingConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[MarketplaceListing, A]): SelectionBuilder[MarketplaceListingConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MarketplaceListingConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[MarketplaceListingConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type MarketplaceListingEdge
object MarketplaceListingEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[MarketplaceListingEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[MarketplaceListing, A]): SelectionBuilder[MarketplaceListingEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type MembersCanDeleteReposClearAuditEntry
object MembersCanDeleteReposClearAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type MembersCanDeleteReposDisableAuditEntry
object MembersCanDeleteReposDisableAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type MembersCanDeleteReposEnableAuditEntry
object MembersCanDeleteReposEnableAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type MentionedEvent
object MentionedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MentionedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[MentionedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[MentionedEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[MentionedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MentionedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[MentionedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type MergeBranchPayload
object MergeBranchPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MergeBranchPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The resulting merge Commit.
 */
def mergeCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[MergeBranchPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeCommit", OptionOf(Obj(innerSelection)))
}


type MergePullRequestPayload
object MergePullRequestPayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MergePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MergePullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that was merged.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[MergePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MergePullRequestPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[MergePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type MergeQueue
object MergeQueue {
  /**
 * The configuration for this merge queue
 */
def configuration[A](innerSelection: SelectionBuilder[MergeQueueConfiguration, A]): SelectionBuilder[MergeQueue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("configuration", OptionOf(Obj(innerSelection)))
  /**
 * The entries in the queue
 */
def entries[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[MergeQueueEntryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[MergeQueue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("entries", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  def id: SelectionBuilder[MergeQueue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The estimated time in seconds until a newly added entry would be merged
 */
def nextEntryEstimatedTimeToMerge: SelectionBuilder[MergeQueue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("nextEntryEstimatedTimeToMerge", OptionOf(Scalar()))
  /**
 * The repository this merge queue belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[MergeQueue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The HTTP path for this merge queue
 */
def resourcePath: SelectionBuilder[MergeQueue, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this merge queue
 */
def url: SelectionBuilder[MergeQueue, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type MergeQueueConfiguration
object MergeQueueConfiguration {
  /**
 * The amount of time in minutes to wait for a check response before considering it a failure.
 */
def checkResponseTimeout: SelectionBuilder[MergeQueueConfiguration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("checkResponseTimeout", OptionOf(Scalar()))
  /**
 * The maximum number of entries to build at once.
 */
def maximumEntriesToBuild: SelectionBuilder[MergeQueueConfiguration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("maximumEntriesToBuild", OptionOf(Scalar()))
  /**
 * The maximum number of entries to merge at once.
 */
def maximumEntriesToMerge: SelectionBuilder[MergeQueueConfiguration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("maximumEntriesToMerge", OptionOf(Scalar()))
  /**
 * The merge method to use for this queue.
 */
def mergeMethod: SelectionBuilder[MergeQueueConfiguration, scala.Option[PullRequestMergeMethod]] = _root_.caliban.client.SelectionBuilder.Field("mergeMethod", OptionOf(Scalar()))
  /**
 * The strategy to use when merging entries.
 */
def mergingStrategy: SelectionBuilder[MergeQueueConfiguration, scala.Option[MergeQueueMergingStrategy]] = _root_.caliban.client.SelectionBuilder.Field("mergingStrategy", OptionOf(Scalar()))
  /**
 * The minimum number of entries required to merge at once.
 */
def minimumEntriesToMerge: SelectionBuilder[MergeQueueConfiguration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("minimumEntriesToMerge", OptionOf(Scalar()))
  /**
 * The amount of time in minutes to wait before ignoring the minumum number of
entries in the queue requirement and merging a collection of entries
 */
def minimumEntriesToMergeWaitTime: SelectionBuilder[MergeQueueConfiguration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("minimumEntriesToMergeWaitTime", OptionOf(Scalar()))
}


type MergeQueueEntry
object MergeQueueEntry {
  /**
 * The base commit for this entry
 */
def baseCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[MergeQueueEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("baseCommit", OptionOf(Obj(innerSelection)))
  /**
 * The date and time this entry was added to the merge queue
 */
def enqueuedAt: SelectionBuilder[MergeQueueEntry, DateTime] = _root_.caliban.client.SelectionBuilder.Field("enqueuedAt", Scalar())
  /**
 * The actor that enqueued this entry
 */
def enqueuer[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MergeQueueEntry, A] = _root_.caliban.client.SelectionBuilder.Field("enqueuer", ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The estimated time in seconds until this entry will be merged
 */
def estimatedTimeToMerge: SelectionBuilder[MergeQueueEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("estimatedTimeToMerge", OptionOf(Scalar()))
  /**
 * The head commit for this entry
 */
def headCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[MergeQueueEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headCommit", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[MergeQueueEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this pull request should jump the queue
 */
def jump: SelectionBuilder[MergeQueueEntry, Boolean] = _root_.caliban.client.SelectionBuilder.Field("jump", Scalar())
  /**
 * The merge queue that this entry belongs to
 */
def mergeQueue[A](innerSelection: SelectionBuilder[MergeQueue, A]): SelectionBuilder[MergeQueueEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueue", OptionOf(Obj(innerSelection)))
  /**
 * The position of this entry in the queue
 */
def position: SelectionBuilder[MergeQueueEntry, Int] = _root_.caliban.client.SelectionBuilder.Field("position", Scalar())
  /**
 * The pull request that will be added to a merge group
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[MergeQueueEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Does this pull request need to be deployed on its own
 */
def solo: SelectionBuilder[MergeQueueEntry, Boolean] = _root_.caliban.client.SelectionBuilder.Field("solo", Scalar())
  /**
 * The state of this entry in the queue
 */
def state: SelectionBuilder[MergeQueueEntry, MergeQueueEntryState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The actor that enqueued this entry
 */
def enqueuerOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MergeQueueEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enqueuer", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor that enqueued this entry
 */
def enqueuerInterface[A](enqueuer: SelectionBuilder[Actor, A]): SelectionBuilder[MergeQueueEntry, A] = _root_.caliban.client.SelectionBuilder.Field("enqueuer", Obj(enqueuer))
}


type MergeQueueEntryConnection
object MergeQueueEntryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[MergeQueueEntryEdge, A]): SelectionBuilder[MergeQueueEntryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[MergeQueueEntry, A]): SelectionBuilder[MergeQueueEntryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MergeQueueEntryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[MergeQueueEntryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type MergeQueueEntryEdge
object MergeQueueEntryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[MergeQueueEntryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[MergeQueueEntry, A]): SelectionBuilder[MergeQueueEntryEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type MergedEvent
object MergedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MergedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the commit associated with the `merge` event.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[MergedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[MergedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[MergedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the Ref associated with the `merge` event.
 */
def mergeRef[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[MergedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeRef", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the name of the Ref associated with the `merge` event.
 */
def mergeRefName: SelectionBuilder[MergedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("mergeRefName", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[MergedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The HTTP path for this merged event.
 */
def resourcePath: SelectionBuilder[MergedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this merged event.
 */
def url: SelectionBuilder[MergedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MergedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[MergedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type MigrationSource
object MigrationSource {
  def id: SelectionBuilder[MigrationSource, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The migration source name.
 */
def name: SelectionBuilder[MigrationSource, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The migration source type.
 */
def `type`: SelectionBuilder[MigrationSource, MigrationSourceType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  /**
 * The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
 */
def url: SelectionBuilder[MigrationSource, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type Milestone
object Milestone {
  /**
 * Indicates if the object is closed (definition of closed may depend on type)
 */
def closed: SelectionBuilder[Milestone, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[Milestone, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Milestone, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the actor who created the milestone.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Milestone, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the description of the milestone.
 */
def description: SelectionBuilder[Milestone, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * Identifies the due date of the milestone.
 */
def dueOn: SelectionBuilder[Milestone, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("dueOn", OptionOf(Scalar()))
  def id: SelectionBuilder[Milestone, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * A list of issues associated with the milestone.
 */
def issues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[IssueFilters] = None, first : scala.Option[Int] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[IssueState]] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[IssueFilters]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[String]]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[IssueOrder]], encoder7: ArgEncoder[scala.Option[List[IssueState]]]): SelectionBuilder[Milestone, A] = _root_.caliban.client.SelectionBuilder.Field("issues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "IssueFilters")(encoder2), Argument("first", first, "Int")(encoder3), Argument("labels", labels, "[String!]")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "IssueOrder")(encoder6), Argument("states", states, "[IssueState!]")(encoder7)))
  /**
 * Identifies the number of the milestone.
 */
def number: SelectionBuilder[Milestone, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * Identifies the percentage complete for the milestone
 */
def progressPercentage: SelectionBuilder[Milestone, Double] = _root_.caliban.client.SelectionBuilder.Field("progressPercentage", Scalar())
  /**
 * A list of pull requests associated with the milestone.
 */
def pullRequests[A](after : scala.Option[String] = None, baseRefName : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, headRefName : scala.Option[String] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[PullRequestState]] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[IssueOrder]], encoder8: ArgEncoder[scala.Option[List[PullRequestState]]]): SelectionBuilder[Milestone, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequests", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("baseRefName", baseRefName, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("headRefName", headRefName, "String")(encoder4), Argument("labels", labels, "[String!]")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "IssueOrder")(encoder7), Argument("states", states, "[PullRequestState!]")(encoder8)))
  /**
 * The repository associated with this milestone.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Milestone, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this milestone
 */
def resourcePath: SelectionBuilder[Milestone, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the state of the milestone.
 */
def state: SelectionBuilder[Milestone, MilestoneState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * Identifies the title of the milestone.
 */
def title: SelectionBuilder[Milestone, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Milestone, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this milestone
 */
def url: SelectionBuilder[Milestone, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[Milestone, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[Milestone, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
  /**
 * Identifies the actor who created the milestone.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Milestone, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who created the milestone.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[Milestone, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type MilestoneConnection
object MilestoneConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[MilestoneEdge, A]): SelectionBuilder[MilestoneConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[MilestoneConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[MilestoneConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[MilestoneConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type MilestoneEdge
object MilestoneEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[MilestoneEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[MilestoneEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type MilestonedEvent
object MilestonedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MilestonedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[MilestonedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[MilestonedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the milestone title associated with the 'milestoned' event.
 */
def milestoneTitle: SelectionBuilder[MilestonedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("milestoneTitle", Scalar())
  /**
 * Object referenced by event.
 */
def subject[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[MilestonedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Object referenced by event.
 */
def subjectOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[MilestonedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MilestonedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[MilestonedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type MinimizeCommentPayload
object MinimizeCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MinimizeCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The comment that was minimized.
 */
def minimizedComment[A](onCommitComment: SelectionBuilder[CommitComment, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onGistComment: SelectionBuilder[GistComment, A], onIssueComment: SelectionBuilder[IssueComment, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[MinimizeCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("minimizedComment", OptionOf(ChoiceOf(Map("CommitComment" -> Obj(onCommitComment), "DiscussionComment" -> Obj(onDiscussionComment), "GistComment" -> Obj(onGistComment), "IssueComment" -> Obj(onIssueComment), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment)))))
  /**
 * The comment that was minimized.
 */
def minimizedCommentOption[A](onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onGistComment: scala.Option[SelectionBuilder[GistComment, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None): SelectionBuilder[MinimizeCommentPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("minimizedComment", OptionOf(ChoiceOf(Map("CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "GistComment" -> onGistComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The comment that was minimized.
 */
def minimizedCommentInterface[A](minimizedComment: SelectionBuilder[Minimizable, A]): SelectionBuilder[MinimizeCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("minimizedComment", OptionOf(Obj(minimizedComment)))
}


type MoveProjectCardPayload
object MoveProjectCardPayload {
  /**
 * The new edge of the moved card.
 */
def cardEdge[A](innerSelection: SelectionBuilder[ProjectCardEdge, A]): SelectionBuilder[MoveProjectCardPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("cardEdge", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MoveProjectCardPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type MoveProjectColumnPayload
object MoveProjectColumnPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[MoveProjectColumnPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new edge of the moved column.
 */
def columnEdge[A](innerSelection: SelectionBuilder[ProjectColumnEdge, A]): SelectionBuilder[MoveProjectColumnPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("columnEdge", OptionOf(Obj(innerSelection)))
}


type MovedColumnsInProjectEvent
object MovedColumnsInProjectEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[MovedColumnsInProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[MovedColumnsInProjectEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[MovedColumnsInProjectEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[MovedColumnsInProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Column name the issue or pull request was moved from.
 */
def previousProjectColumnName: SelectionBuilder[MovedColumnsInProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("previousProjectColumnName", Scalar())
  /**
 * Project referenced by event.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[MovedColumnsInProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  /**
 * Project card referenced by this project event.
 */
def projectCard[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[MovedColumnsInProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectCard", OptionOf(Obj(innerSelection)))
  /**
 * Column name the issue or pull request was moved to.
 */
def projectColumnName: SelectionBuilder[MovedColumnsInProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("projectColumnName", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[MovedColumnsInProjectEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[MovedColumnsInProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type OIDCProvider
object OIDCProvider {
  /**
 * The enterprise this identity provider belongs to.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[OIDCProvider, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * ExternalIdentities provisioned by this identity provider.
 */
def externalIdentities[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, login : scala.Option[String] = None, membersOnly : scala.Option[Boolean] = None, userName : scala.Option[String] = None)(innerSelection: SelectionBuilder[ExternalIdentityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[OIDCProvider, A] = _root_.caliban.client.SelectionBuilder.Field("externalIdentities", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("login", login, "String")(encoder4), Argument("membersOnly", membersOnly, "Boolean")(encoder5), Argument("userName", userName, "String")(encoder6)))
  def id: SelectionBuilder[OIDCProvider, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The OIDC identity provider type
 */
def providerType: SelectionBuilder[OIDCProvider, OIDCProviderType] = _root_.caliban.client.SelectionBuilder.Field("providerType", Scalar())
  /**
 * The id of the tenant this provider is attached to
 */
def tenantId: SelectionBuilder[OIDCProvider, String] = _root_.caliban.client.SelectionBuilder.Field("tenantId", Scalar())
}


type OauthApplicationCreateAuditEntry
object OauthApplicationCreateAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OauthApplicationCreateAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The application URL of the OAuth Application.
 */
def applicationUrl: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("applicationUrl", OptionOf(Scalar()))
  /**
 * The callback URL of the OAuth Application.
 */
def callbackUrl: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("callbackUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OauthApplicationCreateAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OauthApplicationCreateAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the OAuth Application.
 */
def oauthApplicationName: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the OAuth Application
 */
def oauthApplicationResourcePath: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the OAuth Application
 */
def oauthApplicationUrl: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationUrl", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The rate limit of the OAuth Application.
 */
def rateLimit: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("rateLimit", OptionOf(Scalar()))
  /**
 * The state of the OAuth Application.
 */
def state: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[OauthApplicationCreateAuditEntryState]] = _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OauthApplicationCreateAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgAddBillingManagerAuditEntry
object OrgAddBillingManagerAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgAddBillingManagerAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgAddBillingManagerAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgAddBillingManagerAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The email address used to invite a billing manager for the organization.
 */
def invitationEmail: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("invitationEmail", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgAddBillingManagerAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgAddMemberAuditEntry
object OrgAddMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgAddMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgAddMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgAddMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The permission level of the member added to the organization.
 */
def permission: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[OrgAddMemberAuditEntryPermission]] = _root_.caliban.client.SelectionBuilder.Field("permission", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgAddMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgBlockUserAuditEntry
object OrgBlockUserAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgBlockUserAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The blocked user.
 */
def blockedUser[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("blockedUser", OptionOf(Obj(innerSelection)))
  /**
 * The username of the blocked user.
 */
def blockedUserName: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("blockedUserName", OptionOf(Scalar()))
  /**
 * The HTTP path for the blocked user.
 */
def blockedUserResourcePath: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("blockedUserResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the blocked user.
 */
def blockedUserUrl: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("blockedUserUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgBlockUserAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgBlockUserAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgBlockUserAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgConfigDisableCollaboratorsOnlyAuditEntry
object OrgConfigDisableCollaboratorsOnlyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgConfigEnableCollaboratorsOnlyAuditEntry
object OrgConfigEnableCollaboratorsOnlyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgCreateAuditEntry
object OrgCreateAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgCreateAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The billing plan for the Organization.
 */
def billingPlan: SelectionBuilder[OrgCreateAuditEntry, scala.Option[OrgCreateAuditEntryBillingPlan]] = _root_.caliban.client.SelectionBuilder.Field("billingPlan", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgCreateAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgCreateAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgCreateAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgCreateAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgDisableOauthAppRestrictionsAuditEntry
object OrgDisableOauthAppRestrictionsAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgDisableSamlAuditEntry
object OrgDisableSamlAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgDisableSamlAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgDisableSamlAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The SAML provider's digest algorithm URL.
 */
def digestMethodUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("digestMethodUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[OrgDisableSamlAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The SAML provider's issuer URL.
 */
def issuerUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("issuerUrl", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The SAML provider's signature algorithm URL.
 */
def signatureMethodUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("signatureMethodUrl", OptionOf(Scalar()))
  /**
 * The SAML provider's single sign-on URL.
 */
def singleSignOnUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("singleSignOnUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgDisableSamlAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgDisableTwoFactorRequirementAuditEntry
object OrgDisableTwoFactorRequirementAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgEnableOauthAppRestrictionsAuditEntry
object OrgEnableOauthAppRestrictionsAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgEnableSamlAuditEntry
object OrgEnableSamlAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgEnableSamlAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgEnableSamlAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The SAML provider's digest algorithm URL.
 */
def digestMethodUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("digestMethodUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[OrgEnableSamlAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The SAML provider's issuer URL.
 */
def issuerUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("issuerUrl", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The SAML provider's signature algorithm URL.
 */
def signatureMethodUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("signatureMethodUrl", OptionOf(Scalar()))
  /**
 * The SAML provider's single sign-on URL.
 */
def singleSignOnUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("singleSignOnUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgEnableSamlAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgEnableTwoFactorRequirementAuditEntry
object OrgEnableTwoFactorRequirementAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgInviteMemberAuditEntry
object OrgInviteMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgInviteMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgInviteMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The email address of the organization invitation.
 */
def email: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  def id: SelectionBuilder[OrgInviteMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The organization invitation.
 */
def organizationInvitation[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organizationInvitation", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgInviteMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgInviteToBusinessAuditEntry
object OrgInviteToBusinessAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgInviteToBusinessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgInviteToBusinessAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[OrgInviteToBusinessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgInviteToBusinessAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgOauthAppAccessApprovedAuditEntry
object OrgOauthAppAccessApprovedAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the OAuth Application.
 */
def oauthApplicationName: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the OAuth Application
 */
def oauthApplicationResourcePath: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the OAuth Application
 */
def oauthApplicationUrl: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationUrl", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgOauthAppAccessDeniedAuditEntry
object OrgOauthAppAccessDeniedAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the OAuth Application.
 */
def oauthApplicationName: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the OAuth Application
 */
def oauthApplicationResourcePath: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the OAuth Application
 */
def oauthApplicationUrl: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationUrl", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgOauthAppAccessRequestedAuditEntry
object OrgOauthAppAccessRequestedAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the OAuth Application.
 */
def oauthApplicationName: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the OAuth Application
 */
def oauthApplicationResourcePath: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the OAuth Application
 */
def oauthApplicationUrl: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("oauthApplicationUrl", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgRemoveBillingManagerAuditEntry
object OrgRemoveBillingManagerAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The reason for the billing manager being removed.
 */
def reason: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[OrgRemoveBillingManagerAuditEntryReason]] = _root_.caliban.client.SelectionBuilder.Field("reason", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgRemoveMemberAuditEntry
object OrgRemoveMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgRemoveMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgRemoveMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgRemoveMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The types of membership the member has with the organization.
 */
def membershipTypes: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[List[OrgRemoveMemberAuditEntryMembershipType]]] = _root_.caliban.client.SelectionBuilder.Field("membershipTypes", OptionOf(ListOf(Scalar())))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The reason for the member being removed.
 */
def reason: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[OrgRemoveMemberAuditEntryReason]] = _root_.caliban.client.SelectionBuilder.Field("reason", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgRemoveMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgRemoveOutsideCollaboratorAuditEntry
object OrgRemoveOutsideCollaboratorAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The types of membership the outside collaborator has with the organization.
 */
def membershipTypes: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[List[OrgRemoveOutsideCollaboratorAuditEntryMembershipType]]] = _root_.caliban.client.SelectionBuilder.Field("membershipTypes", OptionOf(ListOf(Scalar())))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The reason for the outside collaborator being removed from the Organization.
 */
def reason: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[OrgRemoveOutsideCollaboratorAuditEntryReason]] = _root_.caliban.client.SelectionBuilder.Field("reason", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgRestoreMemberAuditEntry
object OrgRestoreMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgRestoreMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgRestoreMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgRestoreMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The number of custom email routings for the restored member.
 */
def restoredCustomEmailRoutingsCount: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("restoredCustomEmailRoutingsCount", OptionOf(Scalar()))
  /**
 * The number of issue assignments for the restored member.
 */
def restoredIssueAssignmentsCount: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("restoredIssueAssignmentsCount", OptionOf(Scalar()))
  /**
 * Restored organization membership objects.
 */
def restoredMemberships[A](onOrgRestoreMemberMembershipOrganizationAuditEntryData: SelectionBuilder[OrgRestoreMemberMembershipOrganizationAuditEntryData, A], onOrgRestoreMemberMembershipRepositoryAuditEntryData: SelectionBuilder[OrgRestoreMemberMembershipRepositoryAuditEntryData, A], onOrgRestoreMemberMembershipTeamAuditEntryData: SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, A]): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("restoredMemberships", OptionOf(ListOf(ChoiceOf(Map("OrgRestoreMemberMembershipOrganizationAuditEntryData" -> Obj(onOrgRestoreMemberMembershipOrganizationAuditEntryData), "OrgRestoreMemberMembershipRepositoryAuditEntryData" -> Obj(onOrgRestoreMemberMembershipRepositoryAuditEntryData), "OrgRestoreMemberMembershipTeamAuditEntryData" -> Obj(onOrgRestoreMemberMembershipTeamAuditEntryData))))))
  /**
 * The number of restored memberships.
 */
def restoredMembershipsCount: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("restoredMembershipsCount", OptionOf(Scalar()))
  /**
 * The number of repositories of the restored member.
 */
def restoredRepositoriesCount: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("restoredRepositoriesCount", OptionOf(Scalar()))
  /**
 * The number of starred repositories for the restored member.
 */
def restoredRepositoryStarsCount: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("restoredRepositoryStarsCount", OptionOf(Scalar()))
  /**
 * The number of watched repositories for the restored member.
 */
def restoredRepositoryWatchesCount: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("restoredRepositoryWatchesCount", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Restored organization membership objects.
 */
def restoredMembershipsOption[A](onOrgRestoreMemberMembershipOrganizationAuditEntryData: scala.Option[SelectionBuilder[OrgRestoreMemberMembershipOrganizationAuditEntryData, A]] = None, onOrgRestoreMemberMembershipRepositoryAuditEntryData: scala.Option[SelectionBuilder[OrgRestoreMemberMembershipRepositoryAuditEntryData, A]] = None, onOrgRestoreMemberMembershipTeamAuditEntryData: scala.Option[SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, A]] = None): SelectionBuilder[OrgRestoreMemberAuditEntry, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("restoredMemberships", OptionOf(ListOf(ChoiceOf(Map("OrgRestoreMemberMembershipOrganizationAuditEntryData" -> onOrgRestoreMemberMembershipOrganizationAuditEntryData.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberMembershipRepositoryAuditEntryData" -> onOrgRestoreMemberMembershipRepositoryAuditEntryData.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberMembershipTeamAuditEntryData" -> onOrgRestoreMemberMembershipTeamAuditEntryData.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))))
}


type OrgRestoreMemberMembershipOrganizationAuditEntryData
object OrgRestoreMemberMembershipOrganizationAuditEntryData {
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgRestoreMemberMembershipOrganizationAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgRestoreMemberMembershipOrganizationAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgRestoreMemberMembershipOrganizationAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgRestoreMemberMembershipOrganizationAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
}


type OrgRestoreMemberMembershipRepositoryAuditEntryData
object OrgRestoreMemberMembershipRepositoryAuditEntryData {
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[OrgRestoreMemberMembershipRepositoryAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[OrgRestoreMemberMembershipRepositoryAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[OrgRestoreMemberMembershipRepositoryAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[OrgRestoreMemberMembershipRepositoryAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
}


type OrgRestoreMemberMembershipTeamAuditEntryData
object OrgRestoreMemberMembershipTeamAuditEntryData {
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
}


type OrgUnblockUserAuditEntry
object OrgUnblockUserAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgUnblockUserAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The user being unblocked by the organization.
 */
def blockedUser[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("blockedUser", OptionOf(Obj(innerSelection)))
  /**
 * The username of the blocked user.
 */
def blockedUserName: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("blockedUserName", OptionOf(Scalar()))
  /**
 * The HTTP path for the blocked user.
 */
def blockedUserResourcePath: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("blockedUserResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the blocked user.
 */
def blockedUserUrl: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("blockedUserUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgUnblockUserAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgUnblockUserAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgUnblockUserAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgUpdateDefaultRepositoryPermissionAuditEntry
object OrgUpdateDefaultRepositoryPermissionAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The new base repository permission level for the organization.
 */
def permission: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission]] = _root_.caliban.client.SelectionBuilder.Field("permission", OptionOf(Scalar()))
  /**
 * The former base repository permission level for the organization.
 */
def permissionWas: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission]] = _root_.caliban.client.SelectionBuilder.Field("permissionWas", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgUpdateMemberAuditEntry
object OrgUpdateMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgUpdateMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgUpdateMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgUpdateMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The new member permission level for the organization.
 */
def permission: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[OrgUpdateMemberAuditEntryPermission]] = _root_.caliban.client.SelectionBuilder.Field("permission", OptionOf(Scalar()))
  /**
 * The former member permission level for the organization.
 */
def permissionWas: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[OrgUpdateMemberAuditEntryPermission]] = _root_.caliban.client.SelectionBuilder.Field("permissionWas", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgUpdateMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgUpdateMemberRepositoryCreationPermissionAuditEntry
object OrgUpdateMemberRepositoryCreationPermissionAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * Can members create repositories in the organization.
 */
def canCreateRepositories: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("canCreateRepositories", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The permission for visibility level of repositories for this organization.
 */
def visibility: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry
object OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * Can outside collaborators be invited to repositories in the organization.
 */
def canInviteOutsideCollaboratorsToRepositories: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("canInviteOutsideCollaboratorsToRepositories", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type Organization
object Organization {
  /**
 * The text of the announcement
 */
def announcement: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("announcement", OptionOf(Scalar()))
  /**
 * The expiration date of the announcement, if any
 */
def announcementExpiresAt: SelectionBuilder[Organization, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("announcementExpiresAt", OptionOf(Scalar()))
  /**
 * Whether the announcement can be dismissed by the user
 */
def announcementUserDismissible: SelectionBuilder[Organization, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("announcementUserDismissible", OptionOf(Scalar()))
  /**
 * Determine if this repository owner has any items that can be pinned to their profile.
 */
def anyPinnableItems(`type` : scala.Option[PinnableItemType] = None)(implicit encoder0: ArgEncoder[scala.Option[PinnableItemType]]): SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("anyPinnableItems", Scalar(), arguments = List(Argument("type", `type`, "PinnableItemType")(encoder0)))
  /**
 * Audit log entries of the organization
 */
def auditLog[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[AuditLogOrder] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[OrganizationAuditEntryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[AuditLogOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("auditLog", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "AuditLogOrder")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * A URL pointing to the organization's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Organization, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Organization, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The organization's public profile description.
 */
def description: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The organization's public profile description rendered to HTML.
 */
def descriptionHTML: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("descriptionHTML", OptionOf(Scalar()))
  /**
 * A list of domains owned by the organization.
 */
def domains[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isApproved : scala.Option[Boolean] = None, isVerified : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[VerifiableDomainOrder] = None)(innerSelection: SelectionBuilder[VerifiableDomainConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[VerifiableDomainOrder]]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("domains", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("isApproved", isApproved, "Boolean")(encoder3), Argument("isVerified", isVerified, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "VerifiableDomainOrder")(encoder6)))
  /**
 * The organization's public email.
 */
def email: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  /**
 * A list of owners of the organization's enterprise account.
 */
def enterpriseOwners[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrgEnterpriseOwnerOrder] = None, organizationRole : scala.Option[RoleInOrganization] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[OrganizationEnterpriseOwnerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrgEnterpriseOwnerOrder]], encoder5: ArgEncoder[scala.Option[RoleInOrganization]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("enterpriseOwners", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrgEnterpriseOwnerOrder")(encoder4), Argument("organizationRole", organizationRole, "RoleInOrganization")(encoder5), Argument("query", query, "String")(encoder6)))
  /**
 * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
 */
def estimatedNextSponsorsPayoutInCents: SelectionBuilder[Organization, Int] = _root_.caliban.client.SelectionBuilder.Field("estimatedNextSponsorsPayoutInCents", Scalar())
  /**
 * True if this user/organization has a GitHub Sponsors listing.
 */
def hasSponsorsListing: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasSponsorsListing", Scalar())
  def id: SelectionBuilder[Organization, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The interaction ability settings for this organization.
 */
def interactionAbility[A](innerSelection: SelectionBuilder[RepositoryInteractionAbility, A]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("interactionAbility", OptionOf(Obj(innerSelection)))
  /**
 * The setting value for whether the organization has an IP allow list enabled.
 */
def ipAllowListEnabledSetting: SelectionBuilder[Organization, IpAllowListEnabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEnabledSetting", Scalar())
  /**
 * The IP addresses that are allowed to access resources owned by the organization.
 */
def ipAllowListEntries[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IpAllowListEntryOrder] = None)(innerSelection: SelectionBuilder[IpAllowListEntryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IpAllowListEntryOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEntries", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IpAllowListEntryOrder")(encoder4)))
  /**
 * The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled.
 */
def ipAllowListForInstalledAppsEnabledSetting: SelectionBuilder[Organization, IpAllowListForInstalledAppsEnabledSettingValue] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListForInstalledAppsEnabledSetting", Scalar())
  /**
 * Whether the given account is sponsoring this user/organization.
 */
def isSponsoredBy(accountLogin : String)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSponsoredBy", Scalar(), arguments = List(Argument("accountLogin", accountLogin, "String!")(encoder0)))
  /**
 * True if the viewer is sponsored by this user/organization.
 */
def isSponsoringViewer: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSponsoringViewer", Scalar())
  /**
 * Whether the organization has verified its profile email and website.
 */
def isVerified: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isVerified", Scalar())
  /**
 * Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity.
 */
def itemShowcase[A](innerSelection: SelectionBuilder[ProfileItemShowcase, A]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("itemShowcase", Obj(innerSelection))
  /**
 * The organization's public profile location.
 */
def location: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))
  /**
 * The organization's login name.
 */
def login: SelectionBuilder[Organization, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * A list of all mannequins for this organization.
 */
def mannequins[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[MannequinOrder] = None)(innerSelection: SelectionBuilder[MannequinConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[MannequinOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("mannequins", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "MannequinOrder")(encoder4)))
  /**
 * Get the status messages members of this entity have set that are either public or visible only to the organization.
 */
def memberStatuses[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[UserStatusOrder] = None)(innerSelection: SelectionBuilder[UserStatusConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[UserStatusOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("memberStatuses", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "UserStatusOrder")(encoder4)))
  /**
 * Members can fork private repositories in this organization
 */
def membersCanForkPrivateRepositories: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("membersCanForkPrivateRepositories", Scalar())
  /**
 * A list of users who are members of this organization.
 */
def membersWithRole[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[OrganizationMemberConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("membersWithRole", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
 */
def monthlyEstimatedSponsorsIncomeInCents: SelectionBuilder[Organization, Int] = _root_.caliban.client.SelectionBuilder.Field("monthlyEstimatedSponsorsIncomeInCents", Scalar())
  /**
 * The organization's public profile name.
 */
def name: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * The HTTP path creating a new team
 */
def newTeamResourcePath: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("newTeamResourcePath", Scalar())
  /**
 * The HTTP URL creating a new team
 */
def newTeamUrl: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("newTeamUrl", Scalar())
  /**
 * Indicates if email notification delivery for this organization is restricted to verified or approved domains.
 */
def notificationDeliveryRestrictionEnabledSetting: SelectionBuilder[Organization, NotificationRestrictionSettingValue] = _root_.caliban.client.SelectionBuilder.Field("notificationDeliveryRestrictionEnabledSetting", Scalar())
  /**
 * The billing email for the organization.
 */
def organizationBillingEmail: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationBillingEmail", OptionOf(Scalar()))
  /**
 * A list of packages under the owner.
 */
def packages[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, names : scala.Option[List[scala.Option[String]]] = None, orderBy : scala.Option[PackageOrder] = None, packageType : scala.Option[PackageType] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[PackageConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[scala.Option[String]]]], encoder5: ArgEncoder[scala.Option[PackageOrder]], encoder6: ArgEncoder[scala.Option[PackageType]], encoder7: ArgEncoder[scala.Option[String]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("packages", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("names", names, "[String]")(encoder4), Argument("orderBy", orderBy, "PackageOrder")(encoder5), Argument("packageType", packageType, "PackageType")(encoder6), Argument("repositoryId", repositoryId, "ID")(encoder7)))
  /**
 * A list of users who have been invited to join this organization.
 */
def pendingMembers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("pendingMembers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of repositories and gists this profile owner can pin to their profile.
 */
def pinnableItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, types : scala.Option[List[PinnableItemType]] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[PinnableItemType]]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("pinnableItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("types", types, "[PinnableItemType!]")(encoder4)))
  /**
 * A list of repositories and gists this profile owner has pinned to their profile
 */
def pinnedItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, types : scala.Option[List[PinnableItemType]] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[PinnableItemType]]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("types", types, "[PinnableItemType!]")(encoder4)))
  /**
 * Returns how many more items this profile owner can pin to their profile.
 */
def pinnedItemsRemaining: SelectionBuilder[Organization, Int] = _root_.caliban.client.SelectionBuilder.Field("pinnedItemsRemaining", Scalar())
  /**
 * Find project by number.
 */
def project[A](number : Int)(innerSelection: SelectionBuilder[Project, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Find a project by number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectOrder] = None, search : scala.Option[String] = None, states : scala.Option[List[ProjectState]] = None)(innerSelection: SelectionBuilder[ProjectConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[List[ProjectState]]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("projects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectOrder")(encoder4), Argument("search", search, "String")(encoder5), Argument("states", states, "[ProjectState!]")(encoder6)))
  /**
 * The HTTP path listing organization's projects
 */
def projectsResourcePath: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsResourcePath", Scalar())
  /**
 * The HTTP URL listing organization's projects
 */
def projectsUrl: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsUrl", Scalar())
  /**
 * A list of projects under the owner.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2Order]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2Order")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * Recent projects that this user has modified in the context of the owner.
 */
def recentProjects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("recentProjects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of repositories that the user owns.
 */
def repositories[A](affiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isFork : scala.Option[Boolean] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, ownerAffiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, privacy : scala.Option[RepositoryPrivacy] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[RepositoryOrder]], encoder8: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder9: ArgEncoder[scala.Option[RepositoryPrivacy]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("affiliations", affiliations, "[RepositoryAffiliation]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("isFork", isFork, "Boolean")(encoder4), Argument("isLocked", isLocked, "Boolean")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "RepositoryOrder")(encoder7), Argument("ownerAffiliations", ownerAffiliations, "[RepositoryAffiliation]")(encoder8), Argument("privacy", privacy, "RepositoryPrivacy")(encoder9)))
  /**
 * Find Repository.
 */
def repository[A](followRenames : scala.Option[Boolean] = None, name : String)(innerSelection: SelectionBuilder[Repository, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[String]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)), arguments = List(Argument("followRenames", followRenames, "Boolean")(encoder0), Argument("name", name, "String!")(encoder1)))
  /**
 * Discussion comments this user has authored.
 */
def repositoryDiscussionComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, onlyAnswers : scala.Option[Boolean] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[DiscussionCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryDiscussionComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("onlyAnswers", onlyAnswers, "Boolean")(encoder4), Argument("repositoryId", repositoryId, "ID")(encoder5)))
  /**
 * Discussions this user has started.
 */
def repositoryDiscussions[A](after : scala.Option[String] = None, answered : scala.Option[Boolean] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DiscussionOrder] = None, repositoryId : scala.Option[String] = None, states : scala.Option[List[DiscussionState]] = None)(innerSelection: SelectionBuilder[DiscussionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[Boolean]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DiscussionOrder]], encoder6: ArgEncoder[scala.Option[String]], encoder7: ArgEncoder[scala.Option[List[DiscussionState]]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryDiscussions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("answered", answered, "Boolean")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "DiscussionOrder")(encoder5), Argument("repositoryId", repositoryId, "ID")(encoder6), Argument("states", states, "[DiscussionState!]")(encoder7)))
  /**
 * A list of all repository migrations for this organization.
 */
def repositoryMigrations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryMigrationOrder] = None, repositoryName : scala.Option[String] = None, state : scala.Option[MigrationState] = None)(innerSelection: SelectionBuilder[RepositoryMigrationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[RepositoryMigrationOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[MigrationState]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryMigrations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "RepositoryMigrationOrder")(encoder4), Argument("repositoryName", repositoryName, "String")(encoder5), Argument("state", state, "MigrationState")(encoder6)))
  /**
 * When true the organization requires all members, billing managers, and outside
collaborators to enable two-factor authentication.
 */
def requiresTwoFactorAuthentication: SelectionBuilder[Organization, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("requiresTwoFactorAuthentication", OptionOf(Scalar()))
  /**
 * The HTTP path for this organization.
 */
def resourcePath: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Returns a single ruleset from the current organization by ID.
 */
def ruleset[A](databaseId : Int)(innerSelection: SelectionBuilder[RepositoryRuleset, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ruleset", OptionOf(Obj(innerSelection)), arguments = List(Argument("databaseId", databaseId, "Int!")(encoder0)))
  /**
 * A list of rulesets for this organization.
 */
def rulesets[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeParents : scala.Option[Boolean] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[RepositoryRulesetConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("rulesets", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("includeParents", includeParents, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * The Organization's SAML identity provider. Visible to (1) organization owners,
(2) organization owners' personal access tokens (classic) with read:org or
admin:org scope, (3) GitHub App with an installation token with read or write
access to members.
 */
def samlIdentityProvider[A](innerSelection: SelectionBuilder[OrganizationIdentityProvider, A]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("samlIdentityProvider", OptionOf(Obj(innerSelection)))
  /**
 * List of users and organizations this entity is sponsoring.
 */
def sponsoring[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorOrder] = None)(innerSelection: SelectionBuilder[SponsorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("sponsoring", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorOrder")(encoder4)))
  /**
 * List of sponsors for this user or organization.
 */
def sponsors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorOrder] = None, tierId : scala.Option[String] = None)(innerSelection: SelectionBuilder[SponsorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("sponsors", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorOrder")(encoder4), Argument("tierId", tierId, "ID")(encoder5)))
  /**
 * Events involving this sponsorable, such as new sponsorships.
 */
def sponsorsActivities[A](actions : scala.Option[List[SponsorsActivityAction]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeAsSponsor : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorsActivityOrder] = None, period : scala.Option[SponsorsActivityPeriod] = None, since : scala.Option[DateTime] = None, until : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[SponsorsActivityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[SponsorsActivityAction]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SponsorsActivityOrder]], encoder7: ArgEncoder[scala.Option[SponsorsActivityPeriod]], encoder8: ArgEncoder[scala.Option[DateTime]], encoder9: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorsActivities", Obj(innerSelection), arguments = List(Argument("actions", actions, "[SponsorsActivityAction!]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includeAsSponsor", includeAsSponsor, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SponsorsActivityOrder")(encoder6), Argument("period", period, "SponsorsActivityPeriod")(encoder7), Argument("since", since, "DateTime")(encoder8), Argument("until", until, "DateTime")(encoder9)))
  /**
 * The GitHub Sponsors listing for this user or organization.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", OptionOf(Obj(innerSelection)))
  /**
 * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
 */
def sponsorshipForViewerAsSponsor[A](activeOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Sponsorship, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipForViewerAsSponsor", OptionOf(Obj(innerSelection)), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0)))
  /**
 * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
 */
def sponsorshipForViewerAsSponsorable[A](activeOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Sponsorship, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipForViewerAsSponsorable", OptionOf(Obj(innerSelection)), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0)))
  /**
 * List of sponsorship updates sent from this sponsorable to sponsors.
 */
def sponsorshipNewsletters[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipNewsletterOrder] = None)(innerSelection: SelectionBuilder[SponsorshipNewsletterConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorshipNewsletterOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipNewsletters", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorshipNewsletterOrder")(encoder4)))
  /**
 * The sponsorships where this user or organization is the maintainer receiving the funds.
 */
def sponsorshipsAsMaintainer[A](activeOnly : scala.Option[Boolean] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includePrivate : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipsAsMaintainer", Obj(innerSelection), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includePrivate", includePrivate, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder6)))
  /**
 * The sponsorships where this user or organization is the funder.
 */
def sponsorshipsAsSponsor[A](activeOnly : scala.Option[Boolean] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, maintainerLogins : scala.Option[List[String]] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipsAsSponsor", Obj(innerSelection), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("maintainerLogins", maintainerLogins, "[String!]")(encoder5), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder6)))
  /**
 * Find an organization's team by its slug.
 */
def team[A](slug : String)(innerSelection: SelectionBuilder[Team, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Organization, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)), arguments = List(Argument("slug", slug, "String!")(encoder0)))
  /**
 * A list of teams in this organization.
 */
def teams[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, ldapMapped : scala.Option[Boolean] = None, notificationSetting : scala.Option[TeamNotificationSetting] = None, orderBy : scala.Option[TeamOrder] = None, privacy : scala.Option[TeamPrivacy] = None, query : scala.Option[String] = None, role : scala.Option[TeamRole] = None, rootTeamsOnly : scala.Option[Boolean] = None, userLogins : scala.Option[List[String]] = None)(innerSelection: SelectionBuilder[TeamConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[TeamNotificationSetting]], encoder6: ArgEncoder[scala.Option[TeamOrder]], encoder7: ArgEncoder[scala.Option[TeamPrivacy]], encoder8: ArgEncoder[scala.Option[String]], encoder9: ArgEncoder[scala.Option[TeamRole]], encoder10: ArgEncoder[scala.Option[Boolean]], encoder11: ArgEncoder[scala.Option[List[String]]]): SelectionBuilder[Organization, A] = _root_.caliban.client.SelectionBuilder.Field("teams", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("ldapMapped", ldapMapped, "Boolean")(encoder4), Argument("notificationSetting", notificationSetting, "TeamNotificationSetting")(encoder5), Argument("orderBy", orderBy, "TeamOrder")(encoder6), Argument("privacy", privacy, "TeamPrivacy")(encoder7), Argument("query", query, "String")(encoder8), Argument("role", role, "TeamRole")(encoder9), Argument("rootTeamsOnly", rootTeamsOnly, "Boolean")(encoder10), Argument("userLogins", userLogins, "[String!]")(encoder11)))
  /**
 * The HTTP path listing organization's teams
 */
def teamsResourcePath: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("teamsResourcePath", Scalar())
  /**
 * The HTTP URL listing organization's teams
 */
def teamsUrl: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("teamsUrl", Scalar())
  /**
 * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
spent on GitHub to fund sponsorships. Only returns a value when viewed by the
user themselves or by a user who can manage sponsorships for the requested organization.
 */
def totalSponsorshipAmountAsSponsorInCents(since : scala.Option[DateTime] = None, sponsorableLogins : scala.Option[List[String]] = None, until : scala.Option[DateTime] = None)(implicit encoder0: ArgEncoder[scala.Option[DateTime]], encoder1: ArgEncoder[scala.Option[List[String]]], encoder2: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[Organization, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("totalSponsorshipAmountAsSponsorInCents", OptionOf(Scalar()), arguments = List(Argument("since", since, "DateTime")(encoder0), Argument("sponsorableLogins", sponsorableLogins, "[String!]")(encoder1), Argument("until", until, "DateTime")(encoder2)))
  /**
 * The organization's Twitter username.
 */
def twitterUsername: SelectionBuilder[Organization, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("twitterUsername", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Organization, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this organization.
 */
def url: SelectionBuilder[Organization, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Organization is adminable by the viewer.
 */
def viewerCanAdminister: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanAdminister", Scalar())
  /**
 * Can the viewer pin repositories and gists to the profile?
 */
def viewerCanChangePinnedItems: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanChangePinnedItems", Scalar())
  /**
 * Can the current viewer create new projects on this owner.
 */
def viewerCanCreateProjects: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanCreateProjects", Scalar())
  /**
 * Viewer can create repositories on this organization
 */
def viewerCanCreateRepositories: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanCreateRepositories", Scalar())
  /**
 * Viewer can create teams on this organization.
 */
def viewerCanCreateTeams: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanCreateTeams", Scalar())
  /**
 * Whether or not the viewer is able to sponsor this user/organization.
 */
def viewerCanSponsor: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSponsor", Scalar())
  /**
 * Viewer is an active member of this organization.
 */
def viewerIsAMember: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsAMember", Scalar())
  /**
 * Whether or not this Organization is followed by the viewer.
 */
def viewerIsFollowing: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsFollowing", Scalar())
  /**
 * True if the viewer is sponsoring this user/organization.
 */
def viewerIsSponsoring: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsSponsoring", Scalar())
  /**
 * Whether contributors are required to sign off on web-based commits for repositories in this organization.
 */
def webCommitSignoffRequired: SelectionBuilder[Organization, Boolean] = _root_.caliban.client.SelectionBuilder.Field("webCommitSignoffRequired", Scalar())
  /**
 * The organization's public profile URL.
 */
def websiteUrl: SelectionBuilder[Organization, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("websiteUrl", OptionOf(Scalar()))
}


type OrganizationAuditEntryConnection
object OrganizationAuditEntryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[OrganizationAuditEntryEdge, A]): SelectionBuilder[OrganizationAuditEntryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A], onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A], onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A], onOauthApplicationCreateAuditEntry: SelectionBuilder[OauthApplicationCreateAuditEntry, A], onOrgAddBillingManagerAuditEntry: SelectionBuilder[OrgAddBillingManagerAuditEntry, A], onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A], onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A], onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A], onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A], onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A], onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A], onOrgDisableSamlAuditEntry: SelectionBuilder[OrgDisableSamlAuditEntry, A], onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A], onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A], onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A], onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A], onOrgInviteMemberAuditEntry: SelectionBuilder[OrgInviteMemberAuditEntry, A], onOrgInviteToBusinessAuditEntry: SelectionBuilder[OrgInviteToBusinessAuditEntry, A], onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A], onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A], onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A], onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A], onOrgRemoveMemberAuditEntry: SelectionBuilder[OrgRemoveMemberAuditEntry, A], onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A], onOrgRestoreMemberAuditEntry: SelectionBuilder[OrgRestoreMemberAuditEntry, A], onOrgUnblockUserAuditEntry: SelectionBuilder[OrgUnblockUserAuditEntry, A], onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A], onOrgUpdateMemberAuditEntry: SelectionBuilder[OrgUpdateMemberAuditEntry, A], onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A], onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A], onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A], onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A], onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A], onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A], onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A], onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A], onRepoChangeMergeSettingAuditEntry: SelectionBuilder[RepoChangeMergeSettingAuditEntry, A], onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A], onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A], onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A], onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A], onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A], onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A], onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A], onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A], onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A], onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A], onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A], onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A], onRepoRemoveMemberAuditEntry: SelectionBuilder[RepoRemoveMemberAuditEntry, A], onRepoRemoveTopicAuditEntry: SelectionBuilder[RepoRemoveTopicAuditEntry, A], onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A], onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A], onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A], onTeamAddRepositoryAuditEntry: SelectionBuilder[TeamAddRepositoryAuditEntry, A], onTeamChangeParentTeamAuditEntry: SelectionBuilder[TeamChangeParentTeamAuditEntry, A], onTeamRemoveMemberAuditEntry: SelectionBuilder[TeamRemoveMemberAuditEntry, A], onTeamRemoveRepositoryAuditEntry: SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]): SelectionBuilder[OrganizationAuditEntryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("MembersCanDeleteReposClearAuditEntry" -> Obj(onMembersCanDeleteReposClearAuditEntry), "MembersCanDeleteReposDisableAuditEntry" -> Obj(onMembersCanDeleteReposDisableAuditEntry), "MembersCanDeleteReposEnableAuditEntry" -> Obj(onMembersCanDeleteReposEnableAuditEntry), "OauthApplicationCreateAuditEntry" -> Obj(onOauthApplicationCreateAuditEntry), "OrgAddBillingManagerAuditEntry" -> Obj(onOrgAddBillingManagerAuditEntry), "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry), "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigDisableCollaboratorsOnlyAuditEntry), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigEnableCollaboratorsOnlyAuditEntry), "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry), "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(onOrgDisableOauthAppRestrictionsAuditEntry), "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry), "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(onOrgDisableTwoFactorRequirementAuditEntry), "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(onOrgEnableOauthAppRestrictionsAuditEntry), "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry), "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(onOrgEnableTwoFactorRequirementAuditEntry), "OrgInviteMemberAuditEntry" -> Obj(onOrgInviteMemberAuditEntry), "OrgInviteToBusinessAuditEntry" -> Obj(onOrgInviteToBusinessAuditEntry), "OrgOauthAppAccessApprovedAuditEntry" -> Obj(onOrgOauthAppAccessApprovedAuditEntry), "OrgOauthAppAccessDeniedAuditEntry" -> Obj(onOrgOauthAppAccessDeniedAuditEntry), "OrgOauthAppAccessRequestedAuditEntry" -> Obj(onOrgOauthAppAccessRequestedAuditEntry), "OrgRemoveBillingManagerAuditEntry" -> Obj(onOrgRemoveBillingManagerAuditEntry), "OrgRemoveMemberAuditEntry" -> Obj(onOrgRemoveMemberAuditEntry), "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(onOrgRemoveOutsideCollaboratorAuditEntry), "OrgRestoreMemberAuditEntry" -> Obj(onOrgRestoreMemberAuditEntry), "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(onOrgUpdateDefaultRepositoryPermissionAuditEntry), "OrgUpdateMemberAuditEntry" -> Obj(onOrgUpdateMemberAuditEntry), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryCreationPermissionAuditEntry), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry), "PrivateRepositoryForkingDisableAuditEntry" -> Obj(onPrivateRepositoryForkingDisableAuditEntry), "PrivateRepositoryForkingEnableAuditEntry" -> Obj(onPrivateRepositoryForkingEnableAuditEntry), "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry), "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry), "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry), "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry), "RepoChangeMergeSettingAuditEntry" -> Obj(onRepoChangeMergeSettingAuditEntry), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigDisableAnonymousGitAccessAuditEntry), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigDisableCollaboratorsOnlyAuditEntry), "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(onRepoConfigDisableContributorsOnlyAuditEntry), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigDisableSockpuppetDisallowedAuditEntry), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigEnableAnonymousGitAccessAuditEntry), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigEnableCollaboratorsOnlyAuditEntry), "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(onRepoConfigEnableContributorsOnlyAuditEntry), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigEnableSockpuppetDisallowedAuditEntry), "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigLockAnonymousGitAccessAuditEntry), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigUnlockAnonymousGitAccessAuditEntry), "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry), "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry), "RepoRemoveMemberAuditEntry" -> Obj(onRepoRemoveMemberAuditEntry), "RepoRemoveTopicAuditEntry" -> Obj(onRepoRemoveTopicAuditEntry), "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(onRepositoryVisibilityChangeDisableAuditEntry), "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(onRepositoryVisibilityChangeEnableAuditEntry), "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry), "TeamAddRepositoryAuditEntry" -> Obj(onTeamAddRepositoryAuditEntry), "TeamChangeParentTeamAuditEntry" -> Obj(onTeamChangeParentTeamAuditEntry), "TeamRemoveMemberAuditEntry" -> Obj(onTeamRemoveMemberAuditEntry), "TeamRemoveRepositoryAuditEntry" -> Obj(onTeamRemoveRepositoryAuditEntry)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[OrganizationAuditEntryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[OrganizationAuditEntryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onMembersCanDeleteReposClearAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]] = None, onMembersCanDeleteReposDisableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]] = None, onMembersCanDeleteReposEnableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]] = None, onOauthApplicationCreateAuditEntry: scala.Option[SelectionBuilder[OauthApplicationCreateAuditEntry, A]] = None, onOrgAddBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgAddBillingManagerAuditEntry, A]] = None, onOrgAddMemberAuditEntry: scala.Option[SelectionBuilder[OrgAddMemberAuditEntry, A]] = None, onOrgBlockUserAuditEntry: scala.Option[SelectionBuilder[OrgBlockUserAuditEntry, A]] = None, onOrgConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onOrgConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onOrgCreateAuditEntry: scala.Option[SelectionBuilder[OrgCreateAuditEntry, A]] = None, onOrgDisableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]] = None, onOrgDisableSamlAuditEntry: scala.Option[SelectionBuilder[OrgDisableSamlAuditEntry, A]] = None, onOrgDisableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]] = None, onOrgEnableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]] = None, onOrgEnableSamlAuditEntry: scala.Option[SelectionBuilder[OrgEnableSamlAuditEntry, A]] = None, onOrgEnableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]] = None, onOrgInviteMemberAuditEntry: scala.Option[SelectionBuilder[OrgInviteMemberAuditEntry, A]] = None, onOrgInviteToBusinessAuditEntry: scala.Option[SelectionBuilder[OrgInviteToBusinessAuditEntry, A]] = None, onOrgOauthAppAccessApprovedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]] = None, onOrgOauthAppAccessDeniedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]] = None, onOrgOauthAppAccessRequestedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]] = None, onOrgRemoveBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]] = None, onOrgRemoveMemberAuditEntry: scala.Option[SelectionBuilder[OrgRemoveMemberAuditEntry, A]] = None, onOrgRemoveOutsideCollaboratorAuditEntry: scala.Option[SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]] = None, onOrgRestoreMemberAuditEntry: scala.Option[SelectionBuilder[OrgRestoreMemberAuditEntry, A]] = None, onOrgUnblockUserAuditEntry: scala.Option[SelectionBuilder[OrgUnblockUserAuditEntry, A]] = None, onOrgUpdateDefaultRepositoryPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]] = None, onOrgUpdateMemberAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberAuditEntry, A]] = None, onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A]] = None, onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A]] = None, onPrivateRepositoryForkingDisableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]] = None, onPrivateRepositoryForkingEnableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]] = None, onRepoAccessAuditEntry: scala.Option[SelectionBuilder[RepoAccessAuditEntry, A]] = None, onRepoAddMemberAuditEntry: scala.Option[SelectionBuilder[RepoAddMemberAuditEntry, A]] = None, onRepoAddTopicAuditEntry: scala.Option[SelectionBuilder[RepoAddTopicAuditEntry, A]] = None, onRepoArchivedAuditEntry: scala.Option[SelectionBuilder[RepoArchivedAuditEntry, A]] = None, onRepoChangeMergeSettingAuditEntry: scala.Option[SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]] = None, onRepoConfigDisableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigDisableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]] = None, onRepoConfigDisableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigEnableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigEnableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]] = None, onRepoConfigEnableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigLockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigUnlockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]] = None, onRepoCreateAuditEntry: scala.Option[SelectionBuilder[RepoCreateAuditEntry, A]] = None, onRepoDestroyAuditEntry: scala.Option[SelectionBuilder[RepoDestroyAuditEntry, A]] = None, onRepoRemoveMemberAuditEntry: scala.Option[SelectionBuilder[RepoRemoveMemberAuditEntry, A]] = None, onRepoRemoveTopicAuditEntry: scala.Option[SelectionBuilder[RepoRemoveTopicAuditEntry, A]] = None, onRepositoryVisibilityChangeDisableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]] = None, onRepositoryVisibilityChangeEnableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]] = None, onTeamAddMemberAuditEntry: scala.Option[SelectionBuilder[TeamAddMemberAuditEntry, A]] = None, onTeamAddRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamAddRepositoryAuditEntry, A]] = None, onTeamChangeParentTeamAuditEntry: scala.Option[SelectionBuilder[TeamChangeParentTeamAuditEntry, A]] = None, onTeamRemoveMemberAuditEntry: scala.Option[SelectionBuilder[TeamRemoveMemberAuditEntry, A]] = None, onTeamRemoveRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]] = None): SelectionBuilder[OrganizationAuditEntryConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgCreateAuditEntry" -> onOrgCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAccessAuditEntry" -> onRepoAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoCreateAuditEntry" -> onRepoCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type OrganizationAuditEntryEdge
object OrganizationAuditEntryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[OrganizationAuditEntryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A], onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A], onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A], onOauthApplicationCreateAuditEntry: SelectionBuilder[OauthApplicationCreateAuditEntry, A], onOrgAddBillingManagerAuditEntry: SelectionBuilder[OrgAddBillingManagerAuditEntry, A], onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A], onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A], onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A], onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A], onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A], onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A], onOrgDisableSamlAuditEntry: SelectionBuilder[OrgDisableSamlAuditEntry, A], onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A], onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A], onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A], onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A], onOrgInviteMemberAuditEntry: SelectionBuilder[OrgInviteMemberAuditEntry, A], onOrgInviteToBusinessAuditEntry: SelectionBuilder[OrgInviteToBusinessAuditEntry, A], onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A], onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A], onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A], onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A], onOrgRemoveMemberAuditEntry: SelectionBuilder[OrgRemoveMemberAuditEntry, A], onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A], onOrgRestoreMemberAuditEntry: SelectionBuilder[OrgRestoreMemberAuditEntry, A], onOrgUnblockUserAuditEntry: SelectionBuilder[OrgUnblockUserAuditEntry, A], onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A], onOrgUpdateMemberAuditEntry: SelectionBuilder[OrgUpdateMemberAuditEntry, A], onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A], onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A], onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A], onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A], onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A], onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A], onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A], onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A], onRepoChangeMergeSettingAuditEntry: SelectionBuilder[RepoChangeMergeSettingAuditEntry, A], onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A], onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A], onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A], onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A], onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A], onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A], onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A], onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A], onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A], onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A], onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A], onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A], onRepoRemoveMemberAuditEntry: SelectionBuilder[RepoRemoveMemberAuditEntry, A], onRepoRemoveTopicAuditEntry: SelectionBuilder[RepoRemoveTopicAuditEntry, A], onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A], onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A], onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A], onTeamAddRepositoryAuditEntry: SelectionBuilder[TeamAddRepositoryAuditEntry, A], onTeamChangeParentTeamAuditEntry: SelectionBuilder[TeamChangeParentTeamAuditEntry, A], onTeamRemoveMemberAuditEntry: SelectionBuilder[TeamRemoveMemberAuditEntry, A], onTeamRemoveRepositoryAuditEntry: SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]): SelectionBuilder[OrganizationAuditEntryEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("MembersCanDeleteReposClearAuditEntry" -> Obj(onMembersCanDeleteReposClearAuditEntry), "MembersCanDeleteReposDisableAuditEntry" -> Obj(onMembersCanDeleteReposDisableAuditEntry), "MembersCanDeleteReposEnableAuditEntry" -> Obj(onMembersCanDeleteReposEnableAuditEntry), "OauthApplicationCreateAuditEntry" -> Obj(onOauthApplicationCreateAuditEntry), "OrgAddBillingManagerAuditEntry" -> Obj(onOrgAddBillingManagerAuditEntry), "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry), "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigDisableCollaboratorsOnlyAuditEntry), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigEnableCollaboratorsOnlyAuditEntry), "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry), "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(onOrgDisableOauthAppRestrictionsAuditEntry), "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry), "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(onOrgDisableTwoFactorRequirementAuditEntry), "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(onOrgEnableOauthAppRestrictionsAuditEntry), "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry), "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(onOrgEnableTwoFactorRequirementAuditEntry), "OrgInviteMemberAuditEntry" -> Obj(onOrgInviteMemberAuditEntry), "OrgInviteToBusinessAuditEntry" -> Obj(onOrgInviteToBusinessAuditEntry), "OrgOauthAppAccessApprovedAuditEntry" -> Obj(onOrgOauthAppAccessApprovedAuditEntry), "OrgOauthAppAccessDeniedAuditEntry" -> Obj(onOrgOauthAppAccessDeniedAuditEntry), "OrgOauthAppAccessRequestedAuditEntry" -> Obj(onOrgOauthAppAccessRequestedAuditEntry), "OrgRemoveBillingManagerAuditEntry" -> Obj(onOrgRemoveBillingManagerAuditEntry), "OrgRemoveMemberAuditEntry" -> Obj(onOrgRemoveMemberAuditEntry), "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(onOrgRemoveOutsideCollaboratorAuditEntry), "OrgRestoreMemberAuditEntry" -> Obj(onOrgRestoreMemberAuditEntry), "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(onOrgUpdateDefaultRepositoryPermissionAuditEntry), "OrgUpdateMemberAuditEntry" -> Obj(onOrgUpdateMemberAuditEntry), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryCreationPermissionAuditEntry), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry), "PrivateRepositoryForkingDisableAuditEntry" -> Obj(onPrivateRepositoryForkingDisableAuditEntry), "PrivateRepositoryForkingEnableAuditEntry" -> Obj(onPrivateRepositoryForkingEnableAuditEntry), "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry), "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry), "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry), "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry), "RepoChangeMergeSettingAuditEntry" -> Obj(onRepoChangeMergeSettingAuditEntry), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigDisableAnonymousGitAccessAuditEntry), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigDisableCollaboratorsOnlyAuditEntry), "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(onRepoConfigDisableContributorsOnlyAuditEntry), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigDisableSockpuppetDisallowedAuditEntry), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigEnableAnonymousGitAccessAuditEntry), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigEnableCollaboratorsOnlyAuditEntry), "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(onRepoConfigEnableContributorsOnlyAuditEntry), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigEnableSockpuppetDisallowedAuditEntry), "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigLockAnonymousGitAccessAuditEntry), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigUnlockAnonymousGitAccessAuditEntry), "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry), "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry), "RepoRemoveMemberAuditEntry" -> Obj(onRepoRemoveMemberAuditEntry), "RepoRemoveTopicAuditEntry" -> Obj(onRepoRemoveTopicAuditEntry), "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(onRepositoryVisibilityChangeDisableAuditEntry), "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(onRepositoryVisibilityChangeEnableAuditEntry), "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry), "TeamAddRepositoryAuditEntry" -> Obj(onTeamAddRepositoryAuditEntry), "TeamChangeParentTeamAuditEntry" -> Obj(onTeamChangeParentTeamAuditEntry), "TeamRemoveMemberAuditEntry" -> Obj(onTeamRemoveMemberAuditEntry), "TeamRemoveRepositoryAuditEntry" -> Obj(onTeamRemoveRepositoryAuditEntry)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onMembersCanDeleteReposClearAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]] = None, onMembersCanDeleteReposDisableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]] = None, onMembersCanDeleteReposEnableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]] = None, onOauthApplicationCreateAuditEntry: scala.Option[SelectionBuilder[OauthApplicationCreateAuditEntry, A]] = None, onOrgAddBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgAddBillingManagerAuditEntry, A]] = None, onOrgAddMemberAuditEntry: scala.Option[SelectionBuilder[OrgAddMemberAuditEntry, A]] = None, onOrgBlockUserAuditEntry: scala.Option[SelectionBuilder[OrgBlockUserAuditEntry, A]] = None, onOrgConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onOrgConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onOrgCreateAuditEntry: scala.Option[SelectionBuilder[OrgCreateAuditEntry, A]] = None, onOrgDisableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]] = None, onOrgDisableSamlAuditEntry: scala.Option[SelectionBuilder[OrgDisableSamlAuditEntry, A]] = None, onOrgDisableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]] = None, onOrgEnableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]] = None, onOrgEnableSamlAuditEntry: scala.Option[SelectionBuilder[OrgEnableSamlAuditEntry, A]] = None, onOrgEnableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]] = None, onOrgInviteMemberAuditEntry: scala.Option[SelectionBuilder[OrgInviteMemberAuditEntry, A]] = None, onOrgInviteToBusinessAuditEntry: scala.Option[SelectionBuilder[OrgInviteToBusinessAuditEntry, A]] = None, onOrgOauthAppAccessApprovedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]] = None, onOrgOauthAppAccessDeniedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]] = None, onOrgOauthAppAccessRequestedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]] = None, onOrgRemoveBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]] = None, onOrgRemoveMemberAuditEntry: scala.Option[SelectionBuilder[OrgRemoveMemberAuditEntry, A]] = None, onOrgRemoveOutsideCollaboratorAuditEntry: scala.Option[SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]] = None, onOrgRestoreMemberAuditEntry: scala.Option[SelectionBuilder[OrgRestoreMemberAuditEntry, A]] = None, onOrgUnblockUserAuditEntry: scala.Option[SelectionBuilder[OrgUnblockUserAuditEntry, A]] = None, onOrgUpdateDefaultRepositoryPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]] = None, onOrgUpdateMemberAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberAuditEntry, A]] = None, onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A]] = None, onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A]] = None, onPrivateRepositoryForkingDisableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]] = None, onPrivateRepositoryForkingEnableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]] = None, onRepoAccessAuditEntry: scala.Option[SelectionBuilder[RepoAccessAuditEntry, A]] = None, onRepoAddMemberAuditEntry: scala.Option[SelectionBuilder[RepoAddMemberAuditEntry, A]] = None, onRepoAddTopicAuditEntry: scala.Option[SelectionBuilder[RepoAddTopicAuditEntry, A]] = None, onRepoArchivedAuditEntry: scala.Option[SelectionBuilder[RepoArchivedAuditEntry, A]] = None, onRepoChangeMergeSettingAuditEntry: scala.Option[SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]] = None, onRepoConfigDisableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigDisableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]] = None, onRepoConfigDisableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigEnableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigEnableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]] = None, onRepoConfigEnableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigLockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigUnlockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]] = None, onRepoCreateAuditEntry: scala.Option[SelectionBuilder[RepoCreateAuditEntry, A]] = None, onRepoDestroyAuditEntry: scala.Option[SelectionBuilder[RepoDestroyAuditEntry, A]] = None, onRepoRemoveMemberAuditEntry: scala.Option[SelectionBuilder[RepoRemoveMemberAuditEntry, A]] = None, onRepoRemoveTopicAuditEntry: scala.Option[SelectionBuilder[RepoRemoveTopicAuditEntry, A]] = None, onRepositoryVisibilityChangeDisableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]] = None, onRepositoryVisibilityChangeEnableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]] = None, onTeamAddMemberAuditEntry: scala.Option[SelectionBuilder[TeamAddMemberAuditEntry, A]] = None, onTeamAddRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamAddRepositoryAuditEntry, A]] = None, onTeamChangeParentTeamAuditEntry: scala.Option[SelectionBuilder[TeamChangeParentTeamAuditEntry, A]] = None, onTeamRemoveMemberAuditEntry: scala.Option[SelectionBuilder[TeamRemoveMemberAuditEntry, A]] = None, onTeamRemoveRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]] = None): SelectionBuilder[OrganizationAuditEntryEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgCreateAuditEntry" -> onOrgCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAccessAuditEntry" -> onRepoAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoCreateAuditEntry" -> onRepoCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type OrganizationConnection
object OrganizationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[OrganizationEdge, A]): SelectionBuilder[OrganizationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrganizationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[OrganizationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[OrganizationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type OrganizationEdge
object OrganizationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[OrganizationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrganizationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type OrganizationEnterpriseOwnerConnection
object OrganizationEnterpriseOwnerConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[OrganizationEnterpriseOwnerEdge, A]): SelectionBuilder[OrganizationEnterpriseOwnerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrganizationEnterpriseOwnerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[OrganizationEnterpriseOwnerConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[OrganizationEnterpriseOwnerConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type OrganizationEnterpriseOwnerEdge
object OrganizationEnterpriseOwnerEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[OrganizationEnterpriseOwnerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrganizationEnterpriseOwnerEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  /**
 * The role of the owner with respect to the organization.
 */
def organizationRole: SelectionBuilder[OrganizationEnterpriseOwnerEdge, RoleInOrganization] = _root_.caliban.client.SelectionBuilder.Field("organizationRole", Scalar())
}


type OrganizationIdentityProvider
object OrganizationIdentityProvider {
  /**
 * The digest algorithm used to sign SAML requests for the Identity Provider.
 */
def digestMethod: SelectionBuilder[OrganizationIdentityProvider, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("digestMethod", OptionOf(Scalar()))
  /**
 * External Identities provisioned by this Identity Provider
 */
def externalIdentities[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, login : scala.Option[String] = None, membersOnly : scala.Option[Boolean] = None, userName : scala.Option[String] = None)(innerSelection: SelectionBuilder[ExternalIdentityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[OrganizationIdentityProvider, A] = _root_.caliban.client.SelectionBuilder.Field("externalIdentities", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("login", login, "String")(encoder4), Argument("membersOnly", membersOnly, "Boolean")(encoder5), Argument("userName", userName, "String")(encoder6)))
  def id: SelectionBuilder[OrganizationIdentityProvider, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The x509 certificate used by the Identity Provider to sign assertions and responses.
 */
def idpCertificate: SelectionBuilder[OrganizationIdentityProvider, scala.Option[X509Certificate]] = _root_.caliban.client.SelectionBuilder.Field("idpCertificate", OptionOf(Scalar()))
  /**
 * The Issuer Entity ID for the SAML Identity Provider
 */
def issuer: SelectionBuilder[OrganizationIdentityProvider, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("issuer", OptionOf(Scalar()))
  /**
 * Organization this Identity Provider belongs to
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrganizationIdentityProvider, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The signature algorithm used to sign SAML requests for the Identity Provider.
 */
def signatureMethod: SelectionBuilder[OrganizationIdentityProvider, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("signatureMethod", OptionOf(Scalar()))
  /**
 * The URL endpoint for the Identity Provider's SAML SSO.
 */
def ssoUrl: SelectionBuilder[OrganizationIdentityProvider, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("ssoUrl", OptionOf(Scalar()))
}


type OrganizationInvitation
object OrganizationInvitation {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[OrganizationInvitation, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The email address of the user invited to the organization.
 */
def email: SelectionBuilder[OrganizationInvitation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  def id: SelectionBuilder[OrganizationInvitation, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The source of the invitation.
 */
def invitationSource: SelectionBuilder[OrganizationInvitation, OrganizationInvitationSource] = _root_.caliban.client.SelectionBuilder.Field("invitationSource", Scalar())
  /**
 * The type of invitation that was sent (e.g. email, user).
 */
def invitationType: SelectionBuilder[OrganizationInvitation, OrganizationInvitationType] = _root_.caliban.client.SelectionBuilder.Field("invitationType", Scalar())
  /**
 * The user who was invited to the organization.
 */
def invitee[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrganizationInvitation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitee", OptionOf(Obj(innerSelection)))
  /**
 * The user who created the invitation.
 */
def inviter[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrganizationInvitation, A] = _root_.caliban.client.SelectionBuilder.Field("inviter", Obj(innerSelection))
  /**
 * The organization the invite is for
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[OrganizationInvitation, A] = _root_.caliban.client.SelectionBuilder.Field("organization", Obj(innerSelection))
  /**
 * The user's pending role in the organization (e.g. member, owner).
 */
def role: SelectionBuilder[OrganizationInvitation, OrganizationInvitationRole] = _root_.caliban.client.SelectionBuilder.Field("role", Scalar())
}


type OrganizationInvitationConnection
object OrganizationInvitationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[OrganizationInvitationEdge, A]): SelectionBuilder[OrganizationInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[OrganizationInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[OrganizationInvitationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[OrganizationInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type OrganizationInvitationEdge
object OrganizationInvitationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[OrganizationInvitationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[OrganizationInvitation, A]): SelectionBuilder[OrganizationInvitationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type OrganizationMemberConnection
object OrganizationMemberConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[OrganizationMemberEdge, A]): SelectionBuilder[OrganizationMemberConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrganizationMemberConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[OrganizationMemberConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[OrganizationMemberConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type OrganizationMemberEdge
object OrganizationMemberEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[OrganizationMemberEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
 */
def hasTwoFactorEnabled: SelectionBuilder[OrganizationMemberEdge, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("hasTwoFactorEnabled", OptionOf(Scalar()))
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[OrganizationMemberEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
  /**
 * The role this user has in the organization.
 */
def role: SelectionBuilder[OrganizationMemberEdge, scala.Option[OrganizationMemberRole]] = _root_.caliban.client.SelectionBuilder.Field("role", OptionOf(Scalar()))
}


type OrganizationMigration
object OrganizationMigration {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[OrganizationMigration, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[OrganizationMigration, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The reason the organization migration failed.
 */
def failureReason: SelectionBuilder[OrganizationMigration, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("failureReason", OptionOf(Scalar()))
  def id: SelectionBuilder[OrganizationMigration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The remaining amount of repos to be migrated.
 */
def remainingRepositoriesCount: SelectionBuilder[OrganizationMigration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("remainingRepositoriesCount", OptionOf(Scalar()))
  /**
 * The name of the source organization to be migrated.
 */
def sourceOrgName: SelectionBuilder[OrganizationMigration, String] = _root_.caliban.client.SelectionBuilder.Field("sourceOrgName", Scalar())
  /**
 * The URL of the source organization to migrate.
 */
def sourceOrgUrl: SelectionBuilder[OrganizationMigration, URI] = _root_.caliban.client.SelectionBuilder.Field("sourceOrgUrl", Scalar())
  /**
 * The migration state.
 */
def state: SelectionBuilder[OrganizationMigration, OrganizationMigrationState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The name of the target organization.
 */
def targetOrgName: SelectionBuilder[OrganizationMigration, String] = _root_.caliban.client.SelectionBuilder.Field("targetOrgName", Scalar())
  /**
 * The total amount of repositories to be migrated.
 */
def totalRepositoriesCount: SelectionBuilder[OrganizationMigration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("totalRepositoriesCount", OptionOf(Scalar()))
}


type OrganizationTeamsHovercardContext
object OrganizationTeamsHovercardContext {
  /**
 * A string describing this context
 */
def message: SelectionBuilder[OrganizationTeamsHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * An octicon to accompany this context
 */
def octicon: SelectionBuilder[OrganizationTeamsHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("octicon", Scalar())
  /**
 * Teams in this organization the user is a member of that are relevant
 */
def relevantTeams[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[TeamConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[OrganizationTeamsHovercardContext, A] = _root_.caliban.client.SelectionBuilder.Field("relevantTeams", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The path for the full team list for this user
 */
def teamsResourcePath: SelectionBuilder[OrganizationTeamsHovercardContext, URI] = _root_.caliban.client.SelectionBuilder.Field("teamsResourcePath", Scalar())
  /**
 * The URL for the full team list for this user
 */
def teamsUrl: SelectionBuilder[OrganizationTeamsHovercardContext, URI] = _root_.caliban.client.SelectionBuilder.Field("teamsUrl", Scalar())
  /**
 * The total number of teams the user is on in the organization
 */
def totalTeamCount: SelectionBuilder[OrganizationTeamsHovercardContext, Int] = _root_.caliban.client.SelectionBuilder.Field("totalTeamCount", Scalar())
}


type OrganizationsHovercardContext
object OrganizationsHovercardContext {
  /**
 * A string describing this context
 */
def message: SelectionBuilder[OrganizationsHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * An octicon to accompany this context
 */
def octicon: SelectionBuilder[OrganizationsHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("octicon", Scalar())
  /**
 * Organizations this user is a member of that are relevant
 */
def relevantOrganizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]]): SelectionBuilder[OrganizationsHovercardContext, A] = _root_.caliban.client.SelectionBuilder.Field("relevantOrganizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4)))
  /**
 * The total number of organizations this user is in
 */
def totalOrganizationCount: SelectionBuilder[OrganizationsHovercardContext, Int] = _root_.caliban.client.SelectionBuilder.Field("totalOrganizationCount", Scalar())
}


type Package
object Package {
  def id: SelectionBuilder[Package, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Find the latest version for the package.
 */
def latestVersion[A](innerSelection: SelectionBuilder[PackageVersion, A]): SelectionBuilder[Package, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("latestVersion", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the name of the package.
 */
def name: SelectionBuilder[Package, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Identifies the type of the package.
 */
def packageType: SelectionBuilder[Package, PackageType] = _root_.caliban.client.SelectionBuilder.Field("packageType", Scalar())
  /**
 * The repository this package belongs to.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Package, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * Statistics about package activity.
 */
def statistics[A](innerSelection: SelectionBuilder[PackageStatistics, A]): SelectionBuilder[Package, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("statistics", OptionOf(Obj(innerSelection)))
  /**
 * Find package version by version string.
 */
def version[A](version : String)(innerSelection: SelectionBuilder[PackageVersion, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Package, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Obj(innerSelection)), arguments = List(Argument("version", version, "String!")(encoder0)))
  /**
 * list of versions for this package
 */
def versions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[PackageVersionOrder] = None)(innerSelection: SelectionBuilder[PackageVersionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[PackageVersionOrder]]): SelectionBuilder[Package, A] = _root_.caliban.client.SelectionBuilder.Field("versions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "PackageVersionOrder")(encoder4)))
}


type PackageConnection
object PackageConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PackageEdge, A]): SelectionBuilder[PackageConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Package, A]): SelectionBuilder[PackageConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PackageConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PackageEdge
object PackageEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PackageEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Package, A]): SelectionBuilder[PackageEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PackageFile
object PackageFile {
  def id: SelectionBuilder[PackageFile, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * MD5 hash of the file.
 */
def md5: SelectionBuilder[PackageFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("md5", OptionOf(Scalar()))
  /**
 * Name of the file.
 */
def name: SelectionBuilder[PackageFile, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The package version this file belongs to.
 */
def packageVersion[A](innerSelection: SelectionBuilder[PackageVersion, A]): SelectionBuilder[PackageFile, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("packageVersion", OptionOf(Obj(innerSelection)))
  /**
 * SHA1 hash of the file.
 */
def sha1: SelectionBuilder[PackageFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("sha1", OptionOf(Scalar()))
  /**
 * SHA256 hash of the file.
 */
def sha256: SelectionBuilder[PackageFile, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("sha256", OptionOf(Scalar()))
  /**
 * Size of the file in bytes.
 */
def size: SelectionBuilder[PackageFile, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("size", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[PackageFile, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * URL to download the asset.
 */
def url: SelectionBuilder[PackageFile, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("url", OptionOf(Scalar()))
}


type PackageFileConnection
object PackageFileConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PackageFileEdge, A]): SelectionBuilder[PackageFileConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PackageFile, A]): SelectionBuilder[PackageFileConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageFileConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PackageFileConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PackageFileEdge
object PackageFileEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PackageFileEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PackageFile, A]): SelectionBuilder[PackageFileEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PackageStatistics
object PackageStatistics {
  /**
 * Number of times the package was downloaded since it was created.
 */
def downloadsTotalCount: SelectionBuilder[PackageStatistics, Int] = _root_.caliban.client.SelectionBuilder.Field("downloadsTotalCount", Scalar())
}


type PackageTag
object PackageTag {
  def id: SelectionBuilder[PackageTag, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the tag name of the version.
 */
def name: SelectionBuilder[PackageTag, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Version that the tag is associated with.
 */
def version[A](innerSelection: SelectionBuilder[PackageVersion, A]): SelectionBuilder[PackageTag, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("version", OptionOf(Obj(innerSelection)))
}


type PackageVersion
object PackageVersion {
  /**
 * List of files associated with this package version
 */
def files[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[PackageFileOrder] = None)(innerSelection: SelectionBuilder[PackageFileConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[PackageFileOrder]]): SelectionBuilder[PackageVersion, A] = _root_.caliban.client.SelectionBuilder.Field("files", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "PackageFileOrder")(encoder4)))
  def id: SelectionBuilder[PackageVersion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The package associated with this version.
 */
def `package`[A](innerSelection: SelectionBuilder[Package, A]): SelectionBuilder[PackageVersion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("package", OptionOf(Obj(innerSelection)))
  /**
 * The platform this version was built for.
 */
def platform: SelectionBuilder[PackageVersion, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("platform", OptionOf(Scalar()))
  /**
 * Whether or not this version is a pre-release.
 */
def preRelease: SelectionBuilder[PackageVersion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("preRelease", Scalar())
  /**
 * The README of this package version.
 */
def readme: SelectionBuilder[PackageVersion, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("readme", OptionOf(Scalar()))
  /**
 * The release associated with this package version.
 */
def release[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[PackageVersion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("release", OptionOf(Obj(innerSelection)))
  /**
 * Statistics about package activity.
 */
def statistics[A](innerSelection: SelectionBuilder[PackageVersionStatistics, A]): SelectionBuilder[PackageVersion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("statistics", OptionOf(Obj(innerSelection)))
  /**
 * The package version summary.
 */
def summary: SelectionBuilder[PackageVersion, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("summary", OptionOf(Scalar()))
  /**
 * The version string.
 */
def version: SelectionBuilder[PackageVersion, String] = _root_.caliban.client.SelectionBuilder.Field("version", Scalar())
}


type PackageVersionConnection
object PackageVersionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PackageVersionEdge, A]): SelectionBuilder[PackageVersionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PackageVersion, A]): SelectionBuilder[PackageVersionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PackageVersionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PackageVersionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PackageVersionEdge
object PackageVersionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PackageVersionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PackageVersion, A]): SelectionBuilder[PackageVersionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PackageVersionStatistics
object PackageVersionStatistics {
  /**
 * Number of times the package was downloaded since it was created.
 */
def downloadsTotalCount: SelectionBuilder[PackageVersionStatistics, Int] = _root_.caliban.client.SelectionBuilder.Field("downloadsTotalCount", Scalar())
}


type PageInfo
object PageInfo {
  /**
 * When paginating forwards, the cursor to continue.
 */
def endCursor: SelectionBuilder[PageInfo, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("endCursor", OptionOf(Scalar()))
  /**
 * When paginating forwards, are there more items?
 */
def hasNextPage: SelectionBuilder[PageInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasNextPage", Scalar())
  /**
 * When paginating backwards, are there more items?
 */
def hasPreviousPage: SelectionBuilder[PageInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasPreviousPage", Scalar())
  /**
 * When paginating backwards, the cursor to continue.
 */
def startCursor: SelectionBuilder[PageInfo, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("startCursor", OptionOf(Scalar()))
}


type PermissionSource
object PermissionSource {
  /**
 * The organization the repository belongs to.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[PermissionSource, A] = _root_.caliban.client.SelectionBuilder.Field("organization", Obj(innerSelection))
  /**
 * The level of access this source has granted to the user.
 */
def permission: SelectionBuilder[PermissionSource, DefaultRepositoryPermissionField] = _root_.caliban.client.SelectionBuilder.Field("permission", Scalar())
  /**
 * The source of this permission.
 */
def source[A](onOrganization: SelectionBuilder[Organization, A], onRepository: SelectionBuilder[Repository, A], onTeam: SelectionBuilder[Team, A]): SelectionBuilder[PermissionSource, A] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Organization" -> Obj(onOrganization), "Repository" -> Obj(onRepository), "Team" -> Obj(onTeam))))
  /**
 * The source of this permission.
 */
def sourceOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None): SelectionBuilder[PermissionSource, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type PinIssuePayload
object PinIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[PinIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue that was pinned
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[PinIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type PinnableItemConnection
object PinnableItemConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PinnableItemEdge, A]): SelectionBuilder[PinnableItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onGist: SelectionBuilder[Gist, A], onRepository: SelectionBuilder[Repository, A]): SelectionBuilder[PinnableItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Gist" -> Obj(onGist), "Repository" -> Obj(onRepository)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PinnableItemConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PinnableItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None): SelectionBuilder[PinnableItemConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type PinnableItemEdge
object PinnableItemEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PinnableItemEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onGist: SelectionBuilder[Gist, A], onRepository: SelectionBuilder[Repository, A]): SelectionBuilder[PinnableItemEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Gist" -> Obj(onGist), "Repository" -> Obj(onRepository)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None): SelectionBuilder[PinnableItemEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type PinnedDiscussion
object PinnedDiscussion {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[PinnedDiscussion, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[PinnedDiscussion, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The discussion that was pinned.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[PinnedDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("discussion", Obj(innerSelection))
  /**
 * Color stops of the chosen gradient
 */
def gradientStopColors: SelectionBuilder[PinnedDiscussion, List[String]] = _root_.caliban.client.SelectionBuilder.Field("gradientStopColors", ListOf(Scalar()))
  def id: SelectionBuilder[PinnedDiscussion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Background texture pattern
 */
def pattern: SelectionBuilder[PinnedDiscussion, PinnedDiscussionPattern] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
  /**
 * The actor that pinned this discussion.
 */
def pinnedBy[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PinnedDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedBy", ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * Preconfigured background gradient option
 */
def preconfiguredGradient: SelectionBuilder[PinnedDiscussion, scala.Option[PinnedDiscussionGradient]] = _root_.caliban.client.SelectionBuilder.Field("preconfiguredGradient", OptionOf(Scalar()))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PinnedDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[PinnedDiscussion, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The actor that pinned this discussion.
 */
def pinnedByOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PinnedDiscussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pinnedBy", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor that pinned this discussion.
 */
def pinnedByInterface[A](pinnedBy: SelectionBuilder[Actor, A]): SelectionBuilder[PinnedDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedBy", Obj(pinnedBy))
}


type PinnedDiscussionConnection
object PinnedDiscussionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PinnedDiscussionEdge, A]): SelectionBuilder[PinnedDiscussionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PinnedDiscussion, A]): SelectionBuilder[PinnedDiscussionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PinnedDiscussionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PinnedDiscussionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PinnedDiscussionEdge
object PinnedDiscussionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PinnedDiscussionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PinnedDiscussion, A]): SelectionBuilder[PinnedDiscussionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PinnedEvent
object PinnedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PinnedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[PinnedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[PinnedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the issue associated with the event.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[PinnedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PinnedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[PinnedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type PinnedIssue
object PinnedIssue {
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[PinnedIssue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * Identifies the primary key from the database as a BigInt.
 */
def fullDatabaseId: SelectionBuilder[PinnedIssue, scala.Option[BigInt]] = _root_.caliban.client.SelectionBuilder.Field("fullDatabaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[PinnedIssue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The issue that was pinned.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[PinnedIssue, A] = _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))
  /**
 * The actor that pinned this issue.
 */
def pinnedBy[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PinnedIssue, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedBy", ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The repository that this issue was pinned to.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PinnedIssue, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The actor that pinned this issue.
 */
def pinnedByOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PinnedIssue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pinnedBy", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor that pinned this issue.
 */
def pinnedByInterface[A](pinnedBy: SelectionBuilder[Actor, A]): SelectionBuilder[PinnedIssue, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedBy", Obj(pinnedBy))
}


type PinnedIssueConnection
object PinnedIssueConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PinnedIssueEdge, A]): SelectionBuilder[PinnedIssueConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PinnedIssue, A]): SelectionBuilder[PinnedIssueConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PinnedIssueConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PinnedIssueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PinnedIssueEdge
object PinnedIssueEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PinnedIssueEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PinnedIssue, A]): SelectionBuilder[PinnedIssueEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PrivateRepositoryForkingDisableAuditEntry
object PrivateRepositoryForkingDisableAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type PrivateRepositoryForkingEnableAuditEntry
object PrivateRepositoryForkingEnableAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type ProfileItemShowcase
object ProfileItemShowcase {
  /**
 * Whether or not the owner has pinned any repositories or gists.
 */
def hasPinnedItems: SelectionBuilder[ProfileItemShowcase, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasPinnedItems", Scalar())
  /**
 * The repositories and gists in the showcase. If the profile owner has any
pinned items, those will be returned. Otherwise, the profile owner's popular
repositories will be returned.
 */
def items[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProfileItemShowcase, A] = _root_.caliban.client.SelectionBuilder.Field("items", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type Project
object Project {
  /**
 * The project's description body.
 */
def body: SelectionBuilder[Project, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("body", OptionOf(Scalar()))
  /**
 * The projects description body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[Project, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * Indicates if the object is closed (definition of closed may depend on type)
 */
def closed: SelectionBuilder[Project, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[Project, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * List of columns in the project
 */
def columns[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectColumnConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Project, A] = _root_.caliban.client.SelectionBuilder.Field("columns", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Project, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who originally created the project.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Project, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Project, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project's name.
 */
def name: SelectionBuilder[Project, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The project's number.
 */
def number: SelectionBuilder[Project, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * The project's owner. Currently limited to repositories, organizations, and users.
 */
def owner[A](onOrganization: SelectionBuilder[Organization, A], onRepository: SelectionBuilder[Repository, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Project, A] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Organization" -> Obj(onOrganization), "Repository" -> Obj(onRepository), "User" -> Obj(onUser))))
  /**
 * List of pending cards in this project
 */
def pendingCards[A](after : scala.Option[String] = None, archivedStates : scala.Option[List[scala.Option[ProjectCardArchivedState]]] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectCardConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[List[scala.Option[ProjectCardArchivedState]]]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Project, A] = _root_.caliban.client.SelectionBuilder.Field("pendingCards", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("archivedStates", archivedStates, "[ProjectCardArchivedState]")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * Project progress details.
 */
def progress[A](innerSelection: SelectionBuilder[ProjectProgress, A]): SelectionBuilder[Project, A] = _root_.caliban.client.SelectionBuilder.Field("progress", Obj(innerSelection))
  /**
 * The HTTP path for this project
 */
def resourcePath: SelectionBuilder[Project, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Whether the project is open or closed.
 */
def state: SelectionBuilder[Project, ProjectState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Project, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this project
 */
def url: SelectionBuilder[Project, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[Project, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[Project, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[Project, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * The actor who originally created the project.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Project, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who originally created the project.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[Project, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
  /**
 * The project's owner. Currently limited to repositories, organizations, and users.
 */
def ownerOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Project, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The project's owner. Currently limited to repositories, organizations, and users.
 */
def ownerInterface[A](owner: SelectionBuilder[ProjectOwner, A]): SelectionBuilder[Project, A] = _root_.caliban.client.SelectionBuilder.Field("owner", Obj(owner))
}


type ProjectCard
object ProjectCard {
  /**
 * The project column this card is associated under. A card may only belong to one
project column at a time. The column field will be null if the card is created
in a pending state and has yet to be associated with a column. Once cards are
associated with a column, they will not become pending in the future.
 */
def column[A](innerSelection: SelectionBuilder[ProjectColumn, A]): SelectionBuilder[ProjectCard, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("column", OptionOf(Obj(innerSelection)))
  /**
 * The card content item
 */
def content[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ProjectCard, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("content", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectCard, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created this card
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectCard, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectCard, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ProjectCard, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the card is archived
 */
def isArchived: SelectionBuilder[ProjectCard, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isArchived", Scalar())
  /**
 * The card note
 */
def note: SelectionBuilder[ProjectCard, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("note", OptionOf(Scalar()))
  /**
 * The project that contains this card.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectCard, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * The HTTP path for this card
 */
def resourcePath: SelectionBuilder[ProjectCard, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The state of ProjectCard
 */
def state: SelectionBuilder[ProjectCard, scala.Option[ProjectCardState]] = _root_.caliban.client.SelectionBuilder.Field("state", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectCard, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this card
 */
def url: SelectionBuilder[ProjectCard, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The card content item
 */
def contentOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ProjectCard, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("content", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created this card
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectCard, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created this card
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectCard, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectCardConnection
object ProjectCardConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectCardEdge, A]): SelectionBuilder[ProjectCardConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[ProjectCardConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectCardConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectCardConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectCardEdge
object ProjectCardEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectCardEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[ProjectCardEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectColumn
object ProjectColumn {
  /**
 * List of cards in the column
 */
def cards[A](after : scala.Option[String] = None, archivedStates : scala.Option[List[scala.Option[ProjectCardArchivedState]]] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectCardConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[List[scala.Option[ProjectCardArchivedState]]]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectColumn, A] = _root_.caliban.client.SelectionBuilder.Field("cards", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("archivedStates", archivedStates, "[ProjectCardArchivedState]")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectColumn, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectColumn, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ProjectColumn, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project column's name.
 */
def name: SelectionBuilder[ProjectColumn, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The project that contains this column.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectColumn, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * The semantic purpose of the column
 */
def purpose: SelectionBuilder[ProjectColumn, scala.Option[ProjectColumnPurpose]] = _root_.caliban.client.SelectionBuilder.Field("purpose", OptionOf(Scalar()))
  /**
 * The HTTP path for this project column
 */
def resourcePath: SelectionBuilder[ProjectColumn, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectColumn, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this project column
 */
def url: SelectionBuilder[ProjectColumn, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type ProjectColumnConnection
object ProjectColumnConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectColumnEdge, A]): SelectionBuilder[ProjectColumnConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectColumn, A]): SelectionBuilder[ProjectColumnConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectColumnConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectColumnConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectColumnEdge
object ProjectColumnEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectColumnEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectColumn, A]): SelectionBuilder[ProjectColumnEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectConnection
object ProjectConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectEdge, A]): SelectionBuilder[ProjectConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectEdge
object ProjectEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[ProjectEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectProgress
object ProjectProgress {
  /**
 * The number of done cards.
 */
def doneCount: SelectionBuilder[ProjectProgress, Int] = _root_.caliban.client.SelectionBuilder.Field("doneCount", Scalar())
  /**
 * The percentage of done cards.
 */
def donePercentage: SelectionBuilder[ProjectProgress, Double] = _root_.caliban.client.SelectionBuilder.Field("donePercentage", Scalar())
  /**
 * Whether progress tracking is enabled and cards with purpose exist for this project
 */
def enabled: SelectionBuilder[ProjectProgress, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())
  /**
 * The number of in-progress cards.
 */
def inProgressCount: SelectionBuilder[ProjectProgress, Int] = _root_.caliban.client.SelectionBuilder.Field("inProgressCount", Scalar())
  /**
 * The percentage of in-progress cards.
 */
def inProgressPercentage: SelectionBuilder[ProjectProgress, Double] = _root_.caliban.client.SelectionBuilder.Field("inProgressPercentage", Scalar())
  /**
 * The number of to do cards.
 */
def todoCount: SelectionBuilder[ProjectProgress, Int] = _root_.caliban.client.SelectionBuilder.Field("todoCount", Scalar())
  /**
 * The percentage of to do cards.
 */
def todoPercentage: SelectionBuilder[ProjectProgress, Double] = _root_.caliban.client.SelectionBuilder.Field("todoPercentage", Scalar())
}


type ProjectV2
object ProjectV2 {
  /**
 * Returns true if the project is closed.
 */
def closed: SelectionBuilder[ProjectV2, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[ProjectV2, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who originally created the project.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * A field of the project
 */
def field[A](name : String)(onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[ProjectV2, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", OptionOf(ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField)))), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * List of fields and their constraints in the project
 */
def fields[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConfigurationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("fields", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
  def id: SelectionBuilder[ProjectV2, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * List of items in the project
 */
def items[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2ItemOrder] = None)(innerSelection: SelectionBuilder[ProjectV2ItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2ItemOrder]]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("items", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2ItemOrder")(encoder4)))
  /**
 * The project's number.
 */
def number: SelectionBuilder[ProjectV2, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * The project's owner. Currently limited to organizations and users.
 */
def owner[A](onIssue: SelectionBuilder[Issue, A], onOrganization: SelectionBuilder[Organization, A], onPullRequest: SelectionBuilder[PullRequest, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Issue" -> Obj(onIssue), "Organization" -> Obj(onOrganization), "PullRequest" -> Obj(onPullRequest), "User" -> Obj(onUser))))
  /**
 * Returns true if the project is public.
 */
def public: SelectionBuilder[ProjectV2, Boolean] = _root_.caliban.client.SelectionBuilder.Field("public", Scalar())
  /**
 * The project's readme.
 */
def readme: SelectionBuilder[ProjectV2, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("readme", OptionOf(Scalar()))
  /**
 * The repositories the project is linked to.
 */
def repositories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[RepositoryOrder]]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "RepositoryOrder")(encoder4)))
  /**
 * The HTTP path for this project
 */
def resourcePath: SelectionBuilder[ProjectV2, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The project's short description.
 */
def shortDescription: SelectionBuilder[ProjectV2, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("shortDescription", OptionOf(Scalar()))
  /**
 * The teams the project is linked to.
 */
def teams[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[TeamOrder] = None)(innerSelection: SelectionBuilder[TeamConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[TeamOrder]]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("teams", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "TeamOrder")(encoder4)))
  /**
 * Returns true if this project is a template.
 */
def template: SelectionBuilder[ProjectV2, Boolean] = _root_.caliban.client.SelectionBuilder.Field("template", Scalar())
  /**
 * The project's name.
 */
def title: SelectionBuilder[ProjectV2, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this project
 */
def url: SelectionBuilder[ProjectV2, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A view of the project
 */
def view[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2View, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[ProjectV2, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("view", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[ProjectV2, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[ProjectV2, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[ProjectV2, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * List of views in the project
 */
def views[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2ViewOrder] = None)(innerSelection: SelectionBuilder[ProjectV2ViewConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2ViewOrder]]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("views", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2ViewOrder")(encoder4)))
  /**
 * A workflow of the project
 */
def workflow[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2Workflow, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[ProjectV2, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("workflow", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * List of the workflows in the project
 */
def workflows[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2WorkflowOrder] = None)(innerSelection: SelectionBuilder[ProjectV2WorkflowConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2WorkflowOrder]]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("workflows", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2WorkflowOrder")(encoder4)))
  /**
 * A field of the project
 */
def fieldOption[A](name : String)(onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[ProjectV2, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("field", OptionOf(ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * The actor who originally created the project.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who originally created the project.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
  /**
 * The project's owner. Currently limited to organizations and users.
 */
def ownerOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The project's owner. Currently limited to organizations and users.
 */
def ownerInterface[A](owner: SelectionBuilder[ProjectV2Owner, A]): SelectionBuilder[ProjectV2, A] = _root_.caliban.client.SelectionBuilder.Field("owner", Obj(owner))
}


type ProjectV2Connection
object ProjectV2Connection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2Edge, A]): SelectionBuilder[ProjectV2Connection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2Connection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2Connection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2Connection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2Edge
object ProjectV2Edge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2Edge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2Edge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectV2Field
object ProjectV2Field {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2Field, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The field's type.
 */
def dataType: SelectionBuilder[ProjectV2Field, ProjectV2FieldType] = _root_.caliban.client.SelectionBuilder.Field("dataType", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2Field, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ProjectV2Field, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project field's name.
 */
def name: SelectionBuilder[ProjectV2Field, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The project that contains this field.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2Field, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2Field, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type ProjectV2FieldConfigurationConnection
object ProjectV2FieldConfigurationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2FieldConfigurationEdge, A]): SelectionBuilder[ProjectV2FieldConfigurationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2FieldConfigurationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2FieldConfigurationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2FieldConfigurationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2FieldConfigurationConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type ProjectV2FieldConfigurationEdge
object ProjectV2FieldConfigurationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2FieldConfigurationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2FieldConfigurationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2FieldConfigurationEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type ProjectV2FieldConnection
object ProjectV2FieldConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2FieldEdge, A]): SelectionBuilder[ProjectV2FieldConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2Field, A]): SelectionBuilder[ProjectV2FieldConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2FieldConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2FieldConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2FieldEdge
object ProjectV2FieldEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2FieldEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2Field, A]): SelectionBuilder[ProjectV2FieldEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectV2Item
object ProjectV2Item {
  /**
 * The content of the referenced draft issue, issue, or pull request
 */
def content[A](onDraftIssue: SelectionBuilder[DraftIssue, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ProjectV2Item, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("content", OptionOf(ChoiceOf(Map("DraftIssue" -> Obj(onDraftIssue), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2Item, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2Item, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2Item, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The field value of the first project field which matches the 'name' argument that is set on the item.
 */
def fieldValueByName[A](name : String)(onProjectV2ItemFieldDateValue: SelectionBuilder[ProjectV2ItemFieldDateValue, A], onProjectV2ItemFieldIterationValue: SelectionBuilder[ProjectV2ItemFieldIterationValue, A], onProjectV2ItemFieldLabelValue: SelectionBuilder[ProjectV2ItemFieldLabelValue, A], onProjectV2ItemFieldMilestoneValue: SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A], onProjectV2ItemFieldNumberValue: SelectionBuilder[ProjectV2ItemFieldNumberValue, A], onProjectV2ItemFieldPullRequestValue: SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A], onProjectV2ItemFieldRepositoryValue: SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A], onProjectV2ItemFieldReviewerValue: SelectionBuilder[ProjectV2ItemFieldReviewerValue, A], onProjectV2ItemFieldSingleSelectValue: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A], onProjectV2ItemFieldTextValue: SelectionBuilder[ProjectV2ItemFieldTextValue, A], onProjectV2ItemFieldUserValue: SelectionBuilder[ProjectV2ItemFieldUserValue, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[ProjectV2Item, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("fieldValueByName", OptionOf(ChoiceOf(Map("ProjectV2ItemFieldDateValue" -> Obj(onProjectV2ItemFieldDateValue), "ProjectV2ItemFieldIterationValue" -> Obj(onProjectV2ItemFieldIterationValue), "ProjectV2ItemFieldLabelValue" -> Obj(onProjectV2ItemFieldLabelValue), "ProjectV2ItemFieldMilestoneValue" -> Obj(onProjectV2ItemFieldMilestoneValue), "ProjectV2ItemFieldNumberValue" -> Obj(onProjectV2ItemFieldNumberValue), "ProjectV2ItemFieldPullRequestValue" -> Obj(onProjectV2ItemFieldPullRequestValue), "ProjectV2ItemFieldRepositoryValue" -> Obj(onProjectV2ItemFieldRepositoryValue), "ProjectV2ItemFieldReviewerValue" -> Obj(onProjectV2ItemFieldReviewerValue), "ProjectV2ItemFieldSingleSelectValue" -> Obj(onProjectV2ItemFieldSingleSelectValue), "ProjectV2ItemFieldTextValue" -> Obj(onProjectV2ItemFieldTextValue), "ProjectV2ItemFieldUserValue" -> Obj(onProjectV2ItemFieldUserValue)))), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * The field values that are set on the item.
 */
def fieldValues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2ItemFieldValueOrder] = None)(innerSelection: SelectionBuilder[ProjectV2ItemFieldValueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2ItemFieldValueOrder]]): SelectionBuilder[ProjectV2Item, A] = _root_.caliban.client.SelectionBuilder.Field("fieldValues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2ItemFieldValueOrder")(encoder4)))
  def id: SelectionBuilder[ProjectV2Item, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the item is archived.
 */
def isArchived: SelectionBuilder[ProjectV2Item, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isArchived", Scalar())
  /**
 * The project that contains this item.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2Item, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * The type of the item.
 */
def `type`: SelectionBuilder[ProjectV2Item, ProjectV2ItemType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2Item, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The content of the referenced draft issue, issue, or pull request
 */
def contentOption[A](onDraftIssue: scala.Option[SelectionBuilder[DraftIssue, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ProjectV2Item, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("content", OptionOf(ChoiceOf(Map("DraftIssue" -> onDraftIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The field value of the first project field which matches the 'name' argument that is set on the item.
 */
def fieldValueByNameOption[A](name : String)(onProjectV2ItemFieldDateValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldDateValue, A]] = None, onProjectV2ItemFieldIterationValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldIterationValue, A]] = None, onProjectV2ItemFieldLabelValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldLabelValue, A]] = None, onProjectV2ItemFieldMilestoneValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A]] = None, onProjectV2ItemFieldNumberValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldNumberValue, A]] = None, onProjectV2ItemFieldPullRequestValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A]] = None, onProjectV2ItemFieldRepositoryValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A]] = None, onProjectV2ItemFieldReviewerValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldReviewerValue, A]] = None, onProjectV2ItemFieldSingleSelectValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A]] = None, onProjectV2ItemFieldTextValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldTextValue, A]] = None, onProjectV2ItemFieldUserValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldUserValue, A]] = None)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[ProjectV2Item, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("fieldValueByName", OptionOf(ChoiceOf(Map("ProjectV2ItemFieldDateValue" -> onProjectV2ItemFieldDateValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldIterationValue" -> onProjectV2ItemFieldIterationValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldLabelValue" -> onProjectV2ItemFieldLabelValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldMilestoneValue" -> onProjectV2ItemFieldMilestoneValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldNumberValue" -> onProjectV2ItemFieldNumberValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldPullRequestValue" -> onProjectV2ItemFieldPullRequestValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldRepositoryValue" -> onProjectV2ItemFieldRepositoryValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldReviewerValue" -> onProjectV2ItemFieldReviewerValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldSingleSelectValue" -> onProjectV2ItemFieldSingleSelectValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldTextValue" -> onProjectV2ItemFieldTextValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldUserValue" -> onProjectV2ItemFieldUserValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2Item, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2Item, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2ItemConnection
object ProjectV2ItemConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2ItemEdge, A]): SelectionBuilder[ProjectV2ItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2ItemConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2ItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2ItemEdge
object ProjectV2ItemEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2ItemEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectV2ItemFieldDateValue
object ProjectV2ItemFieldDateValue {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2ItemFieldDateValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2ItemFieldDateValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2ItemFieldDateValue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * Date value for the field
 */
def date: SelectionBuilder[ProjectV2ItemFieldDateValue, scala.Option[Date]] = _root_.caliban.client.SelectionBuilder.Field("date", OptionOf(Scalar()))
  /**
 * The project field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldDateValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  def id: SelectionBuilder[ProjectV2ItemFieldDateValue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project item that contains this value.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemFieldDateValue, A] = _root_.caliban.client.SelectionBuilder.Field("item", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2ItemFieldDateValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The project field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldDateValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2ItemFieldDateValue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2ItemFieldDateValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2ItemFieldIterationValue
object ProjectV2ItemFieldIterationValue {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2ItemFieldIterationValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2ItemFieldIterationValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2ItemFieldIterationValue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The duration of the iteration in days.
 */
def duration: SelectionBuilder[ProjectV2ItemFieldIterationValue, Int] = _root_.caliban.client.SelectionBuilder.Field("duration", Scalar())
  /**
 * The project field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldIterationValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  def id: SelectionBuilder[ProjectV2ItemFieldIterationValue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project item that contains this value.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemFieldIterationValue, A] = _root_.caliban.client.SelectionBuilder.Field("item", Obj(innerSelection))
  /**
 * The ID of the iteration.
 */
def iterationId: SelectionBuilder[ProjectV2ItemFieldIterationValue, String] = _root_.caliban.client.SelectionBuilder.Field("iterationId", Scalar())
  /**
 * The start date of the iteration.
 */
def startDate: SelectionBuilder[ProjectV2ItemFieldIterationValue, Date] = _root_.caliban.client.SelectionBuilder.Field("startDate", Scalar())
  /**
 * The title of the iteration.
 */
def title: SelectionBuilder[ProjectV2ItemFieldIterationValue, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * The title of the iteration, with HTML.
 */
def titleHTML: SelectionBuilder[ProjectV2ItemFieldIterationValue, String] = _root_.caliban.client.SelectionBuilder.Field("titleHTML", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2ItemFieldIterationValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The project field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldIterationValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2ItemFieldIterationValue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2ItemFieldIterationValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2ItemFieldLabelValue
object ProjectV2ItemFieldLabelValue {
  /**
 * The field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldLabelValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * Labels value of a field
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectV2ItemFieldLabelValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldLabelValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2ItemFieldMilestoneValue
object ProjectV2ItemFieldMilestoneValue {
  /**
 * The field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * Milestone value of a field
 */
def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[ProjectV2ItemFieldMilestoneValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))
  /**
 * The field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldMilestoneValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2ItemFieldNumberValue
object ProjectV2ItemFieldNumberValue {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2ItemFieldNumberValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2ItemFieldNumberValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2ItemFieldNumberValue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The project field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldNumberValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  def id: SelectionBuilder[ProjectV2ItemFieldNumberValue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project item that contains this value.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemFieldNumberValue, A] = _root_.caliban.client.SelectionBuilder.Field("item", Obj(innerSelection))
  /**
 * Number as a float(8)
 */
def number: SelectionBuilder[ProjectV2ItemFieldNumberValue, scala.Option[Double]] = _root_.caliban.client.SelectionBuilder.Field("number", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2ItemFieldNumberValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The project field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldNumberValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2ItemFieldNumberValue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2ItemFieldNumberValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2ItemFieldPullRequestValue
object ProjectV2ItemFieldPullRequestValue {
  /**
 * The field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * The pull requests for this field
 */
def pullRequests[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[PullRequestOrder] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[PullRequestOrder]]): SelectionBuilder[ProjectV2ItemFieldPullRequestValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequests", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "PullRequestOrder")(encoder4)))
  /**
 * The field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldPullRequestValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2ItemFieldRepositoryValue
object ProjectV2ItemFieldRepositoryValue {
  /**
 * The field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * The repository for this field.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[ProjectV2ItemFieldRepositoryValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldRepositoryValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2ItemFieldReviewerValue
object ProjectV2ItemFieldReviewerValue {
  /**
 * The field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldReviewerValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * The reviewers for this field.
 */
def reviewers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[RequestedReviewerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectV2ItemFieldReviewerValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reviewers", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldReviewerValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2ItemFieldSingleSelectValue
object ProjectV2ItemFieldSingleSelectValue {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The project field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  def id: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project item that contains this value.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A] = _root_.caliban.client.SelectionBuilder.Field("item", Obj(innerSelection))
  /**
 * The name of the selected single select option.
 */
def name: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * The html name of the selected single select option.
 */
def nameHTML: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("nameHTML", OptionOf(Scalar()))
  /**
 * The id of the selected single select option.
 */
def optionId: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("optionId", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The project field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2ItemFieldTextValue
object ProjectV2ItemFieldTextValue {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2ItemFieldTextValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created the item.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ProjectV2ItemFieldTextValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2ItemFieldTextValue, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The project field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldTextValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  def id: SelectionBuilder[ProjectV2ItemFieldTextValue, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project item that contains this value.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[ProjectV2ItemFieldTextValue, A] = _root_.caliban.client.SelectionBuilder.Field("item", Obj(innerSelection))
  /**
 * Text value of a field
 */
def text: SelectionBuilder[ProjectV2ItemFieldTextValue, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("text", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2ItemFieldTextValue, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The project field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldTextValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who created the item.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ProjectV2ItemFieldTextValue, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created the item.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[ProjectV2ItemFieldTextValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type ProjectV2ItemFieldUserValue
object ProjectV2ItemFieldUserValue {
  /**
 * The field that contains this value.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2ItemFieldUserValue, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * The users for this field
 */
def users[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectV2ItemFieldUserValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("users", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The field that contains this value.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2ItemFieldUserValue, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2ItemFieldValueConnection
object ProjectV2ItemFieldValueConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2ItemFieldValueEdge, A]): SelectionBuilder[ProjectV2ItemFieldValueConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onProjectV2ItemFieldDateValue: SelectionBuilder[ProjectV2ItemFieldDateValue, A], onProjectV2ItemFieldIterationValue: SelectionBuilder[ProjectV2ItemFieldIterationValue, A], onProjectV2ItemFieldLabelValue: SelectionBuilder[ProjectV2ItemFieldLabelValue, A], onProjectV2ItemFieldMilestoneValue: SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A], onProjectV2ItemFieldNumberValue: SelectionBuilder[ProjectV2ItemFieldNumberValue, A], onProjectV2ItemFieldPullRequestValue: SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A], onProjectV2ItemFieldRepositoryValue: SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A], onProjectV2ItemFieldReviewerValue: SelectionBuilder[ProjectV2ItemFieldReviewerValue, A], onProjectV2ItemFieldSingleSelectValue: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A], onProjectV2ItemFieldTextValue: SelectionBuilder[ProjectV2ItemFieldTextValue, A], onProjectV2ItemFieldUserValue: SelectionBuilder[ProjectV2ItemFieldUserValue, A]): SelectionBuilder[ProjectV2ItemFieldValueConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("ProjectV2ItemFieldDateValue" -> Obj(onProjectV2ItemFieldDateValue), "ProjectV2ItemFieldIterationValue" -> Obj(onProjectV2ItemFieldIterationValue), "ProjectV2ItemFieldLabelValue" -> Obj(onProjectV2ItemFieldLabelValue), "ProjectV2ItemFieldMilestoneValue" -> Obj(onProjectV2ItemFieldMilestoneValue), "ProjectV2ItemFieldNumberValue" -> Obj(onProjectV2ItemFieldNumberValue), "ProjectV2ItemFieldPullRequestValue" -> Obj(onProjectV2ItemFieldPullRequestValue), "ProjectV2ItemFieldRepositoryValue" -> Obj(onProjectV2ItemFieldRepositoryValue), "ProjectV2ItemFieldReviewerValue" -> Obj(onProjectV2ItemFieldReviewerValue), "ProjectV2ItemFieldSingleSelectValue" -> Obj(onProjectV2ItemFieldSingleSelectValue), "ProjectV2ItemFieldTextValue" -> Obj(onProjectV2ItemFieldTextValue), "ProjectV2ItemFieldUserValue" -> Obj(onProjectV2ItemFieldUserValue)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2ItemFieldValueConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2ItemFieldValueConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onProjectV2ItemFieldDateValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldDateValue, A]] = None, onProjectV2ItemFieldIterationValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldIterationValue, A]] = None, onProjectV2ItemFieldLabelValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldLabelValue, A]] = None, onProjectV2ItemFieldMilestoneValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A]] = None, onProjectV2ItemFieldNumberValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldNumberValue, A]] = None, onProjectV2ItemFieldPullRequestValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A]] = None, onProjectV2ItemFieldRepositoryValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A]] = None, onProjectV2ItemFieldReviewerValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldReviewerValue, A]] = None, onProjectV2ItemFieldSingleSelectValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A]] = None, onProjectV2ItemFieldTextValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldTextValue, A]] = None, onProjectV2ItemFieldUserValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldUserValue, A]] = None): SelectionBuilder[ProjectV2ItemFieldValueConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("ProjectV2ItemFieldDateValue" -> onProjectV2ItemFieldDateValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldIterationValue" -> onProjectV2ItemFieldIterationValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldLabelValue" -> onProjectV2ItemFieldLabelValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldMilestoneValue" -> onProjectV2ItemFieldMilestoneValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldNumberValue" -> onProjectV2ItemFieldNumberValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldPullRequestValue" -> onProjectV2ItemFieldPullRequestValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldRepositoryValue" -> onProjectV2ItemFieldRepositoryValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldReviewerValue" -> onProjectV2ItemFieldReviewerValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldSingleSelectValue" -> onProjectV2ItemFieldSingleSelectValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldTextValue" -> onProjectV2ItemFieldTextValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldUserValue" -> onProjectV2ItemFieldUserValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type ProjectV2ItemFieldValueEdge
object ProjectV2ItemFieldValueEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2ItemFieldValueEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onProjectV2ItemFieldDateValue: SelectionBuilder[ProjectV2ItemFieldDateValue, A], onProjectV2ItemFieldIterationValue: SelectionBuilder[ProjectV2ItemFieldIterationValue, A], onProjectV2ItemFieldLabelValue: SelectionBuilder[ProjectV2ItemFieldLabelValue, A], onProjectV2ItemFieldMilestoneValue: SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A], onProjectV2ItemFieldNumberValue: SelectionBuilder[ProjectV2ItemFieldNumberValue, A], onProjectV2ItemFieldPullRequestValue: SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A], onProjectV2ItemFieldRepositoryValue: SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A], onProjectV2ItemFieldReviewerValue: SelectionBuilder[ProjectV2ItemFieldReviewerValue, A], onProjectV2ItemFieldSingleSelectValue: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A], onProjectV2ItemFieldTextValue: SelectionBuilder[ProjectV2ItemFieldTextValue, A], onProjectV2ItemFieldUserValue: SelectionBuilder[ProjectV2ItemFieldUserValue, A]): SelectionBuilder[ProjectV2ItemFieldValueEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("ProjectV2ItemFieldDateValue" -> Obj(onProjectV2ItemFieldDateValue), "ProjectV2ItemFieldIterationValue" -> Obj(onProjectV2ItemFieldIterationValue), "ProjectV2ItemFieldLabelValue" -> Obj(onProjectV2ItemFieldLabelValue), "ProjectV2ItemFieldMilestoneValue" -> Obj(onProjectV2ItemFieldMilestoneValue), "ProjectV2ItemFieldNumberValue" -> Obj(onProjectV2ItemFieldNumberValue), "ProjectV2ItemFieldPullRequestValue" -> Obj(onProjectV2ItemFieldPullRequestValue), "ProjectV2ItemFieldRepositoryValue" -> Obj(onProjectV2ItemFieldRepositoryValue), "ProjectV2ItemFieldReviewerValue" -> Obj(onProjectV2ItemFieldReviewerValue), "ProjectV2ItemFieldSingleSelectValue" -> Obj(onProjectV2ItemFieldSingleSelectValue), "ProjectV2ItemFieldTextValue" -> Obj(onProjectV2ItemFieldTextValue), "ProjectV2ItemFieldUserValue" -> Obj(onProjectV2ItemFieldUserValue)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onProjectV2ItemFieldDateValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldDateValue, A]] = None, onProjectV2ItemFieldIterationValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldIterationValue, A]] = None, onProjectV2ItemFieldLabelValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldLabelValue, A]] = None, onProjectV2ItemFieldMilestoneValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldMilestoneValue, A]] = None, onProjectV2ItemFieldNumberValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldNumberValue, A]] = None, onProjectV2ItemFieldPullRequestValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldPullRequestValue, A]] = None, onProjectV2ItemFieldRepositoryValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldRepositoryValue, A]] = None, onProjectV2ItemFieldReviewerValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldReviewerValue, A]] = None, onProjectV2ItemFieldSingleSelectValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A]] = None, onProjectV2ItemFieldTextValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldTextValue, A]] = None, onProjectV2ItemFieldUserValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldUserValue, A]] = None): SelectionBuilder[ProjectV2ItemFieldValueEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("ProjectV2ItemFieldDateValue" -> onProjectV2ItemFieldDateValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldIterationValue" -> onProjectV2ItemFieldIterationValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldLabelValue" -> onProjectV2ItemFieldLabelValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldMilestoneValue" -> onProjectV2ItemFieldMilestoneValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldNumberValue" -> onProjectV2ItemFieldNumberValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldPullRequestValue" -> onProjectV2ItemFieldPullRequestValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldRepositoryValue" -> onProjectV2ItemFieldRepositoryValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldReviewerValue" -> onProjectV2ItemFieldReviewerValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldSingleSelectValue" -> onProjectV2ItemFieldSingleSelectValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldTextValue" -> onProjectV2ItemFieldTextValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldUserValue" -> onProjectV2ItemFieldUserValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type ProjectV2IterationField
object ProjectV2IterationField {
  /**
 * Iteration configuration settings
 */
def configuration[A](innerSelection: SelectionBuilder[ProjectV2IterationFieldConfiguration, A]): SelectionBuilder[ProjectV2IterationField, A] = _root_.caliban.client.SelectionBuilder.Field("configuration", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2IterationField, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The field's type.
 */
def dataType: SelectionBuilder[ProjectV2IterationField, ProjectV2FieldType] = _root_.caliban.client.SelectionBuilder.Field("dataType", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2IterationField, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ProjectV2IterationField, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project field's name.
 */
def name: SelectionBuilder[ProjectV2IterationField, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The project that contains this field.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2IterationField, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2IterationField, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type ProjectV2IterationFieldConfiguration
object ProjectV2IterationFieldConfiguration {
  /**
 * The iteration's completed iterations
 */
def completedIterations[A](innerSelection: SelectionBuilder[ProjectV2IterationFieldIteration, A]): SelectionBuilder[ProjectV2IterationFieldConfiguration, List[A]] = _root_.caliban.client.SelectionBuilder.Field("completedIterations", ListOf(Obj(innerSelection)))
  /**
 * The iteration's duration in days
 */
def duration: SelectionBuilder[ProjectV2IterationFieldConfiguration, Int] = _root_.caliban.client.SelectionBuilder.Field("duration", Scalar())
  /**
 * The iteration's iterations
 */
def iterations[A](innerSelection: SelectionBuilder[ProjectV2IterationFieldIteration, A]): SelectionBuilder[ProjectV2IterationFieldConfiguration, List[A]] = _root_.caliban.client.SelectionBuilder.Field("iterations", ListOf(Obj(innerSelection)))
  /**
 * The iteration's start day of the week
 */
def startDay: SelectionBuilder[ProjectV2IterationFieldConfiguration, Int] = _root_.caliban.client.SelectionBuilder.Field("startDay", Scalar())
}


type ProjectV2IterationFieldIteration
object ProjectV2IterationFieldIteration {
  /**
 * The iteration's duration in days
 */
def duration: SelectionBuilder[ProjectV2IterationFieldIteration, Int] = _root_.caliban.client.SelectionBuilder.Field("duration", Scalar())
  /**
 * The iteration's ID.
 */
def id: SelectionBuilder[ProjectV2IterationFieldIteration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The iteration's start date
 */
def startDate: SelectionBuilder[ProjectV2IterationFieldIteration, Date] = _root_.caliban.client.SelectionBuilder.Field("startDate", Scalar())
  /**
 * The iteration's title.
 */
def title: SelectionBuilder[ProjectV2IterationFieldIteration, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * The iteration's html title.
 */
def titleHTML: SelectionBuilder[ProjectV2IterationFieldIteration, String] = _root_.caliban.client.SelectionBuilder.Field("titleHTML", Scalar())
}


type ProjectV2SingleSelectField
object ProjectV2SingleSelectField {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2SingleSelectField, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The field's type.
 */
def dataType: SelectionBuilder[ProjectV2SingleSelectField, ProjectV2FieldType] = _root_.caliban.client.SelectionBuilder.Field("dataType", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2SingleSelectField, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ProjectV2SingleSelectField, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project field's name.
 */
def name: SelectionBuilder[ProjectV2SingleSelectField, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Options for the single select field
 */
def options[A](innerSelection: SelectionBuilder[ProjectV2SingleSelectFieldOption, A]): SelectionBuilder[ProjectV2SingleSelectField, List[A]] = _root_.caliban.client.SelectionBuilder.Field("options", ListOf(Obj(innerSelection)))
  /**
 * The project that contains this field.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2SingleSelectField, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2SingleSelectField, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type ProjectV2SingleSelectFieldOption
object ProjectV2SingleSelectFieldOption {
  /**
 * The option's ID.
 */
def id: SelectionBuilder[ProjectV2SingleSelectFieldOption, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The option's name.
 */
def name: SelectionBuilder[ProjectV2SingleSelectFieldOption, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The option's html name.
 */
def nameHTML: SelectionBuilder[ProjectV2SingleSelectFieldOption, String] = _root_.caliban.client.SelectionBuilder.Field("nameHTML", Scalar())
}


type ProjectV2SortBy
object ProjectV2SortBy {
  /**
 * The direction of the sorting. Possible values are ASC and DESC.
 */
def direction: SelectionBuilder[ProjectV2SortBy, OrderDirection] = _root_.caliban.client.SelectionBuilder.Field("direction", Scalar())
  /**
 * The field by which items are sorted.
 */
def field[A](innerSelection: SelectionBuilder[ProjectV2Field, A]): SelectionBuilder[ProjectV2SortBy, A] = _root_.caliban.client.SelectionBuilder.Field("field", Obj(innerSelection))
}


type ProjectV2SortByConnection
object ProjectV2SortByConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2SortByEdge, A]): SelectionBuilder[ProjectV2SortByConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2SortBy, A]): SelectionBuilder[ProjectV2SortByConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2SortByConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2SortByConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2SortByEdge
object ProjectV2SortByEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2SortByEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2SortBy, A]): SelectionBuilder[ProjectV2SortByEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectV2SortByField
object ProjectV2SortByField {
  /**
 * The direction of the sorting. Possible values are ASC and DESC.
 */
def direction: SelectionBuilder[ProjectV2SortByField, OrderDirection] = _root_.caliban.client.SelectionBuilder.Field("direction", Scalar())
  /**
 * The field by which items are sorted.
 */
def field[A](onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A]): SelectionBuilder[ProjectV2SortByField, A] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField))))
  /**
 * The field by which items are sorted.
 */
def fieldOption[A](onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None): SelectionBuilder[ProjectV2SortByField, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("field", ChoiceOf(Map("ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ProjectV2SortByFieldConnection
object ProjectV2SortByFieldConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2SortByFieldEdge, A]): SelectionBuilder[ProjectV2SortByFieldConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2SortByField, A]): SelectionBuilder[ProjectV2SortByFieldConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2SortByFieldConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2SortByFieldConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2SortByFieldEdge
object ProjectV2SortByFieldEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2SortByFieldEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2SortByField, A]): SelectionBuilder[ProjectV2SortByFieldEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectV2View
object ProjectV2View {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2View, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2View, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The view's visible fields.
 */
def fields[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConfigurationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("fields", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
  /**
 * The project view's filter.
 */
def filter: SelectionBuilder[ProjectV2View, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("filter", OptionOf(Scalar()))
  /**
 * The view's group-by field.
 */
@deprecated("The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.", "")
def groupBy[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("groupBy", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
  /**
 * The view's group-by field.
 */
def groupByFields[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConfigurationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("groupByFields", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
  def id: SelectionBuilder[ProjectV2View, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The project view's layout.
 */
def layout: SelectionBuilder[ProjectV2View, ProjectV2ViewLayout] = _root_.caliban.client.SelectionBuilder.Field("layout", Scalar())
  /**
 * The project view's name.
 */
def name: SelectionBuilder[ProjectV2View, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The project view's number.
 */
def number: SelectionBuilder[ProjectV2View, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * The project that contains this view.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2View, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * The view's sort-by config.
 */
@deprecated("The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.", "")
def sortBy[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2SortByConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sortBy", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The view's sort-by config.
 */
def sortByFields[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2SortByFieldConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sortByFields", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2View, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The view's vertical-group-by field.
 */
@deprecated("The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.", "")
def verticalGroupBy[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("verticalGroupBy", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
  /**
 * The view's vertical-group-by field.
 */
def verticalGroupByFields[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConfigurationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("verticalGroupByFields", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
  /**
 * The view's visible fields.
 */
@deprecated("The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.", "")
def visibleFields[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2FieldOrder] = None)(innerSelection: SelectionBuilder[ProjectV2FieldConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2FieldOrder]]): SelectionBuilder[ProjectV2View, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("visibleFields", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2FieldOrder")(encoder4)))
}


type ProjectV2ViewConnection
object ProjectV2ViewConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2ViewEdge, A]): SelectionBuilder[ProjectV2ViewConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2View, A]): SelectionBuilder[ProjectV2ViewConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2ViewConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2ViewConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2ViewEdge
object ProjectV2ViewEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2ViewEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2View, A]): SelectionBuilder[ProjectV2ViewEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ProjectV2Workflow
object ProjectV2Workflow {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ProjectV2Workflow, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ProjectV2Workflow, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The workflows' enabled state.
 */
def enabled: SelectionBuilder[ProjectV2Workflow, Boolean] = _root_.caliban.client.SelectionBuilder.Field("enabled", Scalar())
  def id: SelectionBuilder[ProjectV2Workflow, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The workflows' name.
 */
def name: SelectionBuilder[ProjectV2Workflow, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The workflows' number.
 */
def number: SelectionBuilder[ProjectV2Workflow, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * The project that contains this workflow.
 */
def project[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[ProjectV2Workflow, A] = _root_.caliban.client.SelectionBuilder.Field("project", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ProjectV2Workflow, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type ProjectV2WorkflowConnection
object ProjectV2WorkflowConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ProjectV2WorkflowEdge, A]): SelectionBuilder[ProjectV2WorkflowConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ProjectV2Workflow, A]): SelectionBuilder[ProjectV2WorkflowConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ProjectV2WorkflowConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ProjectV2WorkflowConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ProjectV2WorkflowEdge
object ProjectV2WorkflowEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ProjectV2WorkflowEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ProjectV2Workflow, A]): SelectionBuilder[ProjectV2WorkflowEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PublicKey
object PublicKey {
  /**
 * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
 */
def accessedAt: SelectionBuilder[PublicKey, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("accessedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the key was created. Keys created before
March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
 */
def createdAt: SelectionBuilder[PublicKey, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))
  /**
 * The fingerprint for this PublicKey.
 */
def fingerprint: SelectionBuilder[PublicKey, String] = _root_.caliban.client.SelectionBuilder.Field("fingerprint", Scalar())
  def id: SelectionBuilder[PublicKey, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
 */
def isReadOnly: SelectionBuilder[PublicKey, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isReadOnly", OptionOf(Scalar()))
  /**
 * The public key string.
 */
def key: SelectionBuilder[PublicKey, String] = _root_.caliban.client.SelectionBuilder.Field("key", Scalar())
  /**
 * Identifies the date and time when the key was updated. Keys created before
March 5th, 2014 may have inaccurate values. Values will be null for keys not
owned by the user.
 */
def updatedAt: SelectionBuilder[PublicKey, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", OptionOf(Scalar()))
}


type PublicKeyConnection
object PublicKeyConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PublicKeyEdge, A]): SelectionBuilder[PublicKeyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PublicKey, A]): SelectionBuilder[PublicKeyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PublicKeyConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PublicKeyConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PublicKeyEdge
object PublicKeyEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PublicKeyEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PublicKey, A]): SelectionBuilder[PublicKeyEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PublishSponsorsTierPayload
object PublishSponsorsTierPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[PublishSponsorsTierPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The tier that was published.
 */
def sponsorsTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[PublishSponsorsTierPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsTier", OptionOf(Obj(innerSelection)))
}


type PullRequest
object PullRequest {
  /**
 * Reason that the conversation was locked.
 */
def activeLockReason: SelectionBuilder[PullRequest, scala.Option[LockReason]] = _root_.caliban.client.SelectionBuilder.Field("activeLockReason", OptionOf(Scalar()))
  /**
 * The number of additions in this pull request.
 */
def additions: SelectionBuilder[PullRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("additions", Scalar())
  /**
 * A list of Users assigned to this object.
 */
def assignees[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("assignees", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[PullRequest, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * Returns the auto-merge request object if one exists for this pull request.
 */
def autoMergeRequest[A](innerSelection: SelectionBuilder[AutoMergeRequest, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("autoMergeRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the base Ref associated with the pull request.
 */
def baseRef[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("baseRef", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
 */
def baseRefName: SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("baseRefName", Scalar())
  /**
 * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
 */
def baseRefOid: SelectionBuilder[PullRequest, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("baseRefOid", Scalar())
  /**
 * The repository associated with this pull request's base Ref.
 */
def baseRepository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("baseRepository", OptionOf(Obj(innerSelection)))
  /**
 * The body as Markdown.
 */
def body: SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[PullRequest, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Whether or not the pull request is rebaseable.
 */
def canBeRebased: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("canBeRebased", Scalar())
  /**
 * The number of changed files in this pull request.
 */
def changedFiles: SelectionBuilder[PullRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("changedFiles", Scalar())
  /**
 * The HTTP path for the checks of this pull request.
 */
def checksResourcePath: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("checksResourcePath", Scalar())
  /**
 * The HTTP URL for the checks of this pull request.
 */
def checksUrl: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("checksUrl", Scalar())
  /**
 * `true` if the pull request is closed
 */
def closed: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("closed", Scalar())
  /**
 * Identifies the date and time when the object was closed.
 */
def closedAt: SelectionBuilder[PullRequest, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("closedAt", OptionOf(Scalar()))
  /**
 * List of issues that were may be closed by this pull request
 */
def closingIssuesReferences[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, userLinkedOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IssueOrder]], encoder5: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closingIssuesReferences", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IssueOrder")(encoder4), Argument("userLinkedOnly", userLinkedOnly, "Boolean")(encoder5)))
  /**
 * A list of comments associated with the pull request.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueCommentOrder] = None)(innerSelection: SelectionBuilder[IssueCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IssueCommentOrder]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IssueCommentOrder")(encoder4)))
  /**
 * A list of commits present in this pull request's head branch not present in the base branch.
 */
def commits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestCommitConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("commits", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[PullRequest, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[PullRequest, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The number of deletions in this pull request.
 */
def deletions: SelectionBuilder[PullRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("deletions", Scalar())
  /**
 * The actor who edited this pull request's body.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Lists the files changed within this pull request.
 */
def files[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestChangedFileConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("files", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the head Ref associated with the pull request.
 */
def headRef[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headRef", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
 */
def headRefName: SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("headRefName", Scalar())
  /**
 * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
 */
def headRefOid: SelectionBuilder[PullRequest, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("headRefOid", Scalar())
  /**
 * The repository associated with this pull request's head Ref.
 */
def headRepository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headRepository", OptionOf(Obj(innerSelection)))
  /**
 * The owner of the repository associated with this pull request's head Ref.
 */
def headRepositoryOwner[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headRepositoryOwner", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The hovercard information for this issue
 */
def hovercard[A](includeNotificationContexts : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Hovercard, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("hovercard", Obj(innerSelection), arguments = List(Argument("includeNotificationContexts", includeNotificationContexts, "Boolean")(encoder0)))
  def id: SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * The head and base repositories are different.
 */
def isCrossRepository: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * Identifies if the pull request is a draft.
 */
def isDraft: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDraft", Scalar())
  /**
 * Is this pull request read by the viewer
 */
def isReadByViewer: SelectionBuilder[PullRequest, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isReadByViewer", OptionOf(Scalar()))
  /**
 * A list of labels associated with the object.
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LabelOrder] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LabelOrder]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LabelOrder")(encoder4)))
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[PullRequest, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * A list of latest reviews per user associated with the pull request.
 */
def latestOpinionatedReviews[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, writersOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[PullRequestReviewConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("latestOpinionatedReviews", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("writersOnly", writersOnly, "Boolean")(encoder4)))
  /**
 * A list of latest reviews per user associated with the pull request that are not also pending review.
 */
def latestReviews[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestReviewConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("latestReviews", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * `true` if the pull request is locked
 */
def locked: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("locked", Scalar())
  /**
 * Indicates whether maintainers can modify the pull request.
 */
def maintainerCanModify: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("maintainerCanModify", Scalar())
  /**
 * The commit that was created when this pull request was merged.
 */
def mergeCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeCommit", OptionOf(Obj(innerSelection)))
  /**
 * The merge queue entry of the pull request in the base branch's merge queue
 */
def mergeQueueEntry[A](innerSelection: SelectionBuilder[MergeQueueEntry, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueueEntry", OptionOf(Obj(innerSelection)))
  /**
 * Detailed information about the current pull request merge state status.
 */
def mergeStateStatus: SelectionBuilder[PullRequest, MergeStateStatus] = _root_.caliban.client.SelectionBuilder.Field("mergeStateStatus", Scalar())
  /**
 * Whether or not the pull request can be merged based on the existence of merge conflicts.
 */
def mergeable: SelectionBuilder[PullRequest, MergeableState] = _root_.caliban.client.SelectionBuilder.Field("mergeable", Scalar())
  /**
 * Whether or not the pull request was merged.
 */
def merged: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("merged", Scalar())
  /**
 * The date and time that the pull request was merged.
 */
def mergedAt: SelectionBuilder[PullRequest, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("mergedAt", OptionOf(Scalar()))
  /**
 * The actor who merged the pull request.
 */
def mergedBy[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergedBy", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the milestone associated with the pull request.
 */
def milestone[A](innerSelection: SelectionBuilder[Milestone, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the pull request number.
 */
def number: SelectionBuilder[PullRequest, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * A list of Users that are participating in the Pull Request conversation.
 */
def participants[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("participants", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The permalink to the pull request.
 */
def permalink: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("permalink", Scalar())
  /**
 * The commit that GitHub automatically generated to test if this pull request
could be merged. This field will not return a value if the pull request is
merged, or if the test merge commit is still being generated. See the
`mergeable` field for more details on the mergeability of the pull request.
 */
def potentialMergeCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("potentialMergeCommit", OptionOf(Obj(innerSelection)))
  /**
 * List of project cards associated with this pull request.
 */
def projectCards[A](after : scala.Option[String] = None, archivedStates : scala.Option[List[scala.Option[ProjectCardArchivedState]]] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectCardConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[List[scala.Option[ProjectCardArchivedState]]]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("projectCards", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("archivedStates", archivedStates, "[ProjectCardArchivedState]")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * List of project items associated with this pull request.
 */
def projectItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeArchived : scala.Option[Boolean] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2ItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("projectItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("includeArchived", includeArchived, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * Find a project by number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2Order]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2Order")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[PullRequest, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[PullRequest, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this pull request.
 */
def resourcePath: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP path for reverting this pull request.
 */
def revertResourcePath: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("revertResourcePath", Scalar())
  /**
 * The HTTP URL for reverting this pull request.
 */
def revertUrl: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("revertUrl", Scalar())
  /**
 * The current status of this pull request with respect to code review.
 */
def reviewDecision: SelectionBuilder[PullRequest, scala.Option[PullRequestReviewDecision]] = _root_.caliban.client.SelectionBuilder.Field("reviewDecision", OptionOf(Scalar()))
  /**
 * A list of review requests associated with the pull request.
 */
def reviewRequests[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ReviewRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reviewRequests", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The list of all review threads for this pull request.
 */
def reviewThreads[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestReviewThreadConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("reviewThreads", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of reviews associated with the pull request.
 */
def reviews[A](after : scala.Option[String] = None, author : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, states : scala.Option[List[PullRequestReviewState]] = None)(innerSelection: SelectionBuilder[PullRequestReviewConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[List[PullRequestReviewState]]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reviews", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("author", author, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("states", states, "[PullRequestReviewState!]")(encoder5)))
  /**
 * Identifies the state of the pull request.
 */
def state: SelectionBuilder[PullRequest, PullRequestState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * A list of reviewer suggestions based on commit history and past review comments.
 */
def suggestedReviewers[A](innerSelection: SelectionBuilder[SuggestedReviewer, A]): SelectionBuilder[PullRequest, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("suggestedReviewers", ListOf(OptionOf(Obj(innerSelection))))
  /**
 * A list of events, comments, commits, etc. associated with the pull request.
 */
@deprecated("`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.", "")
def timeline[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, since : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[PullRequestTimelineConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("timeline", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("since", since, "DateTime")(encoder4)))
  /**
 * A list of events, comments, commits, etc. associated with the pull request.
 */
def timelineItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, itemTypes : scala.Option[List[PullRequestTimelineItemsItemType]] = None, last : scala.Option[Int] = None, since : scala.Option[DateTime] = None, skip : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestTimelineItemsConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[List[PullRequestTimelineItemsItemType]]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DateTime]], encoder6: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, A] = _root_.caliban.client.SelectionBuilder.Field("timelineItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("itemTypes", itemTypes, "[PullRequestTimelineItemsItemType!]")(encoder3), Argument("last", last, "Int")(encoder4), Argument("since", since, "DateTime")(encoder5), Argument("skip", skip, "Int")(encoder6)))
  /**
 * Identifies the pull request title.
 */
def title: SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the pull request title rendered to HTML.
 */
def titleHTML: SelectionBuilder[PullRequest, HTML] = _root_.caliban.client.SelectionBuilder.Field("titleHTML", Scalar())
  /**
 * Returns a count of how many comments this pull request has received.
 */
def totalCommentsCount: SelectionBuilder[PullRequest, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("totalCommentsCount", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[PullRequest, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this pull request.
 */
def url: SelectionBuilder[PullRequest, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Whether or not the viewer can apply suggestion.
 */
def viewerCanApplySuggestion: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanApplySuggestion", Scalar())
  /**
 * Indicates if the object can be closed by the viewer.
 */
def viewerCanClose: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanClose", Scalar())
  /**
 * Check if the viewer can restore the deleted head ref.
 */
def viewerCanDeleteHeadRef: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDeleteHeadRef", Scalar())
  /**
 * Whether or not the viewer can disable auto-merge
 */
def viewerCanDisableAutoMerge: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDisableAutoMerge", Scalar())
  /**
 * Can the viewer edit files within this pull request.
 */
def viewerCanEditFiles: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanEditFiles", Scalar())
  /**
 * Whether or not the viewer can enable auto-merge
 */
def viewerCanEnableAutoMerge: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanEnableAutoMerge", Scalar())
  /**
 * Indicates whether the viewer can bypass branch protections and merge the pull request immediately
 */
def viewerCanMergeAsAdmin: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMergeAsAdmin", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Indicates if the object can be reopened by the viewer.
 */
def viewerCanReopen: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReopen", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.
If the head ref is up to date or unable to be updated by this user, this will return false.
 */
def viewerCanUpdateBranch: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdateBranch", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[PullRequest, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[PullRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The latest review given from the viewer.
 */
def viewerLatestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("viewerLatestReview", OptionOf(Obj(innerSelection)))
  /**
 * The person who has requested the viewer for review on this pull request.
 */
def viewerLatestReviewRequest[A](innerSelection: SelectionBuilder[ReviewRequest, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("viewerLatestReviewRequest", OptionOf(Obj(innerSelection)))
  /**
 * The merge body text for the viewer and method.
 */
def viewerMergeBodyText(mergeType : scala.Option[PullRequestMergeMethod] = None)(implicit encoder0: ArgEncoder[scala.Option[PullRequestMergeMethod]]): SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("viewerMergeBodyText", Scalar(), arguments = List(Argument("mergeType", mergeType, "PullRequestMergeMethod")(encoder0)))
  /**
 * The merge headline text for the viewer and method.
 */
def viewerMergeHeadlineText(mergeType : scala.Option[PullRequestMergeMethod] = None)(implicit encoder0: ArgEncoder[scala.Option[PullRequestMergeMethod]]): SelectionBuilder[PullRequest, String] = _root_.caliban.client.SelectionBuilder.Field("viewerMergeHeadlineText", Scalar(), arguments = List(Argument("mergeType", mergeType, "PullRequestMergeMethod")(encoder0)))
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[PullRequest, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequest, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited this pull request's body.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequest, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited this pull request's body.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
  /**
 * The owner of the repository associated with this pull request's head Ref.
 */
def headRepositoryOwnerOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequest, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("headRepositoryOwner", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The owner of the repository associated with this pull request's head Ref.
 */
def headRepositoryOwnerInterface[A](headRepositoryOwner: SelectionBuilder[RepositoryOwner, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("headRepositoryOwner", OptionOf(Obj(headRepositoryOwner)))
  /**
 * The actor who merged the pull request.
 */
def mergedByOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequest, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("mergedBy", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who merged the pull request.
 */
def mergedByInterface[A](mergedBy: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergedBy", OptionOf(Obj(mergedBy)))
}


type PullRequestChangedFile
object PullRequestChangedFile {
  /**
 * The number of additions to the file.
 */
def additions: SelectionBuilder[PullRequestChangedFile, Int] = _root_.caliban.client.SelectionBuilder.Field("additions", Scalar())
  /**
 * How the file was changed in this PullRequest
 */
def changeType: SelectionBuilder[PullRequestChangedFile, PatchStatus] = _root_.caliban.client.SelectionBuilder.Field("changeType", Scalar())
  /**
 * The number of deletions to the file.
 */
def deletions: SelectionBuilder[PullRequestChangedFile, Int] = _root_.caliban.client.SelectionBuilder.Field("deletions", Scalar())
  /**
 * The path of the file.
 */
def path: SelectionBuilder[PullRequestChangedFile, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * The state of the file for the viewer.
 */
def viewerViewedState: SelectionBuilder[PullRequestChangedFile, FileViewedState] = _root_.caliban.client.SelectionBuilder.Field("viewerViewedState", Scalar())
}


type PullRequestChangedFileConnection
object PullRequestChangedFileConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestChangedFileEdge, A]): SelectionBuilder[PullRequestChangedFileConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PullRequestChangedFile, A]): SelectionBuilder[PullRequestChangedFileConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestChangedFileConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestChangedFileConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PullRequestChangedFileEdge
object PullRequestChangedFileEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestChangedFileEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PullRequestChangedFile, A]): SelectionBuilder[PullRequestChangedFileEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PullRequestCommit
object PullRequestCommit {
  /**
 * The Git commit object
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequestCommit, A] = _root_.caliban.client.SelectionBuilder.Field("commit", Obj(innerSelection))
  def id: SelectionBuilder[PullRequestCommit, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The pull request this commit belongs to
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestCommit, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The HTTP path for this pull request commit
 */
def resourcePath: SelectionBuilder[PullRequestCommit, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this pull request commit
 */
def url: SelectionBuilder[PullRequestCommit, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type PullRequestCommitCommentThread
object PullRequestCommitCommentThread {
  /**
 * The comments that exist in this thread.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestCommitCommentThread, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The commit the comments were made on.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequestCommitCommentThread, A] = _root_.caliban.client.SelectionBuilder.Field("commit", Obj(innerSelection))
  def id: SelectionBuilder[PullRequestCommitCommentThread, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The file the comments were made on.
 */
def path: SelectionBuilder[PullRequestCommitCommentThread, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))
  /**
 * The position in the diff for the commit that the comment was made on.
 */
def position: SelectionBuilder[PullRequestCommitCommentThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Scalar()))
  /**
 * The pull request this commit comment thread belongs to
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestCommitCommentThread, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestCommitCommentThread, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type PullRequestCommitConnection
object PullRequestCommitConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestCommitEdge, A]): SelectionBuilder[PullRequestCommitConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PullRequestCommit, A]): SelectionBuilder[PullRequestCommitConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestCommitConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestCommitConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PullRequestCommitEdge
object PullRequestCommitEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestCommitEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PullRequestCommit, A]): SelectionBuilder[PullRequestCommitEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PullRequestConnection
object PullRequestConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestEdge, A]): SelectionBuilder[PullRequestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PullRequestContributionsByRepository
object PullRequestContributionsByRepository {
  /**
 * The pull request contributions.
 */
def contributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedPullRequestContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[PullRequestContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("contributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ContributionOrder")(encoder4)))
  /**
 * The repository in which the pull requests were opened.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type PullRequestEdge
object PullRequestEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PullRequestParameters
object PullRequestParameters {
  /**
 * New, reviewable commits pushed will dismiss previous pull request review approvals.
 */
def dismissStaleReviewsOnPush: SelectionBuilder[PullRequestParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("dismissStaleReviewsOnPush", Scalar())
  /**
 * Require an approving review in pull requests that modify files that have a designated code owner.
 */
def requireCodeOwnerReview: SelectionBuilder[PullRequestParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requireCodeOwnerReview", Scalar())
  /**
 * Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
 */
def requireLastPushApproval: SelectionBuilder[PullRequestParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requireLastPushApproval", Scalar())
  /**
 * The number of approving reviews that are required before a pull request can be merged.
 */
def requiredApprovingReviewCount: SelectionBuilder[PullRequestParameters, Int] = _root_.caliban.client.SelectionBuilder.Field("requiredApprovingReviewCount", Scalar())
  /**
 * All conversations on code must be resolved before a pull request can be merged.
 */
def requiredReviewThreadResolution: SelectionBuilder[PullRequestParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiredReviewThreadResolution", Scalar())
}


type PullRequestReview
object PullRequestReview {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequestReview, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[PullRequestReview, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * Indicates whether the author of this review has push access to the repository.
 */
def authorCanPushToRepository: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("authorCanPushToRepository", Scalar())
  /**
 * Identifies the pull request review body.
 */
def body: SelectionBuilder[PullRequestReview, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[PullRequestReview, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body of this review rendered as plain text.
 */
def bodyText: SelectionBuilder[PullRequestReview, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * A list of review comments for the current pull request review.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestReviewCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestReview, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the commit associated with this pull request review.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequestReview, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[PullRequestReview, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[PullRequestReview, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequestReview, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[PullRequestReview, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[PullRequestReview, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * A list of teams that this review was made on behalf of.
 */
def onBehalfOf[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[TeamConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestReview, A] = _root_.caliban.client.SelectionBuilder.Field("onBehalfOf", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[PullRequestReview, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * Identifies the pull request associated with this pull request review.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestReview, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[PullRequestReview, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[PullRequestReview, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestReview, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path permalink for this PullRequestReview.
 */
def resourcePath: SelectionBuilder[PullRequestReview, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the current state of the pull request review.
 */
def state: SelectionBuilder[PullRequestReview, PullRequestReviewState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * Identifies when the Pull Request Review was submitted
 */
def submittedAt: SelectionBuilder[PullRequestReview, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("submittedAt", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[PullRequestReview, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL permalink for this PullRequestReview.
 */
def url: SelectionBuilder[PullRequestReview, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestReview, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[PullRequestReview, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[PullRequestReview, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequestReview, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequestReview, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequestReview, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequestReview, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type PullRequestReviewComment
object PullRequestReviewComment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the subject of the comment.
 */
def authorAssociation: SelectionBuilder[PullRequestReviewComment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The comment body of this review comment.
 */
def body: SelectionBuilder[PullRequestReviewComment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[PullRequestReviewComment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The comment body of this review comment rendered as plain text.
 */
def bodyText: SelectionBuilder[PullRequestReviewComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the commit associated with the comment.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies when the comment was created.
 */
def createdAt: SelectionBuilder[PullRequestReviewComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[PullRequestReviewComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The diff hunk to which the comment applies.
 */
def diffHunk: SelectionBuilder[PullRequestReviewComment, String] = _root_.caliban.client.SelectionBuilder.Field("diffHunk", Scalar())
  /**
 * Identifies when the comment was created in a draft state.
 */
def draftedAt: SelectionBuilder[PullRequestReviewComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("draftedAt", Scalar())
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[PullRequestReviewComment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Returns whether or not a comment has been minimized.
 */
def isMinimized: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMinimized", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[PullRequestReviewComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * The end line number on the file to which the comment applies
 */
def line: SelectionBuilder[PullRequestReviewComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("line", OptionOf(Scalar()))
  /**
 * Returns why the comment was minimized. One of `abuse`, `off-topic`,
`outdated`, `resolved`, `duplicate` and `spam`. Note that the case and
formatting of these values differs from the inputs to the `MinimizeComment` mutation.
 */
def minimizedReason: SelectionBuilder[PullRequestReviewComment, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("minimizedReason", OptionOf(Scalar()))
  /**
 * Identifies the original commit associated with the comment.
 */
def originalCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("originalCommit", OptionOf(Obj(innerSelection)))
  /**
 * The end line number on the file to which the comment applied when it was first created
 */
def originalLine: SelectionBuilder[PullRequestReviewComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("originalLine", OptionOf(Scalar()))
  /**
 * The original line index in the diff to which the comment applies.
 */
@deprecated("We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.", "")
def originalPosition: SelectionBuilder[PullRequestReviewComment, Int] = _root_.caliban.client.SelectionBuilder.Field("originalPosition", Scalar())
  /**
 * The start line number on the file to which the comment applied when it was first created
 */
def originalStartLine: SelectionBuilder[PullRequestReviewComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("originalStartLine", OptionOf(Scalar()))
  /**
 * Identifies when the comment body is outdated
 */
def outdated: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("outdated", Scalar())
  /**
 * The path to which the comment applies.
 */
def path: SelectionBuilder[PullRequestReviewComment, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * The line index in the diff to which the comment applies.
 */
@deprecated("We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.", "")
def position: SelectionBuilder[PullRequestReviewComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("position", OptionOf(Scalar()))
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[PullRequestReviewComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * The pull request associated with this review comment.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestReviewComment, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The pull request review associated with this review comment.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[PullRequestReviewComment, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The comment this is a reply to.
 */
def replyTo[A](innerSelection: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("replyTo", OptionOf(Obj(innerSelection)))
  /**
 * The repository associated with this node.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestReviewComment, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path permalink for this review comment.
 */
def resourcePath: SelectionBuilder[PullRequestReviewComment, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The start line number on the file to which the comment applies
 */
def startLine: SelectionBuilder[PullRequestReviewComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("startLine", OptionOf(Scalar()))
  /**
 * Identifies the state of the comment.
 */
def state: SelectionBuilder[PullRequestReviewComment, PullRequestReviewCommentState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
 */
def subjectType: SelectionBuilder[PullRequestReviewComment, PullRequestReviewThreadSubjectType] = _root_.caliban.client.SelectionBuilder.Field("subjectType", Scalar())
  /**
 * Identifies when the comment was last updated.
 */
def updatedAt: SelectionBuilder[PullRequestReviewComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL permalink for this review comment.
 */
def url: SelectionBuilder[PullRequestReviewComment, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Check if the current viewer can minimize this object.
 */
def viewerCanMinimize: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanMinimize", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[PullRequestReviewComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[PullRequestReviewComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequestReviewComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PullRequestReviewComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[PullRequestReviewComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type PullRequestReviewCommentConnection
object PullRequestReviewCommentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestReviewCommentEdge, A]): SelectionBuilder[PullRequestReviewCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[PullRequestReviewCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestReviewCommentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestReviewCommentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PullRequestReviewCommentEdge
object PullRequestReviewCommentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestReviewCommentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[PullRequestReviewCommentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PullRequestReviewConnection
object PullRequestReviewConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestReviewEdge, A]): SelectionBuilder[PullRequestReviewConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[PullRequestReviewConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestReviewConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestReviewConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PullRequestReviewContributionsByRepository
object PullRequestReviewContributionsByRepository {
  /**
 * The pull request review contributions.
 */
def contributions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ContributionOrder] = None)(innerSelection: SelectionBuilder[CreatedPullRequestReviewContributionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ContributionOrder]]): SelectionBuilder[PullRequestReviewContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("contributions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ContributionOrder")(encoder4)))
  /**
 * The repository in which the pull request reviews were made.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestReviewContributionsByRepository, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type PullRequestReviewEdge
object PullRequestReviewEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestReviewEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[PullRequestReviewEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PullRequestReviewThread
object PullRequestReviewThread {
  /**
 * A list of pull request comments associated with the thread.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, skip : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestReviewCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestReviewThread, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("skip", skip, "Int")(encoder4)))
  /**
 * The side of the diff on which this thread was placed.
 */
def diffSide: SelectionBuilder[PullRequestReviewThread, DiffSide] = _root_.caliban.client.SelectionBuilder.Field("diffSide", Scalar())
  def id: SelectionBuilder[PullRequestReviewThread, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether or not the thread has been collapsed (resolved)
 */
def isCollapsed: SelectionBuilder[PullRequestReviewThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCollapsed", Scalar())
  /**
 * Indicates whether this thread was outdated by newer changes.
 */
def isOutdated: SelectionBuilder[PullRequestReviewThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isOutdated", Scalar())
  /**
 * Whether this thread has been resolved
 */
def isResolved: SelectionBuilder[PullRequestReviewThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isResolved", Scalar())
  /**
 * The line in the file to which this thread refers
 */
def line: SelectionBuilder[PullRequestReviewThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("line", OptionOf(Scalar()))
  /**
 * The original line in the file to which this thread refers.
 */
def originalLine: SelectionBuilder[PullRequestReviewThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("originalLine", OptionOf(Scalar()))
  /**
 * The original start line in the file to which this thread refers (multi-line only).
 */
def originalStartLine: SelectionBuilder[PullRequestReviewThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("originalStartLine", OptionOf(Scalar()))
  /**
 * Identifies the file path of this thread.
 */
def path: SelectionBuilder[PullRequestReviewThread, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * Identifies the pull request associated with this thread.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestReviewThread, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the repository associated with this thread.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestReviewThread, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The user who resolved this thread
 */
def resolvedBy[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[PullRequestReviewThread, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("resolvedBy", OptionOf(Obj(innerSelection)))
  /**
 * The side of the diff that the first line of the thread starts on (multi-line only)
 */
def startDiffSide: SelectionBuilder[PullRequestReviewThread, scala.Option[DiffSide]] = _root_.caliban.client.SelectionBuilder.Field("startDiffSide", OptionOf(Scalar()))
  /**
 * The start line in the file to which this thread refers (multi-line only)
 */
def startLine: SelectionBuilder[PullRequestReviewThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("startLine", OptionOf(Scalar()))
  /**
 * The level at which the comments in the corresponding thread are targeted, can be a diff line or a file
 */
def subjectType: SelectionBuilder[PullRequestReviewThread, PullRequestReviewThreadSubjectType] = _root_.caliban.client.SelectionBuilder.Field("subjectType", Scalar())
  /**
 * Indicates whether the current viewer can reply to this thread.
 */
def viewerCanReply: SelectionBuilder[PullRequestReviewThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReply", Scalar())
  /**
 * Whether or not the viewer can resolve this thread
 */
def viewerCanResolve: SelectionBuilder[PullRequestReviewThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanResolve", Scalar())
  /**
 * Whether or not the viewer can unresolve this thread
 */
def viewerCanUnresolve: SelectionBuilder[PullRequestReviewThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUnresolve", Scalar())
}


type PullRequestReviewThreadConnection
object PullRequestReviewThreadConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestReviewThreadEdge, A]): SelectionBuilder[PullRequestReviewThreadConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PullRequestReviewThread, A]): SelectionBuilder[PullRequestReviewThreadConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestReviewThreadConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestReviewThreadConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PullRequestReviewThreadEdge
object PullRequestReviewThreadEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestReviewThreadEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PullRequestReviewThread, A]): SelectionBuilder[PullRequestReviewThreadEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type PullRequestRevisionMarker
object PullRequestRevisionMarker {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[PullRequestRevisionMarker, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The last commit the viewer has seen.
 */
def lastSeenCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[PullRequestRevisionMarker, A] = _root_.caliban.client.SelectionBuilder.Field("lastSeenCommit", Obj(innerSelection))
  /**
 * The pull request to which the marker belongs.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestRevisionMarker, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
}


type PullRequestTemplate
object PullRequestTemplate {
  /**
 * The body of the template
 */
def body: SelectionBuilder[PullRequestTemplate, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("body", OptionOf(Scalar()))
  /**
 * The filename of the template
 */
def filename: SelectionBuilder[PullRequestTemplate, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("filename", OptionOf(Scalar()))
  /**
 * The repository the template belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestTemplate, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type PullRequestThread
object PullRequestThread {
  /**
 * A list of pull request comments associated with the thread.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, skip : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PullRequestReviewCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[PullRequestThread, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("skip", skip, "Int")(encoder4)))
  /**
 * The side of the diff on which this thread was placed.
 */
def diffSide: SelectionBuilder[PullRequestThread, DiffSide] = _root_.caliban.client.SelectionBuilder.Field("diffSide", Scalar())
  def id: SelectionBuilder[PullRequestThread, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether or not the thread has been collapsed (resolved)
 */
def isCollapsed: SelectionBuilder[PullRequestThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCollapsed", Scalar())
  /**
 * Indicates whether this thread was outdated by newer changes.
 */
def isOutdated: SelectionBuilder[PullRequestThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isOutdated", Scalar())
  /**
 * Whether this thread has been resolved
 */
def isResolved: SelectionBuilder[PullRequestThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isResolved", Scalar())
  /**
 * The line in the file to which this thread refers
 */
def line: SelectionBuilder[PullRequestThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("line", OptionOf(Scalar()))
  /**
 * Identifies the pull request associated with this thread.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[PullRequestThread, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the repository associated with this thread.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[PullRequestThread, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The user who resolved this thread
 */
def resolvedBy[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[PullRequestThread, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("resolvedBy", OptionOf(Obj(innerSelection)))
  /**
 * The side of the diff that the first line of the thread starts on (multi-line only)
 */
def startDiffSide: SelectionBuilder[PullRequestThread, scala.Option[DiffSide]] = _root_.caliban.client.SelectionBuilder.Field("startDiffSide", OptionOf(Scalar()))
  /**
 * The line of the first file diff in the thread.
 */
def startLine: SelectionBuilder[PullRequestThread, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("startLine", OptionOf(Scalar()))
  /**
 * Indicates whether the current viewer can reply to this thread.
 */
def viewerCanReply: SelectionBuilder[PullRequestThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReply", Scalar())
  /**
 * Whether or not the viewer can resolve this thread
 */
def viewerCanResolve: SelectionBuilder[PullRequestThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanResolve", Scalar())
  /**
 * Whether or not the viewer can unresolve this thread
 */
def viewerCanUnresolve: SelectionBuilder[PullRequestThread, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUnresolve", Scalar())
}


type PullRequestTimelineConnection
object PullRequestTimelineConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestTimelineItemEdge, A]): SelectionBuilder[PullRequestTimelineConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onAssignedEvent: SelectionBuilder[AssignedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommit: SelectionBuilder[Commit, A], onCommitCommentThread: SelectionBuilder[CommitCommentThread, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[PullRequestTimelineConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AssignedEvent" -> Obj(onAssignedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "ClosedEvent" -> Obj(onClosedEvent), "Commit" -> Obj(onCommit), "CommitCommentThread" -> Obj(onCommitCommentThread), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DeployedEvent" -> Obj(onDeployedEvent), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MergedEvent" -> Obj(onMergedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "ReferencedEvent" -> Obj(onReferencedEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestTimelineConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestTimelineConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCommitCommentThread: scala.Option[SelectionBuilder[CommitCommentThread, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[PullRequestTimelineConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitCommentThread" -> onCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type PullRequestTimelineItemEdge
object PullRequestTimelineItemEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestTimelineItemEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onAssignedEvent: SelectionBuilder[AssignedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommit: SelectionBuilder[Commit, A], onCommitCommentThread: SelectionBuilder[CommitCommentThread, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[PullRequestTimelineItemEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AssignedEvent" -> Obj(onAssignedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "ClosedEvent" -> Obj(onClosedEvent), "Commit" -> Obj(onCommit), "CommitCommentThread" -> Obj(onCommitCommentThread), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DeployedEvent" -> Obj(onDeployedEvent), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MergedEvent" -> Obj(onMergedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "ReferencedEvent" -> Obj(onReferencedEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCommitCommentThread: scala.Option[SelectionBuilder[CommitCommentThread, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[PullRequestTimelineItemEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitCommentThread" -> onCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type PullRequestTimelineItemsConnection
object PullRequestTimelineItemsConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PullRequestTimelineItemsEdge, A]): SelectionBuilder[PullRequestTimelineItemsConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Identifies the count of items after applying `before` and `after` filters.
 */
def filteredCount: SelectionBuilder[PullRequestTimelineItemsConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("filteredCount", Scalar())
  /**
 * A list of nodes.
 */
def nodes[A](onAddedToMergeQueueEvent: SelectionBuilder[AddedToMergeQueueEvent, A], onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onAutoMergeDisabledEvent: SelectionBuilder[AutoMergeDisabledEvent, A], onAutoMergeEnabledEvent: SelectionBuilder[AutoMergeEnabledEvent, A], onAutoRebaseEnabledEvent: SelectionBuilder[AutoRebaseEnabledEvent, A], onAutoSquashEnabledEvent: SelectionBuilder[AutoSquashEnabledEvent, A], onAutomaticBaseChangeFailedEvent: SelectionBuilder[AutomaticBaseChangeFailedEvent, A], onAutomaticBaseChangeSucceededEvent: SelectionBuilder[AutomaticBaseChangeSucceededEvent, A], onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onPullRequestCommit: SelectionBuilder[PullRequestCommit, A], onPullRequestCommitCommentThread: SelectionBuilder[PullRequestCommitCommentThread, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onPullRequestRevisionMarker: SelectionBuilder[PullRequestRevisionMarker, A], onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRemovedFromMergeQueueEvent: SelectionBuilder[RemovedFromMergeQueueEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[PullRequestTimelineItemsConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> Obj(onAddedToMergeQueueEvent), "AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "AssignedEvent" -> Obj(onAssignedEvent), "AutoMergeDisabledEvent" -> Obj(onAutoMergeDisabledEvent), "AutoMergeEnabledEvent" -> Obj(onAutoMergeEnabledEvent), "AutoRebaseEnabledEvent" -> Obj(onAutoRebaseEnabledEvent), "AutoSquashEnabledEvent" -> Obj(onAutoSquashEnabledEvent), "AutomaticBaseChangeFailedEvent" -> Obj(onAutomaticBaseChangeFailedEvent), "AutomaticBaseChangeSucceededEvent" -> Obj(onAutomaticBaseChangeSucceededEvent), "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "ClosedEvent" -> Obj(onClosedEvent), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DeployedEvent" -> Obj(onDeployedEvent), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MentionedEvent" -> Obj(onMentionedEvent), "MergedEvent" -> Obj(onMergedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "PinnedEvent" -> Obj(onPinnedEvent), "PullRequestCommit" -> Obj(onPullRequestCommit), "PullRequestCommitCommentThread" -> Obj(onPullRequestCommitCommentThread), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "PullRequestRevisionMarker" -> Obj(onPullRequestRevisionMarker), "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent), "ReferencedEvent" -> Obj(onReferencedEvent), "RemovedFromMergeQueueEvent" -> Obj(onRemovedFromMergeQueueEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "TransferredEvent" -> Obj(onTransferredEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))))
  /**
 * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
 */
def pageCount: SelectionBuilder[PullRequestTimelineItemsConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("pageCount", Scalar())
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PullRequestTimelineItemsConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PullRequestTimelineItemsConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * Identifies the date and time when the timeline was last updated.
 */
def updatedAt: SelectionBuilder[PullRequestTimelineItemsConnection, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onAddedToMergeQueueEvent: scala.Option[SelectionBuilder[AddedToMergeQueueEvent, A]] = None, onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onAutoMergeDisabledEvent: scala.Option[SelectionBuilder[AutoMergeDisabledEvent, A]] = None, onAutoMergeEnabledEvent: scala.Option[SelectionBuilder[AutoMergeEnabledEvent, A]] = None, onAutoRebaseEnabledEvent: scala.Option[SelectionBuilder[AutoRebaseEnabledEvent, A]] = None, onAutoSquashEnabledEvent: scala.Option[SelectionBuilder[AutoSquashEnabledEvent, A]] = None, onAutomaticBaseChangeFailedEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeFailedEvent, A]] = None, onAutomaticBaseChangeSucceededEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]] = None, onBaseRefChangedEvent: scala.Option[SelectionBuilder[BaseRefChangedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertToDraftEvent: scala.Option[SelectionBuilder[ConvertToDraftEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onPullRequestCommit: scala.Option[SelectionBuilder[PullRequestCommit, A]] = None, onPullRequestCommitCommentThread: scala.Option[SelectionBuilder[PullRequestCommitCommentThread, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onPullRequestRevisionMarker: scala.Option[SelectionBuilder[PullRequestRevisionMarker, A]] = None, onReadyForReviewEvent: scala.Option[SelectionBuilder[ReadyForReviewEvent, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRemovedFromMergeQueueEvent: scala.Option[SelectionBuilder[RemovedFromMergeQueueEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[PullRequestTimelineItemsConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> onAddedToMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeDisabledEvent" -> onAutoMergeDisabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeEnabledEvent" -> onAutoMergeEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoRebaseEnabledEvent" -> onAutoRebaseEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoSquashEnabledEvent" -> onAutoSquashEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefChangedEvent" -> onBaseRefChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertToDraftEvent" -> onConvertToDraftEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommit" -> onPullRequestCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestRevisionMarker" -> onPullRequestRevisionMarker.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReadyForReviewEvent" -> onReadyForReviewEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromMergeQueueEvent" -> onRemovedFromMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type PullRequestTimelineItemsEdge
object PullRequestTimelineItemsEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PullRequestTimelineItemsEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onAddedToMergeQueueEvent: SelectionBuilder[AddedToMergeQueueEvent, A], onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onAutoMergeDisabledEvent: SelectionBuilder[AutoMergeDisabledEvent, A], onAutoMergeEnabledEvent: SelectionBuilder[AutoMergeEnabledEvent, A], onAutoRebaseEnabledEvent: SelectionBuilder[AutoRebaseEnabledEvent, A], onAutoSquashEnabledEvent: SelectionBuilder[AutoSquashEnabledEvent, A], onAutomaticBaseChangeFailedEvent: SelectionBuilder[AutomaticBaseChangeFailedEvent, A], onAutomaticBaseChangeSucceededEvent: SelectionBuilder[AutomaticBaseChangeSucceededEvent, A], onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onPullRequestCommit: SelectionBuilder[PullRequestCommit, A], onPullRequestCommitCommentThread: SelectionBuilder[PullRequestCommitCommentThread, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onPullRequestRevisionMarker: SelectionBuilder[PullRequestRevisionMarker, A], onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRemovedFromMergeQueueEvent: SelectionBuilder[RemovedFromMergeQueueEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]): SelectionBuilder[PullRequestTimelineItemsEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> Obj(onAddedToMergeQueueEvent), "AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "AssignedEvent" -> Obj(onAssignedEvent), "AutoMergeDisabledEvent" -> Obj(onAutoMergeDisabledEvent), "AutoMergeEnabledEvent" -> Obj(onAutoMergeEnabledEvent), "AutoRebaseEnabledEvent" -> Obj(onAutoRebaseEnabledEvent), "AutoSquashEnabledEvent" -> Obj(onAutoSquashEnabledEvent), "AutomaticBaseChangeFailedEvent" -> Obj(onAutomaticBaseChangeFailedEvent), "AutomaticBaseChangeSucceededEvent" -> Obj(onAutomaticBaseChangeSucceededEvent), "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "ClosedEvent" -> Obj(onClosedEvent), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DeployedEvent" -> Obj(onDeployedEvent), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IssueComment" -> Obj(onIssueComment), "LabeledEvent" -> Obj(onLabeledEvent), "LockedEvent" -> Obj(onLockedEvent), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MentionedEvent" -> Obj(onMentionedEvent), "MergedEvent" -> Obj(onMergedEvent), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "PinnedEvent" -> Obj(onPinnedEvent), "PullRequestCommit" -> Obj(onPullRequestCommit), "PullRequestCommitCommentThread" -> Obj(onPullRequestCommitCommentThread), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "PullRequestRevisionMarker" -> Obj(onPullRequestRevisionMarker), "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent), "ReferencedEvent" -> Obj(onReferencedEvent), "RemovedFromMergeQueueEvent" -> Obj(onRemovedFromMergeQueueEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SubscribedEvent" -> Obj(onSubscribedEvent), "TransferredEvent" -> Obj(onTransferredEvent), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "UserBlockedEvent" -> Obj(onUserBlockedEvent)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onAddedToMergeQueueEvent: scala.Option[SelectionBuilder[AddedToMergeQueueEvent, A]] = None, onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onAutoMergeDisabledEvent: scala.Option[SelectionBuilder[AutoMergeDisabledEvent, A]] = None, onAutoMergeEnabledEvent: scala.Option[SelectionBuilder[AutoMergeEnabledEvent, A]] = None, onAutoRebaseEnabledEvent: scala.Option[SelectionBuilder[AutoRebaseEnabledEvent, A]] = None, onAutoSquashEnabledEvent: scala.Option[SelectionBuilder[AutoSquashEnabledEvent, A]] = None, onAutomaticBaseChangeFailedEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeFailedEvent, A]] = None, onAutomaticBaseChangeSucceededEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]] = None, onBaseRefChangedEvent: scala.Option[SelectionBuilder[BaseRefChangedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertToDraftEvent: scala.Option[SelectionBuilder[ConvertToDraftEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onPullRequestCommit: scala.Option[SelectionBuilder[PullRequestCommit, A]] = None, onPullRequestCommitCommentThread: scala.Option[SelectionBuilder[PullRequestCommitCommentThread, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onPullRequestRevisionMarker: scala.Option[SelectionBuilder[PullRequestRevisionMarker, A]] = None, onReadyForReviewEvent: scala.Option[SelectionBuilder[ReadyForReviewEvent, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRemovedFromMergeQueueEvent: scala.Option[SelectionBuilder[RemovedFromMergeQueueEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None): SelectionBuilder[PullRequestTimelineItemsEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> onAddedToMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeDisabledEvent" -> onAutoMergeDisabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeEnabledEvent" -> onAutoMergeEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoRebaseEnabledEvent" -> onAutoRebaseEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoSquashEnabledEvent" -> onAutoSquashEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefChangedEvent" -> onBaseRefChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertToDraftEvent" -> onConvertToDraftEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommit" -> onPullRequestCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestRevisionMarker" -> onPullRequestRevisionMarker.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReadyForReviewEvent" -> onReadyForReviewEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromMergeQueueEvent" -> onRemovedFromMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type Push
object Push {
  def id: SelectionBuilder[Push, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The SHA after the push
 */
def nextSha: SelectionBuilder[Push, scala.Option[GitObjectID]] = _root_.caliban.client.SelectionBuilder.Field("nextSha", OptionOf(Scalar()))
  /**
 * The permalink for this push.
 */
def permalink: SelectionBuilder[Push, URI] = _root_.caliban.client.SelectionBuilder.Field("permalink", Scalar())
  /**
 * The SHA before the push
 */
def previousSha: SelectionBuilder[Push, scala.Option[GitObjectID]] = _root_.caliban.client.SelectionBuilder.Field("previousSha", OptionOf(Scalar()))
  /**
 * The actor who pushed
 */
def pusher[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Push, A] = _root_.caliban.client.SelectionBuilder.Field("pusher", ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The repository that was pushed to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Push, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The actor who pushed
 */
def pusherOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Push, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pusher", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The actor who pushed
 */
def pusherInterface[A](pusher: SelectionBuilder[Actor, A]): SelectionBuilder[Push, A] = _root_.caliban.client.SelectionBuilder.Field("pusher", Obj(pusher))
}


type PushAllowance
object PushAllowance {
  /**
 * The actor that can push.
 */
def actor[A](onApp: SelectionBuilder[App, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[PushAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[PushAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[PushAllowance, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The actor that can push.
 */
def actorOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[PushAllowance, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type PushAllowanceConnection
object PushAllowanceConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[PushAllowanceEdge, A]): SelectionBuilder[PushAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[PushAllowance, A]): SelectionBuilder[PushAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[PushAllowanceConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[PushAllowanceConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type PushAllowanceEdge
object PushAllowanceEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[PushAllowanceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[PushAllowance, A]): SelectionBuilder[PushAllowanceEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RateLimit
object RateLimit {
  /**
 * The point cost for the current query counting against the rate limit.
 */
def cost: SelectionBuilder[RateLimit, Int] = _root_.caliban.client.SelectionBuilder.Field("cost", Scalar())
  /**
 * The maximum number of points the client is permitted to consume in a 60 minute window.
 */
def limit: SelectionBuilder[RateLimit, Int] = _root_.caliban.client.SelectionBuilder.Field("limit", Scalar())
  /**
 * The maximum number of nodes this query may return
 */
def nodeCount: SelectionBuilder[RateLimit, Int] = _root_.caliban.client.SelectionBuilder.Field("nodeCount", Scalar())
  /**
 * The number of points remaining in the current rate limit window.
 */
def remaining: SelectionBuilder[RateLimit, Int] = _root_.caliban.client.SelectionBuilder.Field("remaining", Scalar())
  /**
 * The time at which the current rate limit window resets in UTC epoch seconds.
 */
def resetAt: SelectionBuilder[RateLimit, DateTime] = _root_.caliban.client.SelectionBuilder.Field("resetAt", Scalar())
  /**
 * The number of points used in the current rate limit window.
 */
def used: SelectionBuilder[RateLimit, Int] = _root_.caliban.client.SelectionBuilder.Field("used", Scalar())
}


type ReactingUserConnection
object ReactingUserConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReactingUserEdge, A]): SelectionBuilder[ReactingUserConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[ReactingUserConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReactingUserConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReactingUserConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ReactingUserEdge
object ReactingUserEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReactingUserEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[ReactingUserEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * The moment when the user made the reaction.
 */
def reactedAt: SelectionBuilder[ReactingUserEdge, DateTime] = _root_.caliban.client.SelectionBuilder.Field("reactedAt", Scalar())
}


type Reaction
object Reaction {
  /**
 * Identifies the emoji reaction.
 */
def content: SelectionBuilder[Reaction, ReactionContent] = _root_.caliban.client.SelectionBuilder.Field("content", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Reaction, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Reaction, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[Reaction, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The reactable piece of content
 */
def reactable[A](onCommitComment: SelectionBuilder[CommitComment, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onRelease: SelectionBuilder[Release, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[Reaction, A] = _root_.caliban.client.SelectionBuilder.Field("reactable", ChoiceOf(Map("CommitComment" -> Obj(onCommitComment), "Discussion" -> Obj(onDiscussion), "DiscussionComment" -> Obj(onDiscussionComment), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "PullRequest" -> Obj(onPullRequest), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "Release" -> Obj(onRelease), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment))))
  /**
 * Identifies the user who created this reaction.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[Reaction, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * The reactable piece of content
 */
def reactableOption[A](onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None): SelectionBuilder[Reaction, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reactable", ChoiceOf(Map("CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The reactable piece of content
 */
def reactableInterface[A](reactable: SelectionBuilder[Reactable, A]): SelectionBuilder[Reaction, A] = _root_.caliban.client.SelectionBuilder.Field("reactable", Obj(reactable))
}


type ReactionConnection
object ReactionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReactionEdge, A]): SelectionBuilder[ReactionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Reaction, A]): SelectionBuilder[ReactionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReactionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReactionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * Whether or not the authenticated user has left a reaction on the subject.
 */
def viewerHasReacted: SelectionBuilder[ReactionConnection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasReacted", Scalar())
}


type ReactionEdge
object ReactionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReactionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Reaction, A]): SelectionBuilder[ReactionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ReactionGroup
object ReactionGroup {
  /**
 * Identifies the emoji reaction.
 */
def content: SelectionBuilder[ReactionGroup, ReactionContent] = _root_.caliban.client.SelectionBuilder.Field("content", Scalar())
  /**
 * Identifies when the reaction was created.
 */
def createdAt: SelectionBuilder[ReactionGroup, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("createdAt", OptionOf(Scalar()))
  /**
 * Reactors to the reaction subject with the emotion represented by this reaction group.
 */
def reactors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ReactorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ReactionGroup, A] = _root_.caliban.client.SelectionBuilder.Field("reactors", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The subject that was reacted to.
 */
def subject[A](onCommitComment: SelectionBuilder[CommitComment, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onRelease: SelectionBuilder[Release, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[ReactionGroup, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("CommitComment" -> Obj(onCommitComment), "Discussion" -> Obj(onDiscussion), "DiscussionComment" -> Obj(onDiscussionComment), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "PullRequest" -> Obj(onPullRequest), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "Release" -> Obj(onRelease), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment))))
  /**
 * Users who have reacted to the reaction subject with the emotion represented by this reaction group
 */
@deprecated("Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.", "")
def users[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ReactingUserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[ReactionGroup, A] = _root_.caliban.client.SelectionBuilder.Field("users", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Whether or not the authenticated user has left a reaction on the subject.
 */
def viewerHasReacted: SelectionBuilder[ReactionGroup, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasReacted", Scalar())
  /**
 * The subject that was reacted to.
 */
def subjectOption[A](onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None): SelectionBuilder[ReactionGroup, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The subject that was reacted to.
 */
def subjectInterface[A](subject: SelectionBuilder[Reactable, A]): SelectionBuilder[ReactionGroup, A] = _root_.caliban.client.SelectionBuilder.Field("subject", Obj(subject))
}


type ReactorConnection
object ReactorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReactorEdge, A]): SelectionBuilder[ReactorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onBot: SelectionBuilder[Bot, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReactorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReactorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReactorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReactorConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type ReactorEdge
object ReactorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReactorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The author of the reaction.
 */
def node[A](onBot: SelectionBuilder[Bot, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReactorEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", ChoiceOf(Map("Bot" -> Obj(onBot), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The moment when the user made the reaction.
 */
def reactedAt: SelectionBuilder[ReactorEdge, DateTime] = _root_.caliban.client.SelectionBuilder.Field("reactedAt", Scalar())
  /**
 * The author of the reaction.
 */
def nodeOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReactorEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type ReadyForReviewEvent
object ReadyForReviewEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReadyForReviewEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReadyForReviewEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ReadyForReviewEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReadyForReviewEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The HTTP path for this ready for review event.
 */
def resourcePath: SelectionBuilder[ReadyForReviewEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this ready for review event.
 */
def url: SelectionBuilder[ReadyForReviewEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReadyForReviewEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ReadyForReviewEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type Ref
object Ref {
  /**
 * A list of pull requests with this ref as the head ref.
 */
def associatedPullRequests[A](after : scala.Option[String] = None, baseRefName : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, headRefName : scala.Option[String] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[PullRequestState]] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[IssueOrder]], encoder8: ArgEncoder[scala.Option[List[PullRequestState]]]): SelectionBuilder[Ref, A] = _root_.caliban.client.SelectionBuilder.Field("associatedPullRequests", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("baseRefName", baseRefName, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("headRefName", headRefName, "String")(encoder4), Argument("labels", labels, "[String!]")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "IssueOrder")(encoder7), Argument("states", states, "[PullRequestState!]")(encoder8)))
  /**
 * Branch protection rules for this ref
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[Ref, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  /**
 * Compares the current ref as a base ref to another head ref, if the comparison can be made.
 */
def compare[A](headRef : String)(innerSelection: SelectionBuilder[Comparison, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Ref, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("compare", OptionOf(Obj(innerSelection)), arguments = List(Argument("headRef", headRef, "String!")(encoder0)))
  def id: SelectionBuilder[Ref, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The ref name.
 */
def name: SelectionBuilder[Ref, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
 */
def prefix: SelectionBuilder[Ref, String] = _root_.caliban.client.SelectionBuilder.Field("prefix", Scalar())
  /**
 * Branch protection rules that are viewable by non-admins
 */
def refUpdateRule[A](innerSelection: SelectionBuilder[RefUpdateRule, A]): SelectionBuilder[Ref, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("refUpdateRule", OptionOf(Obj(innerSelection)))
  /**
 * The repository the ref belongs to.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Ref, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The object the ref points to. Returns null when object does not exist.
 */
def target[A](onBlob: SelectionBuilder[Blob, A], onCommit: SelectionBuilder[Commit, A], onTag: SelectionBuilder[Tag, A], onTree: SelectionBuilder[Tree, A]): SelectionBuilder[Ref, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("target", OptionOf(ChoiceOf(Map("Blob" -> Obj(onBlob), "Commit" -> Obj(onCommit), "Tag" -> Obj(onTag), "Tree" -> Obj(onTree)))))
  /**
 * The object the ref points to. Returns null when object does not exist.
 */
def targetOption[A](onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None): SelectionBuilder[Ref, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("target", OptionOf(ChoiceOf(Map("Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The object the ref points to. Returns null when object does not exist.
 */
def targetInterface[A](target: SelectionBuilder[GitObject, A]): SelectionBuilder[Ref, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("target", OptionOf(Obj(target)))
}


type RefConnection
object RefConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RefEdge, A]): SelectionBuilder[RefConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[RefConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RefConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RefConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RefEdge
object RefEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RefEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[RefEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RefNameConditionTarget
object RefNameConditionTarget {
  /**
 * Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
 */
def exclude: SelectionBuilder[RefNameConditionTarget, List[String]] = _root_.caliban.client.SelectionBuilder.Field("exclude", ListOf(Scalar()))
  /**
 * Array of ref names or patterns to include. One of these patterns must match
for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the
default branch or `~ALL` to include all branches.
 */
def include: SelectionBuilder[RefNameConditionTarget, List[String]] = _root_.caliban.client.SelectionBuilder.Field("include", ListOf(Scalar()))
}


type RefUpdateRule
object RefUpdateRule {
  /**
 * Can this branch be deleted.
 */
def allowsDeletions: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("allowsDeletions", Scalar())
  /**
 * Are force pushes allowed on this branch.
 */
def allowsForcePushes: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("allowsForcePushes", Scalar())
  /**
 * Can matching branches be created.
 */
def blocksCreations: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("blocksCreations", Scalar())
  /**
 * Identifies the protection rule pattern.
 */
def pattern: SelectionBuilder[RefUpdateRule, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
  /**
 * Number of approving reviews required to update matching branches.
 */
def requiredApprovingReviewCount: SelectionBuilder[RefUpdateRule, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("requiredApprovingReviewCount", OptionOf(Scalar()))
  /**
 * List of required status check contexts that must pass for commits to be accepted to matching branches.
 */
def requiredStatusCheckContexts: SelectionBuilder[RefUpdateRule, scala.Option[List[scala.Option[String]]]] = _root_.caliban.client.SelectionBuilder.Field("requiredStatusCheckContexts", OptionOf(ListOf(OptionOf(Scalar()))))
  /**
 * Are reviews from code owners required to update matching branches.
 */
def requiresCodeOwnerReviews: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresCodeOwnerReviews", Scalar())
  /**
 * Are conversations required to be resolved before merging.
 */
def requiresConversationResolution: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresConversationResolution", Scalar())
  /**
 * Are merge commits prohibited from being pushed to this branch.
 */
def requiresLinearHistory: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresLinearHistory", Scalar())
  /**
 * Are commits required to be signed.
 */
def requiresSignatures: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("requiresSignatures", Scalar())
  /**
 * Is the viewer allowed to dismiss reviews.
 */
def viewerAllowedToDismissReviews: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerAllowedToDismissReviews", Scalar())
  /**
 * Can the viewer push to the branch
 */
def viewerCanPush: SelectionBuilder[RefUpdateRule, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanPush", Scalar())
}


type ReferencedEvent
object ReferencedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the commit associated with the 'referenced' event.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[ReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the repository associated with the 'referenced' event.
 */
def commitRepository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[ReferencedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("commitRepository", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReferencedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ReferencedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Reference originated in a different repository.
 */
def isCrossRepository: SelectionBuilder[ReferencedEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
 */
def isDirectReference: SelectionBuilder[ReferencedEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDirectReference", Scalar())
  /**
 * Object referenced by event.
 */
def subject[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReferencedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Object referenced by event.
 */
def subjectOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReferencedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ReferencedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload
object RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The identity provider for the enterprise.
 */
def identityProvider[A](innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]): SelectionBuilder[RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("identityProvider", OptionOf(Obj(innerSelection)))
}


type RegenerateVerifiableDomainTokenPayload
object RegenerateVerifiableDomainTokenPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RegenerateVerifiableDomainTokenPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The verification token that was generated.
 */
def verificationToken: SelectionBuilder[RegenerateVerifiableDomainTokenPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("verificationToken", OptionOf(Scalar()))
}


type RejectDeploymentsPayload
object RejectDeploymentsPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RejectDeploymentsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The affected deployments.
 */
def deployments[A](innerSelection: SelectionBuilder[Deployment, A]): SelectionBuilder[RejectDeploymentsPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("deployments", OptionOf(ListOf(Obj(innerSelection))))
}


type Release
object Release {
  /**
 * The author of the release
 */
def author[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[Release, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Release, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Release, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The description of the release.
 */
def description: SelectionBuilder[Release, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The description of this release rendered to HTML.
 */
def descriptionHTML: SelectionBuilder[Release, scala.Option[HTML]] = _root_.caliban.client.SelectionBuilder.Field("descriptionHTML", OptionOf(Scalar()))
  def id: SelectionBuilder[Release, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether or not the release is a draft
 */
def isDraft: SelectionBuilder[Release, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDraft", Scalar())
  /**
 * Whether or not the release is the latest releast
 */
def isLatest: SelectionBuilder[Release, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isLatest", Scalar())
  /**
 * Whether or not the release is a prerelease
 */
def isPrerelease: SelectionBuilder[Release, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPrerelease", Scalar())
  /**
 * A list of users mentioned in the release description
 */
def mentions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Release, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mentions", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The title of the release.
 */
def name: SelectionBuilder[Release, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the release was created.
 */
def publishedAt: SelectionBuilder[Release, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[Release, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[Release, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * List of releases assets which are dependent on this release.
 */
def releaseAssets[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, name : scala.Option[String] = None)(innerSelection: SelectionBuilder[ReleaseAssetConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]]): SelectionBuilder[Release, A] = _root_.caliban.client.SelectionBuilder.Field("releaseAssets", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("name", name, "String")(encoder4)))
  /**
 * The repository that the release belongs to.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Release, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The HTTP path for this issue
 */
def resourcePath: SelectionBuilder[Release, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * A description of the release, rendered to HTML without any links in it.
 */
def shortDescriptionHTML(limit : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Release, scala.Option[HTML]] = _root_.caliban.client.SelectionBuilder.Field("shortDescriptionHTML", OptionOf(Scalar()), arguments = List(Argument("limit", limit, "Int")(encoder0)))
  /**
 * The Git tag the release points to
 */
def tag[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[Release, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("tag", OptionOf(Obj(innerSelection)))
  /**
 * The tag commit for this release.
 */
def tagCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[Release, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("tagCommit", OptionOf(Obj(innerSelection)))
  /**
 * The name of the release's Git tag
 */
def tagName: SelectionBuilder[Release, String] = _root_.caliban.client.SelectionBuilder.Field("tagName", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Release, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this issue
 */
def url: SelectionBuilder[Release, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[Release, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
}


type ReleaseAsset
object ReleaseAsset {
  /**
 * The asset's content-type
 */
def contentType: SelectionBuilder[ReleaseAsset, String] = _root_.caliban.client.SelectionBuilder.Field("contentType", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReleaseAsset, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The number of times this asset was downloaded
 */
def downloadCount: SelectionBuilder[ReleaseAsset, Int] = _root_.caliban.client.SelectionBuilder.Field("downloadCount", Scalar())
  /**
 * Identifies the URL where you can download the release asset via the browser.
 */
def downloadUrl: SelectionBuilder[ReleaseAsset, URI] = _root_.caliban.client.SelectionBuilder.Field("downloadUrl", Scalar())
  def id: SelectionBuilder[ReleaseAsset, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the title of the release asset.
 */
def name: SelectionBuilder[ReleaseAsset, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Release that the asset is associated with
 */
def release[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseAsset, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("release", OptionOf(Obj(innerSelection)))
  /**
 * The size (in bytes) of the asset
 */
def size: SelectionBuilder[ReleaseAsset, Int] = _root_.caliban.client.SelectionBuilder.Field("size", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[ReleaseAsset, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The user that performed the upload
 */
def uploadedBy[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[ReleaseAsset, A] = _root_.caliban.client.SelectionBuilder.Field("uploadedBy", Obj(innerSelection))
  /**
 * Identifies the URL of the release asset.
 */
def url: SelectionBuilder[ReleaseAsset, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type ReleaseAssetConnection
object ReleaseAssetConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReleaseAssetEdge, A]): SelectionBuilder[ReleaseAssetConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ReleaseAsset, A]): SelectionBuilder[ReleaseAssetConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReleaseAssetConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReleaseAssetConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ReleaseAssetEdge
object ReleaseAssetEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReleaseAssetEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ReleaseAsset, A]): SelectionBuilder[ReleaseAssetEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ReleaseConnection
object ReleaseConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReleaseEdge, A]): SelectionBuilder[ReleaseConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReleaseConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReleaseConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ReleaseEdge
object ReleaseEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReleaseEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[ReleaseEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RemoveAssigneesFromAssignablePayload
object RemoveAssigneesFromAssignablePayload {
  /**
 * The item that was unassigned.
 */
def assignable[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[RemoveAssigneesFromAssignablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignable", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveAssigneesFromAssignablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item that was unassigned.
 */
def assignableOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[RemoveAssigneesFromAssignablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("assignable", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The item that was unassigned.
 */
def assignableInterface[A](assignable: SelectionBuilder[Assignable, A]): SelectionBuilder[RemoveAssigneesFromAssignablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignable", OptionOf(Obj(assignable)))
}


type RemoveEnterpriseAdminPayload
object RemoveEnterpriseAdminPayload {
  /**
 * The user who was removed as an administrator.
 */
def admin[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemoveEnterpriseAdminPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("admin", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveEnterpriseAdminPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated enterprise.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[RemoveEnterpriseAdminPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of removing an administrator.
 */
def message: SelectionBuilder[RemoveEnterpriseAdminPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
  /**
 * The viewer performing the mutation.
 */
def viewer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemoveEnterpriseAdminPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("viewer", OptionOf(Obj(innerSelection)))
}


type RemoveEnterpriseIdentityProviderPayload
object RemoveEnterpriseIdentityProviderPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveEnterpriseIdentityProviderPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The identity provider that was removed from the enterprise.
 */
def identityProvider[A](innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]): SelectionBuilder[RemoveEnterpriseIdentityProviderPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("identityProvider", OptionOf(Obj(innerSelection)))
}


type RemoveEnterpriseMemberPayload
object RemoveEnterpriseMemberPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveEnterpriseMemberPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated enterprise.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[RemoveEnterpriseMemberPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * The user that was removed from the enterprise.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemoveEnterpriseMemberPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * The viewer performing the mutation.
 */
def viewer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemoveEnterpriseMemberPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("viewer", OptionOf(Obj(innerSelection)))
}


type RemoveEnterpriseOrganizationPayload
object RemoveEnterpriseOrganizationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveEnterpriseOrganizationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated enterprise.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[RemoveEnterpriseOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * The organization that was removed from the enterprise.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RemoveEnterpriseOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The viewer performing the mutation.
 */
def viewer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemoveEnterpriseOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("viewer", OptionOf(Obj(innerSelection)))
}


type RemoveEnterpriseSupportEntitlementPayload
object RemoveEnterpriseSupportEntitlementPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveEnterpriseSupportEntitlementPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of removing the support entitlement.
 */
def message: SelectionBuilder[RemoveEnterpriseSupportEntitlementPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type RemoveLabelsFromLabelablePayload
object RemoveLabelsFromLabelablePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveLabelsFromLabelablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The Labelable the labels were removed from.
 */
def labelable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[RemoveLabelsFromLabelablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * The Labelable the labels were removed from.
 */
def labelableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[RemoveLabelsFromLabelablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The Labelable the labels were removed from.
 */
def labelableInterface[A](labelable: SelectionBuilder[Labelable, A]): SelectionBuilder[RemoveLabelsFromLabelablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", OptionOf(Obj(labelable)))
}


type RemoveOutsideCollaboratorPayload
object RemoveOutsideCollaboratorPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveOutsideCollaboratorPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The user that was removed as an outside collaborator.
 */
def removedUser[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemoveOutsideCollaboratorPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removedUser", OptionOf(Obj(innerSelection)))
}


type RemoveReactionPayload
object RemoveReactionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveReactionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The reaction object.
 */
def reaction[A](innerSelection: SelectionBuilder[Reaction, A]): SelectionBuilder[RemoveReactionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reaction", OptionOf(Obj(innerSelection)))
  /**
 * The reaction groups for the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[RemoveReactionPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * The reactable subject.
 */
def subject[A](onCommitComment: SelectionBuilder[CommitComment, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onRelease: SelectionBuilder[Release, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[RemoveReactionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("CommitComment" -> Obj(onCommitComment), "Discussion" -> Obj(onDiscussion), "DiscussionComment" -> Obj(onDiscussionComment), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "PullRequest" -> Obj(onPullRequest), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "Release" -> Obj(onRelease), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment)))))
  /**
 * The reactable subject.
 */
def subjectOption[A](onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None): SelectionBuilder[RemoveReactionPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The reactable subject.
 */
def subjectInterface[A](subject: SelectionBuilder[Reactable, A]): SelectionBuilder[RemoveReactionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(Obj(subject)))
}


type RemoveStarPayload
object RemoveStarPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveStarPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The starrable.
 */
def starrable[A](onGist: SelectionBuilder[Gist, A], onRepository: SelectionBuilder[Repository, A], onTopic: SelectionBuilder[Topic, A]): SelectionBuilder[RemoveStarPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("starrable", OptionOf(ChoiceOf(Map("Gist" -> Obj(onGist), "Repository" -> Obj(onRepository), "Topic" -> Obj(onTopic)))))
  /**
 * The starrable.
 */
def starrableOption[A](onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onTopic: scala.Option[SelectionBuilder[Topic, A]] = None): SelectionBuilder[RemoveStarPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("starrable", OptionOf(ChoiceOf(Map("Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Topic" -> onTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The starrable.
 */
def starrableInterface[A](starrable: SelectionBuilder[Starrable, A]): SelectionBuilder[RemoveStarPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("starrable", OptionOf(Obj(starrable)))
}


type RemoveUpvotePayload
object RemoveUpvotePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RemoveUpvotePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The votable subject.
 */
def subject[A](onDiscussion: SelectionBuilder[Discussion, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[RemoveUpvotePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "DiscussionComment" -> Obj(onDiscussionComment)))))
  /**
 * The votable subject.
 */
def subjectOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None): SelectionBuilder[RemoveUpvotePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The votable subject.
 */
def subjectInterface[A](subject: SelectionBuilder[Votable, A]): SelectionBuilder[RemoveUpvotePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(Obj(subject)))
}


type RemovedFromMergeQueueEvent
object RemovedFromMergeQueueEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the before commit SHA for the 'removed_from_merge_queue' event.
 */
def beforeCommit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("beforeCommit", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[RemovedFromMergeQueueEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The user who removed this Pull Request from the merge queue
 */
def enqueuer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enqueuer", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[RemovedFromMergeQueueEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The merge queue where this pull request was removed from.
 */
def mergeQueue[A](innerSelection: SelectionBuilder[MergeQueue, A]): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueue", OptionOf(Obj(innerSelection)))
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * The reason this pull request was removed from the queue.
 */
def reason: SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("reason", OptionOf(Scalar()))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[RemovedFromMergeQueueEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type RemovedFromProjectEvent
object RemovedFromProjectEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RemovedFromProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[RemovedFromProjectEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[RemovedFromProjectEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[RemovedFromProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Project referenced by event.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[RemovedFromProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  /**
 * Column name referenced by this project event.
 */
def projectColumnName: SelectionBuilder[RemovedFromProjectEvent, String] = _root_.caliban.client.SelectionBuilder.Field("projectColumnName", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RemovedFromProjectEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[RemovedFromProjectEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type RenamedTitleEvent
object RenamedTitleEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RenamedTitleEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[RenamedTitleEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the current title of the issue or pull request.
 */
def currentTitle: SelectionBuilder[RenamedTitleEvent, String] = _root_.caliban.client.SelectionBuilder.Field("currentTitle", Scalar())
  def id: SelectionBuilder[RenamedTitleEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the previous title of the issue or pull request.
 */
def previousTitle: SelectionBuilder[RenamedTitleEvent, String] = _root_.caliban.client.SelectionBuilder.Field("previousTitle", Scalar())
  /**
 * Subject that was renamed.
 */
def subject[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[RenamedTitleEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Subject that was renamed.
 */
def subjectOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[RenamedTitleEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RenamedTitleEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[RenamedTitleEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ReopenDiscussionPayload
object ReopenDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ReopenDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion that was reopened.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[ReopenDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type ReopenIssuePayload
object ReopenIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ReopenIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue that was opened.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[ReopenIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type ReopenPullRequestPayload
object ReopenPullRequestPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ReopenPullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that was reopened.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReopenPullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type ReopenedEvent
object ReopenedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReopenedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Object that was reopened.
 */
def closable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onMilestone: SelectionBuilder[Milestone, A], onProject: SelectionBuilder[Project, A], onProjectV2: SelectionBuilder[ProjectV2, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReopenedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("closable", ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "Milestone" -> Obj(onMilestone), "Project" -> Obj(onProject), "ProjectV2" -> Obj(onProjectV2), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReopenedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ReopenedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The reason the issue state was changed to open.
 */
def stateReason: SelectionBuilder[ReopenedEvent, scala.Option[IssueStateReason]] = _root_.caliban.client.SelectionBuilder.Field("stateReason", OptionOf(Scalar()))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReopenedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ReopenedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Object that was reopened.
 */
def closableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onMilestone: scala.Option[SelectionBuilder[Milestone, A]] = None, onProject: scala.Option[SelectionBuilder[Project, A]] = None, onProjectV2: scala.Option[SelectionBuilder[ProjectV2, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[ReopenedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closable", ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Milestone" -> onMilestone.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Project" -> onProject.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2" -> onProjectV2.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Object that was reopened.
 */
def closableInterface[A](closable: SelectionBuilder[Closable, A]): SelectionBuilder[ReopenedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("closable", Obj(closable))
}


type RepoAccessAuditEntry
object RepoAccessAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoAccessAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoAccessAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The visibility of the repository
 */
def visibility: SelectionBuilder[RepoAccessAuditEntry, scala.Option[RepoAccessAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoAccessAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoAddMemberAuditEntry
object RepoAddMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoAddMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoAddMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoAddMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The visibility of the repository
 */
def visibility: SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[RepoAddMemberAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoAddMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoAddTopicAuditEntry
object RepoAddTopicAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoAddTopicAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoAddTopicAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoAddTopicAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The name of the topic added to the repository
 */
def topic[A](innerSelection: SelectionBuilder[Topic, A]): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("topic", OptionOf(Obj(innerSelection)))
  /**
 * The name of the topic added to the repository
 */
def topicName: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("topicName", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoAddTopicAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoArchivedAuditEntry
object RepoArchivedAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoArchivedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoArchivedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoArchivedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoArchivedAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoArchivedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoArchivedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoArchivedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoArchivedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The visibility of the repository
 */
def visibility: SelectionBuilder[RepoArchivedAuditEntry, scala.Option[RepoArchivedAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoArchivedAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoChangeMergeSettingAuditEntry
object RepoChangeMergeSettingAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoChangeMergeSettingAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoChangeMergeSettingAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoChangeMergeSettingAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the change was to enable (true) or disable (false) the merge type
 */
def isEnabled: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isEnabled", OptionOf(Scalar()))
  /**
 * The merge method affected by the change
 */
def mergeType: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[RepoChangeMergeSettingAuditEntryMergeType]] = _root_.caliban.client.SelectionBuilder.Field("mergeType", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoChangeMergeSettingAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigDisableAnonymousGitAccessAuditEntry
object RepoConfigDisableAnonymousGitAccessAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigDisableCollaboratorsOnlyAuditEntry
object RepoConfigDisableCollaboratorsOnlyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigDisableContributorsOnlyAuditEntry
object RepoConfigDisableContributorsOnlyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigDisableSockpuppetDisallowedAuditEntry
object RepoConfigDisableSockpuppetDisallowedAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigEnableAnonymousGitAccessAuditEntry
object RepoConfigEnableAnonymousGitAccessAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigEnableCollaboratorsOnlyAuditEntry
object RepoConfigEnableCollaboratorsOnlyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigEnableContributorsOnlyAuditEntry
object RepoConfigEnableContributorsOnlyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigEnableSockpuppetDisallowedAuditEntry
object RepoConfigEnableSockpuppetDisallowedAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigLockAnonymousGitAccessAuditEntry
object RepoConfigLockAnonymousGitAccessAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoConfigUnlockAnonymousGitAccessAuditEntry
object RepoConfigUnlockAnonymousGitAccessAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoCreateAuditEntry
object RepoCreateAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoCreateAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoCreateAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The name of the parent repository for this forked repository.
 */
def forkParentName: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("forkParentName", OptionOf(Scalar()))
  /**
 * The name of the root repository for this network.
 */
def forkSourceName: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("forkSourceName", OptionOf(Scalar()))
  def id: SelectionBuilder[RepoCreateAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoCreateAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoCreateAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoCreateAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoCreateAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The visibility of the repository
 */
def visibility: SelectionBuilder[RepoCreateAuditEntry, scala.Option[RepoCreateAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoCreateAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoDestroyAuditEntry
object RepoDestroyAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoDestroyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoDestroyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoDestroyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoDestroyAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoDestroyAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoDestroyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoDestroyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoDestroyAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The visibility of the repository
 */
def visibility: SelectionBuilder[RepoDestroyAuditEntry, scala.Option[RepoDestroyAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoDestroyAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoRemoveMemberAuditEntry
object RepoRemoveMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoRemoveMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoRemoveMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoRemoveMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The visibility of the repository
 */
def visibility: SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[RepoRemoveMemberAuditEntryVisibility]] = _root_.caliban.client.SelectionBuilder.Field("visibility", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoRemoveMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepoRemoveTopicAuditEntry
object RepoRemoveTopicAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepoRemoveTopicAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepoRemoveTopicAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[RepoRemoveTopicAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The name of the topic added to the repository
 */
def topic[A](innerSelection: SelectionBuilder[Topic, A]): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("topic", OptionOf(Obj(innerSelection)))
  /**
 * The name of the topic added to the repository
 */
def topicName: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("topicName", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepoRemoveTopicAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type Repository
object Repository {
  /**
 * Whether or not a pull request head branch that is behind its base branch can
always be updated even if it is not required to be up to date before merging.
 */
def allowUpdateBranch: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("allowUpdateBranch", Scalar())
  /**
 * Identifies the date and time when the repository was archived.
 */
def archivedAt: SelectionBuilder[Repository, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("archivedAt", OptionOf(Scalar()))
  /**
 * A list of users that can be assigned to issues in this repository.
 */
def assignableUsers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("assignableUsers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("query", query, "String")(encoder4)))
  /**
 * Whether or not Auto-merge can be enabled on pull requests in this repository.
 */
def autoMergeAllowed: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("autoMergeAllowed", Scalar())
  /**
 * A list of branch protection rules for this repository.
 */
def branchProtectionRules[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[BranchProtectionRuleConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRules", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Returns the code of conduct for this repository
 */
def codeOfConduct[A](innerSelection: SelectionBuilder[CodeOfConduct, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("codeOfConduct", OptionOf(Obj(innerSelection)))
  /**
 * Information extracted from the repository's `CODEOWNERS` file.
 */
def codeowners[A](refName : scala.Option[String] = None)(innerSelection: SelectionBuilder[RepositoryCodeowners, A])(implicit encoder0: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("codeowners", OptionOf(Obj(innerSelection)), arguments = List(Argument("refName", refName, "String")(encoder0)))
  /**
 * A list of collaborators associated with the repository.
 */
def collaborators[A](affiliation : scala.Option[CollaboratorAffiliation] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, login : scala.Option[String] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[RepositoryCollaboratorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[CollaboratorAffiliation]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("collaborators", OptionOf(Obj(innerSelection)), arguments = List(Argument("affiliation", affiliation, "CollaboratorAffiliation")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("login", login, "String")(encoder5), Argument("query", query, "String")(encoder6)))
  /**
 * A list of commit comments associated with the repository.
 */
def commitComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("commitComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Returns a list of contact links associated to the repository
 */
def contactLinks[A](innerSelection: SelectionBuilder[RepositoryContactLink, A]): SelectionBuilder[Repository, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("contactLinks", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Repository, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Repository, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The Ref associated with the repository's default branch.
 */
def defaultBranchRef[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("defaultBranchRef", OptionOf(Obj(innerSelection)))
  /**
 * Whether or not branches are automatically deleted when merged in this repository.
 */
def deleteBranchOnMerge: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("deleteBranchOnMerge", Scalar())
  /**
 * A list of dependency manifests contained in the repository
 */
def dependencyGraphManifests[A](after : scala.Option[String] = None, before : scala.Option[String] = None, dependenciesAfter : scala.Option[String] = None, dependenciesFirst : scala.Option[Int] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, withDependencies : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[DependencyGraphManifestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dependencyGraphManifests", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("dependenciesAfter", dependenciesAfter, "String")(encoder2), Argument("dependenciesFirst", dependenciesFirst, "Int")(encoder3), Argument("first", first, "Int")(encoder4), Argument("last", last, "Int")(encoder5), Argument("withDependencies", withDependencies, "Boolean")(encoder6)))
  /**
 * A list of deploy keys that are on this repository.
 */
def deployKeys[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeployKeyConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("deployKeys", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Deployments associated with the repository
 */
def deployments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, environments : scala.Option[List[String]] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DeploymentOrder] = None)(innerSelection: SelectionBuilder[DeploymentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[String]]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DeploymentOrder]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("deployments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("environments", environments, "[String!]")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "DeploymentOrder")(encoder5)))
  /**
 * The description of the repository.
 */
def description: SelectionBuilder[Repository, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The description of the repository rendered to HTML.
 */
def descriptionHTML: SelectionBuilder[Repository, HTML] = _root_.caliban.client.SelectionBuilder.Field("descriptionHTML", Scalar())
  /**
 * Returns a single discussion from the current repository by number.
 */
def discussion[A](number : Int)(innerSelection: SelectionBuilder[Discussion, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of discussion categories that are available in the repository.
 */
def discussionCategories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterByAssignable : scala.Option[Boolean] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DiscussionCategoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Boolean]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("discussionCategories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterByAssignable", filterByAssignable, "Boolean")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * A discussion category by slug.
 */
def discussionCategory[A](slug : String)(innerSelection: SelectionBuilder[DiscussionCategory, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussionCategory", OptionOf(Obj(innerSelection)), arguments = List(Argument("slug", slug, "String!")(encoder0)))
  /**
 * A list of discussions that have been opened in the repository.
 */
def discussions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, categoryId : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DiscussionOrder] = None, states : scala.Option[List[DiscussionState]] = None)(innerSelection: SelectionBuilder[DiscussionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DiscussionOrder]], encoder6: ArgEncoder[scala.Option[List[DiscussionState]]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("discussions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("categoryId", categoryId, "ID")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "DiscussionOrder")(encoder5), Argument("states", states, "[DiscussionState!]")(encoder6)))
  /**
 * The number of kilobytes this repository occupies on disk.
 */
def diskUsage: SelectionBuilder[Repository, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("diskUsage", OptionOf(Scalar()))
  /**
 * Returns a single active environment from the current repository by name.
 */
def environment[A](name : String)(innerSelection: SelectionBuilder[Environment, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * A list of environments that are in this repository.
 */
def environments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[EnvironmentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("environments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Returns how many forks there are of this repository in the whole network.
 */
def forkCount: SelectionBuilder[Repository, Int] = _root_.caliban.client.SelectionBuilder.Field("forkCount", Scalar())
  /**
 * Whether this repository allows forks.
 */
def forkingAllowed: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("forkingAllowed", Scalar())
  /**
 * A list of direct forked repositories.
 */
def forks[A](affiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, ownerAffiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, privacy : scala.Option[RepositoryPrivacy] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[RepositoryOrder]], encoder7: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder8: ArgEncoder[scala.Option[RepositoryPrivacy]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("forks", Obj(innerSelection), arguments = List(Argument("affiliations", affiliations, "[RepositoryAffiliation]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("isLocked", isLocked, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "RepositoryOrder")(encoder6), Argument("ownerAffiliations", ownerAffiliations, "[RepositoryAffiliation]")(encoder7), Argument("privacy", privacy, "RepositoryPrivacy")(encoder8)))
  /**
 * The funding links for this repository
 */
def fundingLinks[A](innerSelection: SelectionBuilder[FundingLink, A]): SelectionBuilder[Repository, List[A]] = _root_.caliban.client.SelectionBuilder.Field("fundingLinks", ListOf(Obj(innerSelection)))
  /**
 * Indicates if the repository has the Discussions feature enabled.
 */
def hasDiscussionsEnabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasDiscussionsEnabled", Scalar())
  /**
 * Indicates if the repository has issues feature enabled.
 */
def hasIssuesEnabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasIssuesEnabled", Scalar())
  /**
 * Indicates if the repository has the Projects feature enabled.
 */
def hasProjectsEnabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasProjectsEnabled", Scalar())
  /**
 * Whether vulnerability alerts are enabled for the repository.
 */
def hasVulnerabilityAlertsEnabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasVulnerabilityAlertsEnabled", Scalar())
  /**
 * Indicates if the repository has wiki feature enabled.
 */
def hasWikiEnabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasWikiEnabled", Scalar())
  /**
 * The repository's URL.
 */
def homepageUrl: SelectionBuilder[Repository, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("homepageUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[Repository, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The interaction ability settings for this repository.
 */
def interactionAbility[A](innerSelection: SelectionBuilder[RepositoryInteractionAbility, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("interactionAbility", OptionOf(Obj(innerSelection)))
  /**
 * Indicates if the repository is unmaintained.
 */
def isArchived: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isArchived", Scalar())
  /**
 * Returns true if blank issue creation is allowed
 */
def isBlankIssuesEnabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isBlankIssuesEnabled", Scalar())
  /**
 * Returns whether or not this repository disabled.
 */
def isDisabled: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDisabled", Scalar())
  /**
 * Returns whether or not this repository is empty.
 */
def isEmpty: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isEmpty", Scalar())
  /**
 * Identifies if the repository is a fork.
 */
def isFork: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isFork", Scalar())
  /**
 * Indicates if a repository is either owned by an organization, or is a private fork of an organization repository.
 */
def isInOrganization: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isInOrganization", Scalar())
  /**
 * Indicates if the repository has been locked or not.
 */
def isLocked: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isLocked", Scalar())
  /**
 * Identifies if the repository is a mirror.
 */
def isMirror: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isMirror", Scalar())
  /**
 * Identifies if the repository is private or internal.
 */
def isPrivate: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPrivate", Scalar())
  /**
 * Returns true if this repository has a security policy
 */
def isSecurityPolicyEnabled: SelectionBuilder[Repository, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isSecurityPolicyEnabled", OptionOf(Scalar()))
  /**
 * Identifies if the repository is a template that can be used to generate new repositories.
 */
def isTemplate: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isTemplate", Scalar())
  /**
 * Is this repository a user configuration repository?
 */
def isUserConfigurationRepository: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isUserConfigurationRepository", Scalar())
  /**
 * Returns a single issue from the current repository by number.
 */
def issue[A](number : Int)(innerSelection: SelectionBuilder[Issue, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Returns a single issue-like object from the current repository by number.
 */
def issueOrPullRequest[A](number : Int)(onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issueOrPullRequest", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Returns a list of issue templates associated to the repository
 */
def issueTemplates[A](innerSelection: SelectionBuilder[IssueTemplate, A]): SelectionBuilder[Repository, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("issueTemplates", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of issues that have been opened in the repository.
 */
def issues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[IssueFilters] = None, first : scala.Option[Int] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[IssueState]] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[IssueFilters]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[String]]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[IssueOrder]], encoder7: ArgEncoder[scala.Option[List[IssueState]]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("issues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "IssueFilters")(encoder2), Argument("first", first, "Int")(encoder3), Argument("labels", labels, "[String!]")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "IssueOrder")(encoder6), Argument("states", states, "[IssueState!]")(encoder7)))
  /**
 * Returns a single label by name
 */
def label[A](name : String)(innerSelection: SelectionBuilder[Label, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * A list of labels associated with the repository.
 */
def labels[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LabelOrder] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[LabelConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LabelOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labels", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LabelOrder")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * A list containing a breakdown of the language composition of the repository.
 */
def languages[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[LanguageOrder] = None)(innerSelection: SelectionBuilder[LanguageConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[LanguageOrder]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("languages", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "LanguageOrder")(encoder4)))
  /**
 * Get the latest release for the repository if one exists.
 */
def latestRelease[A](innerSelection: SelectionBuilder[Release, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("latestRelease", OptionOf(Obj(innerSelection)))
  /**
 * The license associated with the repository
 */
def licenseInfo[A](innerSelection: SelectionBuilder[License, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("licenseInfo", OptionOf(Obj(innerSelection)))
  /**
 * The reason the repository has been locked.
 */
def lockReason: SelectionBuilder[Repository, scala.Option[RepositoryLockReason]] = _root_.caliban.client.SelectionBuilder.Field("lockReason", OptionOf(Scalar()))
  /**
 * A list of Users that can be mentioned in the context of the repository.
 */
def mentionableUsers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("mentionableUsers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("query", query, "String")(encoder4)))
  /**
 * Whether or not PRs are merged with a merge commit on this repository.
 */
def mergeCommitAllowed: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("mergeCommitAllowed", Scalar())
  /**
 * How the default commit message will be generated when merging a pull request.
 */
def mergeCommitMessage: SelectionBuilder[Repository, MergeCommitMessage] = _root_.caliban.client.SelectionBuilder.Field("mergeCommitMessage", Scalar())
  /**
 * How the default commit title will be generated when merging a pull request.
 */
def mergeCommitTitle: SelectionBuilder[Repository, MergeCommitTitle] = _root_.caliban.client.SelectionBuilder.Field("mergeCommitTitle", Scalar())
  /**
 * The merge queue for a specified branch, otherwise the default branch if not provided.
 */
def mergeQueue[A](branch : scala.Option[String] = None)(innerSelection: SelectionBuilder[MergeQueue, A])(implicit encoder0: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeQueue", OptionOf(Obj(innerSelection)), arguments = List(Argument("branch", branch, "String")(encoder0)))
  /**
 * Returns a single milestone from the current repository by number.
 */
def milestone[A](number : Int)(innerSelection: SelectionBuilder[Milestone, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("milestone", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of milestones associated with the repository.
 */
def milestones[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[MilestoneOrder] = None, query : scala.Option[String] = None, states : scala.Option[List[MilestoneState]] = None)(innerSelection: SelectionBuilder[MilestoneConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[MilestoneOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[List[MilestoneState]]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("milestones", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "MilestoneOrder")(encoder4), Argument("query", query, "String")(encoder5), Argument("states", states, "[MilestoneState!]")(encoder6)))
  /**
 * The repository's original mirror URL.
 */
def mirrorUrl: SelectionBuilder[Repository, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("mirrorUrl", OptionOf(Scalar()))
  /**
 * The name of the repository.
 */
def name: SelectionBuilder[Repository, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The repository's name with owner.
 */
def nameWithOwner: SelectionBuilder[Repository, String] = _root_.caliban.client.SelectionBuilder.Field("nameWithOwner", Scalar())
  /**
 * A Git object in the repository
 */
def `object`[A](expression : scala.Option[String] = None, oid : scala.Option[GitObjectID] = None)(onBlob: SelectionBuilder[Blob, A], onCommit: SelectionBuilder[Commit, A], onTag: SelectionBuilder[Tag, A], onTree: SelectionBuilder[Tree, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[GitObjectID]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("object", OptionOf(ChoiceOf(Map("Blob" -> Obj(onBlob), "Commit" -> Obj(onCommit), "Tag" -> Obj(onTag), "Tree" -> Obj(onTree)))), arguments = List(Argument("expression", expression, "String")(encoder0), Argument("oid", oid, "GitObjectID")(encoder1)))
  /**
 * The image used to represent this repository in Open Graph data.
 */
def openGraphImageUrl: SelectionBuilder[Repository, URI] = _root_.caliban.client.SelectionBuilder.Field("openGraphImageUrl", Scalar())
  /**
 * The User owner of the repository.
 */
def owner[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * A list of packages under the owner.
 */
def packages[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, names : scala.Option[List[scala.Option[String]]] = None, orderBy : scala.Option[PackageOrder] = None, packageType : scala.Option[PackageType] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[PackageConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[scala.Option[String]]]], encoder5: ArgEncoder[scala.Option[PackageOrder]], encoder6: ArgEncoder[scala.Option[PackageType]], encoder7: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("packages", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("names", names, "[String]")(encoder4), Argument("orderBy", orderBy, "PackageOrder")(encoder5), Argument("packageType", packageType, "PackageType")(encoder6), Argument("repositoryId", repositoryId, "ID")(encoder7)))
  /**
 * The repository parent, if this is a fork.
 */
def parent[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("parent", OptionOf(Obj(innerSelection)))
  /**
 * A list of discussions that have been pinned in this repository.
 */
def pinnedDiscussions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PinnedDiscussionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedDiscussions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of pinned issues for this repository.
 */
def pinnedIssues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PinnedIssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pinnedIssues", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The primary language of the repository's code.
 */
def primaryLanguage[A](innerSelection: SelectionBuilder[Language, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("primaryLanguage", OptionOf(Obj(innerSelection)))
  /**
 * Find project by number.
 */
def project[A](number : Int)(innerSelection: SelectionBuilder[Project, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Finds and returns the Project according to the provided Project number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectOrder] = None, search : scala.Option[String] = None, states : scala.Option[List[ProjectState]] = None)(innerSelection: SelectionBuilder[ProjectConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[List[ProjectState]]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("projects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectOrder")(encoder4), Argument("search", search, "String")(encoder5), Argument("states", states, "[ProjectState!]")(encoder6)))
  /**
 * The HTTP path listing the repository's projects
 */
def projectsResourcePath: SelectionBuilder[Repository, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsResourcePath", Scalar())
  /**
 * The HTTP URL listing the repository's projects
 */
def projectsUrl: SelectionBuilder[Repository, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsUrl", Scalar())
  /**
 * List of projects linked to this repository.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2Order]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2Order")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * Returns a single pull request from the current repository by number.
 */
def pullRequest[A](number : Int)(innerSelection: SelectionBuilder[PullRequest, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Returns a list of pull request templates associated to the repository
 */
def pullRequestTemplates[A](innerSelection: SelectionBuilder[PullRequestTemplate, A]): SelectionBuilder[Repository, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestTemplates", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of pull requests that have been opened in the repository.
 */
def pullRequests[A](after : scala.Option[String] = None, baseRefName : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, headRefName : scala.Option[String] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[PullRequestState]] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[IssueOrder]], encoder8: ArgEncoder[scala.Option[List[PullRequestState]]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequests", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("baseRefName", baseRefName, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("headRefName", headRefName, "String")(encoder4), Argument("labels", labels, "[String!]")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "IssueOrder")(encoder7), Argument("states", states, "[PullRequestState!]")(encoder8)))
  /**
 * Identifies the date and time when the repository was last pushed to.
 */
def pushedAt: SelectionBuilder[Repository, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("pushedAt", OptionOf(Scalar()))
  /**
 * Whether or not rebase-merging is enabled on this repository.
 */
def rebaseMergeAllowed: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("rebaseMergeAllowed", Scalar())
  /**
 * Recent projects that this user has modified in the context of the owner.
 */
def recentProjects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("recentProjects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Fetch a given ref from the repository
 */
def ref[A](qualifiedName : String)(innerSelection: SelectionBuilder[Ref, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)), arguments = List(Argument("qualifiedName", qualifiedName, "String!")(encoder0)))
  /**
 * Fetch a list of refs from the repository
 */
def refs[A](after : scala.Option[String] = None, before : scala.Option[String] = None, direction : scala.Option[OrderDirection] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RefOrder] = None, query : scala.Option[String] = None, refPrefix : String)(innerSelection: SelectionBuilder[RefConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[OrderDirection]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[RefOrder]], encoder6: ArgEncoder[scala.Option[String]], encoder7: ArgEncoder[String]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("refs", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("direction", direction, "OrderDirection")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "RefOrder")(encoder5), Argument("query", query, "String")(encoder6), Argument("refPrefix", refPrefix, "String!")(encoder7)))
  /**
 * Lookup a single release given various criteria.
 */
def release[A](tagName : String)(innerSelection: SelectionBuilder[Release, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("release", OptionOf(Obj(innerSelection)), arguments = List(Argument("tagName", tagName, "String!")(encoder0)))
  /**
 * List of releases which are dependent on this repository.
 */
def releases[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReleaseOrder] = None)(innerSelection: SelectionBuilder[ReleaseConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ReleaseOrder]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("releases", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ReleaseOrder")(encoder4)))
  /**
 * A list of applied repository-topic associations for this repository.
 */
def repositoryTopics[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[RepositoryTopicConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryTopics", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The HTTP path for this repository
 */
def resourcePath: SelectionBuilder[Repository, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Returns a single ruleset from the current repository by ID.
 */
def ruleset[A](databaseId : Int)(innerSelection: SelectionBuilder[RepositoryRuleset, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ruleset", OptionOf(Obj(innerSelection)), arguments = List(Argument("databaseId", databaseId, "Int!")(encoder0)))
  /**
 * A list of rulesets for this repository.
 */
def rulesets[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeParents : scala.Option[Boolean] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[RepositoryRulesetConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("rulesets", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("includeParents", includeParents, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4)))
  /**
 * The security policy URL.
 */
def securityPolicyUrl: SelectionBuilder[Repository, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("securityPolicyUrl", OptionOf(Scalar()))
  /**
 * A description of the repository, rendered to HTML without any links in it.
 */
def shortDescriptionHTML(limit : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, HTML] = _root_.caliban.client.SelectionBuilder.Field("shortDescriptionHTML", Scalar(), arguments = List(Argument("limit", limit, "Int")(encoder0)))
  /**
 * Whether or not squash-merging is enabled on this repository.
 */
def squashMergeAllowed: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("squashMergeAllowed", Scalar())
  /**
 * How the default commit message will be generated when squash merging a pull request.
 */
def squashMergeCommitMessage: SelectionBuilder[Repository, SquashMergeCommitMessage] = _root_.caliban.client.SelectionBuilder.Field("squashMergeCommitMessage", Scalar())
  /**
 * How the default commit title will be generated when squash merging a pull request.
 */
def squashMergeCommitTitle: SelectionBuilder[Repository, SquashMergeCommitTitle] = _root_.caliban.client.SelectionBuilder.Field("squashMergeCommitTitle", Scalar())
  /**
 * Whether a squash merge commit can use the pull request title as default.
 */
@deprecated("`squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.", "")
def squashPrTitleUsedAsDefault: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("squashPrTitleUsedAsDefault", Scalar())
  /**
 * The SSH URL to clone this repository
 */
def sshUrl: SelectionBuilder[Repository, GitSSHRemote] = _root_.caliban.client.SelectionBuilder.Field("sshUrl", Scalar())
  /**
 * Returns a count of how many stargazers there are on this object
 */
def stargazerCount: SelectionBuilder[Repository, Int] = _root_.caliban.client.SelectionBuilder.Field("stargazerCount", Scalar())
  /**
 * A list of users who have starred this starrable.
 */
def stargazers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[StarOrder] = None)(innerSelection: SelectionBuilder[StargazerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[StarOrder]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("stargazers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "StarOrder")(encoder4)))
  /**
 * Returns a list of all submodules in this repository parsed from the
.gitmodules file as of the default branch's HEAD commit.
 */
def submodules[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[SubmoduleConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("submodules", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Temporary authentication token for cloning this repository.
 */
def tempCloneToken: SelectionBuilder[Repository, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("tempCloneToken", OptionOf(Scalar()))
  /**
 * The repository from which this repository was generated, if any.
 */
def templateRepository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("templateRepository", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Repository, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this repository
 */
def url: SelectionBuilder[Repository, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
 */
def usesCustomOpenGraphImage: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("usesCustomOpenGraphImage", Scalar())
  /**
 * Indicates whether the viewer has admin permissions on this repository.
 */
def viewerCanAdminister: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanAdminister", Scalar())
  /**
 * Can the current viewer create new projects on this owner.
 */
def viewerCanCreateProjects: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanCreateProjects", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Indicates whether the viewer can update the topics of this repository.
 */
def viewerCanUpdateTopics: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdateTopics", Scalar())
  /**
 * The last commit email for the viewer.
 */
def viewerDefaultCommitEmail: SelectionBuilder[Repository, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("viewerDefaultCommitEmail", OptionOf(Scalar()))
  /**
 * The last used merge method by the viewer or the default for the repository.
 */
def viewerDefaultMergeMethod: SelectionBuilder[Repository, PullRequestMergeMethod] = _root_.caliban.client.SelectionBuilder.Field("viewerDefaultMergeMethod", Scalar())
  /**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
def viewerHasStarred: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasStarred", Scalar())
  /**
 * The users permission level on the repository. Will return null if authenticated as an GitHub App.
 */
def viewerPermission: SelectionBuilder[Repository, scala.Option[RepositoryPermission]] = _root_.caliban.client.SelectionBuilder.Field("viewerPermission", OptionOf(Scalar()))
  /**
 * A list of emails this viewer can commit with.
 */
def viewerPossibleCommitEmails: SelectionBuilder[Repository, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("viewerPossibleCommitEmails", OptionOf(ListOf(Scalar())))
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[Repository, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
  /**
 * Indicates the repository's visibility level.
 */
def visibility: SelectionBuilder[Repository, RepositoryVisibility] = _root_.caliban.client.SelectionBuilder.Field("visibility", Scalar())
  /**
 * Returns a single vulnerability alert from the current repository by number.
 */
def vulnerabilityAlert[A](number : Int)(innerSelection: SelectionBuilder[RepositoryVulnerabilityAlert, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("vulnerabilityAlert", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of vulnerability alerts that are on this repository.
 */
def vulnerabilityAlerts[A](after : scala.Option[String] = None, before : scala.Option[String] = None, dependencyScopes : scala.Option[List[RepositoryVulnerabilityAlertDependencyScope]] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, states : scala.Option[List[RepositoryVulnerabilityAlertState]] = None)(innerSelection: SelectionBuilder[RepositoryVulnerabilityAlertConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[RepositoryVulnerabilityAlertDependencyScope]]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[List[RepositoryVulnerabilityAlertState]]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("vulnerabilityAlerts", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("dependencyScopes", dependencyScopes, "[RepositoryVulnerabilityAlertDependencyScope!]")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("states", states, "[RepositoryVulnerabilityAlertState!]")(encoder5)))
  /**
 * A list of users watching the repository.
 */
def watchers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("watchers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Whether contributors are required to sign off on web-based commits in this repository.
 */
def webCommitSignoffRequired: SelectionBuilder[Repository, Boolean] = _root_.caliban.client.SelectionBuilder.Field("webCommitSignoffRequired", Scalar())
  /**
 * Returns a single issue-like object from the current repository by number.
 */
def issueOrPullRequestOption[A](number : Int)(onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None)(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Repository, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("issueOrPullRequest", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A Git object in the repository
 */
def objectOption[A](expression : scala.Option[String] = None, oid : scala.Option[GitObjectID] = None)(onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None)(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[GitObjectID]]): SelectionBuilder[Repository, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("object", OptionOf(ChoiceOf(Map("Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("expression", expression, "String")(encoder0), Argument("oid", oid, "GitObjectID")(encoder1)))
  /**
 * A Git object in the repository
 */
def objectInterface[A](expression : scala.Option[String] = None, oid : scala.Option[GitObjectID] = None)(`object`: SelectionBuilder[GitObject, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[GitObjectID]]): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("object", OptionOf(Obj(`object`)), arguments = List(Argument("expression", expression, "String")(encoder0), Argument("oid", oid, "GitObjectID")(encoder1)))
  /**
 * The User owner of the repository.
 */
def ownerOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Repository, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The User owner of the repository.
 */
def ownerInterface[A](owner: SelectionBuilder[RepositoryOwner, A]): SelectionBuilder[Repository, A] = _root_.caliban.client.SelectionBuilder.Field("owner", Obj(owner))
}


type RepositoryCodeowners
object RepositoryCodeowners {
  /**
 * Any problems that were encountered while parsing the `CODEOWNERS` file.
 */
def errors[A](innerSelection: SelectionBuilder[RepositoryCodeownersError, A]): SelectionBuilder[RepositoryCodeowners, List[A]] = _root_.caliban.client.SelectionBuilder.Field("errors", ListOf(Obj(innerSelection)))
}


type RepositoryCodeownersError
object RepositoryCodeownersError {
  /**
 * The column number where the error occurs.
 */
def column: SelectionBuilder[RepositoryCodeownersError, Int] = _root_.caliban.client.SelectionBuilder.Field("column", Scalar())
  /**
 * A short string describing the type of error.
 */
def kind: SelectionBuilder[RepositoryCodeownersError, String] = _root_.caliban.client.SelectionBuilder.Field("kind", Scalar())
  /**
 * The line number where the error occurs.
 */
def line: SelectionBuilder[RepositoryCodeownersError, Int] = _root_.caliban.client.SelectionBuilder.Field("line", Scalar())
  /**
 * A complete description of the error, combining information from other fields.
 */
def message: SelectionBuilder[RepositoryCodeownersError, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * The path to the file when the error occurs.
 */
def path: SelectionBuilder[RepositoryCodeownersError, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * The content of the line where the error occurs.
 */
def source: SelectionBuilder[RepositoryCodeownersError, String] = _root_.caliban.client.SelectionBuilder.Field("source", Scalar())
  /**
 * A suggestion of how to fix the error.
 */
def suggestion: SelectionBuilder[RepositoryCodeownersError, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("suggestion", OptionOf(Scalar()))
}


type RepositoryCollaboratorConnection
object RepositoryCollaboratorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryCollaboratorEdge, A]): SelectionBuilder[RepositoryCollaboratorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryCollaboratorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryCollaboratorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryCollaboratorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryCollaboratorEdge
object RepositoryCollaboratorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryCollaboratorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryCollaboratorEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * The permission the user has on the repository.
 */
def permission: SelectionBuilder[RepositoryCollaboratorEdge, RepositoryPermission] = _root_.caliban.client.SelectionBuilder.Field("permission", Scalar())
  /**
 * A list of sources for the user's access to the repository.
 */
def permissionSources[A](innerSelection: SelectionBuilder[PermissionSource, A]): SelectionBuilder[RepositoryCollaboratorEdge, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("permissionSources", OptionOf(ListOf(Obj(innerSelection))))
}


type RepositoryConnection
object RepositoryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryEdge, A]): SelectionBuilder[RepositoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * The total size in kilobytes of all repositories in the connection.
 */
def totalDiskUsage: SelectionBuilder[RepositoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalDiskUsage", Scalar())
}


type RepositoryContactLink
object RepositoryContactLink {
  /**
 * The contact link purpose.
 */
def about: SelectionBuilder[RepositoryContactLink, String] = _root_.caliban.client.SelectionBuilder.Field("about", Scalar())
  /**
 * The contact link name.
 */
def name: SelectionBuilder[RepositoryContactLink, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The contact link URL.
 */
def url: SelectionBuilder[RepositoryContactLink, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type RepositoryEdge
object RepositoryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryInteractionAbility
object RepositoryInteractionAbility {
  /**
 * The time the currently active limit expires.
 */
def expiresAt: SelectionBuilder[RepositoryInteractionAbility, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("expiresAt", OptionOf(Scalar()))
  /**
 * The current limit that is enabled on this object.
 */
def limit: SelectionBuilder[RepositoryInteractionAbility, RepositoryInteractionLimit] = _root_.caliban.client.SelectionBuilder.Field("limit", Scalar())
  /**
 * The origin of the currently active interaction limit.
 */
def origin: SelectionBuilder[RepositoryInteractionAbility, RepositoryInteractionLimitOrigin] = _root_.caliban.client.SelectionBuilder.Field("origin", Scalar())
}


type RepositoryInvitation
object RepositoryInvitation {
  /**
 * The email address that received the invitation.
 */
def email: SelectionBuilder[RepositoryInvitation, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("email", OptionOf(Scalar()))
  def id: SelectionBuilder[RepositoryInvitation, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The user who received the invitation.
 */
def invitee[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryInvitation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitee", OptionOf(Obj(innerSelection)))
  /**
 * The user who created the invitation.
 */
def inviter[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryInvitation, A] = _root_.caliban.client.SelectionBuilder.Field("inviter", Obj(innerSelection))
  /**
 * The permalink for this repository invitation.
 */
def permalink: SelectionBuilder[RepositoryInvitation, URI] = _root_.caliban.client.SelectionBuilder.Field("permalink", Scalar())
  /**
 * The permission granted on this repository by this invitation.
 */
def permission: SelectionBuilder[RepositoryInvitation, RepositoryPermission] = _root_.caliban.client.SelectionBuilder.Field("permission", Scalar())
  /**
 * The Repository the user is invited to.
 */
def repository[A](onRepository: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryInvitation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(ChoiceOf(Map("Repository" -> Obj(onRepository)))))
  /**
 * The Repository the user is invited to.
 */
def repositoryOption[A](onRepository: scala.Option[SelectionBuilder[Repository, A]] = None): SelectionBuilder[RepositoryInvitation, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(ChoiceOf(Map("Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The Repository the user is invited to.
 */
def repositoryInterface[A](repository: SelectionBuilder[RepositoryInfo, A]): SelectionBuilder[RepositoryInvitation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(repository)))
}


type RepositoryInvitationConnection
object RepositoryInvitationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryInvitationEdge, A]): SelectionBuilder[RepositoryInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryInvitation, A]): SelectionBuilder[RepositoryInvitationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryInvitationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryInvitationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryInvitationEdge
object RepositoryInvitationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryInvitationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryInvitation, A]): SelectionBuilder[RepositoryInvitationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryMigration
object RepositoryMigration {
  /**
 * The migration flag to continue on error.
 */
def continueOnError: SelectionBuilder[RepositoryMigration, Boolean] = _root_.caliban.client.SelectionBuilder.Field("continueOnError", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[RepositoryMigration, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[RepositoryMigration, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The reason the migration failed.
 */
def failureReason: SelectionBuilder[RepositoryMigration, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("failureReason", OptionOf(Scalar()))
  def id: SelectionBuilder[RepositoryMigration, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The URL for the migration log (expires 1 day after migration completes).
 */
def migrationLogUrl: SelectionBuilder[RepositoryMigration, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("migrationLogUrl", OptionOf(Scalar()))
  /**
 * The migration source.
 */
def migrationSource[A](innerSelection: SelectionBuilder[MigrationSource, A]): SelectionBuilder[RepositoryMigration, A] = _root_.caliban.client.SelectionBuilder.Field("migrationSource", Obj(innerSelection))
  /**
 * The target repository name.
 */
def repositoryName: SelectionBuilder[RepositoryMigration, String] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", Scalar())
  /**
 * The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`.
 */
def sourceUrl: SelectionBuilder[RepositoryMigration, URI] = _root_.caliban.client.SelectionBuilder.Field("sourceUrl", Scalar())
  /**
 * The migration state.
 */
def state: SelectionBuilder[RepositoryMigration, MigrationState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The number of warnings encountered for this migration. To review the warnings,
check the [Migration Log](https://docs.github.com/en/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).
 */
def warningsCount: SelectionBuilder[RepositoryMigration, Int] = _root_.caliban.client.SelectionBuilder.Field("warningsCount", Scalar())
}


type RepositoryMigrationConnection
object RepositoryMigrationConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryMigrationEdge, A]): SelectionBuilder[RepositoryMigrationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryMigration, A]): SelectionBuilder[RepositoryMigrationConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryMigrationConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryMigrationConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryMigrationEdge
object RepositoryMigrationEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryMigrationEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryMigration, A]): SelectionBuilder[RepositoryMigrationEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryNameConditionTarget
object RepositoryNameConditionTarget {
  /**
 * Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
 */
def exclude: SelectionBuilder[RepositoryNameConditionTarget, List[String]] = _root_.caliban.client.SelectionBuilder.Field("exclude", ListOf(Scalar()))
  /**
 * Array of repository names or patterns to include. One of these patterns must
match for the condition to pass. Also accepts `~ALL` to include all repositories.
 */
def include: SelectionBuilder[RepositoryNameConditionTarget, List[String]] = _root_.caliban.client.SelectionBuilder.Field("include", ListOf(Scalar()))
  /**
 * Target changes that match these patterns will be prevented except by those with bypass permissions.
 */
def `protected`: SelectionBuilder[RepositoryNameConditionTarget, Boolean] = _root_.caliban.client.SelectionBuilder.Field("protected", Scalar())
}


type RepositoryRule
object RepositoryRule {
  def id: SelectionBuilder[RepositoryRule, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The parameters for this rule.
 */
def parameters[A](onBranchNamePatternParameters: SelectionBuilder[BranchNamePatternParameters, A], onCommitAuthorEmailPatternParameters: SelectionBuilder[CommitAuthorEmailPatternParameters, A], onCommitMessagePatternParameters: SelectionBuilder[CommitMessagePatternParameters, A], onCommitterEmailPatternParameters: SelectionBuilder[CommitterEmailPatternParameters, A], onPullRequestParameters: SelectionBuilder[PullRequestParameters, A], onRequiredDeploymentsParameters: SelectionBuilder[RequiredDeploymentsParameters, A], onRequiredStatusChecksParameters: SelectionBuilder[RequiredStatusChecksParameters, A], onTagNamePatternParameters: SelectionBuilder[TagNamePatternParameters, A], onUpdateParameters: SelectionBuilder[UpdateParameters, A]): SelectionBuilder[RepositoryRule, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("parameters", OptionOf(ChoiceOf(Map("BranchNamePatternParameters" -> Obj(onBranchNamePatternParameters), "CommitAuthorEmailPatternParameters" -> Obj(onCommitAuthorEmailPatternParameters), "CommitMessagePatternParameters" -> Obj(onCommitMessagePatternParameters), "CommitterEmailPatternParameters" -> Obj(onCommitterEmailPatternParameters), "PullRequestParameters" -> Obj(onPullRequestParameters), "RequiredDeploymentsParameters" -> Obj(onRequiredDeploymentsParameters), "RequiredStatusChecksParameters" -> Obj(onRequiredStatusChecksParameters), "TagNamePatternParameters" -> Obj(onTagNamePatternParameters), "UpdateParameters" -> Obj(onUpdateParameters)))))
  /**
 * The type of rule.
 */
def `type`: SelectionBuilder[RepositoryRule, RepositoryRuleType] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  /**
 * The parameters for this rule.
 */
def parametersOption[A](onBranchNamePatternParameters: scala.Option[SelectionBuilder[BranchNamePatternParameters, A]] = None, onCommitAuthorEmailPatternParameters: scala.Option[SelectionBuilder[CommitAuthorEmailPatternParameters, A]] = None, onCommitMessagePatternParameters: scala.Option[SelectionBuilder[CommitMessagePatternParameters, A]] = None, onCommitterEmailPatternParameters: scala.Option[SelectionBuilder[CommitterEmailPatternParameters, A]] = None, onPullRequestParameters: scala.Option[SelectionBuilder[PullRequestParameters, A]] = None, onRequiredDeploymentsParameters: scala.Option[SelectionBuilder[RequiredDeploymentsParameters, A]] = None, onRequiredStatusChecksParameters: scala.Option[SelectionBuilder[RequiredStatusChecksParameters, A]] = None, onTagNamePatternParameters: scala.Option[SelectionBuilder[TagNamePatternParameters, A]] = None, onUpdateParameters: scala.Option[SelectionBuilder[UpdateParameters, A]] = None): SelectionBuilder[RepositoryRule, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("parameters", OptionOf(ChoiceOf(Map("BranchNamePatternParameters" -> onBranchNamePatternParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitAuthorEmailPatternParameters" -> onCommitAuthorEmailPatternParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitMessagePatternParameters" -> onCommitMessagePatternParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitterEmailPatternParameters" -> onCommitterEmailPatternParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestParameters" -> onPullRequestParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RequiredDeploymentsParameters" -> onRequiredDeploymentsParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RequiredStatusChecksParameters" -> onRequiredStatusChecksParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TagNamePatternParameters" -> onTagNamePatternParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UpdateParameters" -> onUpdateParameters.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepositoryRuleConditions
object RepositoryRuleConditions {
  /**
 * Configuration for the ref_name condition
 */
def refName[A](innerSelection: SelectionBuilder[RefNameConditionTarget, A]): SelectionBuilder[RepositoryRuleConditions, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("refName", OptionOf(Obj(innerSelection)))
  /**
 * Configuration for the repository_name condition
 */
def repositoryName[A](innerSelection: SelectionBuilder[RepositoryNameConditionTarget, A]): SelectionBuilder[RepositoryRuleConditions, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Obj(innerSelection)))
}


type RepositoryRuleConnection
object RepositoryRuleConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryRuleEdge, A]): SelectionBuilder[RepositoryRuleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryRule, A]): SelectionBuilder[RepositoryRuleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryRuleConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryRuleConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryRuleEdge
object RepositoryRuleEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryRuleEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryRule, A]): SelectionBuilder[RepositoryRuleEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryRuleset
object RepositoryRuleset {
  /**
 * The actors that can bypass this ruleset
 */
def bypassActors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[RepositoryRulesetBypassActorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[RepositoryRuleset, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("bypassActors", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The bypass mode of this ruleset
 */
def bypassMode: SelectionBuilder[RepositoryRuleset, RuleBypassMode] = _root_.caliban.client.SelectionBuilder.Field("bypassMode", Scalar())
  /**
 * The set of conditions that must evaluate to true for this ruleset to apply
 */
def conditions[A](innerSelection: SelectionBuilder[RepositoryRuleConditions, A]): SelectionBuilder[RepositoryRuleset, A] = _root_.caliban.client.SelectionBuilder.Field("conditions", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[RepositoryRuleset, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[RepositoryRuleset, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The enforcement level of this ruleset
 */
def enforcement: SelectionBuilder[RepositoryRuleset, RuleEnforcement] = _root_.caliban.client.SelectionBuilder.Field("enforcement", Scalar())
  def id: SelectionBuilder[RepositoryRuleset, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Name of the ruleset.
 */
def name: SelectionBuilder[RepositoryRuleset, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * List of rules.
 */
def rules[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, `type` : scala.Option[RepositoryRuleType] = None)(innerSelection: SelectionBuilder[RepositoryRuleConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[RepositoryRuleType]]): SelectionBuilder[RepositoryRuleset, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("rules", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("type", `type`, "RepositoryRuleType")(encoder4)))
  /**
 * Source of ruleset.
 */
def source[A](onOrganization: SelectionBuilder[Organization, A], onRepository: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryRuleset, A] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Organization" -> Obj(onOrganization), "Repository" -> Obj(onRepository))))
  /**
 * Target of the ruleset.
 */
def target: SelectionBuilder[RepositoryRuleset, scala.Option[RepositoryRulesetTarget]] = _root_.caliban.client.SelectionBuilder.Field("target", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[RepositoryRuleset, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * Source of ruleset.
 */
def sourceOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None): SelectionBuilder[RepositoryRuleset, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("source", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type RepositoryRulesetBypassActor
object RepositoryRulesetBypassActor {
  /**
 * The actor that can bypass rules.
 */
def actor[A](onApp: SelectionBuilder[App, A], onTeam: SelectionBuilder[Team, A]): SelectionBuilder[RepositoryRulesetBypassActor, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Team" -> Obj(onTeam)))))
  def id: SelectionBuilder[RepositoryRulesetBypassActor, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the ruleset associated with the allowed actor
 */
def repositoryRuleset[A](innerSelection: SelectionBuilder[RepositoryRuleset, A]): SelectionBuilder[RepositoryRulesetBypassActor, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repositoryRuleset", OptionOf(Obj(innerSelection)))
  /**
 * The actor that can bypass rules.
 */
def actorOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None): SelectionBuilder[RepositoryRulesetBypassActor, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepositoryRulesetBypassActorConnection
object RepositoryRulesetBypassActorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryRulesetBypassActorEdge, A]): SelectionBuilder[RepositoryRulesetBypassActorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryRulesetBypassActor, A]): SelectionBuilder[RepositoryRulesetBypassActorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryRulesetBypassActorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryRulesetBypassActorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryRulesetBypassActorEdge
object RepositoryRulesetBypassActorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryRulesetBypassActorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryRulesetBypassActor, A]): SelectionBuilder[RepositoryRulesetBypassActorEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryRulesetConnection
object RepositoryRulesetConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryRulesetEdge, A]): SelectionBuilder[RepositoryRulesetConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryRuleset, A]): SelectionBuilder[RepositoryRulesetConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryRulesetConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryRulesetConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryRulesetEdge
object RepositoryRulesetEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryRulesetEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryRuleset, A]): SelectionBuilder[RepositoryRulesetEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryTopic
object RepositoryTopic {
  def id: SelectionBuilder[RepositoryTopic, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The HTTP path for this repository-topic.
 */
def resourcePath: SelectionBuilder[RepositoryTopic, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The topic.
 */
def topic[A](innerSelection: SelectionBuilder[Topic, A]): SelectionBuilder[RepositoryTopic, A] = _root_.caliban.client.SelectionBuilder.Field("topic", Obj(innerSelection))
  /**
 * The HTTP URL for this repository-topic.
 */
def url: SelectionBuilder[RepositoryTopic, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type RepositoryTopicConnection
object RepositoryTopicConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryTopicEdge, A]): SelectionBuilder[RepositoryTopicConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryTopic, A]): SelectionBuilder[RepositoryTopicConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryTopicConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryTopicConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryTopicEdge
object RepositoryTopicEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryTopicEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryTopic, A]): SelectionBuilder[RepositoryTopicEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RepositoryVisibilityChangeDisableAuditEntry
object RepositoryVisibilityChangeDisableAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepositoryVisibilityChangeEnableAuditEntry
object RepositoryVisibilityChangeEnableAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for this enterprise.
 */
def enterpriseResourcePath: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseResourcePath", OptionOf(Scalar()))
  /**
 * The slug of the enterprise.
 */
def enterpriseSlug: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseSlug", OptionOf(Scalar()))
  /**
 * The HTTP URL for this enterprise.
 */
def enterpriseUrl: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseUrl", OptionOf(Scalar()))
  def id: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RepositoryVulnerabilityAlert
object RepositoryVulnerabilityAlert {
  /**
 * When was the alert auto-dismissed?
 */
def autoDismissedAt: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("autoDismissedAt", OptionOf(Scalar()))
  /**
 * When was the alert created?
 */
def createdAt: SelectionBuilder[RepositoryVulnerabilityAlert, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The associated Dependabot update
 */
def dependabotUpdate[A](innerSelection: SelectionBuilder[DependabotUpdate, A]): SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dependabotUpdate", OptionOf(Obj(innerSelection)))
  /**
 * The scope of an alert's dependency
 */
def dependencyScope: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[RepositoryVulnerabilityAlertDependencyScope]] = _root_.caliban.client.SelectionBuilder.Field("dependencyScope", OptionOf(Scalar()))
  /**
 * Comment explaining the reason the alert was dismissed
 */
def dismissComment: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("dismissComment", OptionOf(Scalar()))
  /**
 * The reason the alert was dismissed
 */
def dismissReason: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("dismissReason", OptionOf(Scalar()))
  /**
 * When was the alert dismissed?
 */
def dismissedAt: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("dismissedAt", OptionOf(Scalar()))
  /**
 * The user who dismissed the alert
 */
def dismisser[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dismisser", OptionOf(Obj(innerSelection)))
  /**
 * When was the alert fixed?
 */
def fixedAt: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("fixedAt", OptionOf(Scalar()))
  def id: SelectionBuilder[RepositoryVulnerabilityAlert, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the alert number.
 */
def number: SelectionBuilder[RepositoryVulnerabilityAlert, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * The associated repository
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[RepositoryVulnerabilityAlert, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * The associated security advisory
 */
def securityAdvisory[A](innerSelection: SelectionBuilder[SecurityAdvisory, A]): SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("securityAdvisory", OptionOf(Obj(innerSelection)))
  /**
 * The associated security vulnerability
 */
def securityVulnerability[A](innerSelection: SelectionBuilder[SecurityVulnerability, A]): SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("securityVulnerability", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the state of the alert.
 */
def state: SelectionBuilder[RepositoryVulnerabilityAlert, RepositoryVulnerabilityAlertState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The vulnerable manifest filename
 */
def vulnerableManifestFilename: SelectionBuilder[RepositoryVulnerabilityAlert, String] = _root_.caliban.client.SelectionBuilder.Field("vulnerableManifestFilename", Scalar())
  /**
 * The vulnerable manifest path
 */
def vulnerableManifestPath: SelectionBuilder[RepositoryVulnerabilityAlert, String] = _root_.caliban.client.SelectionBuilder.Field("vulnerableManifestPath", Scalar())
  /**
 * The vulnerable requirements
 */
def vulnerableRequirements: SelectionBuilder[RepositoryVulnerabilityAlert, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("vulnerableRequirements", OptionOf(Scalar()))
}


type RepositoryVulnerabilityAlertConnection
object RepositoryVulnerabilityAlertConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RepositoryVulnerabilityAlertEdge, A]): SelectionBuilder[RepositoryVulnerabilityAlertConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[RepositoryVulnerabilityAlert, A]): SelectionBuilder[RepositoryVulnerabilityAlertConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RepositoryVulnerabilityAlertConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RepositoryVulnerabilityAlertConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type RepositoryVulnerabilityAlertEdge
object RepositoryVulnerabilityAlertEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RepositoryVulnerabilityAlertEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[RepositoryVulnerabilityAlert, A]): SelectionBuilder[RepositoryVulnerabilityAlertEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type RequestReviewsPayload
object RequestReviewsPayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RequestReviewsPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RequestReviewsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that is getting requests.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[RequestReviewsPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * The edge from the pull request to the requested reviewers.
 */
def requestedReviewersEdge[A](innerSelection: SelectionBuilder[UserEdge, A]): SelectionBuilder[RequestReviewsPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewersEdge", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RequestReviewsPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[RequestReviewsPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type RequestedReviewerConnection
object RequestedReviewerConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[RequestedReviewerEdge, A]): SelectionBuilder[RequestedReviewerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onMannequin: SelectionBuilder[Mannequin, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RequestedReviewerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[RequestedReviewerConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[RequestedReviewerConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RequestedReviewerConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type RequestedReviewerEdge
object RequestedReviewerEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[RequestedReviewerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onMannequin: SelectionBuilder[Mannequin, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[RequestedReviewerEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[RequestedReviewerEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type RequiredDeploymentsParameters
object RequiredDeploymentsParameters {
  /**
 * The environments that must be successfully deployed to before branches can be merged.
 */
def requiredDeploymentEnvironments: SelectionBuilder[RequiredDeploymentsParameters, List[String]] = _root_.caliban.client.SelectionBuilder.Field("requiredDeploymentEnvironments", ListOf(Scalar()))
}


type RequiredStatusCheckDescription
object RequiredStatusCheckDescription {
  /**
 * The App that must provide this status in order for it to be accepted.
 */
def app[A](innerSelection: SelectionBuilder[App, A]): SelectionBuilder[RequiredStatusCheckDescription, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("app", OptionOf(Obj(innerSelection)))
  /**
 * The name of this status.
 */
def context: SelectionBuilder[RequiredStatusCheckDescription, String] = _root_.caliban.client.SelectionBuilder.Field("context", Scalar())
}


type RequiredStatusChecksParameters
object RequiredStatusChecksParameters {
  /**
 * Status checks that are required.
 */
def requiredStatusChecks[A](innerSelection: SelectionBuilder[StatusCheckConfiguration, A]): SelectionBuilder[RequiredStatusChecksParameters, List[A]] = _root_.caliban.client.SelectionBuilder.Field("requiredStatusChecks", ListOf(Obj(innerSelection)))
  /**
 * Whether pull requests targeting a matching branch must be tested with the
latest code. This setting will not take effect unless at least one status
check is enabled.
 */
def strictRequiredStatusChecksPolicy: SelectionBuilder[RequiredStatusChecksParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("strictRequiredStatusChecksPolicy", Scalar())
}


type RerequestCheckSuitePayload
object RerequestCheckSuitePayload {
  /**
 * The requested check suite.
 */
def checkSuite[A](innerSelection: SelectionBuilder[CheckSuite, A]): SelectionBuilder[RerequestCheckSuitePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("checkSuite", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RerequestCheckSuitePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type ResolveReviewThreadPayload
object ResolveReviewThreadPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[ResolveReviewThreadPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The thread to resolve.
 */
def thread[A](innerSelection: SelectionBuilder[PullRequestReviewThread, A]): SelectionBuilder[ResolveReviewThreadPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("thread", OptionOf(Obj(innerSelection)))
}


type RestrictedContribution
object RestrictedContribution {
  /**
 * Whether this contribution is associated with a record you do not have access to. For
example, your own 'first issue' contribution may have been made on a repository you can no
longer access.
 */
def isRestricted: SelectionBuilder[RestrictedContribution, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRestricted", Scalar())
  /**
 * When this contribution was made.
 */
def occurredAt: SelectionBuilder[RestrictedContribution, DateTime] = _root_.caliban.client.SelectionBuilder.Field("occurredAt", Scalar())
  /**
 * The HTTP path for this contribution.
 */
def resourcePath: SelectionBuilder[RestrictedContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The HTTP URL for this contribution.
 */
def url: SelectionBuilder[RestrictedContribution, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The user who made this contribution.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[RestrictedContribution, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type RetireSponsorsTierPayload
object RetireSponsorsTierPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RetireSponsorsTierPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The tier that was retired.
 */
def sponsorsTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[RetireSponsorsTierPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsTier", OptionOf(Obj(innerSelection)))
}


type RevertPullRequestPayload
object RevertPullRequestPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RevertPullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The pull request that was reverted.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[RevertPullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * The new pull request that reverts the input pull request.
 */
def revertPullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[RevertPullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("revertPullRequest", OptionOf(Obj(innerSelection)))
}


type ReviewDismissalAllowance
object ReviewDismissalAllowance {
  /**
 * The actor that can dismiss.
 */
def actor[A](onApp: SelectionBuilder[App, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewDismissalAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * Identifies the branch protection rule associated with the allowed user, team, or app.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[ReviewDismissalAllowance, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[ReviewDismissalAllowance, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The actor that can dismiss.
 */
def actorOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewDismissalAllowance, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type ReviewDismissalAllowanceConnection
object ReviewDismissalAllowanceConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReviewDismissalAllowanceEdge, A]): SelectionBuilder[ReviewDismissalAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ReviewDismissalAllowance, A]): SelectionBuilder[ReviewDismissalAllowanceConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReviewDismissalAllowanceConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReviewDismissalAllowanceConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ReviewDismissalAllowanceEdge
object ReviewDismissalAllowanceEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReviewDismissalAllowanceEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ReviewDismissalAllowance, A]): SelectionBuilder[ReviewDismissalAllowanceEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ReviewDismissedEvent
object ReviewDismissedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewDismissedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReviewDismissedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ReviewDismissedEvent, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * Identifies the optional message associated with the 'review_dismissed' event.
 */
def dismissalMessage: SelectionBuilder[ReviewDismissedEvent, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("dismissalMessage", OptionOf(Scalar()))
  /**
 * Identifies the optional message associated with the event, rendered to HTML.
 */
def dismissalMessageHTML: SelectionBuilder[ReviewDismissedEvent, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("dismissalMessageHTML", OptionOf(Scalar()))
  def id: SelectionBuilder[ReviewDismissedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the previous state of the review with the 'review_dismissed' event.
 */
def previousReviewState: SelectionBuilder[ReviewDismissedEvent, PullRequestReviewState] = _root_.caliban.client.SelectionBuilder.Field("previousReviewState", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReviewDismissedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the commit which caused the review to become stale.
 */
def pullRequestCommit[A](innerSelection: SelectionBuilder[PullRequestCommit, A]): SelectionBuilder[ReviewDismissedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestCommit", OptionOf(Obj(innerSelection)))
  /**
 * The HTTP path for this review dismissed event.
 */
def resourcePath: SelectionBuilder[ReviewDismissedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the review associated with the 'review_dismissed' event.
 */
def review[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[ReviewDismissedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("review", OptionOf(Obj(innerSelection)))
  /**
 * The HTTP URL for this review dismissed event.
 */
def url: SelectionBuilder[ReviewDismissedEvent, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewDismissedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ReviewDismissedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ReviewRequest
object ReviewRequest {
  /**
 * Whether this request was created for a code owner
 */
def asCodeOwner: SelectionBuilder[ReviewRequest, Boolean] = _root_.caliban.client.SelectionBuilder.Field("asCodeOwner", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[ReviewRequest, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[ReviewRequest, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the pull request associated with this review request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReviewRequest, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * The reviewer that is requested.
 */
def requestedReviewer[A](onMannequin: SelectionBuilder[Mannequin, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewRequest, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewer", OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * The reviewer that is requested.
 */
def requestedReviewerOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewRequest, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewer", OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type ReviewRequestConnection
object ReviewRequestConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[ReviewRequestEdge, A]): SelectionBuilder[ReviewRequestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[ReviewRequest, A]): SelectionBuilder[ReviewRequestConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[ReviewRequestConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[ReviewRequestConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type ReviewRequestEdge
object ReviewRequestEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[ReviewRequestEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[ReviewRequest, A]): SelectionBuilder[ReviewRequestEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type ReviewRequestRemovedEvent
object ReviewRequestRemovedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewRequestRemovedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReviewRequestRemovedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ReviewRequestRemovedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReviewRequestRemovedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the reviewer whose review request was removed.
 */
def requestedReviewer[A](onMannequin: SelectionBuilder[Mannequin, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewRequestRemovedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewer", OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * Identifies the reviewer whose review request was removed.
 */
def requestedReviewerOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewRequestRemovedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewer", OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewRequestRemovedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ReviewRequestRemovedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ReviewRequestedEvent
object ReviewRequestedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewRequestedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[ReviewRequestedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[ReviewRequestedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * PullRequest referenced by event.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[ReviewRequestedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", Obj(innerSelection))
  /**
 * Identifies the reviewer whose review was requested.
 */
def requestedReviewer[A](onMannequin: SelectionBuilder[Mannequin, A], onTeam: SelectionBuilder[Team, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[ReviewRequestedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewer", OptionOf(ChoiceOf(Map("Mannequin" -> Obj(onMannequin), "Team" -> Obj(onTeam), "User" -> Obj(onUser)))))
  /**
 * Identifies the reviewer whose review was requested.
 */
def requestedReviewerOption[A](onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewRequestedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("requestedReviewer", OptionOf(ChoiceOf(Map("Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[ReviewRequestedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[ReviewRequestedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type ReviewStatusHovercardContext
object ReviewStatusHovercardContext {
  /**
 * A string describing this context
 */
def message: SelectionBuilder[ReviewStatusHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * An octicon to accompany this context
 */
def octicon: SelectionBuilder[ReviewStatusHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("octicon", Scalar())
  /**
 * The current status of the pull request with respect to code review.
 */
def reviewDecision: SelectionBuilder[ReviewStatusHovercardContext, scala.Option[PullRequestReviewDecision]] = _root_.caliban.client.SelectionBuilder.Field("reviewDecision", OptionOf(Scalar()))
}


type RevokeEnterpriseOrganizationsMigratorRolePayload
object RevokeEnterpriseOrganizationsMigratorRolePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RevokeEnterpriseOrganizationsMigratorRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The organizations that had the migrator role revoked for the given user.
 */
def organizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[RevokeEnterpriseOrganizationsMigratorRolePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organizations", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type RevokeMigratorRolePayload
object RevokeMigratorRolePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[RevokeMigratorRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * Did the operation succeed?
 */
def success: SelectionBuilder[RevokeMigratorRolePayload, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("success", OptionOf(Scalar()))
}


type SavedReply
object SavedReply {
  /**
 * The body of the saved reply.
 */
def body: SelectionBuilder[SavedReply, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The saved reply body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[SavedReply, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[SavedReply, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[SavedReply, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The title of the saved reply.
 */
def title: SelectionBuilder[SavedReply, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * The user that saved this reply.
 */
def user[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SavedReply, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The user that saved this reply.
 */
def userOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SavedReply, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The user that saved this reply.
 */
def userInterface[A](user: SelectionBuilder[Actor, A]): SelectionBuilder[SavedReply, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(user)))
}


type SavedReplyConnection
object SavedReplyConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SavedReplyEdge, A]): SelectionBuilder[SavedReplyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SavedReply, A]): SelectionBuilder[SavedReplyConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SavedReplyConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SavedReplyConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SavedReplyEdge
object SavedReplyEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SavedReplyEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SavedReply, A]): SelectionBuilder[SavedReplyEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SearchResultItemConnection
object SearchResultItemConnection {
  /**
 * The total number of pieces of code that matched the search query. Regardless
of the total number of matches, a maximum of 1,000 results will be available
across all types.
 */
def codeCount: SelectionBuilder[SearchResultItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("codeCount", Scalar())
  /**
 * The total number of discussions that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types.
 */
def discussionCount: SelectionBuilder[SearchResultItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("discussionCount", Scalar())
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SearchResultItemEdge, A]): SelectionBuilder[SearchResultItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * The total number of issues that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types.
 */
def issueCount: SelectionBuilder[SearchResultItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("issueCount", Scalar())
  /**
 * A list of nodes.
 */
def nodes[A](onApp: SelectionBuilder[App, A], onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onMarketplaceListing: SelectionBuilder[MarketplaceListing, A], onOrganization: SelectionBuilder[Organization, A], onPullRequest: SelectionBuilder[PullRequest, A], onRepository: SelectionBuilder[Repository, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SearchResultItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "MarketplaceListing" -> Obj(onMarketplaceListing), "Organization" -> Obj(onOrganization), "PullRequest" -> Obj(onPullRequest), "Repository" -> Obj(onRepository), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SearchResultItemConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * The total number of repositories that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types.
 */
def repositoryCount: SelectionBuilder[SearchResultItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("repositoryCount", Scalar())
  /**
 * The total number of users that matched the search query. Regardless of the
total number of matches, a maximum of 1,000 results will be available across all types.
 */
def userCount: SelectionBuilder[SearchResultItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("userCount", Scalar())
  /**
 * The total number of wiki pages that matched the search query. Regardless of
the total number of matches, a maximum of 1,000 results will be available
across all types.
 */
def wikiCount: SelectionBuilder[SearchResultItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("wikiCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onMarketplaceListing: scala.Option[SelectionBuilder[MarketplaceListing, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SearchResultItemConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceListing" -> onMarketplaceListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type SearchResultItemEdge
object SearchResultItemEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SearchResultItemEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onApp: SelectionBuilder[App, A], onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onMarketplaceListing: SelectionBuilder[MarketplaceListing, A], onOrganization: SelectionBuilder[Organization, A], onPullRequest: SelectionBuilder[PullRequest, A], onRepository: SelectionBuilder[Repository, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SearchResultItemEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "MarketplaceListing" -> Obj(onMarketplaceListing), "Organization" -> Obj(onOrganization), "PullRequest" -> Obj(onPullRequest), "Repository" -> Obj(onRepository), "User" -> Obj(onUser)))))
  /**
 * Text matches on the result found.
 */
def textMatches[A](innerSelection: SelectionBuilder[TextMatch, A]): SelectionBuilder[SearchResultItemEdge, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("textMatches", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onMarketplaceListing: scala.Option[SelectionBuilder[MarketplaceListing, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SearchResultItemEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceListing" -> onMarketplaceListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type SecurityAdvisory
object SecurityAdvisory {
  /**
 * The classification of the advisory
 */
def classification: SelectionBuilder[SecurityAdvisory, SecurityAdvisoryClassification] = _root_.caliban.client.SelectionBuilder.Field("classification", Scalar())
  /**
 * The CVSS associated with this advisory
 */
def cvss[A](innerSelection: SelectionBuilder[CVSS, A]): SelectionBuilder[SecurityAdvisory, A] = _root_.caliban.client.SelectionBuilder.Field("cvss", Obj(innerSelection))
  /**
 * CWEs associated with this Advisory
 */
def cwes[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CWEConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[SecurityAdvisory, A] = _root_.caliban.client.SelectionBuilder.Field("cwes", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[SecurityAdvisory, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * This is a long plaintext description of the advisory
 */
def description: SelectionBuilder[SecurityAdvisory, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())
  /**
 * The GitHub Security Advisory ID
 */
def ghsaId: SelectionBuilder[SecurityAdvisory, String] = _root_.caliban.client.SelectionBuilder.Field("ghsaId", Scalar())
  def id: SelectionBuilder[SecurityAdvisory, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * A list of identifiers for this advisory
 */
def identifiers[A](innerSelection: SelectionBuilder[SecurityAdvisoryIdentifier, A]): SelectionBuilder[SecurityAdvisory, List[A]] = _root_.caliban.client.SelectionBuilder.Field("identifiers", ListOf(Obj(innerSelection)))
  /**
 * The permalink for the advisory's dependabot alerts page
 */
def notificationsPermalink: SelectionBuilder[SecurityAdvisory, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("notificationsPermalink", OptionOf(Scalar()))
  /**
 * The organization that originated the advisory
 */
def origin: SelectionBuilder[SecurityAdvisory, String] = _root_.caliban.client.SelectionBuilder.Field("origin", Scalar())
  /**
 * The permalink for the advisory
 */
def permalink: SelectionBuilder[SecurityAdvisory, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("permalink", OptionOf(Scalar()))
  /**
 * When the advisory was published
 */
def publishedAt: SelectionBuilder[SecurityAdvisory, DateTime] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", Scalar())
  /**
 * A list of references for this advisory
 */
def references[A](innerSelection: SelectionBuilder[SecurityAdvisoryReference, A]): SelectionBuilder[SecurityAdvisory, List[A]] = _root_.caliban.client.SelectionBuilder.Field("references", ListOf(Obj(innerSelection)))
  /**
 * The severity of the advisory
 */
def severity: SelectionBuilder[SecurityAdvisory, SecurityAdvisorySeverity] = _root_.caliban.client.SelectionBuilder.Field("severity", Scalar())
  /**
 * A short plaintext summary of the advisory
 */
def summary: SelectionBuilder[SecurityAdvisory, String] = _root_.caliban.client.SelectionBuilder.Field("summary", Scalar())
  /**
 * When the advisory was last updated
 */
def updatedAt: SelectionBuilder[SecurityAdvisory, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * Vulnerabilities associated with this Advisory
 */
def vulnerabilities[A](after : scala.Option[String] = None, before : scala.Option[String] = None, classifications : scala.Option[List[SecurityAdvisoryClassification]] = None, ecosystem : scala.Option[SecurityAdvisoryEcosystem] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SecurityVulnerabilityOrder] = None, `package` : scala.Option[String] = None, severities : scala.Option[List[SecurityAdvisorySeverity]] = None)(innerSelection: SelectionBuilder[SecurityVulnerabilityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[SecurityAdvisoryClassification]]], encoder3: ArgEncoder[scala.Option[SecurityAdvisoryEcosystem]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SecurityVulnerabilityOrder]], encoder7: ArgEncoder[scala.Option[String]], encoder8: ArgEncoder[scala.Option[List[SecurityAdvisorySeverity]]]): SelectionBuilder[SecurityAdvisory, A] = _root_.caliban.client.SelectionBuilder.Field("vulnerabilities", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("classifications", classifications, "[SecurityAdvisoryClassification!]")(encoder2), Argument("ecosystem", ecosystem, "SecurityAdvisoryEcosystem")(encoder3), Argument("first", first, "Int")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SecurityVulnerabilityOrder")(encoder6), Argument("package", `package`, "String")(encoder7), Argument("severities", severities, "[SecurityAdvisorySeverity!]")(encoder8)))
  /**
 * When the advisory was withdrawn, if it has been withdrawn
 */
def withdrawnAt: SelectionBuilder[SecurityAdvisory, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("withdrawnAt", OptionOf(Scalar()))
}


type SecurityAdvisoryConnection
object SecurityAdvisoryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SecurityAdvisoryEdge, A]): SelectionBuilder[SecurityAdvisoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SecurityAdvisory, A]): SelectionBuilder[SecurityAdvisoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SecurityAdvisoryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SecurityAdvisoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SecurityAdvisoryEdge
object SecurityAdvisoryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SecurityAdvisoryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SecurityAdvisory, A]): SelectionBuilder[SecurityAdvisoryEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SecurityAdvisoryIdentifier
object SecurityAdvisoryIdentifier {
  /**
 * The identifier type, e.g. GHSA, CVE
 */
def `type`: SelectionBuilder[SecurityAdvisoryIdentifier, String] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  /**
 * The identifier
 */
def value: SelectionBuilder[SecurityAdvisoryIdentifier, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
}


type SecurityAdvisoryPackage
object SecurityAdvisoryPackage {
  /**
 * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
 */
def ecosystem: SelectionBuilder[SecurityAdvisoryPackage, SecurityAdvisoryEcosystem] = _root_.caliban.client.SelectionBuilder.Field("ecosystem", Scalar())
  /**
 * The package name
 */
def name: SelectionBuilder[SecurityAdvisoryPackage, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
}


type SecurityAdvisoryPackageVersion
object SecurityAdvisoryPackageVersion {
  /**
 * The package name or version
 */
def identifier: SelectionBuilder[SecurityAdvisoryPackageVersion, String] = _root_.caliban.client.SelectionBuilder.Field("identifier", Scalar())
}


type SecurityAdvisoryReference
object SecurityAdvisoryReference {
  /**
 * A publicly accessible reference
 */
def url: SelectionBuilder[SecurityAdvisoryReference, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type SecurityVulnerability
object SecurityVulnerability {
  /**
 * The Advisory associated with this Vulnerability
 */
def advisory[A](innerSelection: SelectionBuilder[SecurityAdvisory, A]): SelectionBuilder[SecurityVulnerability, A] = _root_.caliban.client.SelectionBuilder.Field("advisory", Obj(innerSelection))
  /**
 * The first version containing a fix for the vulnerability
 */
def firstPatchedVersion[A](innerSelection: SelectionBuilder[SecurityAdvisoryPackageVersion, A]): SelectionBuilder[SecurityVulnerability, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("firstPatchedVersion", OptionOf(Obj(innerSelection)))
  /**
 * A description of the vulnerable package
 */
def `package`[A](innerSelection: SelectionBuilder[SecurityAdvisoryPackage, A]): SelectionBuilder[SecurityVulnerability, A] = _root_.caliban.client.SelectionBuilder.Field("package", Obj(innerSelection))
  /**
 * The severity of the vulnerability within this package
 */
def severity: SelectionBuilder[SecurityVulnerability, SecurityAdvisorySeverity] = _root_.caliban.client.SelectionBuilder.Field("severity", Scalar())
  /**
 * When the vulnerability was last updated
 */
def updatedAt: SelectionBuilder[SecurityVulnerability, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * A string that describes the vulnerable package versions.
This string follows a basic syntax with a few forms.
+ `= 0.2.0` denotes a single vulnerable version.
+ `<= 1.0.8` denotes a version range up to and including the specified version
+ `< 0.1.11` denotes a version range up to, but excluding, the specified version
+ `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
+ `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
 */
def vulnerableVersionRange: SelectionBuilder[SecurityVulnerability, String] = _root_.caliban.client.SelectionBuilder.Field("vulnerableVersionRange", Scalar())
}


type SecurityVulnerabilityConnection
object SecurityVulnerabilityConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SecurityVulnerabilityEdge, A]): SelectionBuilder[SecurityVulnerabilityConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SecurityVulnerability, A]): SelectionBuilder[SecurityVulnerabilityConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SecurityVulnerabilityConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SecurityVulnerabilityConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SecurityVulnerabilityEdge
object SecurityVulnerabilityEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SecurityVulnerabilityEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SecurityVulnerability, A]): SelectionBuilder[SecurityVulnerabilityEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SetEnterpriseIdentityProviderPayload
object SetEnterpriseIdentityProviderPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[SetEnterpriseIdentityProviderPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The identity provider for the enterprise.
 */
def identityProvider[A](innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]): SelectionBuilder[SetEnterpriseIdentityProviderPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("identityProvider", OptionOf(Obj(innerSelection)))
}


type SetOrganizationInteractionLimitPayload
object SetOrganizationInteractionLimitPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[SetOrganizationInteractionLimitPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The organization that the interaction limit was set for.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[SetOrganizationInteractionLimitPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type SetRepositoryInteractionLimitPayload
object SetRepositoryInteractionLimitPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[SetRepositoryInteractionLimitPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository that the interaction limit was set for.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[SetRepositoryInteractionLimitPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type SetUserInteractionLimitPayload
object SetUserInteractionLimitPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[SetUserInteractionLimitPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The user that the interaction limit was set for.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[SetUserInteractionLimitPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
}


type SmimeSignature
object SmimeSignature {
  /**
 * Email used to sign this object.
 */
def email: SelectionBuilder[SmimeSignature, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  /**
 * True if the signature is valid and verified by GitHub.
 */
def isValid: SelectionBuilder[SmimeSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isValid", Scalar())
  /**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
def payload: SelectionBuilder[SmimeSignature, String] = _root_.caliban.client.SelectionBuilder.Field("payload", Scalar())
  /**
 * ASCII-armored signature header from object.
 */
def signature: SelectionBuilder[SmimeSignature, String] = _root_.caliban.client.SelectionBuilder.Field("signature", Scalar())
  /**
 * GitHub user corresponding to the email signing this commit.
 */
def signer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[SmimeSignature, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signer", OptionOf(Obj(innerSelection)))
  /**
 * The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid.
 */
def state: SelectionBuilder[SmimeSignature, GitSignatureState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * True if the signature was made with GitHub's signing key.
 */
def wasSignedByGitHub: SelectionBuilder[SmimeSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("wasSignedByGitHub", Scalar())
}


type SocialAccount
object SocialAccount {
  /**
 * Name of the social media account as it appears on the profile.
 */
def displayName: SelectionBuilder[SocialAccount, String] = _root_.caliban.client.SelectionBuilder.Field("displayName", Scalar())
  /**
 * Software or company that hosts the social media account.
 */
def provider: SelectionBuilder[SocialAccount, SocialAccountProvider] = _root_.caliban.client.SelectionBuilder.Field("provider", Scalar())
  /**
 * URL of the social media account.
 */
def url: SelectionBuilder[SocialAccount, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type SocialAccountConnection
object SocialAccountConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SocialAccountEdge, A]): SelectionBuilder[SocialAccountConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SocialAccount, A]): SelectionBuilder[SocialAccountConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SocialAccountConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SocialAccountConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SocialAccountEdge
object SocialAccountEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SocialAccountEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SocialAccount, A]): SelectionBuilder[SocialAccountEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SponsorConnection
object SponsorConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SponsorEdge, A]): SelectionBuilder[SponsorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SponsorConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SponsorConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type SponsorEdge
object SponsorEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SponsorEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type SponsorableItemConnection
object SponsorableItemConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SponsorableItemEdge, A]): SelectionBuilder[SponsorableItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorableItemConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SponsorableItemConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SponsorableItemConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorableItemConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type SponsorableItemEdge
object SponsorableItemEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SponsorableItemEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorableItemEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorableItemEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type SponsorsActivity
object SponsorsActivity {
  /**
 * What action this activity indicates took place.
 */
def action: SelectionBuilder[SponsorsActivity, SponsorsActivityAction] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  def id: SelectionBuilder[SponsorsActivity, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The tier that the sponsorship used to use, for tier change events.
 */
def previousSponsorsTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[SponsorsActivity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("previousSponsorsTier", OptionOf(Obj(innerSelection)))
  /**
 * The user or organization who triggered this activity and was/is sponsoring the sponsorable.
 */
def sponsor[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorsActivity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsor", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The user or organization that is being sponsored, the maintainer.
 */
def sponsorable[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorsActivity, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The associated sponsorship tier.
 */
def sponsorsTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[SponsorsActivity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsTier", OptionOf(Obj(innerSelection)))
  /**
 * The timestamp of this event.
 */
def timestamp: SelectionBuilder[SponsorsActivity, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("timestamp", OptionOf(Scalar()))
  /**
 * Was this sponsorship made alongside other sponsorships at the same time from the same sponsor?
 */
def viaBulkSponsorship: SelectionBuilder[SponsorsActivity, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viaBulkSponsorship", Scalar())
  /**
 * The user or organization who triggered this activity and was/is sponsoring the sponsorable.
 */
def sponsorOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorsActivity, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("sponsor", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The user or organization that is being sponsored, the maintainer.
 */
def sponsorableOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorsActivity, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The user or organization that is being sponsored, the maintainer.
 */
def sponsorableInterface[A](sponsorable: SelectionBuilder[Sponsorable, A]): SelectionBuilder[SponsorsActivity, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", Obj(sponsorable))
}


type SponsorsActivityConnection
object SponsorsActivityConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SponsorsActivityEdge, A]): SelectionBuilder[SponsorsActivityConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SponsorsActivity, A]): SelectionBuilder[SponsorsActivityConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SponsorsActivityConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SponsorsActivityConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SponsorsActivityEdge
object SponsorsActivityEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SponsorsActivityEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SponsorsActivity, A]): SelectionBuilder[SponsorsActivityEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SponsorsGoal
object SponsorsGoal {
  /**
 * A description of the goal from the maintainer.
 */
def description: SelectionBuilder[SponsorsGoal, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * What the objective of this goal is.
 */
def kind: SelectionBuilder[SponsorsGoal, SponsorsGoalKind] = _root_.caliban.client.SelectionBuilder.Field("kind", Scalar())
  /**
 * The percentage representing how complete this goal is, between 0-100.
 */
def percentComplete: SelectionBuilder[SponsorsGoal, Int] = _root_.caliban.client.SelectionBuilder.Field("percentComplete", Scalar())
  /**
 * What the goal amount is. Represents an amount in USD for monthly sponsorship
amount goals. Represents a count of unique sponsors for total sponsors count goals.
 */
def targetValue: SelectionBuilder[SponsorsGoal, Int] = _root_.caliban.client.SelectionBuilder.Field("targetValue", Scalar())
  /**
 * A brief summary of the kind and target value of this goal.
 */
def title: SelectionBuilder[SponsorsGoal, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
}


type SponsorsListing
object SponsorsListing {
  /**
 * The current goal the maintainer is trying to reach with GitHub Sponsors, if any.
 */
def activeGoal[A](innerSelection: SelectionBuilder[SponsorsGoal, A]): SelectionBuilder[SponsorsListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("activeGoal", OptionOf(Obj(innerSelection)))
  /**
 * The Stripe Connect account currently in use for payouts for this Sponsors
listing, if any. Will only return a value when queried by the maintainer
themselves, or by an admin of the sponsorable organization.
 */
def activeStripeConnectAccount[A](innerSelection: SelectionBuilder[StripeConnectAccount, A]): SelectionBuilder[SponsorsListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("activeStripeConnectAccount", OptionOf(Obj(innerSelection)))
  /**
 * The name of the country or region with the maintainer's bank account or fiscal
host. Will only return a value when queried by the maintainer themselves, or
by an admin of the sponsorable organization.
 */
def billingCountryOrRegion: SelectionBuilder[SponsorsListing, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("billingCountryOrRegion", OptionOf(Scalar()))
  /**
 * The email address used by GitHub to contact the sponsorable about their GitHub
Sponsors profile. Will only return a value when queried by the maintainer
themselves, or by an admin of the sponsorable organization.
 */
def contactEmailAddress: SelectionBuilder[SponsorsListing, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("contactEmailAddress", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[SponsorsListing, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The HTTP path for the Sponsors dashboard for this Sponsors listing.
 */
def dashboardResourcePath: SelectionBuilder[SponsorsListing, URI] = _root_.caliban.client.SelectionBuilder.Field("dashboardResourcePath", Scalar())
  /**
 * The HTTP URL for the Sponsors dashboard for this Sponsors listing.
 */
def dashboardUrl: SelectionBuilder[SponsorsListing, URI] = _root_.caliban.client.SelectionBuilder.Field("dashboardUrl", Scalar())
  /**
 * The records featured on the GitHub Sponsors profile.
 */
def featuredItems[A](featureableTypes : scala.Option[List[SponsorsListingFeaturedItemFeatureableType]] = None)(innerSelection: SelectionBuilder[SponsorsListingFeaturedItem, A])(implicit encoder0: ArgEncoder[scala.Option[List[SponsorsListingFeaturedItemFeatureableType]]]): SelectionBuilder[SponsorsListing, List[A]] = _root_.caliban.client.SelectionBuilder.Field("featuredItems", ListOf(Obj(innerSelection)), arguments = List(Argument("featureableTypes", featureableTypes, "[SponsorsListingFeaturedItemFeatureableType!]")(encoder0)))
  /**
 * The fiscal host used for payments, if any. Will only return a value when
queried by the maintainer themselves, or by an admin of the sponsorable organization.
 */
def fiscalHost[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[SponsorsListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("fiscalHost", OptionOf(Obj(innerSelection)))
  /**
 * The full description of the listing.
 */
def fullDescription: SelectionBuilder[SponsorsListing, String] = _root_.caliban.client.SelectionBuilder.Field("fullDescription", Scalar())
  /**
 * The full description of the listing rendered to HTML.
 */
def fullDescriptionHTML: SelectionBuilder[SponsorsListing, HTML] = _root_.caliban.client.SelectionBuilder.Field("fullDescriptionHTML", Scalar())
  def id: SelectionBuilder[SponsorsListing, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this listing is publicly visible.
 */
def isPublic: SelectionBuilder[SponsorsListing, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPublic", Scalar())
  /**
 * The listing's full name.
 */
def name: SelectionBuilder[SponsorsListing, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * A future date on which this listing is eligible to receive a payout.
 */
def nextPayoutDate: SelectionBuilder[SponsorsListing, scala.Option[Date]] = _root_.caliban.client.SelectionBuilder.Field("nextPayoutDate", OptionOf(Scalar()))
  /**
 * The name of the country or region where the maintainer resides. Will only
return a value when queried by the maintainer themselves, or by an admin of
the sponsorable organization.
 */
def residenceCountryOrRegion: SelectionBuilder[SponsorsListing, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("residenceCountryOrRegion", OptionOf(Scalar()))
  /**
 * The HTTP path for this Sponsors listing.
 */
def resourcePath: SelectionBuilder[SponsorsListing, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The short description of the listing.
 */
def shortDescription: SelectionBuilder[SponsorsListing, String] = _root_.caliban.client.SelectionBuilder.Field("shortDescription", Scalar())
  /**
 * The short name of the listing.
 */
def slug: SelectionBuilder[SponsorsListing, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * The entity this listing represents who can be sponsored on GitHub Sponsors.
 */
def sponsorable[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorsListing, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The tiers for this GitHub Sponsors profile.
 */
def tiers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeUnpublished : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorsTierOrder] = None)(innerSelection: SelectionBuilder[SponsorsTierConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[SponsorsTierOrder]]): SelectionBuilder[SponsorsListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("tiers", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("includeUnpublished", includeUnpublished, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "SponsorsTierOrder")(encoder5)))
  /**
 * The HTTP URL for this Sponsors listing.
 */
def url: SelectionBuilder[SponsorsListing, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The entity this listing represents who can be sponsored on GitHub Sponsors.
 */
def sponsorableOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorsListing, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The entity this listing represents who can be sponsored on GitHub Sponsors.
 */
def sponsorableInterface[A](sponsorable: SelectionBuilder[Sponsorable, A]): SelectionBuilder[SponsorsListing, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", Obj(sponsorable))
}


type SponsorsListingFeaturedItem
object SponsorsListingFeaturedItem {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[SponsorsListingFeaturedItem, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Will either be a description from the sponsorable maintainer about why they
featured this item, or the item's description itself, such as a user's bio
from their GitHub profile page.
 */
def description: SelectionBuilder[SponsorsListingFeaturedItem, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * The record that is featured on the GitHub Sponsors profile.
 */
def featureable[A](onRepository: SelectionBuilder[Repository, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorsListingFeaturedItem, A] = _root_.caliban.client.SelectionBuilder.Field("featureable", ChoiceOf(Map("Repository" -> Obj(onRepository), "User" -> Obj(onUser))))
  def id: SelectionBuilder[SponsorsListingFeaturedItem, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The position of this featured item on the GitHub Sponsors profile with a lower
position indicating higher precedence. Starts at 1.
 */
def position: SelectionBuilder[SponsorsListingFeaturedItem, Int] = _root_.caliban.client.SelectionBuilder.Field("position", Scalar())
  /**
 * The GitHub Sponsors profile that features this record.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[SponsorsListingFeaturedItem, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[SponsorsListingFeaturedItem, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The record that is featured on the GitHub Sponsors profile.
 */
def featureableOption[A](onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorsListingFeaturedItem, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("featureable", ChoiceOf(Map("Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type SponsorsTier
object SponsorsTier {
  /**
 * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
 */
def adminInfo[A](innerSelection: SelectionBuilder[SponsorsTierAdminInfo, A]): SelectionBuilder[SponsorsTier, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("adminInfo", OptionOf(Obj(innerSelection)))
  /**
 * Get a different tier for this tier's maintainer that is at the same frequency
as this tier but with an equal or lesser cost. Returns the published tier with
the monthly price closest to this tier's without going over.
 */
def closestLesserValueTier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[SponsorsTier, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closestLesserValueTier", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[SponsorsTier, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The description of the tier.
 */
def description: SelectionBuilder[SponsorsTier, String] = _root_.caliban.client.SelectionBuilder.Field("description", Scalar())
  /**
 * The tier description rendered to HTML
 */
def descriptionHTML: SelectionBuilder[SponsorsTier, HTML] = _root_.caliban.client.SelectionBuilder.Field("descriptionHTML", Scalar())
  def id: SelectionBuilder[SponsorsTier, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this tier was chosen at checkout time by the sponsor rather than
defined ahead of time by the maintainer who manages the Sponsors listing.
 */
def isCustomAmount: SelectionBuilder[SponsorsTier, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCustomAmount", Scalar())
  /**
 * Whether this tier is only for use with one-time sponsorships.
 */
def isOneTime: SelectionBuilder[SponsorsTier, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isOneTime", Scalar())
  /**
 * How much this tier costs per month in cents.
 */
def monthlyPriceInCents: SelectionBuilder[SponsorsTier, Int] = _root_.caliban.client.SelectionBuilder.Field("monthlyPriceInCents", Scalar())
  /**
 * How much this tier costs per month in USD.
 */
def monthlyPriceInDollars: SelectionBuilder[SponsorsTier, Int] = _root_.caliban.client.SelectionBuilder.Field("monthlyPriceInDollars", Scalar())
  /**
 * The name of the tier.
 */
def name: SelectionBuilder[SponsorsTier, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The sponsors listing that this tier belongs to.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[SponsorsTier, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[SponsorsTier, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
}


type SponsorsTierAdminInfo
object SponsorsTierAdminInfo {
  /**
 * Indicates whether this tier is still a work in progress by the sponsorable and
not yet published to the associated GitHub Sponsors profile. Draft tiers
cannot be used for new sponsorships and will not be in use on existing
sponsorships. Draft tiers cannot be seen by anyone but the admins of the
GitHub Sponsors profile.
 */
def isDraft: SelectionBuilder[SponsorsTierAdminInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDraft", Scalar())
  /**
 * Indicates whether this tier is published to the associated GitHub Sponsors
profile. Published tiers are visible to anyone who can see the GitHub Sponsors
profile, and are available for use in sponsorships if the GitHub Sponsors
profile is publicly visible.
 */
def isPublished: SelectionBuilder[SponsorsTierAdminInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPublished", Scalar())
  /**
 * Indicates whether this tier has been retired from the associated GitHub
Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors
profile and cannot be chosen for new sponsorships. Existing sponsorships may
still use retired tiers if the sponsor selected the tier before it was retired.
 */
def isRetired: SelectionBuilder[SponsorsTierAdminInfo, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRetired", Scalar())
  /**
 * The sponsorships using this tier.
 */
def sponsorships[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includePrivate : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[SponsorsTierAdminInfo, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorships", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("includePrivate", includePrivate, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder5)))
}


type SponsorsTierConnection
object SponsorsTierConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SponsorsTierEdge, A]): SelectionBuilder[SponsorsTierConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[SponsorsTierConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SponsorsTierConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SponsorsTierConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SponsorsTierEdge
object SponsorsTierEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SponsorsTierEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[SponsorsTierEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type Sponsorship
object Sponsorship {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Sponsorship, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[Sponsorship, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the sponsorship is active. False implies the sponsor is a past sponsor
of the maintainer, while true implies they are a current sponsor.
 */
def isActive: SelectionBuilder[Sponsorship, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isActive", Scalar())
  /**
 * Whether this sponsorship represents a one-time payment versus a recurring sponsorship.
 */
def isOneTimePayment: SelectionBuilder[Sponsorship, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isOneTimePayment", Scalar())
  /**
 * Whether the sponsor has chosen to receive sponsorship update emails sent from
the sponsorable. Only returns a non-null value when the viewer has permission to know this.
 */
def isSponsorOptedIntoEmail: SelectionBuilder[Sponsorship, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isSponsorOptedIntoEmail", OptionOf(Scalar()))
  /**
 * The entity that is being sponsored
 */
@deprecated("`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.", "")
def maintainer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[Sponsorship, A] = _root_.caliban.client.SelectionBuilder.Field("maintainer", Obj(innerSelection))
  /**
 * The privacy level for this sponsorship.
 */
def privacyLevel: SelectionBuilder[Sponsorship, SponsorshipPrivacy] = _root_.caliban.client.SelectionBuilder.Field("privacyLevel", Scalar())
  /**
 * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
 */
@deprecated("`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.", "")
def sponsor[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[Sponsorship, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsor", OptionOf(Obj(innerSelection)))
  /**
 * The user or organization that is sponsoring, if you have permission to view them.
 */
def sponsorEntity[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Sponsorship, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorEntity", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The entity that is being sponsored
 */
def sponsorable[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[Sponsorship, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The associated sponsorship tier
 */
def tier[A](innerSelection: SelectionBuilder[SponsorsTier, A]): SelectionBuilder[Sponsorship, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("tier", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the current tier was chosen for this sponsorship.
 */
def tierSelectedAt: SelectionBuilder[Sponsorship, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("tierSelectedAt", OptionOf(Scalar()))
  /**
 * The user or organization that is sponsoring, if you have permission to view them.
 */
def sponsorEntityOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Sponsorship, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("sponsorEntity", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The entity that is being sponsored
 */
def sponsorableOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[Sponsorship, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The entity that is being sponsored
 */
def sponsorableInterface[A](sponsorable: SelectionBuilder[Sponsorable, A]): SelectionBuilder[Sponsorship, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", Obj(sponsorable))
}


type SponsorshipConnection
object SponsorshipConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SponsorshipEdge, A]): SelectionBuilder[SponsorshipConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Sponsorship, A]): SelectionBuilder[SponsorshipConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SponsorshipConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SponsorshipConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * The total amount in cents of all recurring sponsorships in the connection
whose amount you can view. Does not include one-time sponsorships.
 */
def totalRecurringMonthlyPriceInCents: SelectionBuilder[SponsorshipConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRecurringMonthlyPriceInCents", Scalar())
  /**
 * The total amount in USD of all recurring sponsorships in the connection whose
amount you can view. Does not include one-time sponsorships.
 */
def totalRecurringMonthlyPriceInDollars: SelectionBuilder[SponsorshipConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalRecurringMonthlyPriceInDollars", Scalar())
}


type SponsorshipEdge
object SponsorshipEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SponsorshipEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Sponsorship, A]): SelectionBuilder[SponsorshipEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SponsorshipNewsletter
object SponsorshipNewsletter {
  /**
 * The author of the newsletter.
 */
def author[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[SponsorshipNewsletter, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(innerSelection)))
  /**
 * The contents of the newsletter, the message the sponsorable wanted to give.
 */
def body: SelectionBuilder[SponsorshipNewsletter, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[SponsorshipNewsletter, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[SponsorshipNewsletter, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Indicates if the newsletter has been made available to sponsors.
 */
def isPublished: SelectionBuilder[SponsorshipNewsletter, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPublished", Scalar())
  /**
 * The user or organization this newsletter is from.
 */
def sponsorable[A](onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SponsorshipNewsletter, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))))
  /**
 * The subject of the newsletter, what it's about.
 */
def subject: SelectionBuilder[SponsorshipNewsletter, String] = _root_.caliban.client.SelectionBuilder.Field("subject", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[SponsorshipNewsletter, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The user or organization this newsletter is from.
 */
def sponsorableOption[A](onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SponsorshipNewsletter, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The user or organization this newsletter is from.
 */
def sponsorableInterface[A](sponsorable: SelectionBuilder[Sponsorable, A]): SelectionBuilder[SponsorshipNewsletter, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorable", Obj(sponsorable))
}


type SponsorshipNewsletterConnection
object SponsorshipNewsletterConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SponsorshipNewsletterEdge, A]): SelectionBuilder[SponsorshipNewsletterConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[SponsorshipNewsletter, A]): SelectionBuilder[SponsorshipNewsletterConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SponsorshipNewsletterConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SponsorshipNewsletterConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SponsorshipNewsletterEdge
object SponsorshipNewsletterEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SponsorshipNewsletterEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[SponsorshipNewsletter, A]): SelectionBuilder[SponsorshipNewsletterEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SshSignature
object SshSignature {
  /**
 * Email used to sign this object.
 */
def email: SelectionBuilder[SshSignature, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  /**
 * True if the signature is valid and verified by GitHub.
 */
def isValid: SelectionBuilder[SshSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isValid", Scalar())
  /**
 * Hex-encoded fingerprint of the key that signed this object.
 */
def keyFingerprint: SelectionBuilder[SshSignature, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("keyFingerprint", OptionOf(Scalar()))
  /**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
def payload: SelectionBuilder[SshSignature, String] = _root_.caliban.client.SelectionBuilder.Field("payload", Scalar())
  /**
 * ASCII-armored signature header from object.
 */
def signature: SelectionBuilder[SshSignature, String] = _root_.caliban.client.SelectionBuilder.Field("signature", Scalar())
  /**
 * GitHub user corresponding to the email signing this commit.
 */
def signer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[SshSignature, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signer", OptionOf(Obj(innerSelection)))
  /**
 * The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid.
 */
def state: SelectionBuilder[SshSignature, GitSignatureState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * True if the signature was made with GitHub's signing key.
 */
def wasSignedByGitHub: SelectionBuilder[SshSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("wasSignedByGitHub", Scalar())
}


type StargazerConnection
object StargazerConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[StargazerEdge, A]): SelectionBuilder[StargazerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[StargazerConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[StargazerConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[StargazerConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type StargazerEdge
object StargazerEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[StargazerEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[StargazerEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * Identifies when the item was starred.
 */
def starredAt: SelectionBuilder[StargazerEdge, DateTime] = _root_.caliban.client.SelectionBuilder.Field("starredAt", Scalar())
}


type StarredRepositoryConnection
object StarredRepositoryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[StarredRepositoryEdge, A]): SelectionBuilder[StarredRepositoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Is the list of stars for this user truncated? This is true for users that have many stars.
 */
def isOverLimit: SelectionBuilder[StarredRepositoryConnection, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isOverLimit", Scalar())
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[StarredRepositoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[StarredRepositoryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[StarredRepositoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type StarredRepositoryEdge
object StarredRepositoryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[StarredRepositoryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  def node[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[StarredRepositoryEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * Identifies when the item was starred.
 */
def starredAt: SelectionBuilder[StarredRepositoryEdge, DateTime] = _root_.caliban.client.SelectionBuilder.Field("starredAt", Scalar())
}


type StartOrganizationMigrationPayload
object StartOrganizationMigrationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[StartOrganizationMigrationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new organization migration.
 */
def orgMigration[A](innerSelection: SelectionBuilder[OrganizationMigration, A]): SelectionBuilder[StartOrganizationMigrationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("orgMigration", OptionOf(Obj(innerSelection)))
}


type StartRepositoryMigrationPayload
object StartRepositoryMigrationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[StartRepositoryMigrationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The new repository migration.
 */
def repositoryMigration[A](innerSelection: SelectionBuilder[RepositoryMigration, A]): SelectionBuilder[StartRepositoryMigrationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repositoryMigration", OptionOf(Obj(innerSelection)))
}


type Status
object Status {
  /**
 * A list of status contexts and check runs for this commit.
 */
def combinedContexts[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[StatusCheckRollupContextConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Status, A] = _root_.caliban.client.SelectionBuilder.Field("combinedContexts", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The commit this status is attached to.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[Status, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * Looks up an individual status context by context name.
 */
def context[A](name : String)(innerSelection: SelectionBuilder[StatusContext, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[Status, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("context", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * The individual status contexts for this commit.
 */
def contexts[A](innerSelection: SelectionBuilder[StatusContext, A]): SelectionBuilder[Status, List[A]] = _root_.caliban.client.SelectionBuilder.Field("contexts", ListOf(Obj(innerSelection)))
  def id: SelectionBuilder[Status, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The combined commit status.
 */
def state: SelectionBuilder[Status, StatusState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
}


type StatusCheckConfiguration
object StatusCheckConfiguration {
  /**
 * The status check context name that must be present on the commit.
 */
def context: SelectionBuilder[StatusCheckConfiguration, String] = _root_.caliban.client.SelectionBuilder.Field("context", Scalar())
  /**
 * The optional integration ID that this status check must originate from.
 */
def integrationId: SelectionBuilder[StatusCheckConfiguration, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("integrationId", OptionOf(Scalar()))
}


type StatusCheckRollup
object StatusCheckRollup {
  /**
 * The commit the status and check runs are attached to.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[StatusCheckRollup, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * A list of status contexts and check runs for this commit.
 */
def contexts[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[StatusCheckRollupContextConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[StatusCheckRollup, A] = _root_.caliban.client.SelectionBuilder.Field("contexts", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  def id: SelectionBuilder[StatusCheckRollup, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The combined status for the commit.
 */
def state: SelectionBuilder[StatusCheckRollup, StatusState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
}


type StatusCheckRollupContextConnection
object StatusCheckRollupContextConnection {
  /**
 * The number of check runs in this rollup.
 */
def checkRunCount: SelectionBuilder[StatusCheckRollupContextConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("checkRunCount", Scalar())
  /**
 * Counts of check runs by state.
 */
def checkRunCountsByState[A](innerSelection: SelectionBuilder[CheckRunStateCount, A]): SelectionBuilder[StatusCheckRollupContextConnection, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("checkRunCountsByState", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[StatusCheckRollupContextEdge, A]): SelectionBuilder[StatusCheckRollupContextConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](onCheckRun: SelectionBuilder[CheckRun, A], onStatusContext: SelectionBuilder[StatusContext, A]): SelectionBuilder[StatusCheckRollupContextConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("CheckRun" -> Obj(onCheckRun), "StatusContext" -> Obj(onStatusContext)))))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[StatusCheckRollupContextConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * The number of status contexts in this rollup.
 */
def statusContextCount: SelectionBuilder[StatusCheckRollupContextConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("statusContextCount", Scalar())
  /**
 * Counts of status contexts by state.
 */
def statusContextCountsByState[A](innerSelection: SelectionBuilder[StatusContextStateCount, A]): SelectionBuilder[StatusCheckRollupContextConnection, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("statusContextCountsByState", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[StatusCheckRollupContextConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
  /**
 * A list of nodes.
 */
def nodesOption[A](onCheckRun: scala.Option[SelectionBuilder[CheckRun, A]] = None, onStatusContext: scala.Option[SelectionBuilder[StatusContext, A]] = None): SelectionBuilder[StatusCheckRollupContextConnection, scala.Option[List[scala.Option[scala.Option[A]]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(ChoiceOf(Map("CheckRun" -> onCheckRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusContext" -> onStatusContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))))
}


type StatusCheckRollupContextEdge
object StatusCheckRollupContextEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[StatusCheckRollupContextEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](onCheckRun: SelectionBuilder[CheckRun, A], onStatusContext: SelectionBuilder[StatusContext, A]): SelectionBuilder[StatusCheckRollupContextEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("CheckRun" -> Obj(onCheckRun), "StatusContext" -> Obj(onStatusContext)))))
  /**
 * The item at the end of the edge.
 */
def nodeOption[A](onCheckRun: scala.Option[SelectionBuilder[CheckRun, A]] = None, onStatusContext: scala.Option[SelectionBuilder[StatusContext, A]] = None): SelectionBuilder[StatusCheckRollupContextEdge, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("CheckRun" -> onCheckRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusContext" -> onStatusContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type StatusContext
object StatusContext {
  /**
 * The avatar of the OAuth application or the user that created the status
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[StatusContext, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * This commit this status context is attached to.
 */
def commit[A](innerSelection: SelectionBuilder[Commit, A]): SelectionBuilder[StatusContext, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("commit", OptionOf(Obj(innerSelection)))
  /**
 * The name of this status context.
 */
def context: SelectionBuilder[StatusContext, String] = _root_.caliban.client.SelectionBuilder.Field("context", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[StatusContext, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The actor who created this status context.
 */
def creator[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[StatusContext, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The description for this status context.
 */
def description: SelectionBuilder[StatusContext, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  def id: SelectionBuilder[StatusContext, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this is required to pass before merging for a specific pull request.
 */
def isRequired(pullRequestId : scala.Option[String] = None, pullRequestNumber : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[Int]]): SelectionBuilder[StatusContext, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRequired", Scalar(), arguments = List(Argument("pullRequestId", pullRequestId, "ID")(encoder0), Argument("pullRequestNumber", pullRequestNumber, "Int")(encoder1)))
  /**
 * The state of this status context.
 */
def state: SelectionBuilder[StatusContext, StatusState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * The URL for this status context.
 */
def targetUrl: SelectionBuilder[StatusContext, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("targetUrl", OptionOf(Scalar()))
  /**
 * The actor who created this status context.
 */
def creatorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[StatusContext, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who created this status context.
 */
def creatorInterface[A](creator: SelectionBuilder[Actor, A]): SelectionBuilder[StatusContext, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("creator", OptionOf(Obj(creator)))
}


type StatusContextStateCount
object StatusContextStateCount {
  /**
 * The number of statuses with this state.
 */
def count: SelectionBuilder[StatusContextStateCount, Int] = _root_.caliban.client.SelectionBuilder.Field("count", Scalar())
  /**
 * The state of a status context.
 */
def state: SelectionBuilder[StatusContextStateCount, StatusState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
}


type StripeConnectAccount
object StripeConnectAccount {
  /**
 * The account number used to identify this Stripe Connect account.
 */
def accountId: SelectionBuilder[StripeConnectAccount, String] = _root_.caliban.client.SelectionBuilder.Field("accountId", Scalar())
  /**
 * The name of the country or region of an external account, such as a bank
account, tied to the Stripe Connect account. Will only return a value when
queried by the maintainer of the associated GitHub Sponsors profile
themselves, or by an admin of the sponsorable organization.
 */
def billingCountryOrRegion: SelectionBuilder[StripeConnectAccount, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("billingCountryOrRegion", OptionOf(Scalar()))
  /**
 * The name of the country or region of the Stripe Connect account. Will only
return a value when queried by the maintainer of the associated GitHub
Sponsors profile themselves, or by an admin of the sponsorable organization.
 */
def countryOrRegion: SelectionBuilder[StripeConnectAccount, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("countryOrRegion", OptionOf(Scalar()))
  /**
 * Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile.
 */
def isActive: SelectionBuilder[StripeConnectAccount, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isActive", Scalar())
  /**
 * The GitHub Sponsors profile associated with this Stripe Connect account.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[StripeConnectAccount, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", Obj(innerSelection))
  /**
 * The URL to access this Stripe Connect account on Stripe's website.
 */
def stripeDashboardUrl: SelectionBuilder[StripeConnectAccount, URI] = _root_.caliban.client.SelectionBuilder.Field("stripeDashboardUrl", Scalar())
}


type SubmitPullRequestReviewPayload
object SubmitPullRequestReviewPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[SubmitPullRequestReviewPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The submitted pull request review.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[SubmitPullRequestReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
}


type Submodule
object Submodule {
  /**
 * The branch of the upstream submodule for tracking updates
 */
def branch: SelectionBuilder[Submodule, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("branch", OptionOf(Scalar()))
  /**
 * The git URL of the submodule repository
 */
def gitUrl: SelectionBuilder[Submodule, URI] = _root_.caliban.client.SelectionBuilder.Field("gitUrl", Scalar())
  /**
 * The name of the submodule in .gitmodules
 */
def name: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The name of the submodule in .gitmodules (Base64-encoded)
 */
def nameRaw: SelectionBuilder[Submodule, Base64String] = _root_.caliban.client.SelectionBuilder.Field("nameRaw", Scalar())
  /**
 * The path in the superproject that this submodule is located in
 */
def path: SelectionBuilder[Submodule, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * The path in the superproject that this submodule is located in (Base64-encoded)
 */
def pathRaw: SelectionBuilder[Submodule, Base64String] = _root_.caliban.client.SelectionBuilder.Field("pathRaw", Scalar())
  /**
 * The commit revision of the subproject repository being tracked by the submodule
 */
def subprojectCommitOid: SelectionBuilder[Submodule, scala.Option[GitObjectID]] = _root_.caliban.client.SelectionBuilder.Field("subprojectCommitOid", OptionOf(Scalar()))
}


type SubmoduleConnection
object SubmoduleConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[SubmoduleEdge, A]): SelectionBuilder[SubmoduleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Submodule, A]): SelectionBuilder[SubmoduleConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[SubmoduleConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[SubmoduleConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type SubmoduleEdge
object SubmoduleEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[SubmoduleEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Submodule, A]): SelectionBuilder[SubmoduleEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type SubscribedEvent
object SubscribedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[SubscribedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[SubscribedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[SubscribedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Object referenced by event.
 */
def subscribable[A](onCommit: SelectionBuilder[Commit, A], onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A], onRepository: SelectionBuilder[Repository, A], onTeam: SelectionBuilder[Team, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[SubscribedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subscribable", ChoiceOf(Map("Commit" -> Obj(onCommit), "Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest), "Repository" -> Obj(onRepository), "Team" -> Obj(onTeam), "TeamDiscussion" -> Obj(onTeamDiscussion))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[SubscribedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[SubscribedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Object referenced by event.
 */
def subscribableOption[A](onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None): SelectionBuilder[SubscribedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subscribable", ChoiceOf(Map("Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Object referenced by event.
 */
def subscribableInterface[A](subscribable: SelectionBuilder[Subscribable, A]): SelectionBuilder[SubscribedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subscribable", Obj(subscribable))
}


type SuggestedReviewer
object SuggestedReviewer {
  /**
 * Is this suggestion based on past commits?
 */
def isAuthor: SelectionBuilder[SuggestedReviewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isAuthor", Scalar())
  /**
 * Is this suggestion based on past review comments?
 */
def isCommenter: SelectionBuilder[SuggestedReviewer, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCommenter", Scalar())
  /**
 * Identifies the user suggested to review the pull request.
 */
def reviewer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[SuggestedReviewer, A] = _root_.caliban.client.SelectionBuilder.Field("reviewer", Obj(innerSelection))
}


type Tag
object Tag {
  /**
 * An abbreviated version of the Git object ID
 */
def abbreviatedOid: SelectionBuilder[Tag, String] = _root_.caliban.client.SelectionBuilder.Field("abbreviatedOid", Scalar())
  /**
 * The HTTP path for this Git object
 */
def commitResourcePath: SelectionBuilder[Tag, URI] = _root_.caliban.client.SelectionBuilder.Field("commitResourcePath", Scalar())
  /**
 * The HTTP URL for this Git object
 */
def commitUrl: SelectionBuilder[Tag, URI] = _root_.caliban.client.SelectionBuilder.Field("commitUrl", Scalar())
  def id: SelectionBuilder[Tag, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The Git tag message.
 */
def message: SelectionBuilder[Tag, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
  /**
 * The Git tag name.
 */
def name: SelectionBuilder[Tag, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The Git object ID
 */
def oid: SelectionBuilder[Tag, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())
  /**
 * The Repository the Git object belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Tag, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * Details about the tag author.
 */
def tagger[A](innerSelection: SelectionBuilder[GitActor, A]): SelectionBuilder[Tag, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("tagger", OptionOf(Obj(innerSelection)))
  /**
 * The Git object the tag points to.
 */
def target[A](onBlob: SelectionBuilder[Blob, A], onCommit: SelectionBuilder[Commit, A], onTag: SelectionBuilder[Tag, A], onTree: SelectionBuilder[Tree, A]): SelectionBuilder[Tag, A] = _root_.caliban.client.SelectionBuilder.Field("target", ChoiceOf(Map("Blob" -> Obj(onBlob), "Commit" -> Obj(onCommit), "Tag" -> Obj(onTag), "Tree" -> Obj(onTree))))
  /**
 * The Git object the tag points to.
 */
def targetOption[A](onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None): SelectionBuilder[Tag, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("target", ChoiceOf(Map("Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * The Git object the tag points to.
 */
def targetInterface[A](target: SelectionBuilder[GitObject, A]): SelectionBuilder[Tag, A] = _root_.caliban.client.SelectionBuilder.Field("target", Obj(target))
}


type TagNamePatternParameters
object TagNamePatternParameters {
  /**
 * How this rule will appear to users.
 */
def name: SelectionBuilder[TagNamePatternParameters, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * If true, the rule will fail if the pattern matches.
 */
def negate: SelectionBuilder[TagNamePatternParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("negate", Scalar())
  /**
 * The operator to use for matching.
 */
def operator: SelectionBuilder[TagNamePatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("operator", Scalar())
  /**
 * The pattern to match with.
 */
def pattern: SelectionBuilder[TagNamePatternParameters, String] = _root_.caliban.client.SelectionBuilder.Field("pattern", Scalar())
}


type Team
object Team {
  /**
 * A list of teams that are ancestors of this team.
 */
def ancestors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[TeamConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("ancestors", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A URL pointing to the team's avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Team, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", OptionOf(Scalar()), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * List of child teams belonging to this team
 */
def childTeams[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, immediateOnly : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[TeamOrder] = None, userLogins : scala.Option[List[String]] = None)(innerSelection: SelectionBuilder[TeamConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[TeamOrder]], encoder6: ArgEncoder[scala.Option[List[String]]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("childTeams", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("immediateOnly", immediateOnly, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "TeamOrder")(encoder5), Argument("userLogins", userLogins, "[String!]")(encoder6)))
  /**
 * The slug corresponding to the organization and team.
 */
def combinedSlug: SelectionBuilder[Team, String] = _root_.caliban.client.SelectionBuilder.Field("combinedSlug", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Team, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Team, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The description of the team.
 */
def description: SelectionBuilder[Team, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("description", OptionOf(Scalar()))
  /**
 * Find a team discussion by its number.
 */
def discussion[A](number : Int)(innerSelection: SelectionBuilder[TeamDiscussion, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Team, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of team discussions.
 */
def discussions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isPinned : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[TeamDiscussionOrder] = None)(innerSelection: SelectionBuilder[TeamDiscussionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Boolean]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[TeamDiscussionOrder]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("discussions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("isPinned", isPinned, "Boolean")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "TeamDiscussionOrder")(encoder5)))
  /**
 * The HTTP path for team discussions
 */
def discussionsResourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("discussionsResourcePath", Scalar())
  /**
 * The HTTP URL for team discussions
 */
def discussionsUrl: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("discussionsUrl", Scalar())
  /**
 * The HTTP path for editing this team
 */
def editTeamResourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("editTeamResourcePath", Scalar())
  /**
 * The HTTP URL for editing this team
 */
def editTeamUrl: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("editTeamUrl", Scalar())
  def id: SelectionBuilder[Team, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * A list of pending invitations for users to this team
 */
def invitations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[OrganizationInvitationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Team, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("invitations", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Get the status messages members of this entity have set that are either public or visible only to the organization.
 */
def memberStatuses[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[UserStatusOrder] = None)(innerSelection: SelectionBuilder[UserStatusConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[UserStatusOrder]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("memberStatuses", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "UserStatusOrder")(encoder4)))
  /**
 * A list of users who are members of this team.
 */
def members[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, membership : scala.Option[TeamMembershipType] = None, orderBy : scala.Option[TeamMemberOrder] = None, query : scala.Option[String] = None, role : scala.Option[TeamMemberRole] = None)(innerSelection: SelectionBuilder[TeamMemberConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[TeamMembershipType]], encoder5: ArgEncoder[scala.Option[TeamMemberOrder]], encoder6: ArgEncoder[scala.Option[String]], encoder7: ArgEncoder[scala.Option[TeamMemberRole]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("members", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("membership", membership, "TeamMembershipType")(encoder4), Argument("orderBy", orderBy, "TeamMemberOrder")(encoder5), Argument("query", query, "String")(encoder6), Argument("role", role, "TeamMemberRole")(encoder7)))
  /**
 * The HTTP path for the team' members
 */
def membersResourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("membersResourcePath", Scalar())
  /**
 * The HTTP URL for the team' members
 */
def membersUrl: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("membersUrl", Scalar())
  /**
 * The name of the team.
 */
def name: SelectionBuilder[Team, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The HTTP path creating a new team
 */
def newTeamResourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("newTeamResourcePath", Scalar())
  /**
 * The HTTP URL creating a new team
 */
def newTeamUrl: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("newTeamUrl", Scalar())
  /**
 * The notification setting that the team has set.
 */
def notificationSetting: SelectionBuilder[Team, TeamNotificationSetting] = _root_.caliban.client.SelectionBuilder.Field("notificationSetting", Scalar())
  /**
 * The organization that owns this team.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("organization", Obj(innerSelection))
  /**
 * The parent team of the team.
 */
def parentTeam[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[Team, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("parentTeam", OptionOf(Obj(innerSelection)))
  /**
 * The level of privacy the team has.
 */
def privacy: SelectionBuilder[Team, TeamPrivacy] = _root_.caliban.client.SelectionBuilder.Field("privacy", Scalar())
  /**
 * Finds and returns the project according to the provided project number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[Team, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * List of projects this team has collaborator access to.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[ProjectV2Filters] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ProjectV2Filters]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ProjectV2Order]], encoder6: ArgEncoder[scala.Option[String]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "ProjectV2Filters")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ProjectV2Order")(encoder5), Argument("query", query, "String")(encoder6)))
  /**
 * A list of repositories this team has access to.
 */
def repositories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[TeamRepositoryOrder] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[TeamRepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[TeamRepositoryOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[Team, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "TeamRepositoryOrder")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * The HTTP path for this team's repositories
 */
def repositoriesResourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("repositoriesResourcePath", Scalar())
  /**
 * The HTTP URL for this team's repositories
 */
def repositoriesUrl: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("repositoriesUrl", Scalar())
  /**
 * The HTTP path for this team
 */
def resourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * What algorithm is used for review assignment for this team
 */
def reviewRequestDelegationAlgorithm: SelectionBuilder[Team, scala.Option[TeamReviewAssignmentAlgorithm]] = _root_.caliban.client.SelectionBuilder.Field("reviewRequestDelegationAlgorithm", OptionOf(Scalar()))
  /**
 * True if review assignment is enabled for this team
 */
def reviewRequestDelegationEnabled: SelectionBuilder[Team, Boolean] = _root_.caliban.client.SelectionBuilder.Field("reviewRequestDelegationEnabled", Scalar())
  /**
 * How many team members are required for review assignment for this team
 */
def reviewRequestDelegationMemberCount: SelectionBuilder[Team, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("reviewRequestDelegationMemberCount", OptionOf(Scalar()))
  /**
 * When assigning team members via delegation, whether the entire team should be notified as well.
 */
def reviewRequestDelegationNotifyTeam: SelectionBuilder[Team, Boolean] = _root_.caliban.client.SelectionBuilder.Field("reviewRequestDelegationNotifyTeam", Scalar())
  /**
 * The slug corresponding to the team.
 */
def slug: SelectionBuilder[Team, String] = _root_.caliban.client.SelectionBuilder.Field("slug", Scalar())
  /**
 * The HTTP path for this team's teams
 */
def teamsResourcePath: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("teamsResourcePath", Scalar())
  /**
 * The HTTP URL for this team's teams
 */
def teamsUrl: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("teamsUrl", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Team, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this team
 */
def url: SelectionBuilder[Team, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Team is adminable by the viewer.
 */
def viewerCanAdminister: SelectionBuilder[Team, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanAdminister", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[Team, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[Team, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
}


type TeamAddMemberAuditEntry
object TeamAddMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[TeamAddMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[TeamAddMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[TeamAddMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the team was mapped to an LDAP Group.
 */
def isLdapMapped: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isLdapMapped", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamAddMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type TeamAddRepositoryAuditEntry
object TeamAddRepositoryAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[TeamAddRepositoryAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[TeamAddRepositoryAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[TeamAddRepositoryAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the team was mapped to an LDAP Group.
 */
def isLdapMapped: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isLdapMapped", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamAddRepositoryAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type TeamChangeParentTeamAuditEntry
object TeamChangeParentTeamAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[TeamChangeParentTeamAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[TeamChangeParentTeamAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[TeamChangeParentTeamAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the team was mapped to an LDAP Group.
 */
def isLdapMapped: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isLdapMapped", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The new parent team.
 */
def parentTeam[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("parentTeam", OptionOf(Obj(innerSelection)))
  /**
 * The name of the new parent team
 */
def parentTeamName: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamName", OptionOf(Scalar()))
  /**
 * The name of the former parent team
 */
def parentTeamNameWas: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamNameWas", OptionOf(Scalar()))
  /**
 * The HTTP path for the parent team
 */
def parentTeamResourcePath: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the parent team
 */
def parentTeamUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamUrl", OptionOf(Scalar()))
  /**
 * The former parent team.
 */
def parentTeamWas[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamWas", OptionOf(Obj(innerSelection)))
  /**
 * The HTTP path for the previous parent team
 */
def parentTeamWasResourcePath: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamWasResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the previous parent team
 */
def parentTeamWasUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("parentTeamWasUrl", OptionOf(Scalar()))
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamChangeParentTeamAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type TeamConnection
object TeamConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[TeamEdge, A]): SelectionBuilder[TeamConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TeamConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[TeamConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type TeamDiscussion
object TeamDiscussion {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamDiscussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the discussion's team.
 */
def authorAssociation: SelectionBuilder[TeamDiscussion, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The body as Markdown.
 */
def body: SelectionBuilder[TeamDiscussion, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[TeamDiscussion, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[TeamDiscussion, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * Identifies the discussion body hash.
 */
def bodyVersion: SelectionBuilder[TeamDiscussion, String] = _root_.caliban.client.SelectionBuilder.Field("bodyVersion", Scalar())
  /**
 * A list of comments on this discussion.
 */
def comments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, fromComment : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[TeamDiscussionCommentOrder] = None)(innerSelection: SelectionBuilder[TeamDiscussionCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[TeamDiscussionCommentOrder]]): SelectionBuilder[TeamDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("comments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("fromComment", fromComment, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "TeamDiscussionCommentOrder")(encoder5)))
  /**
 * The HTTP path for discussion comments
 */
def commentsResourcePath: SelectionBuilder[TeamDiscussion, URI] = _root_.caliban.client.SelectionBuilder.Field("commentsResourcePath", Scalar())
  /**
 * The HTTP URL for discussion comments
 */
def commentsUrl: SelectionBuilder[TeamDiscussion, URI] = _root_.caliban.client.SelectionBuilder.Field("commentsUrl", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[TeamDiscussion, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[TeamDiscussion, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamDiscussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[TeamDiscussion, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * Whether or not the discussion is pinned.
 */
def isPinned: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPinned", Scalar())
  /**
 * Whether or not the discussion is only visible to team members and org admins.
 */
def isPrivate: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isPrivate", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[TeamDiscussion, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Identifies the discussion within its team.
 */
def number: SelectionBuilder[TeamDiscussion, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[TeamDiscussion, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[TeamDiscussion, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[TeamDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The HTTP path for this discussion
 */
def resourcePath: SelectionBuilder[TeamDiscussion, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The team that defines the context of this discussion.
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamDiscussion, A] = _root_.caliban.client.SelectionBuilder.Field("team", Obj(innerSelection))
  /**
 * The title of the discussion
 */
def title: SelectionBuilder[TeamDiscussion, String] = _root_.caliban.client.SelectionBuilder.Field("title", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[TeamDiscussion, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this discussion
 */
def url: SelectionBuilder[TeamDiscussion, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[TeamDiscussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Whether or not the current viewer can pin this discussion.
 */
def viewerCanPin: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanPin", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Check if the viewer is able to change their subscription status for the repository.
 */
def viewerCanSubscribe: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSubscribe", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[TeamDiscussion, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[TeamDiscussion, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
 */
def viewerSubscription: SelectionBuilder[TeamDiscussion, scala.Option[SubscriptionState]] = _root_.caliban.client.SelectionBuilder.Field("viewerSubscription", OptionOf(Scalar()))
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamDiscussion, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[TeamDiscussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamDiscussion, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[TeamDiscussion, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type TeamDiscussionComment
object TeamDiscussionComment {
  /**
 * The actor who authored the comment.
 */
def author[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamDiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Author's association with the comment's team.
 */
def authorAssociation: SelectionBuilder[TeamDiscussionComment, CommentAuthorAssociation] = _root_.caliban.client.SelectionBuilder.Field("authorAssociation", Scalar())
  /**
 * The body as Markdown.
 */
def body: SelectionBuilder[TeamDiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("body", Scalar())
  /**
 * The body rendered to HTML.
 */
def bodyHTML: SelectionBuilder[TeamDiscussionComment, HTML] = _root_.caliban.client.SelectionBuilder.Field("bodyHTML", Scalar())
  /**
 * The body rendered to text.
 */
def bodyText: SelectionBuilder[TeamDiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyText", Scalar())
  /**
 * The current version of the body content.
 */
def bodyVersion: SelectionBuilder[TeamDiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("bodyVersion", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[TeamDiscussionComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Check if this comment was created via an email reply.
 */
def createdViaEmail: SelectionBuilder[TeamDiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("createdViaEmail", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[TeamDiscussionComment, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The discussion this comment is about.
 */
def discussion[A](innerSelection: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[TeamDiscussionComment, A] = _root_.caliban.client.SelectionBuilder.Field("discussion", Obj(innerSelection))
  /**
 * The actor who edited the comment.
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamDiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[TeamDiscussionComment, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Check if this comment was edited and includes an edit with the creation data
 */
def includesCreatedEdit: SelectionBuilder[TeamDiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("includesCreatedEdit", Scalar())
  /**
 * The moment the editor made the last edit
 */
def lastEditedAt: SelectionBuilder[TeamDiscussionComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("lastEditedAt", OptionOf(Scalar()))
  /**
 * Identifies the comment number.
 */
def number: SelectionBuilder[TeamDiscussionComment, Int] = _root_.caliban.client.SelectionBuilder.Field("number", Scalar())
  /**
 * Identifies when the comment was published at.
 */
def publishedAt: SelectionBuilder[TeamDiscussionComment, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("publishedAt", OptionOf(Scalar()))
  /**
 * A list of reactions grouped by content left on the subject.
 */
def reactionGroups[A](innerSelection: SelectionBuilder[ReactionGroup, A]): SelectionBuilder[TeamDiscussionComment, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))
  /**
 * A list of Reactions left on the Issue.
 */
def reactions[A](after : scala.Option[String] = None, before : scala.Option[String] = None, content : scala.Option[ReactionContent] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ReactionOrder] = None)(innerSelection: SelectionBuilder[ReactionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[ReactionContent]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[ReactionOrder]]): SelectionBuilder[TeamDiscussionComment, A] = _root_.caliban.client.SelectionBuilder.Field("reactions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("content", content, "ReactionContent")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "ReactionOrder")(encoder5)))
  /**
 * The HTTP path for this comment
 */
def resourcePath: SelectionBuilder[TeamDiscussionComment, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[TeamDiscussionComment, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this comment
 */
def url: SelectionBuilder[TeamDiscussionComment, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * A list of edits to this content.
 */
def userContentEdits[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[UserContentEditConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[TeamDiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("userContentEdits", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Check if the current viewer can delete this object.
 */
def viewerCanDelete: SelectionBuilder[TeamDiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanDelete", Scalar())
  /**
 * Can user react to this subject
 */
def viewerCanReact: SelectionBuilder[TeamDiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReact", Scalar())
  /**
 * Check if the current viewer can update this object.
 */
def viewerCanUpdate: SelectionBuilder[TeamDiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanUpdate", Scalar())
  /**
 * Reasons why the current viewer can not update this comment.
 */
def viewerCannotUpdateReasons: SelectionBuilder[TeamDiscussionComment, List[CommentCannotUpdateReason]] = _root_.caliban.client.SelectionBuilder.Field("viewerCannotUpdateReasons", ListOf(Scalar()))
  /**
 * Did the viewer author this comment.
 */
def viewerDidAuthor: SelectionBuilder[TeamDiscussionComment, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerDidAuthor", Scalar())
  /**
 * The actor who authored the comment.
 */
def authorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamDiscussionComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who authored the comment.
 */
def authorInterface[A](author: SelectionBuilder[Actor, A]): SelectionBuilder[TeamDiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("author", OptionOf(Obj(author)))
  /**
 * The actor who edited the comment.
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamDiscussionComment, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited the comment.
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[TeamDiscussionComment, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type TeamDiscussionCommentConnection
object TeamDiscussionCommentConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[TeamDiscussionCommentEdge, A]): SelectionBuilder[TeamDiscussionCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[TeamDiscussionCommentConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TeamDiscussionCommentConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[TeamDiscussionCommentConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type TeamDiscussionCommentEdge
object TeamDiscussionCommentEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[TeamDiscussionCommentEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[TeamDiscussionCommentEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type TeamDiscussionConnection
object TeamDiscussionConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[TeamDiscussionEdge, A]): SelectionBuilder[TeamDiscussionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[TeamDiscussionConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TeamDiscussionConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[TeamDiscussionConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type TeamDiscussionEdge
object TeamDiscussionEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[TeamDiscussionEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[TeamDiscussionEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type TeamEdge
object TeamEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[TeamEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type TeamMemberConnection
object TeamMemberConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[TeamMemberEdge, A]): SelectionBuilder[TeamMemberConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamMemberConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TeamMemberConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[TeamMemberConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type TeamMemberEdge
object TeamMemberEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[TeamMemberEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The HTTP path to the organization's member access page.
 */
def memberAccessResourcePath: SelectionBuilder[TeamMemberEdge, URI] = _root_.caliban.client.SelectionBuilder.Field("memberAccessResourcePath", Scalar())
  /**
 * The HTTP URL to the organization's member access page.
 */
def memberAccessUrl: SelectionBuilder[TeamMemberEdge, URI] = _root_.caliban.client.SelectionBuilder.Field("memberAccessUrl", Scalar())
  def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamMemberEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * The role the member has on the team.
 */
def role: SelectionBuilder[TeamMemberEdge, TeamMemberRole] = _root_.caliban.client.SelectionBuilder.Field("role", Scalar())
}


type TeamRemoveMemberAuditEntry
object TeamRemoveMemberAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[TeamRemoveMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[TeamRemoveMemberAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[TeamRemoveMemberAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the team was mapped to an LDAP Group.
 */
def isLdapMapped: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isLdapMapped", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamRemoveMemberAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type TeamRemoveRepositoryAuditEntry
object TeamRemoveRepositoryAuditEntry {
  /**
 * The action name
 */
def action: SelectionBuilder[TeamRemoveRepositoryAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("action", Scalar())
  /**
 * The user who initiated the action
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The IP address of the actor
 */
def actorIp: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorIp", OptionOf(Scalar()))
  /**
 * A readable representation of the actor's location
 */
def actorLocation[A](innerSelection: SelectionBuilder[ActorLocation, A]): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actorLocation", OptionOf(Obj(innerSelection)))
  /**
 * The username of the user who initiated the action
 */
def actorLogin: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("actorLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the actor.
 */
def actorResourcePath: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the actor.
 */
def actorUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("actorUrl", OptionOf(Scalar()))
  /**
 * The time the action was initiated
 */
def createdAt: SelectionBuilder[TeamRemoveRepositoryAuditEntry, PreciseDateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[TeamRemoveRepositoryAuditEntry, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether the team was mapped to an LDAP Group.
 */
def isLdapMapped: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("isLdapMapped", OptionOf(Scalar()))
  /**
 * The corresponding operation type for the action
 */
def operationType: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[OperationType]] = _root_.caliban.client.SelectionBuilder.Field("operationType", OptionOf(Scalar()))
  /**
 * The Organization associated with the Audit Entry.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * The name of the Organization.
 */
def organizationName: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationName", OptionOf(Scalar()))
  /**
 * The HTTP path for the organization
 */
def organizationResourcePath: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the organization
 */
def organizationUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("organizationUrl", OptionOf(Scalar()))
  /**
 * The repository associated with the action
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The name of the repository
 */
def repositoryName: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", OptionOf(Scalar()))
  /**
 * The HTTP path for the repository
 */
def repositoryResourcePath: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the repository
 */
def repositoryUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("repositoryUrl", OptionOf(Scalar()))
  /**
 * The team associated with the action
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
  /**
 * The name of the team
 */
def teamName: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("teamName", OptionOf(Scalar()))
  /**
 * The HTTP path for this team
 */
def teamResourcePath: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for this team
 */
def teamUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("teamUrl", OptionOf(Scalar()))
  /**
 * The user affected by the action
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * For actions involving two users, the actor is the initiator and the user is the affected user.
 */
def userLogin: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("userLogin", OptionOf(Scalar()))
  /**
 * The HTTP path for the user.
 */
def userResourcePath: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userResourcePath", OptionOf(Scalar()))
  /**
 * The HTTP URL for the user.
 */
def userUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("userUrl", OptionOf(Scalar()))
  /**
 * The user who initiated the action
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TeamRemoveRepositoryAuditEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type TeamRepositoryConnection
object TeamRepositoryConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[TeamRepositoryEdge, A]): SelectionBuilder[TeamRepositoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[TeamRepositoryConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[TeamRepositoryConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[TeamRepositoryConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type TeamRepositoryEdge
object TeamRepositoryEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[TeamRepositoryEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  def node[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[TeamRepositoryEdge, A] = _root_.caliban.client.SelectionBuilder.Field("node", Obj(innerSelection))
  /**
 * The permission level the team has on the repository
 */
def permission: SelectionBuilder[TeamRepositoryEdge, RepositoryPermission] = _root_.caliban.client.SelectionBuilder.Field("permission", Scalar())
}


type TextMatch
object TextMatch {
  /**
 * The specific text fragment within the property matched on.
 */
def fragment: SelectionBuilder[TextMatch, String] = _root_.caliban.client.SelectionBuilder.Field("fragment", Scalar())
  /**
 * Highlights within the matched fragment.
 */
def highlights[A](innerSelection: SelectionBuilder[TextMatchHighlight, A]): SelectionBuilder[TextMatch, List[A]] = _root_.caliban.client.SelectionBuilder.Field("highlights", ListOf(Obj(innerSelection)))
  /**
 * The property matched on.
 */
def property: SelectionBuilder[TextMatch, String] = _root_.caliban.client.SelectionBuilder.Field("property", Scalar())
}


type TextMatchHighlight
object TextMatchHighlight {
  /**
 * The indice in the fragment where the matched text begins.
 */
def beginIndice: SelectionBuilder[TextMatchHighlight, Int] = _root_.caliban.client.SelectionBuilder.Field("beginIndice", Scalar())
  /**
 * The indice in the fragment where the matched text ends.
 */
def endIndice: SelectionBuilder[TextMatchHighlight, Int] = _root_.caliban.client.SelectionBuilder.Field("endIndice", Scalar())
  /**
 * The text matched.
 */
def text: SelectionBuilder[TextMatchHighlight, String] = _root_.caliban.client.SelectionBuilder.Field("text", Scalar())
}


type Topic
object Topic {
  def id: SelectionBuilder[Topic, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The topic's name.
 */
def name: SelectionBuilder[Topic, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * A list of related topics, including aliases of this topic, sorted with the most relevant
first. Returns up to 10 Topics.
 */
def relatedTopics[A](first : scala.Option[Int] = None)(innerSelection: SelectionBuilder[Topic, A])(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[Topic, List[A]] = _root_.caliban.client.SelectionBuilder.Field("relatedTopics", ListOf(Obj(innerSelection)), arguments = List(Argument("first", first, "Int")(encoder0)))
  /**
 * A list of repositories.
 */
def repositories[A](affiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, ownerAffiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, privacy : scala.Option[RepositoryPrivacy] = None, sponsorableOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[RepositoryOrder]], encoder7: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder8: ArgEncoder[scala.Option[RepositoryPrivacy]], encoder9: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[Topic, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("affiliations", affiliations, "[RepositoryAffiliation]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("isLocked", isLocked, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "RepositoryOrder")(encoder6), Argument("ownerAffiliations", ownerAffiliations, "[RepositoryAffiliation]")(encoder7), Argument("privacy", privacy, "RepositoryPrivacy")(encoder8), Argument("sponsorableOnly", sponsorableOnly, "Boolean")(encoder9)))
  /**
 * Returns a count of how many stargazers there are on this object
 */
def stargazerCount: SelectionBuilder[Topic, Int] = _root_.caliban.client.SelectionBuilder.Field("stargazerCount", Scalar())
  /**
 * A list of users who have starred this starrable.
 */
def stargazers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[StarOrder] = None)(innerSelection: SelectionBuilder[StargazerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[StarOrder]]): SelectionBuilder[Topic, A] = _root_.caliban.client.SelectionBuilder.Field("stargazers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "StarOrder")(encoder4)))
  /**
 * Returns a boolean indicating whether the viewing user has starred this starrable.
 */
def viewerHasStarred: SelectionBuilder[Topic, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerHasStarred", Scalar())
}


type TransferEnterpriseOrganizationPayload
object TransferEnterpriseOrganizationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[TransferEnterpriseOrganizationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The organization for which a transfer was initiated.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[TransferEnterpriseOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type TransferIssuePayload
object TransferIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[TransferIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue that was transferred
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[TransferIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type TransferredEvent
object TransferredEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[TransferredEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[TransferredEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The repository this came from
 */
def fromRepository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[TransferredEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("fromRepository", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[TransferredEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the issue associated with the event.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[TransferredEvent, A] = _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[TransferredEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[TransferredEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type Tree
object Tree {
  /**
 * An abbreviated version of the Git object ID
 */
def abbreviatedOid: SelectionBuilder[Tree, String] = _root_.caliban.client.SelectionBuilder.Field("abbreviatedOid", Scalar())
  /**
 * The HTTP path for this Git object
 */
def commitResourcePath: SelectionBuilder[Tree, URI] = _root_.caliban.client.SelectionBuilder.Field("commitResourcePath", Scalar())
  /**
 * The HTTP URL for this Git object
 */
def commitUrl: SelectionBuilder[Tree, URI] = _root_.caliban.client.SelectionBuilder.Field("commitUrl", Scalar())
  /**
 * A list of tree entries.
 */
def entries[A](innerSelection: SelectionBuilder[TreeEntry, A]): SelectionBuilder[Tree, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("entries", OptionOf(ListOf(Obj(innerSelection))))
  def id: SelectionBuilder[Tree, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The Git object ID
 */
def oid: SelectionBuilder[Tree, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())
  /**
 * The Repository the Git object belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[Tree, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
}


type TreeEntry
object TreeEntry {
  /**
 * The extension of the file
 */
def `extension`: SelectionBuilder[TreeEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("extension", OptionOf(Scalar()))
  /**
 * Whether or not this tree entry is generated
 */
def isGenerated: SelectionBuilder[TreeEntry, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isGenerated", Scalar())
  /**
 * The programming language this file is written in.
 */
def language[A](innerSelection: SelectionBuilder[Language, A]): SelectionBuilder[TreeEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("language", OptionOf(Obj(innerSelection)))
  /**
 * Number of lines in the file.
 */
def lineCount: SelectionBuilder[TreeEntry, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("lineCount", OptionOf(Scalar()))
  /**
 * Entry file mode.
 */
def mode: SelectionBuilder[TreeEntry, Int] = _root_.caliban.client.SelectionBuilder.Field("mode", Scalar())
  /**
 * Entry file name.
 */
def name: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * Entry file name. (Base64-encoded)
 */
def nameRaw: SelectionBuilder[TreeEntry, Base64String] = _root_.caliban.client.SelectionBuilder.Field("nameRaw", Scalar())
  /**
 * Entry file object.
 */
def `object`[A](onBlob: SelectionBuilder[Blob, A], onCommit: SelectionBuilder[Commit, A], onTag: SelectionBuilder[Tag, A], onTree: SelectionBuilder[Tree, A]): SelectionBuilder[TreeEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("object", OptionOf(ChoiceOf(Map("Blob" -> Obj(onBlob), "Commit" -> Obj(onCommit), "Tag" -> Obj(onTag), "Tree" -> Obj(onTree)))))
  /**
 * Entry file Git object ID.
 */
def oid: SelectionBuilder[TreeEntry, GitObjectID] = _root_.caliban.client.SelectionBuilder.Field("oid", Scalar())
  /**
 * The full path of the file.
 */
def path: SelectionBuilder[TreeEntry, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("path", OptionOf(Scalar()))
  /**
 * The full path of the file. (Base64-encoded)
 */
def pathRaw: SelectionBuilder[TreeEntry, scala.Option[Base64String]] = _root_.caliban.client.SelectionBuilder.Field("pathRaw", OptionOf(Scalar()))
  /**
 * The Repository the tree entry belongs to
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[TreeEntry, A] = _root_.caliban.client.SelectionBuilder.Field("repository", Obj(innerSelection))
  /**
 * Entry byte size
 */
def size: SelectionBuilder[TreeEntry, Int] = _root_.caliban.client.SelectionBuilder.Field("size", Scalar())
  /**
 * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
 */
def submodule[A](innerSelection: SelectionBuilder[Submodule, A]): SelectionBuilder[TreeEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("submodule", OptionOf(Obj(innerSelection)))
  /**
 * Entry file type.
 */
def `type`: SelectionBuilder[TreeEntry, String] = _root_.caliban.client.SelectionBuilder.Field("type", Scalar())
  /**
 * Entry file object.
 */
def objectOption[A](onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None): SelectionBuilder[TreeEntry, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("object", OptionOf(ChoiceOf(Map("Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Entry file object.
 */
def objectInterface[A](`object`: SelectionBuilder[GitObject, A]): SelectionBuilder[TreeEntry, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("object", OptionOf(Obj(`object`)))
}


type UnarchiveProjectV2ItemPayload
object UnarchiveProjectV2ItemPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnarchiveProjectV2ItemPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item unarchived from the project.
 */
def item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[UnarchiveProjectV2ItemPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("item", OptionOf(Obj(innerSelection)))
}


type UnarchiveRepositoryPayload
object UnarchiveRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnarchiveRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository that was unarchived.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UnarchiveRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type UnassignedEvent
object UnassignedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnassignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the assignable associated with the event.
 */
def assignable[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnassignedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("assignable", ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the user or mannequin that was unassigned.
 */
def assignee[A](onBot: SelectionBuilder[Bot, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnassignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignee", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UnassignedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[UnassignedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the subject (user) who was unassigned.
 */
@deprecated("Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.", "")
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UnassignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the user or mannequin that was unassigned.
 */
def assigneeOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnassignedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("assignee", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnassignedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnassignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Identifies the assignable associated with the event.
 */
def assignableOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnassignedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("assignable", ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the assignable associated with the event.
 */
def assignableInterface[A](assignable: SelectionBuilder[Assignable, A]): SelectionBuilder[UnassignedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("assignable", Obj(assignable))
}


type UnfollowOrganizationPayload
object UnfollowOrganizationPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnfollowOrganizationPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The organization that was unfollowed.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[UnfollowOrganizationPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type UnfollowUserPayload
object UnfollowUserPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnfollowUserPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The user that was unfollowed.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UnfollowUserPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)))
}


type UnknownSignature
object UnknownSignature {
  /**
 * Email used to sign this object.
 */
def email: SelectionBuilder[UnknownSignature, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  /**
 * True if the signature is valid and verified by GitHub.
 */
def isValid: SelectionBuilder[UnknownSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isValid", Scalar())
  /**
 * Payload for GPG signing object. Raw ODB object without the signature header.
 */
def payload: SelectionBuilder[UnknownSignature, String] = _root_.caliban.client.SelectionBuilder.Field("payload", Scalar())
  /**
 * ASCII-armored signature header from object.
 */
def signature: SelectionBuilder[UnknownSignature, String] = _root_.caliban.client.SelectionBuilder.Field("signature", Scalar())
  /**
 * GitHub user corresponding to the email signing this commit.
 */
def signer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UnknownSignature, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("signer", OptionOf(Obj(innerSelection)))
  /**
 * The state of this signature. `VALID` if signature is valid and verified by
GitHub, otherwise represents reason why signature is considered invalid.
 */
def state: SelectionBuilder[UnknownSignature, GitSignatureState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * True if the signature was made with GitHub's signing key.
 */
def wasSignedByGitHub: SelectionBuilder[UnknownSignature, Boolean] = _root_.caliban.client.SelectionBuilder.Field("wasSignedByGitHub", Scalar())
}


type UnlabeledEvent
object UnlabeledEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnlabeledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UnlabeledEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[UnlabeledEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the label associated with the 'unlabeled' event.
 */
def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[UnlabeledEvent, A] = _root_.caliban.client.SelectionBuilder.Field("label", Obj(innerSelection))
  /**
 * Identifies the `Labelable` associated with the event.
 */
def labelable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnlabeledEvent, A] = _root_.caliban.client.SelectionBuilder.Field("labelable", ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnlabeledEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnlabeledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Identifies the `Labelable` associated with the event.
 */
def labelableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnlabeledEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("labelable", ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Identifies the `Labelable` associated with the event.
 */
def labelableInterface[A](labelable: SelectionBuilder[Labelable, A]): SelectionBuilder[UnlabeledEvent, A] = _root_.caliban.client.SelectionBuilder.Field("labelable", Obj(labelable))
}


type UnlinkProjectV2FromRepositoryPayload
object UnlinkProjectV2FromRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnlinkProjectV2FromRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository the project is no longer linked to.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UnlinkProjectV2FromRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type UnlinkProjectV2FromTeamPayload
object UnlinkProjectV2FromTeamPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnlinkProjectV2FromTeamPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The team the project is unlinked from
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[UnlinkProjectV2FromTeamPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
}


type UnlinkRepositoryFromProjectPayload
object UnlinkRepositoryFromProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnlinkRepositoryFromProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The linked Project.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[UnlinkRepositoryFromProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
  /**
 * The linked Repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UnlinkRepositoryFromProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type UnlockLockablePayload
object UnlockLockablePayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnlockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnlockLockablePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The item that was unlocked.
 */
def unlockedRecord[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnlockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unlockedRecord", OptionOf(ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnlockLockablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnlockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * The item that was unlocked.
 */
def unlockedRecordOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnlockLockablePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("unlockedRecord", OptionOf(ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The item that was unlocked.
 */
def unlockedRecordInterface[A](unlockedRecord: SelectionBuilder[Lockable, A]): SelectionBuilder[UnlockLockablePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unlockedRecord", OptionOf(Obj(unlockedRecord)))
}


type UnlockedEvent
object UnlockedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnlockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UnlockedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[UnlockedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Object that was unlocked.
 */
def lockable[A](onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnlockedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("lockable", ChoiceOf(Map("Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnlockedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnlockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Object that was unlocked.
 */
def lockableOption[A](onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnlockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("lockable", ChoiceOf(Map("Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Object that was unlocked.
 */
def lockableInterface[A](lockable: SelectionBuilder[Lockable, A]): SelectionBuilder[UnlockedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("lockable", Obj(lockable))
}


type UnmarkDiscussionCommentAsAnswerPayload
object UnmarkDiscussionCommentAsAnswerPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnmarkDiscussionCommentAsAnswerPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The discussion that includes the comment.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[UnmarkDiscussionCommentAsAnswerPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type UnmarkFileAsViewedPayload
object UnmarkFileAsViewedPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnmarkFileAsViewedPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated pull request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnmarkFileAsViewedPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type UnmarkIssueAsDuplicatePayload
object UnmarkIssueAsDuplicatePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnmarkIssueAsDuplicatePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue or pull request that was marked as a duplicate.
 */
def duplicate[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnmarkIssueAsDuplicatePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("duplicate", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * The issue or pull request that was marked as a duplicate.
 */
def duplicateOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnmarkIssueAsDuplicatePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("duplicate", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type UnmarkProjectV2AsTemplatePayload
object UnmarkProjectV2AsTemplatePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnmarkProjectV2AsTemplatePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The project.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[UnmarkProjectV2AsTemplatePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type UnmarkedAsDuplicateEvent
object UnmarkedAsDuplicateEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * The authoritative issue or pull request which has been duplicated by another.
 */
def canonical[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("canonical", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UnmarkedAsDuplicateEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * The issue or pull request which has been marked as a duplicate of another.
 */
def duplicate[A](onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A]): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("duplicate", OptionOf(ChoiceOf(Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest)))))
  def id: SelectionBuilder[UnmarkedAsDuplicateEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Canonical and duplicate belong to different repositories.
 */
def isCrossRepository: SelectionBuilder[UnmarkedAsDuplicateEvent, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCrossRepository", Scalar())
  /**
 * The authoritative issue or pull request which has been duplicated by another.
 */
def canonicalOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("canonical", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The issue or pull request which has been marked as a duplicate of another.
 */
def duplicateOption[A](onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("duplicate", OptionOf(ChoiceOf(Map("Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnmarkedAsDuplicateEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type UnminimizeCommentPayload
object UnminimizeCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnminimizeCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The comment that was unminimized.
 */
def unminimizedComment[A](onCommitComment: SelectionBuilder[CommitComment, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onGistComment: SelectionBuilder[GistComment, A], onIssueComment: SelectionBuilder[IssueComment, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[UnminimizeCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unminimizedComment", OptionOf(ChoiceOf(Map("CommitComment" -> Obj(onCommitComment), "DiscussionComment" -> Obj(onDiscussionComment), "GistComment" -> Obj(onGistComment), "IssueComment" -> Obj(onIssueComment), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment)))))
  /**
 * The comment that was unminimized.
 */
def unminimizedCommentOption[A](onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onGistComment: scala.Option[SelectionBuilder[GistComment, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None): SelectionBuilder[UnminimizeCommentPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("unminimizedComment", OptionOf(ChoiceOf(Map("CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "GistComment" -> onGistComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The comment that was unminimized.
 */
def unminimizedCommentInterface[A](unminimizedComment: SelectionBuilder[Minimizable, A]): SelectionBuilder[UnminimizeCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unminimizedComment", OptionOf(Obj(unminimizedComment)))
}


type UnpinIssuePayload
object UnpinIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnpinIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue that was unpinned
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[UnpinIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
}


type UnpinnedEvent
object UnpinnedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnpinnedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UnpinnedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[UnpinnedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the issue associated with the event.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[UnpinnedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("issue", Obj(innerSelection))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnpinnedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnpinnedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type UnresolveReviewThreadPayload
object UnresolveReviewThreadPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UnresolveReviewThreadPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The thread to resolve.
 */
def thread[A](innerSelection: SelectionBuilder[PullRequestReviewThread, A]): SelectionBuilder[UnresolveReviewThreadPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("thread", OptionOf(Obj(innerSelection)))
}


type UnsubscribedEvent
object UnsubscribedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UnsubscribedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UnsubscribedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[UnsubscribedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Object referenced by event.
 */
def subscribable[A](onCommit: SelectionBuilder[Commit, A], onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A], onRepository: SelectionBuilder[Repository, A], onTeam: SelectionBuilder[Team, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[UnsubscribedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subscribable", ChoiceOf(Map("Commit" -> Obj(onCommit), "Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest), "Repository" -> Obj(onRepository), "Team" -> Obj(onTeam), "TeamDiscussion" -> Obj(onTeamDiscussion))))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UnsubscribedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UnsubscribedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
  /**
 * Object referenced by event.
 */
def subscribableOption[A](onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None): SelectionBuilder[UnsubscribedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subscribable", ChoiceOf(Map("Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
  /**
 * Object referenced by event.
 */
def subscribableInterface[A](subscribable: SelectionBuilder[Subscribable, A]): SelectionBuilder[UnsubscribedEvent, A] = _root_.caliban.client.SelectionBuilder.Field("subscribable", Obj(subscribable))
}


type UpdateBranchProtectionRulePayload
object UpdateBranchProtectionRulePayload {
  /**
 * The newly created BranchProtectionRule.
 */
def branchProtectionRule[A](innerSelection: SelectionBuilder[BranchProtectionRule, A]): SelectionBuilder[UpdateBranchProtectionRulePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("branchProtectionRule", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateBranchProtectionRulePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type UpdateCheckRunPayload
object UpdateCheckRunPayload {
  /**
 * The updated check run.
 */
def checkRun[A](innerSelection: SelectionBuilder[CheckRun, A]): SelectionBuilder[UpdateCheckRunPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("checkRun", OptionOf(Obj(innerSelection)))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateCheckRunPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type UpdateCheckSuitePreferencesPayload
object UpdateCheckSuitePreferencesPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateCheckSuitePreferencesPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UpdateCheckSuitePreferencesPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type UpdateDiscussionCommentPayload
object UpdateDiscussionCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateDiscussionCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The modified discussion comment.
 */
def comment[A](innerSelection: SelectionBuilder[DiscussionComment, A]): SelectionBuilder[UpdateDiscussionCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("comment", OptionOf(Obj(innerSelection)))
}


type UpdateDiscussionPayload
object UpdateDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The modified discussion.
 */
def discussion[A](innerSelection: SelectionBuilder[Discussion, A]): SelectionBuilder[UpdateDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("discussion", OptionOf(Obj(innerSelection)))
}


type UpdateEnterpriseAdministratorRolePayload
object UpdateEnterpriseAdministratorRolePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseAdministratorRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of changing the administrator's role.
 */
def message: SelectionBuilder[UpdateEnterpriseAdministratorRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload
object UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated allow private repository forking setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the allow private repository forking setting.
 */
def message: SelectionBuilder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload
object UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated base repository permission setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the base repository permission setting.
 */
def message: SelectionBuilder[UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload
object UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can change repository visibility setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can change repository visibility setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload
object UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can create repositories setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can create repositories setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload
object UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can delete issues setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can delete issues setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload
object UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can delete repositories setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can delete repositories setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload
object UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can invite collaborators setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can invite collaborators setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanMakePurchasesSettingPayload
object UpdateEnterpriseMembersCanMakePurchasesSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanMakePurchasesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can make purchases setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanMakePurchasesSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can make purchases setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanMakePurchasesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload
object UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can update protected branches setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can update protected branches setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload
object UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated members can view dependency insights setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the members can view dependency insights setting.
 */
def message: SelectionBuilder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseOrganizationProjectsSettingPayload
object UpdateEnterpriseOrganizationProjectsSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseOrganizationProjectsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated organization projects setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseOrganizationProjectsSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the organization projects setting.
 */
def message: SelectionBuilder[UpdateEnterpriseOrganizationProjectsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseOwnerOrganizationRolePayload
object UpdateEnterpriseOwnerOrganizationRolePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseOwnerOrganizationRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of changing the owner's organization role.
 */
def message: SelectionBuilder[UpdateEnterpriseOwnerOrganizationRolePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseProfilePayload
object UpdateEnterpriseProfilePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseProfilePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated enterprise.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseProfilePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
}


type UpdateEnterpriseRepositoryProjectsSettingPayload
object UpdateEnterpriseRepositoryProjectsSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseRepositoryProjectsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated repository projects setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseRepositoryProjectsSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the repository projects setting.
 */
def message: SelectionBuilder[UpdateEnterpriseRepositoryProjectsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseTeamDiscussionsSettingPayload
object UpdateEnterpriseTeamDiscussionsSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseTeamDiscussionsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated team discussions setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseTeamDiscussionsSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the team discussions setting.
 */
def message: SelectionBuilder[UpdateEnterpriseTeamDiscussionsSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload
object UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The enterprise with the updated two factor authentication required setting.
 */
def enterprise[A](innerSelection: SelectionBuilder[Enterprise, A]): SelectionBuilder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)))
  /**
 * A message confirming the result of updating the two factor authentication required setting.
 */
def message: SelectionBuilder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
}


type UpdateEnvironmentPayload
object UpdateEnvironmentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateEnvironmentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated environment.
 */
def environment[A](innerSelection: SelectionBuilder[Environment, A]): SelectionBuilder[UpdateEnvironmentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("environment", OptionOf(Obj(innerSelection)))
}


type UpdateIpAllowListEnabledSettingPayload
object UpdateIpAllowListEnabledSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateIpAllowListEnabledSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The IP allow list owner on which the setting was updated.
 */
def owner[A](onApp: SelectionBuilder[App, A], onEnterprise: SelectionBuilder[Enterprise, A], onOrganization: SelectionBuilder[Organization, A]): SelectionBuilder[UpdateIpAllowListEnabledSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Enterprise" -> Obj(onEnterprise), "Organization" -> Obj(onOrganization)))))
  /**
 * The IP allow list owner on which the setting was updated.
 */
def ownerOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None): SelectionBuilder[UpdateIpAllowListEnabledSettingPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type UpdateIpAllowListEntryPayload
object UpdateIpAllowListEntryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateIpAllowListEntryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The IP allow list entry that was updated.
 */
def ipAllowListEntry[A](innerSelection: SelectionBuilder[IpAllowListEntry, A]): SelectionBuilder[UpdateIpAllowListEntryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ipAllowListEntry", OptionOf(Obj(innerSelection)))
}


type UpdateIpAllowListForInstalledAppsEnabledSettingPayload
object UpdateIpAllowListForInstalledAppsEnabledSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateIpAllowListForInstalledAppsEnabledSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The IP allow list owner on which the setting was updated.
 */
def owner[A](onApp: SelectionBuilder[App, A], onEnterprise: SelectionBuilder[Enterprise, A], onOrganization: SelectionBuilder[Organization, A]): SelectionBuilder[UpdateIpAllowListForInstalledAppsEnabledSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("App" -> Obj(onApp), "Enterprise" -> Obj(onEnterprise), "Organization" -> Obj(onOrganization)))))
  /**
 * The IP allow list owner on which the setting was updated.
 */
def ownerOption[A](onApp: scala.Option[SelectionBuilder[App, A]] = None, onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None): SelectionBuilder[UpdateIpAllowListForInstalledAppsEnabledSettingPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type UpdateIssueCommentPayload
object UpdateIssueCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateIssueCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated comment.
 */
def issueComment[A](innerSelection: SelectionBuilder[IssueComment, A]): SelectionBuilder[UpdateIssueCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issueComment", OptionOf(Obj(innerSelection)))
}


type UpdateIssuePayload
object UpdateIssuePayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UpdateIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The issue.
 */
def issue[A](innerSelection: SelectionBuilder[Issue, A]): SelectionBuilder[UpdateIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("issue", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UpdateIssuePayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UpdateIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type UpdateLabelPayload
object UpdateLabelPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateLabelPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated label.
 */
def label[A](innerSelection: SelectionBuilder[Label, A]): SelectionBuilder[UpdateLabelPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("label", OptionOf(Obj(innerSelection)))
}


type UpdateNotificationRestrictionSettingPayload
object UpdateNotificationRestrictionSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateNotificationRestrictionSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The owner on which the setting was updated.
 */
def owner[A](onEnterprise: SelectionBuilder[Enterprise, A], onOrganization: SelectionBuilder[Organization, A]): SelectionBuilder[UpdateNotificationRestrictionSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Enterprise" -> Obj(onEnterprise), "Organization" -> Obj(onOrganization)))))
  /**
 * The owner on which the setting was updated.
 */
def ownerOption[A](onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None): SelectionBuilder[UpdateNotificationRestrictionSettingPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("owner", OptionOf(ChoiceOf(Map("Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
}


type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload
object UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of updating the allow private repository forking setting.
 */
def message: SelectionBuilder[UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
  /**
 * The organization with the updated allow private repository forking setting.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type UpdateOrganizationWebCommitSignoffSettingPayload
object UpdateOrganizationWebCommitSignoffSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateOrganizationWebCommitSignoffSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of updating the web commit signoff setting.
 */
def message: SelectionBuilder[UpdateOrganizationWebCommitSignoffSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
  /**
 * The organization with the updated web commit signoff setting.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[UpdateOrganizationWebCommitSignoffSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
}


type UpdateParameters
object UpdateParameters {
  /**
 * Branch can pull changes from its upstream repository
 */
def updateAllowsFetchAndMerge: SelectionBuilder[UpdateParameters, Boolean] = _root_.caliban.client.SelectionBuilder.Field("updateAllowsFetchAndMerge", Scalar())
}


type UpdateProjectCardPayload
object UpdateProjectCardPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectCardPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated ProjectCard.
 */
def projectCard[A](innerSelection: SelectionBuilder[ProjectCard, A]): SelectionBuilder[UpdateProjectCardPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectCard", OptionOf(Obj(innerSelection)))
}


type UpdateProjectColumnPayload
object UpdateProjectColumnPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectColumnPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated project column.
 */
def projectColumn[A](innerSelection: SelectionBuilder[ProjectColumn, A]): SelectionBuilder[UpdateProjectColumnPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectColumn", OptionOf(Obj(innerSelection)))
}


type UpdateProjectPayload
object UpdateProjectPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated project.
 */
def project[A](innerSelection: SelectionBuilder[Project, A]): SelectionBuilder[UpdateProjectPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)))
}


type UpdateProjectV2DraftIssuePayload
object UpdateProjectV2DraftIssuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectV2DraftIssuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The draft issue updated in the project.
 */
def draftIssue[A](innerSelection: SelectionBuilder[DraftIssue, A]): SelectionBuilder[UpdateProjectV2DraftIssuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("draftIssue", OptionOf(Obj(innerSelection)))
}


type UpdateProjectV2ItemFieldValuePayload
object UpdateProjectV2ItemFieldValuePayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectV2ItemFieldValuePayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated item.
 */
def projectV2Item[A](innerSelection: SelectionBuilder[ProjectV2Item, A]): SelectionBuilder[UpdateProjectV2ItemFieldValuePayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2Item", OptionOf(Obj(innerSelection)))
}


type UpdateProjectV2ItemPositionPayload
object UpdateProjectV2ItemPositionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectV2ItemPositionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The items in the new order
 */
def items[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2ItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[UpdateProjectV2ItemPositionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("items", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
}


type UpdateProjectV2Payload
object UpdateProjectV2Payload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateProjectV2Payload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated Project.
 */
def projectV2[A](innerSelection: SelectionBuilder[ProjectV2, A]): SelectionBuilder[UpdateProjectV2Payload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)))
}


type UpdatePullRequestBranchPayload
object UpdatePullRequestBranchPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdatePullRequestBranchPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated pull request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[UpdatePullRequestBranchPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
}


type UpdatePullRequestPayload
object UpdatePullRequestPayload {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UpdatePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdatePullRequestPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated pull request.
 */
def pullRequest[A](innerSelection: SelectionBuilder[PullRequest, A]): SelectionBuilder[UpdatePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequest", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UpdatePullRequestPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UpdatePullRequestPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type UpdatePullRequestReviewCommentPayload
object UpdatePullRequestReviewCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdatePullRequestReviewCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated comment.
 */
def pullRequestReviewComment[A](innerSelection: SelectionBuilder[PullRequestReviewComment, A]): SelectionBuilder[UpdatePullRequestReviewCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReviewComment", OptionOf(Obj(innerSelection)))
}


type UpdatePullRequestReviewPayload
object UpdatePullRequestReviewPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdatePullRequestReviewPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated pull request review.
 */
def pullRequestReview[A](innerSelection: SelectionBuilder[PullRequestReview, A]): SelectionBuilder[UpdatePullRequestReviewPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pullRequestReview", OptionOf(Obj(innerSelection)))
}


type UpdateRefPayload
object UpdateRefPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateRefPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated Ref.
 */
def ref[A](innerSelection: SelectionBuilder[Ref, A]): SelectionBuilder[UpdateRefPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ref", OptionOf(Obj(innerSelection)))
}


type UpdateRefsPayload
object UpdateRefsPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateRefsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
}


type UpdateRepositoryPayload
object UpdateRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UpdateRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type UpdateRepositoryRulesetPayload
object UpdateRepositoryRulesetPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateRepositoryRulesetPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The newly created Ruleset.
 */
def ruleset[A](innerSelection: SelectionBuilder[RepositoryRuleset, A]): SelectionBuilder[UpdateRepositoryRulesetPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("ruleset", OptionOf(Obj(innerSelection)))
}


type UpdateRepositoryWebCommitSignoffSettingPayload
object UpdateRepositoryWebCommitSignoffSettingPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateRepositoryWebCommitSignoffSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * A message confirming the result of updating the web commit signoff setting.
 */
def message: SelectionBuilder[UpdateRepositoryWebCommitSignoffSettingPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
  /**
 * The updated repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UpdateRepositoryWebCommitSignoffSettingPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type UpdateSponsorshipPreferencesPayload
object UpdateSponsorshipPreferencesPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateSponsorshipPreferencesPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The sponsorship that was updated.
 */
def sponsorship[A](innerSelection: SelectionBuilder[Sponsorship, A]): SelectionBuilder[UpdateSponsorshipPreferencesPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorship", OptionOf(Obj(innerSelection)))
}


type UpdateSubscriptionPayload
object UpdateSubscriptionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateSubscriptionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The input subscribable entity.
 */
def subscribable[A](onCommit: SelectionBuilder[Commit, A], onDiscussion: SelectionBuilder[Discussion, A], onIssue: SelectionBuilder[Issue, A], onPullRequest: SelectionBuilder[PullRequest, A], onRepository: SelectionBuilder[Repository, A], onTeam: SelectionBuilder[Team, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[UpdateSubscriptionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subscribable", OptionOf(ChoiceOf(Map("Commit" -> Obj(onCommit), "Discussion" -> Obj(onDiscussion), "Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest), "Repository" -> Obj(onRepository), "Team" -> Obj(onTeam), "TeamDiscussion" -> Obj(onTeamDiscussion)))))
  /**
 * The input subscribable entity.
 */
def subscribableOption[A](onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None): SelectionBuilder[UpdateSubscriptionPayload, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("subscribable", OptionOf(ChoiceOf(Map("Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The input subscribable entity.
 */
def subscribableInterface[A](subscribable: SelectionBuilder[Subscribable, A]): SelectionBuilder[UpdateSubscriptionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subscribable", OptionOf(Obj(subscribable)))
}


type UpdateTeamDiscussionCommentPayload
object UpdateTeamDiscussionCommentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateTeamDiscussionCommentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated comment.
 */
def teamDiscussionComment[A](innerSelection: SelectionBuilder[TeamDiscussionComment, A]): SelectionBuilder[UpdateTeamDiscussionCommentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("teamDiscussionComment", OptionOf(Obj(innerSelection)))
}


type UpdateTeamDiscussionPayload
object UpdateTeamDiscussionPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateTeamDiscussionPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The updated discussion.
 */
def teamDiscussion[A](innerSelection: SelectionBuilder[TeamDiscussion, A]): SelectionBuilder[UpdateTeamDiscussionPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("teamDiscussion", OptionOf(Obj(innerSelection)))
}


type UpdateTeamReviewAssignmentPayload
object UpdateTeamReviewAssignmentPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateTeamReviewAssignmentPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The team that was modified
 */
def team[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[UpdateTeamReviewAssignmentPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("team", OptionOf(Obj(innerSelection)))
}


type UpdateTeamsRepositoryPayload
object UpdateTeamsRepositoryPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateTeamsRepositoryPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The repository that was updated.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UpdateTeamsRepositoryPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
  /**
 * The teams granted permission on the repository.
 */
def teams[A](innerSelection: SelectionBuilder[Team, A]): SelectionBuilder[UpdateTeamsRepositoryPayload, scala.Option[List[A]]] = _root_.caliban.client.SelectionBuilder.Field("teams", OptionOf(ListOf(Obj(innerSelection))))
}


type UpdateTopicsPayload
object UpdateTopicsPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[UpdateTopicsPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * Names of the provided topics that are not valid.
 */
def invalidTopicNames: SelectionBuilder[UpdateTopicsPayload, scala.Option[List[String]]] = _root_.caliban.client.SelectionBuilder.Field("invalidTopicNames", OptionOf(ListOf(Scalar())))
  /**
 * The updated repository.
 */
def repository[A](innerSelection: SelectionBuilder[Repository, A]): SelectionBuilder[UpdateTopicsPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)))
}


type User
object User {
  /**
 * Determine if this repository owner has any items that can be pinned to their profile.
 */
def anyPinnableItems(`type` : scala.Option[PinnableItemType] = None)(implicit encoder0: ArgEncoder[scala.Option[PinnableItemType]]): SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("anyPinnableItems", Scalar(), arguments = List(Argument("type", `type`, "PinnableItemType")(encoder0)))
  /**
 * A URL pointing to the user's public avatar.
 */
def avatarUrl(size : scala.Option[Int] = None)(implicit encoder0: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, URI] = _root_.caliban.client.SelectionBuilder.Field("avatarUrl", Scalar(), arguments = List(Argument("size", size, "Int")(encoder0)))
  /**
 * The user's public profile bio.
 */
def bio: SelectionBuilder[User, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("bio", OptionOf(Scalar()))
  /**
 * The user's public profile bio as HTML.
 */
def bioHTML: SelectionBuilder[User, HTML] = _root_.caliban.client.SelectionBuilder.Field("bioHTML", Scalar())
  /**
 * Could this user receive email notifications, if the organization had notification restrictions enabled?
 */
def canReceiveOrganizationEmailsWhenNotificationsRestricted(login : String)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("canReceiveOrganizationEmailsWhenNotificationsRestricted", Scalar(), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * A list of commit comments made by this user.
 */
def commitComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[CommitCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("commitComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The user's public profile company.
 */
def company: SelectionBuilder[User, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("company", OptionOf(Scalar()))
  /**
 * The user's public profile company as HTML.
 */
def companyHTML: SelectionBuilder[User, HTML] = _root_.caliban.client.SelectionBuilder.Field("companyHTML", Scalar())
  /**
 * The collection of contributions this user has made to different repositories.
 */
def contributionsCollection[A](from : scala.Option[DateTime] = None, organizationID : scala.Option[String] = None, to : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[ContributionsCollection, A])(implicit encoder0: ArgEncoder[scala.Option[DateTime]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("contributionsCollection", Obj(innerSelection), arguments = List(Argument("from", from, "DateTime")(encoder0), Argument("organizationID", organizationID, "ID")(encoder1), Argument("to", to, "DateTime")(encoder2)))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[User, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[User, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The user's publicly visible profile email.
 */
def email: SelectionBuilder[User, String] = _root_.caliban.client.SelectionBuilder.Field("email", Scalar())
  /**
 * The estimated next GitHub Sponsors payout for this user/organization in cents (USD).
 */
def estimatedNextSponsorsPayoutInCents: SelectionBuilder[User, Int] = _root_.caliban.client.SelectionBuilder.Field("estimatedNextSponsorsPayoutInCents", Scalar())
  /**
 * A list of users the given user is followed by.
 */
def followers[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[FollowerConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("followers", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of users the given user is following.
 */
def following[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[FollowingConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("following", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * Find gist by repo name.
 */
def gist[A](name : String)(innerSelection: SelectionBuilder[Gist, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("gist", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * A list of gist comments made by this user.
 */
def gistComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[GistCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("gistComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of the Gists the user has created.
 */
def gists[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[GistOrder] = None, privacy : scala.Option[GistPrivacy] = None)(innerSelection: SelectionBuilder[GistConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[GistOrder]], encoder5: ArgEncoder[scala.Option[GistPrivacy]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("gists", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "GistOrder")(encoder4), Argument("privacy", privacy, "GistPrivacy")(encoder5)))
  /**
 * True if this user/organization has a GitHub Sponsors listing.
 */
def hasSponsorsListing: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasSponsorsListing", Scalar())
  /**
 * The hovercard information for this user in a given context
 */
def hovercard[A](primarySubjectId : scala.Option[String] = None)(innerSelection: SelectionBuilder[Hovercard, A])(implicit encoder0: ArgEncoder[scala.Option[String]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("hovercard", Obj(innerSelection), arguments = List(Argument("primarySubjectId", primarySubjectId, "ID")(encoder0)))
  def id: SelectionBuilder[User, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The interaction ability settings for this user.
 */
def interactionAbility[A](innerSelection: SelectionBuilder[RepositoryInteractionAbility, A]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("interactionAbility", OptionOf(Obj(innerSelection)))
  /**
 * Whether or not this user is a participant in the GitHub Security Bug Bounty.
 */
def isBountyHunter: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isBountyHunter", Scalar())
  /**
 * Whether or not this user is a participant in the GitHub Campus Experts Program.
 */
def isCampusExpert: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isCampusExpert", Scalar())
  /**
 * Whether or not this user is a GitHub Developer Program member.
 */
def isDeveloperProgramMember: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isDeveloperProgramMember", Scalar())
  /**
 * Whether or not this user is a GitHub employee.
 */
def isEmployee: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isEmployee", Scalar())
  /**
 * Whether or not this user is following the viewer. Inverse of viewerIsFollowing
 */
def isFollowingViewer: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isFollowingViewer", Scalar())
  /**
 * Whether or not this user is a member of the GitHub Stars Program.
 */
def isGitHubStar: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isGitHubStar", Scalar())
  /**
 * Whether or not the user has marked themselves as for hire.
 */
def isHireable: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isHireable", Scalar())
  /**
 * Whether or not this user is a site administrator.
 */
def isSiteAdmin: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSiteAdmin", Scalar())
  /**
 * Whether the given account is sponsoring this user/organization.
 */
def isSponsoredBy(accountLogin : String)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSponsoredBy", Scalar(), arguments = List(Argument("accountLogin", accountLogin, "String!")(encoder0)))
  /**
 * True if the viewer is sponsored by this user/organization.
 */
def isSponsoringViewer: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isSponsoringViewer", Scalar())
  /**
 * Whether or not this user is the viewing user.
 */
def isViewer: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isViewer", Scalar())
  /**
 * A list of issue comments made by this user.
 */
def issueComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueCommentOrder] = None)(innerSelection: SelectionBuilder[IssueCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[IssueCommentOrder]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("issueComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "IssueCommentOrder")(encoder4)))
  /**
 * A list of issues associated with this user.
 */
def issues[A](after : scala.Option[String] = None, before : scala.Option[String] = None, filterBy : scala.Option[IssueFilters] = None, first : scala.Option[Int] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[IssueState]] = None)(innerSelection: SelectionBuilder[IssueConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[IssueFilters]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[String]]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[IssueOrder]], encoder7: ArgEncoder[scala.Option[List[IssueState]]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("issues", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("filterBy", filterBy, "IssueFilters")(encoder2), Argument("first", first, "Int")(encoder3), Argument("labels", labels, "[String!]")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "IssueOrder")(encoder6), Argument("states", states, "[IssueState!]")(encoder7)))
  /**
 * Showcases a selection of repositories and gists that the profile owner has
either curated or that have been selected automatically based on popularity.
 */
def itemShowcase[A](innerSelection: SelectionBuilder[ProfileItemShowcase, A]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("itemShowcase", Obj(innerSelection))
  /**
 * The user's public profile location.
 */
def location: SelectionBuilder[User, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("location", OptionOf(Scalar()))
  /**
 * The username used to login.
 */
def login: SelectionBuilder[User, String] = _root_.caliban.client.SelectionBuilder.Field("login", Scalar())
  /**
 * The estimated monthly GitHub Sponsors income for this user/organization in cents (USD).
 */
def monthlyEstimatedSponsorsIncomeInCents: SelectionBuilder[User, Int] = _root_.caliban.client.SelectionBuilder.Field("monthlyEstimatedSponsorsIncomeInCents", Scalar())
  /**
 * The user's public profile name.
 */
def name: SelectionBuilder[User, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("name", OptionOf(Scalar()))
  /**
 * Find an organization by its login that the user belongs to.
 */
def organization[A](login : String)(innerSelection: SelectionBuilder[Organization, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * Verified email addresses that match verified domains for a specified organization the user is a member of.
 */
def organizationVerifiedDomainEmails(login : String)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[User, List[String]] = _root_.caliban.client.SelectionBuilder.Field("organizationVerifiedDomainEmails", ListOf(Scalar()), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * A list of organizations the user belongs to.
 */
def organizations[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[OrganizationOrder] = None)(innerSelection: SelectionBuilder[OrganizationConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[OrganizationOrder]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("organizations", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "OrganizationOrder")(encoder4)))
  /**
 * A list of packages under the owner.
 */
def packages[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, names : scala.Option[List[scala.Option[String]]] = None, orderBy : scala.Option[PackageOrder] = None, packageType : scala.Option[PackageType] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[PackageConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[scala.Option[String]]]], encoder5: ArgEncoder[scala.Option[PackageOrder]], encoder6: ArgEncoder[scala.Option[PackageType]], encoder7: ArgEncoder[scala.Option[String]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("packages", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("names", names, "[String]")(encoder4), Argument("orderBy", orderBy, "PackageOrder")(encoder5), Argument("packageType", packageType, "PackageType")(encoder6), Argument("repositoryId", repositoryId, "ID")(encoder7)))
  /**
 * A list of repositories and gists this profile owner can pin to their profile.
 */
def pinnableItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, types : scala.Option[List[PinnableItemType]] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[PinnableItemType]]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("pinnableItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("types", types, "[PinnableItemType!]")(encoder4)))
  /**
 * A list of repositories and gists this profile owner has pinned to their profile
 */
def pinnedItems[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, types : scala.Option[List[PinnableItemType]] = None)(innerSelection: SelectionBuilder[PinnableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[List[PinnableItemType]]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("pinnedItems", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("types", types, "[PinnableItemType!]")(encoder4)))
  /**
 * Returns how many more items this profile owner can pin to their profile.
 */
def pinnedItemsRemaining: SelectionBuilder[User, Int] = _root_.caliban.client.SelectionBuilder.Field("pinnedItemsRemaining", Scalar())
  /**
 * Find project by number.
 */
def project[A](number : Int)(innerSelection: SelectionBuilder[Project, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("project", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * Find a project by number.
 */
def projectV2[A](number : Int)(innerSelection: SelectionBuilder[ProjectV2, A])(implicit encoder0: ArgEncoder[Int]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("projectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("number", number, "Int!")(encoder0)))
  /**
 * A list of projects under the owner.
 */
def projects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectOrder] = None, search : scala.Option[String] = None, states : scala.Option[List[ProjectState]] = None)(innerSelection: SelectionBuilder[ProjectConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectOrder]], encoder5: ArgEncoder[scala.Option[String]], encoder6: ArgEncoder[scala.Option[List[ProjectState]]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("projects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectOrder")(encoder4), Argument("search", search, "String")(encoder5), Argument("states", states, "[ProjectState!]")(encoder6)))
  /**
 * The HTTP path listing user's projects
 */
def projectsResourcePath: SelectionBuilder[User, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsResourcePath", Scalar())
  /**
 * The HTTP URL listing user's projects
 */
def projectsUrl: SelectionBuilder[User, URI] = _root_.caliban.client.SelectionBuilder.Field("projectsUrl", Scalar())
  /**
 * A list of projects under the owner.
 */
def projectsV2[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[ProjectV2Order] = None, query : scala.Option[String] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[ProjectV2Order]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("projectsV2", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "ProjectV2Order")(encoder4), Argument("query", query, "String")(encoder5)))
  /**
 * The user's profile pronouns
 */
def pronouns: SelectionBuilder[User, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("pronouns", OptionOf(Scalar()))
  /**
 * A list of public keys associated with this user.
 */
def publicKeys[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[PublicKeyConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("publicKeys", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of pull requests associated with this user.
 */
def pullRequests[A](after : scala.Option[String] = None, baseRefName : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, headRefName : scala.Option[String] = None, labels : scala.Option[List[String]] = None, last : scala.Option[Int] = None, orderBy : scala.Option[IssueOrder] = None, states : scala.Option[List[PullRequestState]] = None)(innerSelection: SelectionBuilder[PullRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[IssueOrder]], encoder8: ArgEncoder[scala.Option[List[PullRequestState]]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("pullRequests", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("baseRefName", baseRefName, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("headRefName", headRefName, "String")(encoder4), Argument("labels", labels, "[String!]")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "IssueOrder")(encoder7), Argument("states", states, "[PullRequestState!]")(encoder8)))
  /**
 * Recent projects that this user has modified in the context of the owner.
 */
def recentProjects[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[ProjectV2Connection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("recentProjects", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * A list of repositories that the user owns.
 */
def repositories[A](affiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isFork : scala.Option[Boolean] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, ownerAffiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, privacy : scala.Option[RepositoryPrivacy] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[RepositoryOrder]], encoder8: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder9: ArgEncoder[scala.Option[RepositoryPrivacy]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("repositories", Obj(innerSelection), arguments = List(Argument("affiliations", affiliations, "[RepositoryAffiliation]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("isFork", isFork, "Boolean")(encoder4), Argument("isLocked", isLocked, "Boolean")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "RepositoryOrder")(encoder7), Argument("ownerAffiliations", ownerAffiliations, "[RepositoryAffiliation]")(encoder8), Argument("privacy", privacy, "RepositoryPrivacy")(encoder9)))
  /**
 * A list of repositories that the user recently contributed to.
 */
def repositoriesContributedTo[A](after : scala.Option[String] = None, before : scala.Option[String] = None, contributionTypes : scala.Option[List[scala.Option[RepositoryContributionType]]] = None, first : scala.Option[Int] = None, includeUserRepositories : scala.Option[Boolean] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, privacy : scala.Option[RepositoryPrivacy] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[scala.Option[RepositoryContributionType]]]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Boolean]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[RepositoryOrder]], encoder8: ArgEncoder[scala.Option[RepositoryPrivacy]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("repositoriesContributedTo", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("contributionTypes", contributionTypes, "[RepositoryContributionType]")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includeUserRepositories", includeUserRepositories, "Boolean")(encoder4), Argument("isLocked", isLocked, "Boolean")(encoder5), Argument("last", last, "Int")(encoder6), Argument("orderBy", orderBy, "RepositoryOrder")(encoder7), Argument("privacy", privacy, "RepositoryPrivacy")(encoder8)))
  /**
 * Find Repository.
 */
def repository[A](followRenames : scala.Option[Boolean] = None, name : String)(innerSelection: SelectionBuilder[Repository, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[String]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)), arguments = List(Argument("followRenames", followRenames, "Boolean")(encoder0), Argument("name", name, "String!")(encoder1)))
  /**
 * Discussion comments this user has authored.
 */
def repositoryDiscussionComments[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, onlyAnswers : scala.Option[Boolean] = None, repositoryId : scala.Option[String] = None)(innerSelection: SelectionBuilder[DiscussionCommentConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryDiscussionComments", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("onlyAnswers", onlyAnswers, "Boolean")(encoder4), Argument("repositoryId", repositoryId, "ID")(encoder5)))
  /**
 * Discussions this user has started.
 */
def repositoryDiscussions[A](after : scala.Option[String] = None, answered : scala.Option[Boolean] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[DiscussionOrder] = None, repositoryId : scala.Option[String] = None, states : scala.Option[List[DiscussionState]] = None)(innerSelection: SelectionBuilder[DiscussionConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[Boolean]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[DiscussionOrder]], encoder6: ArgEncoder[scala.Option[String]], encoder7: ArgEncoder[scala.Option[List[DiscussionState]]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("repositoryDiscussions", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("answered", answered, "Boolean")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("orderBy", orderBy, "DiscussionOrder")(encoder5), Argument("repositoryId", repositoryId, "ID")(encoder6), Argument("states", states, "[DiscussionState!]")(encoder7)))
  /**
 * The HTTP path for this user
 */
def resourcePath: SelectionBuilder[User, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * Replies this user has saved
 */
def savedReplies[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SavedReplyOrder] = None)(innerSelection: SelectionBuilder[SavedReplyConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SavedReplyOrder]]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("savedReplies", OptionOf(Obj(innerSelection)), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SavedReplyOrder")(encoder4)))
  /**
 * The user's social media accounts, ordered as they appear on the user's profile.
 */
def socialAccounts[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[SocialAccountConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("socialAccounts", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * List of users and organizations this entity is sponsoring.
 */
def sponsoring[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorOrder] = None)(innerSelection: SelectionBuilder[SponsorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorOrder]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("sponsoring", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorOrder")(encoder4)))
  /**
 * List of sponsors for this user or organization.
 */
def sponsors[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorOrder] = None, tierId : scala.Option[String] = None)(innerSelection: SelectionBuilder[SponsorConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorOrder]], encoder5: ArgEncoder[scala.Option[String]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("sponsors", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorOrder")(encoder4), Argument("tierId", tierId, "ID")(encoder5)))
  /**
 * Events involving this sponsorable, such as new sponsorships.
 */
def sponsorsActivities[A](actions : scala.Option[List[SponsorsActivityAction]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includeAsSponsor : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorsActivityOrder] = None, period : scala.Option[SponsorsActivityPeriod] = None, since : scala.Option[DateTime] = None, until : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[SponsorsActivityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[SponsorsActivityAction]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SponsorsActivityOrder]], encoder7: ArgEncoder[scala.Option[SponsorsActivityPeriod]], encoder8: ArgEncoder[scala.Option[DateTime]], encoder9: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorsActivities", Obj(innerSelection), arguments = List(Argument("actions", actions, "[SponsorsActivityAction!]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includeAsSponsor", includeAsSponsor, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SponsorsActivityOrder")(encoder6), Argument("period", period, "SponsorsActivityPeriod")(encoder7), Argument("since", since, "DateTime")(encoder8), Argument("until", until, "DateTime")(encoder9)))
  /**
 * The GitHub Sponsors listing for this user or organization.
 */
def sponsorsListing[A](innerSelection: SelectionBuilder[SponsorsListing, A]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorsListing", OptionOf(Obj(innerSelection)))
  /**
 * The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor.
 */
def sponsorshipForViewerAsSponsor[A](activeOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Sponsorship, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipForViewerAsSponsor", OptionOf(Obj(innerSelection)), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0)))
  /**
 * The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving.
 */
def sponsorshipForViewerAsSponsorable[A](activeOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[Sponsorship, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipForViewerAsSponsorable", OptionOf(Obj(innerSelection)), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0)))
  /**
 * List of sponsorship updates sent from this sponsorable to sponsors.
 */
def sponsorshipNewsletters[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipNewsletterOrder] = None)(innerSelection: SelectionBuilder[SponsorshipNewsletterConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SponsorshipNewsletterOrder]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipNewsletters", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "SponsorshipNewsletterOrder")(encoder4)))
  /**
 * The sponsorships where this user or organization is the maintainer receiving the funds.
 */
def sponsorshipsAsMaintainer[A](activeOnly : scala.Option[Boolean] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, includePrivate : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipsAsMaintainer", Obj(innerSelection), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("includePrivate", includePrivate, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder6)))
  /**
 * The sponsorships where this user or organization is the funder.
 */
def sponsorshipsAsSponsor[A](activeOnly : scala.Option[Boolean] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, maintainerLogins : scala.Option[List[String]] = None, orderBy : scala.Option[SponsorshipOrder] = None)(innerSelection: SelectionBuilder[SponsorshipConnection, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[List[String]]], encoder6: ArgEncoder[scala.Option[SponsorshipOrder]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorshipsAsSponsor", Obj(innerSelection), arguments = List(Argument("activeOnly", activeOnly, "Boolean")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("last", last, "Int")(encoder4), Argument("maintainerLogins", maintainerLogins, "[String!]")(encoder5), Argument("orderBy", orderBy, "SponsorshipOrder")(encoder6)))
  /**
 * Repositories the user has starred.
 */
def starredRepositories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[StarOrder] = None, ownedByViewer : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[StarredRepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[StarOrder]], encoder5: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("starredRepositories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "StarOrder")(encoder4), Argument("ownedByViewer", ownedByViewer, "Boolean")(encoder5)))
  /**
 * The user's description of what they're currently doing.
 */
def status[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[User, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("status", OptionOf(Obj(innerSelection)))
  /**
 * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
 */
def topRepositories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : RepositoryOrder, since : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[RepositoryOrder], encoder5: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("topRepositories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "RepositoryOrder!")(encoder4), Argument("since", since, "DateTime")(encoder5)))
  /**
 * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has
spent on GitHub to fund sponsorships. Only returns a value when viewed by the
user themselves or by a user who can manage sponsorships for the requested organization.
 */
def totalSponsorshipAmountAsSponsorInCents(since : scala.Option[DateTime] = None, sponsorableLogins : scala.Option[List[String]] = None, until : scala.Option[DateTime] = None)(implicit encoder0: ArgEncoder[scala.Option[DateTime]], encoder1: ArgEncoder[scala.Option[List[String]]], encoder2: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[User, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("totalSponsorshipAmountAsSponsorInCents", OptionOf(Scalar()), arguments = List(Argument("since", since, "DateTime")(encoder0), Argument("sponsorableLogins", sponsorableLogins, "[String!]")(encoder1), Argument("until", until, "DateTime")(encoder2)))
  /**
 * The user's Twitter username.
 */
def twitterUsername: SelectionBuilder[User, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("twitterUsername", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[User, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this user
 */
def url: SelectionBuilder[User, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * Can the viewer pin repositories and gists to the profile?
 */
def viewerCanChangePinnedItems: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanChangePinnedItems", Scalar())
  /**
 * Can the current viewer create new projects on this owner.
 */
def viewerCanCreateProjects: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanCreateProjects", Scalar())
  /**
 * Whether or not the viewer is able to follow the user.
 */
def viewerCanFollow: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanFollow", Scalar())
  /**
 * Whether or not the viewer is able to sponsor this user/organization.
 */
def viewerCanSponsor: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanSponsor", Scalar())
  /**
 * Whether or not this user is followed by the viewer. Inverse of isFollowingViewer.
 */
def viewerIsFollowing: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsFollowing", Scalar())
  /**
 * True if the viewer is sponsoring this user/organization.
 */
def viewerIsSponsoring: SelectionBuilder[User, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerIsSponsoring", Scalar())
  /**
 * A list of repositories the given user is watching.
 */
def watching[A](affiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, isLocked : scala.Option[Boolean] = None, last : scala.Option[Int] = None, orderBy : scala.Option[RepositoryOrder] = None, ownerAffiliations : scala.Option[List[scala.Option[RepositoryAffiliation]]] = None, privacy : scala.Option[RepositoryPrivacy] = None)(innerSelection: SelectionBuilder[RepositoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[String]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[Boolean]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[RepositoryOrder]], encoder7: ArgEncoder[scala.Option[List[scala.Option[RepositoryAffiliation]]]], encoder8: ArgEncoder[scala.Option[RepositoryPrivacy]]): SelectionBuilder[User, A] = _root_.caliban.client.SelectionBuilder.Field("watching", Obj(innerSelection), arguments = List(Argument("affiliations", affiliations, "[RepositoryAffiliation]")(encoder0), Argument("after", after, "String")(encoder1), Argument("before", before, "String")(encoder2), Argument("first", first, "Int")(encoder3), Argument("isLocked", isLocked, "Boolean")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "RepositoryOrder")(encoder6), Argument("ownerAffiliations", ownerAffiliations, "[RepositoryAffiliation]")(encoder7), Argument("privacy", privacy, "RepositoryPrivacy")(encoder8)))
  /**
 * A URL pointing to the user's public website/blog.
 */
def websiteUrl: SelectionBuilder[User, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("websiteUrl", OptionOf(Scalar()))
}


type UserBlockedEvent
object UserBlockedEvent {
  /**
 * Identifies the actor who performed the event.
 */
def actor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UserBlockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * Number of days that the user was blocked for.
 */
def blockDuration: SelectionBuilder[UserBlockedEvent, UserBlockDuration] = _root_.caliban.client.SelectionBuilder.Field("blockDuration", Scalar())
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UserBlockedEvent, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  def id: SelectionBuilder[UserBlockedEvent, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The user who was blocked.
 */
def subject[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UserBlockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("subject", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the actor who performed the event.
 */
def actorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UserBlockedEvent, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * Identifies the actor who performed the event.
 */
def actorInterface[A](actor: SelectionBuilder[Actor, A]): SelectionBuilder[UserBlockedEvent, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("actor", OptionOf(Obj(actor)))
}


type UserConnection
object UserConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[UserEdge, A]): SelectionBuilder[UserConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UserConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[UserConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[UserConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type UserContentEdit
object UserContentEdit {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UserContentEdit, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the date and time when the object was deleted.
 */
def deletedAt: SelectionBuilder[UserContentEdit, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("deletedAt", OptionOf(Scalar()))
  /**
 * The actor who deleted this content
 */
def deletedBy[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UserContentEdit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletedBy", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  /**
 * A summary of the changes for this edit
 */
def diff: SelectionBuilder[UserContentEdit, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("diff", OptionOf(Scalar()))
  /**
 * When this content was edited
 */
def editedAt: SelectionBuilder[UserContentEdit, DateTime] = _root_.caliban.client.SelectionBuilder.Field("editedAt", Scalar())
  /**
 * The actor who edited this content
 */
def editor[A](onBot: SelectionBuilder[Bot, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onMannequin: SelectionBuilder[Mannequin, A], onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A]): SelectionBuilder[UserContentEdit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Mannequin" -> Obj(onMannequin), "Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))))
  def id: SelectionBuilder[UserContentEdit, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[UserContentEdit, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The actor who deleted this content
 */
def deletedByOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UserContentEdit, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("deletedBy", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who deleted this content
 */
def deletedByInterface[A](deletedBy: SelectionBuilder[Actor, A]): SelectionBuilder[UserContentEdit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletedBy", OptionOf(Obj(deletedBy)))
  /**
 * The actor who edited this content
 */
def editorOption[A](onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None): SelectionBuilder[UserContentEdit, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))))
  /**
 * The actor who edited this content
 */
def editorInterface[A](editor: SelectionBuilder[Actor, A]): SelectionBuilder[UserContentEdit, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("editor", OptionOf(Obj(editor)))
}


type UserContentEditConnection
object UserContentEditConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[UserContentEditEdge, A]): SelectionBuilder[UserContentEditConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[UserContentEdit, A]): SelectionBuilder[UserContentEditConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[UserContentEditConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[UserContentEditConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type UserContentEditEdge
object UserContentEditEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[UserContentEditEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[UserContentEdit, A]): SelectionBuilder[UserContentEditEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type UserEdge
object UserEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[UserEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UserEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type UserEmailMetadata
object UserEmailMetadata {
  /**
 * Boolean to identify primary emails
 */
def primary: SelectionBuilder[UserEmailMetadata, scala.Option[Boolean]] = _root_.caliban.client.SelectionBuilder.Field("primary", OptionOf(Scalar()))
  /**
 * Type of email
 */
def `type`: SelectionBuilder[UserEmailMetadata, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("type", OptionOf(Scalar()))
  /**
 * Email id
 */
def value: SelectionBuilder[UserEmailMetadata, String] = _root_.caliban.client.SelectionBuilder.Field("value", Scalar())
}


type UserStatus
object UserStatus {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[UserStatus, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * An emoji summarizing the user's status.
 */
def emoji: SelectionBuilder[UserStatus, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("emoji", OptionOf(Scalar()))
  /**
 * The status emoji as HTML.
 */
def emojiHTML: SelectionBuilder[UserStatus, scala.Option[HTML]] = _root_.caliban.client.SelectionBuilder.Field("emojiHTML", OptionOf(Scalar()))
  /**
 * If set, the status will not be shown after this date.
 */
def expiresAt: SelectionBuilder[UserStatus, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("expiresAt", OptionOf(Scalar()))
  def id: SelectionBuilder[UserStatus, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether this status indicates the user is not fully available on GitHub.
 */
def indicatesLimitedAvailability: SelectionBuilder[UserStatus, Boolean] = _root_.caliban.client.SelectionBuilder.Field("indicatesLimitedAvailability", Scalar())
  /**
 * A brief message describing what the user is doing.
 */
def message: SelectionBuilder[UserStatus, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("message", OptionOf(Scalar()))
  /**
 * The organization whose members can see this status. If null, this status is publicly visible.
 */
def organization[A](innerSelection: SelectionBuilder[Organization, A]): SelectionBuilder[UserStatus, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[UserStatus, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The user who has this status.
 */
def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[UserStatus, A] = _root_.caliban.client.SelectionBuilder.Field("user", Obj(innerSelection))
}


type UserStatusConnection
object UserStatusConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[UserStatusEdge, A]): SelectionBuilder[UserStatusConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[UserStatusConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[UserStatusConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[UserStatusConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type UserStatusEdge
object UserStatusEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[UserStatusEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[UserStatus, A]): SelectionBuilder[UserStatusEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type VerifiableDomain
object VerifiableDomain {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[VerifiableDomain, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[VerifiableDomain, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The DNS host name that should be used for verification.
 */
def dnsHostName: SelectionBuilder[VerifiableDomain, scala.Option[URI]] = _root_.caliban.client.SelectionBuilder.Field("dnsHostName", OptionOf(Scalar()))
  /**
 * The unicode encoded domain.
 */
def domain: SelectionBuilder[VerifiableDomain, URI] = _root_.caliban.client.SelectionBuilder.Field("domain", Scalar())
  /**
 * Whether a TXT record for verification with the expected host name was found.
 */
def hasFoundHostName: SelectionBuilder[VerifiableDomain, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasFoundHostName", Scalar())
  /**
 * Whether a TXT record for verification with the expected verification token was found.
 */
def hasFoundVerificationToken: SelectionBuilder[VerifiableDomain, Boolean] = _root_.caliban.client.SelectionBuilder.Field("hasFoundVerificationToken", Scalar())
  def id: SelectionBuilder[VerifiableDomain, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * Whether or not the domain is approved.
 */
def isApproved: SelectionBuilder[VerifiableDomain, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isApproved", Scalar())
  /**
 * Whether this domain is required to exist for an organization or enterprise policy to be enforced.
 */
def isRequiredForPolicyEnforcement: SelectionBuilder[VerifiableDomain, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isRequiredForPolicyEnforcement", Scalar())
  /**
 * Whether or not the domain is verified.
 */
def isVerified: SelectionBuilder[VerifiableDomain, Boolean] = _root_.caliban.client.SelectionBuilder.Field("isVerified", Scalar())
  /**
 * The owner of the domain.
 */
def owner[A](onEnterprise: SelectionBuilder[Enterprise, A], onOrganization: SelectionBuilder[Organization, A]): SelectionBuilder[VerifiableDomain, A] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Enterprise" -> Obj(onEnterprise), "Organization" -> Obj(onOrganization))))
  /**
 * The punycode encoded domain.
 */
def punycodeEncodedDomain: SelectionBuilder[VerifiableDomain, URI] = _root_.caliban.client.SelectionBuilder.Field("punycodeEncodedDomain", Scalar())
  /**
 * The time that the current verification token will expire.
 */
def tokenExpirationTime: SelectionBuilder[VerifiableDomain, scala.Option[DateTime]] = _root_.caliban.client.SelectionBuilder.Field("tokenExpirationTime", OptionOf(Scalar()))
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[VerifiableDomain, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The current verification token for the domain.
 */
def verificationToken: SelectionBuilder[VerifiableDomain, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("verificationToken", OptionOf(Scalar()))
  /**
 * The owner of the domain.
 */
def ownerOption[A](onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None): SelectionBuilder[VerifiableDomain, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("owner", ChoiceOf(Map("Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))
}


type VerifiableDomainConnection
object VerifiableDomainConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[VerifiableDomainEdge, A]): SelectionBuilder[VerifiableDomainConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[VerifiableDomain, A]): SelectionBuilder[VerifiableDomainConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[VerifiableDomainConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[VerifiableDomainConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type VerifiableDomainEdge
object VerifiableDomainEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[VerifiableDomainEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[VerifiableDomain, A]): SelectionBuilder[VerifiableDomainEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type VerifyVerifiableDomainPayload
object VerifyVerifiableDomainPayload {
  /**
 * A unique identifier for the client performing the mutation.
 */
def clientMutationId: SelectionBuilder[VerifyVerifiableDomainPayload, scala.Option[String]] = _root_.caliban.client.SelectionBuilder.Field("clientMutationId", OptionOf(Scalar()))
  /**
 * The verifiable domain that was verified.
 */
def domain[A](innerSelection: SelectionBuilder[VerifiableDomain, A]): SelectionBuilder[VerifyVerifiableDomainPayload, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("domain", OptionOf(Obj(innerSelection)))
}


type ViewerHovercardContext
object ViewerHovercardContext {
  /**
 * A string describing this context
 */
def message: SelectionBuilder[ViewerHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("message", Scalar())
  /**
 * An octicon to accompany this context
 */
def octicon: SelectionBuilder[ViewerHovercardContext, String] = _root_.caliban.client.SelectionBuilder.Field("octicon", Scalar())
  /**
 * Identifies the user who is related to this context.
 */
def viewer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[ViewerHovercardContext, A] = _root_.caliban.client.SelectionBuilder.Field("viewer", Obj(innerSelection))
}


type Workflow
object Workflow {
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[Workflow, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[Workflow, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  def id: SelectionBuilder[Workflow, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The name of the workflow.
 */
def name: SelectionBuilder[Workflow, String] = _root_.caliban.client.SelectionBuilder.Field("name", Scalar())
  /**
 * The HTTP path for this workflow
 */
def resourcePath: SelectionBuilder[Workflow, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The runs of the workflow.
 */
def runs[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[WorkflowRunOrder] = None)(innerSelection: SelectionBuilder[WorkflowRunConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[WorkflowRunOrder]]): SelectionBuilder[Workflow, A] = _root_.caliban.client.SelectionBuilder.Field("runs", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("orderBy", orderBy, "WorkflowRunOrder")(encoder4)))
  /**
 * The state of the workflow.
 */
def state: SelectionBuilder[Workflow, WorkflowState] = _root_.caliban.client.SelectionBuilder.Field("state", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[Workflow, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this workflow
 */
def url: SelectionBuilder[Workflow, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
}


type WorkflowRun
object WorkflowRun {
  /**
 * The check suite this workflow run belongs to.
 */
def checkSuite[A](innerSelection: SelectionBuilder[CheckSuite, A]): SelectionBuilder[WorkflowRun, A] = _root_.caliban.client.SelectionBuilder.Field("checkSuite", Obj(innerSelection))
  /**
 * Identifies the date and time when the object was created.
 */
def createdAt: SelectionBuilder[WorkflowRun, DateTime] = _root_.caliban.client.SelectionBuilder.Field("createdAt", Scalar())
  /**
 * Identifies the primary key from the database.
 */
def databaseId: SelectionBuilder[WorkflowRun, scala.Option[Int]] = _root_.caliban.client.SelectionBuilder.Field("databaseId", OptionOf(Scalar()))
  /**
 * The log of deployment reviews
 */
def deploymentReviews[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeploymentReviewConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[WorkflowRun, A] = _root_.caliban.client.SelectionBuilder.Field("deploymentReviews", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The event that triggered the workflow run
 */
def event: SelectionBuilder[WorkflowRun, String] = _root_.caliban.client.SelectionBuilder.Field("event", Scalar())
  /**
 * The workflow file
 */
def file[A](innerSelection: SelectionBuilder[WorkflowRunFile, A]): SelectionBuilder[WorkflowRun, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("file", OptionOf(Obj(innerSelection)))
  def id: SelectionBuilder[WorkflowRun, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The pending deployment requests of all check runs in this workflow run
 */
def pendingDeploymentRequests[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None)(innerSelection: SelectionBuilder[DeploymentRequestConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]]): SelectionBuilder[WorkflowRun, A] = _root_.caliban.client.SelectionBuilder.Field("pendingDeploymentRequests", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3)))
  /**
 * The HTTP path for this workflow run
 */
def resourcePath: SelectionBuilder[WorkflowRun, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * A number that uniquely identifies this workflow run in its parent workflow.
 */
def runNumber: SelectionBuilder[WorkflowRun, Int] = _root_.caliban.client.SelectionBuilder.Field("runNumber", Scalar())
  /**
 * Identifies the date and time when the object was last updated.
 */
def updatedAt: SelectionBuilder[WorkflowRun, DateTime] = _root_.caliban.client.SelectionBuilder.Field("updatedAt", Scalar())
  /**
 * The HTTP URL for this workflow run
 */
def url: SelectionBuilder[WorkflowRun, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * The workflow executed in this workflow run.
 */
def workflow[A](innerSelection: SelectionBuilder[Workflow, A]): SelectionBuilder[WorkflowRun, A] = _root_.caliban.client.SelectionBuilder.Field("workflow", Obj(innerSelection))
}


type WorkflowRunConnection
object WorkflowRunConnection {
  /**
 * A list of edges.
 */
def edges[A](innerSelection: SelectionBuilder[WorkflowRunEdge, A]): SelectionBuilder[WorkflowRunConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * A list of nodes.
 */
def nodes[A](innerSelection: SelectionBuilder[WorkflowRun, A]): SelectionBuilder[WorkflowRunConnection, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Information to aid in pagination.
 */
def pageInfo[A](innerSelection: SelectionBuilder[PageInfo, A]): SelectionBuilder[WorkflowRunConnection, A] = _root_.caliban.client.SelectionBuilder.Field("pageInfo", Obj(innerSelection))
  /**
 * Identifies the total count of items in the connection.
 */
def totalCount: SelectionBuilder[WorkflowRunConnection, Int] = _root_.caliban.client.SelectionBuilder.Field("totalCount", Scalar())
}


type WorkflowRunEdge
object WorkflowRunEdge {
  /**
 * A cursor for use in pagination.
 */
def cursor: SelectionBuilder[WorkflowRunEdge, String] = _root_.caliban.client.SelectionBuilder.Field("cursor", Scalar())
  /**
 * The item at the end of the edge.
 */
def node[A](innerSelection: SelectionBuilder[WorkflowRun, A]): SelectionBuilder[WorkflowRunEdge, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(Obj(innerSelection)))
}


type WorkflowRunFile
object WorkflowRunFile {
  def id: SelectionBuilder[WorkflowRunFile, String] = _root_.caliban.client.SelectionBuilder.Field("id", Scalar())
  /**
 * The path of the workflow file relative to its repository.
 */
def path: SelectionBuilder[WorkflowRunFile, String] = _root_.caliban.client.SelectionBuilder.Field("path", Scalar())
  /**
 * The direct link to the file in the repository which stores the workflow file.
 */
def repositoryFileUrl: SelectionBuilder[WorkflowRunFile, URI] = _root_.caliban.client.SelectionBuilder.Field("repositoryFileUrl", Scalar())
  /**
 * The repository name and owner which stores the workflow file.
 */
def repositoryName: SelectionBuilder[WorkflowRunFile, URI] = _root_.caliban.client.SelectionBuilder.Field("repositoryName", Scalar())
  /**
 * The HTTP path for this workflow run file
 */
def resourcePath: SelectionBuilder[WorkflowRunFile, URI] = _root_.caliban.client.SelectionBuilder.Field("resourcePath", Scalar())
  /**
 * The parent workflow run execution for this file.
 */
def run[A](innerSelection: SelectionBuilder[WorkflowRun, A]): SelectionBuilder[WorkflowRunFile, A] = _root_.caliban.client.SelectionBuilder.Field("run", Obj(innerSelection))
  /**
 * The HTTP URL for this workflow run file
 */
def url: SelectionBuilder[WorkflowRunFile, URI] = _root_.caliban.client.SelectionBuilder.Field("url", Scalar())
  /**
 * If the viewer has permissions to push to the repository which stores the workflow.
 */
def viewerCanPushRepository: SelectionBuilder[WorkflowRunFile, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanPushRepository", Scalar())
  /**
 * If the viewer has permissions to read the repository which stores the workflow.
 */
def viewerCanReadRepository: SelectionBuilder[WorkflowRunFile, Boolean] = _root_.caliban.client.SelectionBuilder.Field("viewerCanReadRepository", Scalar())
}


  final case class AbortQueuedMigrationsInput(clientMutationId : scala.Option[String] = None, ownerId : String)
object AbortQueuedMigrationsInput {
  implicit val encoder: ArgEncoder[AbortQueuedMigrationsInput] = new ArgEncoder[AbortQueuedMigrationsInput] {
    override def encode(value: AbortQueuedMigrationsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId)))
  }
}
final case class AcceptEnterpriseAdministratorInvitationInput(clientMutationId : scala.Option[String] = None, invitationId : String)
object AcceptEnterpriseAdministratorInvitationInput {
  implicit val encoder: ArgEncoder[AcceptEnterpriseAdministratorInvitationInput] = new ArgEncoder[AcceptEnterpriseAdministratorInvitationInput] {
    override def encode(value: AcceptEnterpriseAdministratorInvitationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "invitationId" -> implicitly[ArgEncoder[String]].encode(value.invitationId)))
  }
}
final case class AcceptTopicSuggestionInput(clientMutationId : scala.Option[String] = None, name : String, repositoryId : String)
object AcceptTopicSuggestionInput {
  implicit val encoder: ArgEncoder[AcceptTopicSuggestionInput] = new ArgEncoder[AcceptTopicSuggestionInput] {
    override def encode(value: AcceptTopicSuggestionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class AddAssigneesToAssignableInput(assignableId : String, assigneeIds : List[String] = Nil, clientMutationId : scala.Option[String] = None)
object AddAssigneesToAssignableInput {
  implicit val encoder: ArgEncoder[AddAssigneesToAssignableInput] = new ArgEncoder[AddAssigneesToAssignableInput] {
    override def encode(value: AddAssigneesToAssignableInput): __Value =
      __ObjectValue(List("assignableId" -> implicitly[ArgEncoder[String]].encode(value.assignableId), "assigneeIds" -> __ListValue(value.assigneeIds.map(value => implicitly[ArgEncoder[String]].encode(value))), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class AddCommentInput(body : String, clientMutationId : scala.Option[String] = None, subjectId : String)
object AddCommentInput {
  implicit val encoder: ArgEncoder[AddCommentInput] = new ArgEncoder[AddCommentInput] {
    override def encode(value: AddCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class AddDiscussionCommentInput(body : String, clientMutationId : scala.Option[String] = None, discussionId : String, replyToId : scala.Option[String] = None)
object AddDiscussionCommentInput {
  implicit val encoder: ArgEncoder[AddDiscussionCommentInput] = new ArgEncoder[AddDiscussionCommentInput] {
    override def encode(value: AddDiscussionCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "discussionId" -> implicitly[ArgEncoder[String]].encode(value.discussionId), "replyToId" -> value.replyToId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class AddDiscussionPollVoteInput(clientMutationId : scala.Option[String] = None, pollOptionId : String)
object AddDiscussionPollVoteInput {
  implicit val encoder: ArgEncoder[AddDiscussionPollVoteInput] = new ArgEncoder[AddDiscussionPollVoteInput] {
    override def encode(value: AddDiscussionPollVoteInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pollOptionId" -> implicitly[ArgEncoder[String]].encode(value.pollOptionId)))
  }
}
final case class AddEnterpriseOrganizationMemberInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, organizationId : String, role : scala.Option[OrganizationMemberRole] = None, userIds : List[String] = Nil)
object AddEnterpriseOrganizationMemberInput {
  implicit val encoder: ArgEncoder[AddEnterpriseOrganizationMemberInput] = new ArgEncoder[AddEnterpriseOrganizationMemberInput] {
    override def encode(value: AddEnterpriseOrganizationMemberInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId), "role" -> value.role.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OrganizationMemberRole]].encode(value)), "userIds" -> __ListValue(value.userIds.map(value => implicitly[ArgEncoder[String]].encode(value)))))
  }
}
final case class AddEnterpriseSupportEntitlementInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String)
object AddEnterpriseSupportEntitlementInput {
  implicit val encoder: ArgEncoder[AddEnterpriseSupportEntitlementInput] = new ArgEncoder[AddEnterpriseSupportEntitlementInput] {
    override def encode(value: AddEnterpriseSupportEntitlementInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login)))
  }
}
final case class AddLabelsToLabelableInput(clientMutationId : scala.Option[String] = None, labelIds : List[String] = Nil, labelableId : String)
object AddLabelsToLabelableInput {
  implicit val encoder: ArgEncoder[AddLabelsToLabelableInput] = new ArgEncoder[AddLabelsToLabelableInput] {
    override def encode(value: AddLabelsToLabelableInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "labelIds" -> __ListValue(value.labelIds.map(value => implicitly[ArgEncoder[String]].encode(value))), "labelableId" -> implicitly[ArgEncoder[String]].encode(value.labelableId)))
  }
}
final case class AddProjectCardInput(clientMutationId : scala.Option[String] = None, contentId : scala.Option[String] = None, note : scala.Option[String] = None, projectColumnId : String)
object AddProjectCardInput {
  implicit val encoder: ArgEncoder[AddProjectCardInput] = new ArgEncoder[AddProjectCardInput] {
    override def encode(value: AddProjectCardInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "contentId" -> value.contentId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "note" -> value.note.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectColumnId" -> implicitly[ArgEncoder[String]].encode(value.projectColumnId)))
  }
}
final case class AddProjectColumnInput(clientMutationId : scala.Option[String] = None, name : String, projectId : String)
object AddProjectColumnInput {
  implicit val encoder: ArgEncoder[AddProjectColumnInput] = new ArgEncoder[AddProjectColumnInput] {
    override def encode(value: AddProjectColumnInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class AddProjectV2DraftIssueInput(assigneeIds : scala.Option[List[String]] = None, body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, projectId : String, title : String)
object AddProjectV2DraftIssueInput {
  implicit val encoder: ArgEncoder[AddProjectV2DraftIssueInput] = new ArgEncoder[AddProjectV2DraftIssueInput] {
    override def encode(value: AddProjectV2DraftIssueInput): __Value =
      __ObjectValue(List("assigneeIds" -> value.assigneeIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class AddProjectV2ItemByIdInput(clientMutationId : scala.Option[String] = None, contentId : String, projectId : String)
object AddProjectV2ItemByIdInput {
  implicit val encoder: ArgEncoder[AddProjectV2ItemByIdInput] = new ArgEncoder[AddProjectV2ItemByIdInput] {
    override def encode(value: AddProjectV2ItemByIdInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "contentId" -> implicitly[ArgEncoder[String]].encode(value.contentId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class AddPullRequestReviewCommentInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, commitOID : scala.Option[GitObjectID] = None, inReplyTo : scala.Option[String] = None, path : scala.Option[String] = None, position : scala.Option[Int] = None, pullRequestId : scala.Option[String] = None, pullRequestReviewId : scala.Option[String] = None)
object AddPullRequestReviewCommentInput {
  implicit val encoder: ArgEncoder[AddPullRequestReviewCommentInput] = new ArgEncoder[AddPullRequestReviewCommentInput] {
    override def encode(value: AddPullRequestReviewCommentInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commitOID" -> value.commitOID.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "inReplyTo" -> value.inReplyTo.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "path" -> value.path.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "position" -> value.position.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "pullRequestId" -> value.pullRequestId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestReviewId" -> value.pullRequestReviewId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class AddPullRequestReviewInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, comments : scala.Option[List[scala.Option[DraftPullRequestReviewComment]]] = None, commitOID : scala.Option[GitObjectID] = None, event : scala.Option[PullRequestReviewEvent] = None, pullRequestId : String, threads : scala.Option[List[scala.Option[DraftPullRequestReviewThread]]] = None)
object AddPullRequestReviewInput {
  implicit val encoder: ArgEncoder[AddPullRequestReviewInput] = new ArgEncoder[AddPullRequestReviewInput] {
    override def encode(value: AddPullRequestReviewInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "comments" -> value.comments.fold(__NullValue: __Value)(value => __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DraftPullRequestReviewComment]].encode(value))))), "commitOID" -> value.commitOID.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "event" -> value.event.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PullRequestReviewEvent]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId), "threads" -> value.threads.fold(__NullValue: __Value)(value => __ListValue(value.map(value => value.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DraftPullRequestReviewThread]].encode(value)))))))
  }
}
final case class AddPullRequestReviewThreadInput(body : String, clientMutationId : scala.Option[String] = None, line : scala.Option[Int] = None, path : String, pullRequestId : scala.Option[String] = None, pullRequestReviewId : scala.Option[String] = None, side : scala.Option[DiffSide] = None, startLine : scala.Option[Int] = None, startSide : scala.Option[DiffSide] = None, subjectType : scala.Option[PullRequestReviewThreadSubjectType] = None)
object AddPullRequestReviewThreadInput {
  implicit val encoder: ArgEncoder[AddPullRequestReviewThreadInput] = new ArgEncoder[AddPullRequestReviewThreadInput] {
    override def encode(value: AddPullRequestReviewThreadInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "line" -> value.line.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "path" -> implicitly[ArgEncoder[String]].encode(value.path), "pullRequestId" -> value.pullRequestId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestReviewId" -> value.pullRequestReviewId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "side" -> value.side.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DiffSide]].encode(value)), "startLine" -> value.startLine.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "startSide" -> value.startSide.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DiffSide]].encode(value)), "subjectType" -> value.subjectType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PullRequestReviewThreadSubjectType]].encode(value))))
  }
}
final case class AddReactionInput(clientMutationId : scala.Option[String] = None, content : ReactionContent, subjectId : String)
object AddReactionInput {
  implicit val encoder: ArgEncoder[AddReactionInput] = new ArgEncoder[AddReactionInput] {
    override def encode(value: AddReactionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "content" -> implicitly[ArgEncoder[ReactionContent]].encode(value.content), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class AddStarInput(clientMutationId : scala.Option[String] = None, starrableId : String)
object AddStarInput {
  implicit val encoder: ArgEncoder[AddStarInput] = new ArgEncoder[AddStarInput] {
    override def encode(value: AddStarInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "starrableId" -> implicitly[ArgEncoder[String]].encode(value.starrableId)))
  }
}
final case class AddUpvoteInput(clientMutationId : scala.Option[String] = None, subjectId : String)
object AddUpvoteInput {
  implicit val encoder: ArgEncoder[AddUpvoteInput] = new ArgEncoder[AddUpvoteInput] {
    override def encode(value: AddUpvoteInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class AddVerifiableDomainInput(clientMutationId : scala.Option[String] = None, domain : URI, ownerId : String)
object AddVerifiableDomainInput {
  implicit val encoder: ArgEncoder[AddVerifiableDomainInput] = new ArgEncoder[AddVerifiableDomainInput] {
    override def encode(value: AddVerifiableDomainInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "domain" -> implicitly[ArgEncoder[URI]].encode(value.domain), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId)))
  }
}
final case class ApproveDeploymentsInput(clientMutationId : scala.Option[String] = None, comment : scala.Option[String] = None, environmentIds : List[String] = Nil, workflowRunId : String)
object ApproveDeploymentsInput {
  implicit val encoder: ArgEncoder[ApproveDeploymentsInput] = new ArgEncoder[ApproveDeploymentsInput] {
    override def encode(value: ApproveDeploymentsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "comment" -> value.comment.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "environmentIds" -> __ListValue(value.environmentIds.map(value => implicitly[ArgEncoder[String]].encode(value))), "workflowRunId" -> implicitly[ArgEncoder[String]].encode(value.workflowRunId)))
  }
}
final case class ApproveVerifiableDomainInput(clientMutationId : scala.Option[String] = None, id : String)
object ApproveVerifiableDomainInput {
  implicit val encoder: ArgEncoder[ApproveVerifiableDomainInput] = new ArgEncoder[ApproveVerifiableDomainInput] {
    override def encode(value: ApproveVerifiableDomainInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class ArchiveProjectV2ItemInput(clientMutationId : scala.Option[String] = None, itemId : String, projectId : String)
object ArchiveProjectV2ItemInput {
  implicit val encoder: ArgEncoder[ArchiveProjectV2ItemInput] = new ArgEncoder[ArchiveProjectV2ItemInput] {
    override def encode(value: ArchiveProjectV2ItemInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "itemId" -> implicitly[ArgEncoder[String]].encode(value.itemId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class ArchiveRepositoryInput(clientMutationId : scala.Option[String] = None, repositoryId : String)
object ArchiveRepositoryInput {
  implicit val encoder: ArgEncoder[ArchiveRepositoryInput] = new ArgEncoder[ArchiveRepositoryInput] {
    override def encode(value: ArchiveRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class AuditLogOrder(direction : scala.Option[OrderDirection] = None, field : scala.Option[AuditLogOrderField] = None)
object AuditLogOrder {
  implicit val encoder: ArgEncoder[AuditLogOrder] = new ArgEncoder[AuditLogOrder] {
    override def encode(value: AuditLogOrder): __Value =
      __ObjectValue(List("direction" -> value.direction.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OrderDirection]].encode(value)), "field" -> value.field.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[AuditLogOrderField]].encode(value))))
  }
}
final case class BranchNamePatternParametersInput(name : scala.Option[String] = None, negate : scala.Option[Boolean] = None, operator : String, pattern : String)
object BranchNamePatternParametersInput {
  implicit val encoder: ArgEncoder[BranchNamePatternParametersInput] = new ArgEncoder[BranchNamePatternParametersInput] {
    override def encode(value: BranchNamePatternParametersInput): __Value =
      __ObjectValue(List("name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "negate" -> value.negate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "operator" -> implicitly[ArgEncoder[String]].encode(value.operator), "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern)))
  }
}
final case class BulkSponsorship(amount : Int, sponsorableId : scala.Option[String] = None, sponsorableLogin : scala.Option[String] = None)
object BulkSponsorship {
  implicit val encoder: ArgEncoder[BulkSponsorship] = new ArgEncoder[BulkSponsorship] {
    override def encode(value: BulkSponsorship): __Value =
      __ObjectValue(List("amount" -> implicitly[ArgEncoder[Int]].encode(value.amount), "sponsorableId" -> value.sponsorableId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableLogin" -> value.sponsorableLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CancelEnterpriseAdminInvitationInput(clientMutationId : scala.Option[String] = None, invitationId : String)
object CancelEnterpriseAdminInvitationInput {
  implicit val encoder: ArgEncoder[CancelEnterpriseAdminInvitationInput] = new ArgEncoder[CancelEnterpriseAdminInvitationInput] {
    override def encode(value: CancelEnterpriseAdminInvitationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "invitationId" -> implicitly[ArgEncoder[String]].encode(value.invitationId)))
  }
}
final case class CancelSponsorshipInput(clientMutationId : scala.Option[String] = None, sponsorId : scala.Option[String] = None, sponsorLogin : scala.Option[String] = None, sponsorableId : scala.Option[String] = None, sponsorableLogin : scala.Option[String] = None)
object CancelSponsorshipInput {
  implicit val encoder: ArgEncoder[CancelSponsorshipInput] = new ArgEncoder[CancelSponsorshipInput] {
    override def encode(value: CancelSponsorshipInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorId" -> value.sponsorId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorLogin" -> value.sponsorLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableId" -> value.sponsorableId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableLogin" -> value.sponsorableLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class ChangeUserStatusInput(clientMutationId : scala.Option[String] = None, emoji : scala.Option[String] = None, expiresAt : scala.Option[DateTime] = None, limitedAvailability : scala.Option[Boolean] = None, message : scala.Option[String] = None, organizationId : scala.Option[String] = None)
object ChangeUserStatusInput {
  implicit val encoder: ArgEncoder[ChangeUserStatusInput] = new ArgEncoder[ChangeUserStatusInput] {
    override def encode(value: ChangeUserStatusInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "emoji" -> value.emoji.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expiresAt" -> value.expiresAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DateTime]].encode(value)), "limitedAvailability" -> value.limitedAvailability.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "message" -> value.message.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> value.organizationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CheckAnnotationData(annotationLevel : CheckAnnotationLevel, location : CheckAnnotationRange, message : String, path : String, rawDetails : scala.Option[String] = None, title : scala.Option[String] = None)
object CheckAnnotationData {
  implicit val encoder: ArgEncoder[CheckAnnotationData] = new ArgEncoder[CheckAnnotationData] {
    override def encode(value: CheckAnnotationData): __Value =
      __ObjectValue(List("annotationLevel" -> implicitly[ArgEncoder[CheckAnnotationLevel]].encode(value.annotationLevel), "location" -> implicitly[ArgEncoder[CheckAnnotationRange]].encode(value.location), "message" -> implicitly[ArgEncoder[String]].encode(value.message), "path" -> implicitly[ArgEncoder[String]].encode(value.path), "rawDetails" -> value.rawDetails.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CheckAnnotationRange(endColumn : scala.Option[Int] = None, endLine : Int, startColumn : scala.Option[Int] = None, startLine : Int)
object CheckAnnotationRange {
  implicit val encoder: ArgEncoder[CheckAnnotationRange] = new ArgEncoder[CheckAnnotationRange] {
    override def encode(value: CheckAnnotationRange): __Value =
      __ObjectValue(List("endColumn" -> value.endColumn.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "endLine" -> implicitly[ArgEncoder[Int]].encode(value.endLine), "startColumn" -> value.startColumn.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "startLine" -> implicitly[ArgEncoder[Int]].encode(value.startLine)))
  }
}
final case class CheckRunAction(description : String, identifier : String, label : String)
object CheckRunAction {
  implicit val encoder: ArgEncoder[CheckRunAction] = new ArgEncoder[CheckRunAction] {
    override def encode(value: CheckRunAction): __Value =
      __ObjectValue(List("description" -> implicitly[ArgEncoder[String]].encode(value.description), "identifier" -> implicitly[ArgEncoder[String]].encode(value.identifier), "label" -> implicitly[ArgEncoder[String]].encode(value.label)))
  }
}
final case class CheckRunFilter(appId : scala.Option[Int] = None, checkName : scala.Option[String] = None, checkType : scala.Option[CheckRunType] = None, conclusions : scala.Option[List[CheckConclusionState]] = None, status : scala.Option[CheckStatusState] = None, statuses : scala.Option[List[CheckStatusState]] = None)
object CheckRunFilter {
  implicit val encoder: ArgEncoder[CheckRunFilter] = new ArgEncoder[CheckRunFilter] {
    override def encode(value: CheckRunFilter): __Value =
      __ObjectValue(List("appId" -> value.appId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "checkName" -> value.checkName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "checkType" -> value.checkType.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CheckRunType]].encode(value)), "conclusions" -> value.conclusions.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[CheckConclusionState]].encode(value)))), "status" -> value.status.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CheckStatusState]].encode(value)), "statuses" -> value.statuses.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[CheckStatusState]].encode(value))))))
  }
}
final case class CheckRunOutput(annotations : scala.Option[List[CheckAnnotationData]] = None, images : scala.Option[List[CheckRunOutputImage]] = None, summary : String, text : scala.Option[String] = None, title : String)
object CheckRunOutput {
  implicit val encoder: ArgEncoder[CheckRunOutput] = new ArgEncoder[CheckRunOutput] {
    override def encode(value: CheckRunOutput): __Value =
      __ObjectValue(List("annotations" -> value.annotations.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[CheckAnnotationData]].encode(value)))), "images" -> value.images.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[CheckRunOutputImage]].encode(value)))), "summary" -> implicitly[ArgEncoder[String]].encode(value.summary), "text" -> value.text.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class CheckRunOutputImage(alt : String, caption : scala.Option[String] = None, imageUrl : URI)
object CheckRunOutputImage {
  implicit val encoder: ArgEncoder[CheckRunOutputImage] = new ArgEncoder[CheckRunOutputImage] {
    override def encode(value: CheckRunOutputImage): __Value =
      __ObjectValue(List("alt" -> implicitly[ArgEncoder[String]].encode(value.alt), "caption" -> value.caption.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "imageUrl" -> implicitly[ArgEncoder[URI]].encode(value.imageUrl)))
  }
}
final case class CheckSuiteAutoTriggerPreference(appId : String, setting : Boolean)
object CheckSuiteAutoTriggerPreference {
  implicit val encoder: ArgEncoder[CheckSuiteAutoTriggerPreference] = new ArgEncoder[CheckSuiteAutoTriggerPreference] {
    override def encode(value: CheckSuiteAutoTriggerPreference): __Value =
      __ObjectValue(List("appId" -> implicitly[ArgEncoder[String]].encode(value.appId), "setting" -> implicitly[ArgEncoder[Boolean]].encode(value.setting)))
  }
}
final case class CheckSuiteFilter(appId : scala.Option[Int] = None, checkName : scala.Option[String] = None)
object CheckSuiteFilter {
  implicit val encoder: ArgEncoder[CheckSuiteFilter] = new ArgEncoder[CheckSuiteFilter] {
    override def encode(value: CheckSuiteFilter): __Value =
      __ObjectValue(List("appId" -> value.appId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "checkName" -> value.checkName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class ClearLabelsFromLabelableInput(clientMutationId : scala.Option[String] = None, labelableId : String)
object ClearLabelsFromLabelableInput {
  implicit val encoder: ArgEncoder[ClearLabelsFromLabelableInput] = new ArgEncoder[ClearLabelsFromLabelableInput] {
    override def encode(value: ClearLabelsFromLabelableInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "labelableId" -> implicitly[ArgEncoder[String]].encode(value.labelableId)))
  }
}
final case class ClearProjectV2ItemFieldValueInput(clientMutationId : scala.Option[String] = None, fieldId : String, itemId : String, projectId : String)
object ClearProjectV2ItemFieldValueInput {
  implicit val encoder: ArgEncoder[ClearProjectV2ItemFieldValueInput] = new ArgEncoder[ClearProjectV2ItemFieldValueInput] {
    override def encode(value: ClearProjectV2ItemFieldValueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "fieldId" -> implicitly[ArgEncoder[String]].encode(value.fieldId), "itemId" -> implicitly[ArgEncoder[String]].encode(value.itemId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class CloneProjectInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, includeWorkflows : Boolean, name : String, public : scala.Option[Boolean] = None, sourceId : String, targetOwnerId : String)
object CloneProjectInput {
  implicit val encoder: ArgEncoder[CloneProjectInput] = new ArgEncoder[CloneProjectInput] {
    override def encode(value: CloneProjectInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "includeWorkflows" -> implicitly[ArgEncoder[Boolean]].encode(value.includeWorkflows), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "public" -> value.public.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "sourceId" -> implicitly[ArgEncoder[String]].encode(value.sourceId), "targetOwnerId" -> implicitly[ArgEncoder[String]].encode(value.targetOwnerId)))
  }
}
final case class CloneTemplateRepositoryInput(clientMutationId : scala.Option[String] = None, description : scala.Option[String] = None, includeAllBranches : scala.Option[Boolean] = None, name : String, ownerId : String, repositoryId : String, visibility : RepositoryVisibility)
object CloneTemplateRepositoryInput {
  implicit val encoder: ArgEncoder[CloneTemplateRepositoryInput] = new ArgEncoder[CloneTemplateRepositoryInput] {
    override def encode(value: CloneTemplateRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "includeAllBranches" -> value.includeAllBranches.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "visibility" -> implicitly[ArgEncoder[RepositoryVisibility]].encode(value.visibility)))
  }
}
final case class CloseDiscussionInput(clientMutationId : scala.Option[String] = None, discussionId : String, reason : scala.Option[DiscussionCloseReason] = None)
object CloseDiscussionInput {
  implicit val encoder: ArgEncoder[CloseDiscussionInput] = new ArgEncoder[CloseDiscussionInput] {
    override def encode(value: CloseDiscussionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "discussionId" -> implicitly[ArgEncoder[String]].encode(value.discussionId), "reason" -> value.reason.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DiscussionCloseReason]].encode(value))))
  }
}
final case class CloseIssueInput(clientMutationId : scala.Option[String] = None, issueId : String, stateReason : scala.Option[IssueClosedStateReason] = None)
object CloseIssueInput {
  implicit val encoder: ArgEncoder[CloseIssueInput] = new ArgEncoder[CloseIssueInput] {
    override def encode(value: CloseIssueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId), "stateReason" -> value.stateReason.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IssueClosedStateReason]].encode(value))))
  }
}
final case class ClosePullRequestInput(clientMutationId : scala.Option[String] = None, pullRequestId : String)
object ClosePullRequestInput {
  implicit val encoder: ArgEncoder[ClosePullRequestInput] = new ArgEncoder[ClosePullRequestInput] {
    override def encode(value: ClosePullRequestInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class CommitAuthor(emails : scala.Option[List[String]] = None, id : scala.Option[String] = None)
object CommitAuthor {
  implicit val encoder: ArgEncoder[CommitAuthor] = new ArgEncoder[CommitAuthor] {
    override def encode(value: CommitAuthor): __Value =
      __ObjectValue(List("emails" -> value.emails.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "id" -> value.id.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CommitAuthorEmailPatternParametersInput(name : scala.Option[String] = None, negate : scala.Option[Boolean] = None, operator : String, pattern : String)
object CommitAuthorEmailPatternParametersInput {
  implicit val encoder: ArgEncoder[CommitAuthorEmailPatternParametersInput] = new ArgEncoder[CommitAuthorEmailPatternParametersInput] {
    override def encode(value: CommitAuthorEmailPatternParametersInput): __Value =
      __ObjectValue(List("name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "negate" -> value.negate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "operator" -> implicitly[ArgEncoder[String]].encode(value.operator), "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern)))
  }
}
final case class CommitContributionOrder(direction : OrderDirection, field : CommitContributionOrderField)
object CommitContributionOrder {
  implicit val encoder: ArgEncoder[CommitContributionOrder] = new ArgEncoder[CommitContributionOrder] {
    override def encode(value: CommitContributionOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[CommitContributionOrderField]].encode(value.field)))
  }
}
final case class CommitMessage(body : scala.Option[String] = None, headline : String)
object CommitMessage {
  implicit val encoder: ArgEncoder[CommitMessage] = new ArgEncoder[CommitMessage] {
    override def encode(value: CommitMessage): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "headline" -> implicitly[ArgEncoder[String]].encode(value.headline)))
  }
}
final case class CommitMessagePatternParametersInput(name : scala.Option[String] = None, negate : scala.Option[Boolean] = None, operator : String, pattern : String)
object CommitMessagePatternParametersInput {
  implicit val encoder: ArgEncoder[CommitMessagePatternParametersInput] = new ArgEncoder[CommitMessagePatternParametersInput] {
    override def encode(value: CommitMessagePatternParametersInput): __Value =
      __ObjectValue(List("name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "negate" -> value.negate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "operator" -> implicitly[ArgEncoder[String]].encode(value.operator), "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern)))
  }
}
final case class CommittableBranch(branchName : scala.Option[String] = None, id : scala.Option[String] = None, repositoryNameWithOwner : scala.Option[String] = None)
object CommittableBranch {
  implicit val encoder: ArgEncoder[CommittableBranch] = new ArgEncoder[CommittableBranch] {
    override def encode(value: CommittableBranch): __Value =
      __ObjectValue(List("branchName" -> value.branchName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> value.id.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryNameWithOwner" -> value.repositoryNameWithOwner.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CommitterEmailPatternParametersInput(name : scala.Option[String] = None, negate : scala.Option[Boolean] = None, operator : String, pattern : String)
object CommitterEmailPatternParametersInput {
  implicit val encoder: ArgEncoder[CommitterEmailPatternParametersInput] = new ArgEncoder[CommitterEmailPatternParametersInput] {
    override def encode(value: CommitterEmailPatternParametersInput): __Value =
      __ObjectValue(List("name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "negate" -> value.negate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "operator" -> implicitly[ArgEncoder[String]].encode(value.operator), "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern)))
  }
}
final case class ContributionOrder(direction : OrderDirection)
object ContributionOrder {
  implicit val encoder: ArgEncoder[ContributionOrder] = new ArgEncoder[ContributionOrder] {
    override def encode(value: ContributionOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction)))
  }
}
final case class ConvertProjectCardNoteToIssueInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, projectCardId : String, repositoryId : String, title : scala.Option[String] = None)
object ConvertProjectCardNoteToIssueInput {
  implicit val encoder: ArgEncoder[ConvertProjectCardNoteToIssueInput] = new ArgEncoder[ConvertProjectCardNoteToIssueInput] {
    override def encode(value: ConvertProjectCardNoteToIssueInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectCardId" -> implicitly[ArgEncoder[String]].encode(value.projectCardId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class ConvertPullRequestToDraftInput(clientMutationId : scala.Option[String] = None, pullRequestId : String)
object ConvertPullRequestToDraftInput {
  implicit val encoder: ArgEncoder[ConvertPullRequestToDraftInput] = new ArgEncoder[ConvertPullRequestToDraftInput] {
    override def encode(value: ConvertPullRequestToDraftInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class CopyProjectV2Input(clientMutationId : scala.Option[String] = None, includeDraftIssues : scala.Option[Boolean] = None, ownerId : String, projectId : String, title : String)
object CopyProjectV2Input {
  implicit val encoder: ArgEncoder[CopyProjectV2Input] = new ArgEncoder[CopyProjectV2Input] {
    override def encode(value: CopyProjectV2Input): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "includeDraftIssues" -> value.includeDraftIssues.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class CreateAttributionInvitationInput(clientMutationId : scala.Option[String] = None, ownerId : String, sourceId : String, targetId : String)
object CreateAttributionInvitationInput {
  implicit val encoder: ArgEncoder[CreateAttributionInvitationInput] = new ArgEncoder[CreateAttributionInvitationInput] {
    override def encode(value: CreateAttributionInvitationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "sourceId" -> implicitly[ArgEncoder[String]].encode(value.sourceId), "targetId" -> implicitly[ArgEncoder[String]].encode(value.targetId)))
  }
}
final case class CreateBranchProtectionRuleInput(allowsDeletions : scala.Option[Boolean] = None, allowsForcePushes : scala.Option[Boolean] = None, blocksCreations : scala.Option[Boolean] = None, bypassForcePushActorIds : scala.Option[List[String]] = None, bypassPullRequestActorIds : scala.Option[List[String]] = None, clientMutationId : scala.Option[String] = None, dismissesStaleReviews : scala.Option[Boolean] = None, isAdminEnforced : scala.Option[Boolean] = None, lockAllowsFetchAndMerge : scala.Option[Boolean] = None, lockBranch : scala.Option[Boolean] = None, pattern : String, pushActorIds : scala.Option[List[String]] = None, repositoryId : String, requireLastPushApproval : scala.Option[Boolean] = None, requiredApprovingReviewCount : scala.Option[Int] = None, requiredDeploymentEnvironments : scala.Option[List[String]] = None, requiredStatusCheckContexts : scala.Option[List[String]] = None, requiredStatusChecks : scala.Option[List[RequiredStatusCheckInput]] = None, requiresApprovingReviews : scala.Option[Boolean] = None, requiresCodeOwnerReviews : scala.Option[Boolean] = None, requiresCommitSignatures : scala.Option[Boolean] = None, requiresConversationResolution : scala.Option[Boolean] = None, requiresDeployments : scala.Option[Boolean] = None, requiresLinearHistory : scala.Option[Boolean] = None, requiresStatusChecks : scala.Option[Boolean] = None, requiresStrictStatusChecks : scala.Option[Boolean] = None, restrictsPushes : scala.Option[Boolean] = None, restrictsReviewDismissals : scala.Option[Boolean] = None, reviewDismissalActorIds : scala.Option[List[String]] = None)
object CreateBranchProtectionRuleInput {
  implicit val encoder: ArgEncoder[CreateBranchProtectionRuleInput] = new ArgEncoder[CreateBranchProtectionRuleInput] {
    override def encode(value: CreateBranchProtectionRuleInput): __Value =
      __ObjectValue(List("allowsDeletions" -> value.allowsDeletions.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "allowsForcePushes" -> value.allowsForcePushes.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "blocksCreations" -> value.blocksCreations.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "bypassForcePushActorIds" -> value.bypassForcePushActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "bypassPullRequestActorIds" -> value.bypassPullRequestActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "dismissesStaleReviews" -> value.dismissesStaleReviews.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "isAdminEnforced" -> value.isAdminEnforced.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "lockAllowsFetchAndMerge" -> value.lockAllowsFetchAndMerge.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "lockBranch" -> value.lockBranch.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern), "pushActorIds" -> value.pushActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "requireLastPushApproval" -> value.requireLastPushApproval.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiredApprovingReviewCount" -> value.requiredApprovingReviewCount.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "requiredDeploymentEnvironments" -> value.requiredDeploymentEnvironments.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "requiredStatusCheckContexts" -> value.requiredStatusCheckContexts.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "requiredStatusChecks" -> value.requiredStatusChecks.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[RequiredStatusCheckInput]].encode(value)))), "requiresApprovingReviews" -> value.requiresApprovingReviews.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresCodeOwnerReviews" -> value.requiresCodeOwnerReviews.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresCommitSignatures" -> value.requiresCommitSignatures.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresConversationResolution" -> value.requiresConversationResolution.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresDeployments" -> value.requiresDeployments.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresLinearHistory" -> value.requiresLinearHistory.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresStatusChecks" -> value.requiresStatusChecks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresStrictStatusChecks" -> value.requiresStrictStatusChecks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "restrictsPushes" -> value.restrictsPushes.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "restrictsReviewDismissals" -> value.restrictsReviewDismissals.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "reviewDismissalActorIds" -> value.reviewDismissalActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value))))))
  }
}
final case class CreateCheckRunInput(actions : scala.Option[List[CheckRunAction]] = None, clientMutationId : scala.Option[String] = None, completedAt : scala.Option[DateTime] = None, conclusion : scala.Option[CheckConclusionState] = None, detailsUrl : scala.Option[URI] = None, externalId : scala.Option[String] = None, headSha : GitObjectID, name : String, output : scala.Option[CheckRunOutput] = None, repositoryId : String, startedAt : scala.Option[DateTime] = None, status : scala.Option[RequestableCheckStatusState] = None)
object CreateCheckRunInput {
  implicit val encoder: ArgEncoder[CreateCheckRunInput] = new ArgEncoder[CreateCheckRunInput] {
    override def encode(value: CreateCheckRunInput): __Value =
      __ObjectValue(List("actions" -> value.actions.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[CheckRunAction]].encode(value)))), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "completedAt" -> value.completedAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DateTime]].encode(value)), "conclusion" -> value.conclusion.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CheckConclusionState]].encode(value)), "detailsUrl" -> value.detailsUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[URI]].encode(value)), "externalId" -> value.externalId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "headSha" -> implicitly[ArgEncoder[GitObjectID]].encode(value.headSha), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "output" -> value.output.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CheckRunOutput]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "startedAt" -> value.startedAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DateTime]].encode(value)), "status" -> value.status.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RequestableCheckStatusState]].encode(value))))
  }
}
final case class CreateCheckSuiteInput(clientMutationId : scala.Option[String] = None, headSha : GitObjectID, repositoryId : String)
object CreateCheckSuiteInput {
  implicit val encoder: ArgEncoder[CreateCheckSuiteInput] = new ArgEncoder[CreateCheckSuiteInput] {
    override def encode(value: CreateCheckSuiteInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "headSha" -> implicitly[ArgEncoder[GitObjectID]].encode(value.headSha), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class CreateCommitOnBranchInput(branch : CommittableBranch, clientMutationId : scala.Option[String] = None, expectedHeadOid : GitObjectID, fileChanges : scala.Option[FileChanges] = None, message : CommitMessage)
object CreateCommitOnBranchInput {
  implicit val encoder: ArgEncoder[CreateCommitOnBranchInput] = new ArgEncoder[CreateCommitOnBranchInput] {
    override def encode(value: CreateCommitOnBranchInput): __Value =
      __ObjectValue(List("branch" -> implicitly[ArgEncoder[CommittableBranch]].encode(value.branch), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expectedHeadOid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.expectedHeadOid), "fileChanges" -> value.fileChanges.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[FileChanges]].encode(value)), "message" -> implicitly[ArgEncoder[CommitMessage]].encode(value.message)))
  }
}
final case class CreateDeploymentInput(autoMerge : scala.Option[Boolean] = None, clientMutationId : scala.Option[String] = None, description : scala.Option[String] = None, environment : scala.Option[String] = None, payload : scala.Option[String] = None, refId : String, repositoryId : String, requiredContexts : scala.Option[List[String]] = None, task : scala.Option[String] = None)
object CreateDeploymentInput {
  implicit val encoder: ArgEncoder[CreateDeploymentInput] = new ArgEncoder[CreateDeploymentInput] {
    override def encode(value: CreateDeploymentInput): __Value =
      __ObjectValue(List("autoMerge" -> value.autoMerge.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "environment" -> value.environment.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "payload" -> value.payload.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "refId" -> implicitly[ArgEncoder[String]].encode(value.refId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "requiredContexts" -> value.requiredContexts.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "task" -> value.task.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CreateDeploymentStatusInput(autoInactive : scala.Option[Boolean] = None, clientMutationId : scala.Option[String] = None, deploymentId : String, description : scala.Option[String] = None, environment : scala.Option[String] = None, environmentUrl : scala.Option[String] = None, logUrl : scala.Option[String] = None, state : DeploymentStatusState)
object CreateDeploymentStatusInput {
  implicit val encoder: ArgEncoder[CreateDeploymentStatusInput] = new ArgEncoder[CreateDeploymentStatusInput] {
    override def encode(value: CreateDeploymentStatusInput): __Value =
      __ObjectValue(List("autoInactive" -> value.autoInactive.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "deploymentId" -> implicitly[ArgEncoder[String]].encode(value.deploymentId), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "environment" -> value.environment.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "environmentUrl" -> value.environmentUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "logUrl" -> value.logUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "state" -> implicitly[ArgEncoder[DeploymentStatusState]].encode(value.state)))
  }
}
final case class CreateDiscussionInput(body : String, categoryId : String, clientMutationId : scala.Option[String] = None, repositoryId : String, title : String)
object CreateDiscussionInput {
  implicit val encoder: ArgEncoder[CreateDiscussionInput] = new ArgEncoder[CreateDiscussionInput] {
    override def encode(value: CreateDiscussionInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "categoryId" -> implicitly[ArgEncoder[String]].encode(value.categoryId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class CreateEnterpriseOrganizationInput(adminLogins : List[String] = Nil, billingEmail : String, clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String, profileName : String)
object CreateEnterpriseOrganizationInput {
  implicit val encoder: ArgEncoder[CreateEnterpriseOrganizationInput] = new ArgEncoder[CreateEnterpriseOrganizationInput] {
    override def encode(value: CreateEnterpriseOrganizationInput): __Value =
      __ObjectValue(List("adminLogins" -> __ListValue(value.adminLogins.map(value => implicitly[ArgEncoder[String]].encode(value))), "billingEmail" -> implicitly[ArgEncoder[String]].encode(value.billingEmail), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login), "profileName" -> implicitly[ArgEncoder[String]].encode(value.profileName)))
  }
}
final case class CreateEnvironmentInput(clientMutationId : scala.Option[String] = None, name : String, repositoryId : String)
object CreateEnvironmentInput {
  implicit val encoder: ArgEncoder[CreateEnvironmentInput] = new ArgEncoder[CreateEnvironmentInput] {
    override def encode(value: CreateEnvironmentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class CreateIpAllowListEntryInput(allowListValue : String, clientMutationId : scala.Option[String] = None, isActive : Boolean, name : scala.Option[String] = None, ownerId : String)
object CreateIpAllowListEntryInput {
  implicit val encoder: ArgEncoder[CreateIpAllowListEntryInput] = new ArgEncoder[CreateIpAllowListEntryInput] {
    override def encode(value: CreateIpAllowListEntryInput): __Value =
      __ObjectValue(List("allowListValue" -> implicitly[ArgEncoder[String]].encode(value.allowListValue), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "isActive" -> implicitly[ArgEncoder[Boolean]].encode(value.isActive), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId)))
  }
}
final case class CreateIssueInput(assigneeIds : scala.Option[List[String]] = None, body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, issueTemplate : scala.Option[String] = None, labelIds : scala.Option[List[String]] = None, milestoneId : scala.Option[String] = None, projectIds : scala.Option[List[String]] = None, repositoryId : String, title : String)
object CreateIssueInput {
  implicit val encoder: ArgEncoder[CreateIssueInput] = new ArgEncoder[CreateIssueInput] {
    override def encode(value: CreateIssueInput): __Value =
      __ObjectValue(List("assigneeIds" -> value.assigneeIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueTemplate" -> value.issueTemplate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "labelIds" -> value.labelIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectIds" -> value.projectIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class CreateLabelInput(clientMutationId : scala.Option[String] = None, color : String, description : scala.Option[String] = None, name : String, repositoryId : String)
object CreateLabelInput {
  implicit val encoder: ArgEncoder[CreateLabelInput] = new ArgEncoder[CreateLabelInput] {
    override def encode(value: CreateLabelInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "color" -> implicitly[ArgEncoder[String]].encode(value.color), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class CreateLinkedBranchInput(clientMutationId : scala.Option[String] = None, issueId : String, name : scala.Option[String] = None, oid : GitObjectID, repositoryId : scala.Option[String] = None)
object CreateLinkedBranchInput {
  implicit val encoder: ArgEncoder[CreateLinkedBranchInput] = new ArgEncoder[CreateLinkedBranchInput] {
    override def encode(value: CreateLinkedBranchInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "oid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.oid), "repositoryId" -> value.repositoryId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CreateMigrationSourceInput(accessToken : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, githubPat : scala.Option[String] = None, name : String, ownerId : String, `type` : MigrationSourceType, url : scala.Option[String] = None)
object CreateMigrationSourceInput {
  implicit val encoder: ArgEncoder[CreateMigrationSourceInput] = new ArgEncoder[CreateMigrationSourceInput] {
    override def encode(value: CreateMigrationSourceInput): __Value =
      __ObjectValue(List("accessToken" -> value.accessToken.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "githubPat" -> value.githubPat.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "type" -> implicitly[ArgEncoder[MigrationSourceType]].encode(value.`type`), "url" -> value.url.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CreateProjectInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, name : String, ownerId : String, repositoryIds : scala.Option[List[String]] = None, template : scala.Option[ProjectTemplate] = None)
object CreateProjectInput {
  implicit val encoder: ArgEncoder[CreateProjectInput] = new ArgEncoder[CreateProjectInput] {
    override def encode(value: CreateProjectInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "repositoryIds" -> value.repositoryIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "template" -> value.template.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ProjectTemplate]].encode(value))))
  }
}
final case class CreateProjectV2FieldInput(clientMutationId : scala.Option[String] = None, dataType : ProjectV2CustomFieldType, name : String, projectId : String, singleSelectOptions : scala.Option[List[ProjectV2SingleSelectFieldOptionInput]] = None)
object CreateProjectV2FieldInput {
  implicit val encoder: ArgEncoder[CreateProjectV2FieldInput] = new ArgEncoder[CreateProjectV2FieldInput] {
    override def encode(value: CreateProjectV2FieldInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "dataType" -> implicitly[ArgEncoder[ProjectV2CustomFieldType]].encode(value.dataType), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "singleSelectOptions" -> value.singleSelectOptions.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[ProjectV2SingleSelectFieldOptionInput]].encode(value))))))
  }
}
final case class CreateProjectV2Input(clientMutationId : scala.Option[String] = None, ownerId : String, repositoryId : scala.Option[String] = None, teamId : scala.Option[String] = None, title : String)
object CreateProjectV2Input {
  implicit val encoder: ArgEncoder[CreateProjectV2Input] = new ArgEncoder[CreateProjectV2Input] {
    override def encode(value: CreateProjectV2Input): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "repositoryId" -> value.repositoryId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "teamId" -> value.teamId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class CreatePullRequestInput(baseRefName : String, body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, draft : scala.Option[Boolean] = None, headRefName : String, headRepositoryId : scala.Option[String] = None, maintainerCanModify : scala.Option[Boolean] = None, repositoryId : String, title : String)
object CreatePullRequestInput {
  implicit val encoder: ArgEncoder[CreatePullRequestInput] = new ArgEncoder[CreatePullRequestInput] {
    override def encode(value: CreatePullRequestInput): __Value =
      __ObjectValue(List("baseRefName" -> implicitly[ArgEncoder[String]].encode(value.baseRefName), "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "draft" -> value.draft.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "headRefName" -> implicitly[ArgEncoder[String]].encode(value.headRefName), "headRepositoryId" -> value.headRepositoryId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "maintainerCanModify" -> value.maintainerCanModify.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class CreateRefInput(clientMutationId : scala.Option[String] = None, name : String, oid : GitObjectID, repositoryId : String)
object CreateRefInput {
  implicit val encoder: ArgEncoder[CreateRefInput] = new ArgEncoder[CreateRefInput] {
    override def encode(value: CreateRefInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "oid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.oid), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class CreateRepositoryInput(clientMutationId : scala.Option[String] = None, description : scala.Option[String] = None, hasIssuesEnabled : scala.Option[Boolean] = None, hasWikiEnabled : scala.Option[Boolean] = None, homepageUrl : scala.Option[URI] = None, name : String, ownerId : scala.Option[String] = None, teamId : scala.Option[String] = None, template : scala.Option[Boolean] = None, visibility : RepositoryVisibility)
object CreateRepositoryInput {
  implicit val encoder: ArgEncoder[CreateRepositoryInput] = new ArgEncoder[CreateRepositoryInput] {
    override def encode(value: CreateRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "hasIssuesEnabled" -> value.hasIssuesEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "hasWikiEnabled" -> value.hasWikiEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "homepageUrl" -> value.homepageUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[URI]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "ownerId" -> value.ownerId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "teamId" -> value.teamId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "template" -> value.template.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "visibility" -> implicitly[ArgEncoder[RepositoryVisibility]].encode(value.visibility)))
  }
}
final case class CreateRepositoryRulesetInput(bypassActorIds : scala.Option[List[String]] = None, bypassMode : scala.Option[RuleBypassMode] = None, clientMutationId : scala.Option[String] = None, conditions : RepositoryRuleConditionsInput, enforcement : RuleEnforcement, name : String, rules : scala.Option[List[RepositoryRuleInput]] = None, sourceId : String, target : scala.Option[RepositoryRulesetTarget] = None)
object CreateRepositoryRulesetInput {
  implicit val encoder: ArgEncoder[CreateRepositoryRulesetInput] = new ArgEncoder[CreateRepositoryRulesetInput] {
    override def encode(value: CreateRepositoryRulesetInput): __Value =
      __ObjectValue(List("bypassActorIds" -> value.bypassActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "bypassMode" -> value.bypassMode.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RuleBypassMode]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "conditions" -> implicitly[ArgEncoder[RepositoryRuleConditionsInput]].encode(value.conditions), "enforcement" -> implicitly[ArgEncoder[RuleEnforcement]].encode(value.enforcement), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "rules" -> value.rules.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[RepositoryRuleInput]].encode(value)))), "sourceId" -> implicitly[ArgEncoder[String]].encode(value.sourceId), "target" -> value.target.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryRulesetTarget]].encode(value))))
  }
}
final case class CreateSponsorsListingInput(billingCountryOrRegionCode : scala.Option[SponsorsCountryOrRegionCode] = None, clientMutationId : scala.Option[String] = None, contactEmail : scala.Option[String] = None, fiscalHostLogin : scala.Option[String] = None, fiscallyHostedProjectProfileUrl : scala.Option[String] = None, fullDescription : scala.Option[String] = None, residenceCountryOrRegionCode : scala.Option[SponsorsCountryOrRegionCode] = None, sponsorableLogin : scala.Option[String] = None)
object CreateSponsorsListingInput {
  implicit val encoder: ArgEncoder[CreateSponsorsListingInput] = new ArgEncoder[CreateSponsorsListingInput] {
    override def encode(value: CreateSponsorsListingInput): __Value =
      __ObjectValue(List("billingCountryOrRegionCode" -> value.billingCountryOrRegionCode.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[SponsorsCountryOrRegionCode]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "contactEmail" -> value.contactEmail.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "fiscalHostLogin" -> value.fiscalHostLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "fiscallyHostedProjectProfileUrl" -> value.fiscallyHostedProjectProfileUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "fullDescription" -> value.fullDescription.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "residenceCountryOrRegionCode" -> value.residenceCountryOrRegionCode.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[SponsorsCountryOrRegionCode]].encode(value)), "sponsorableLogin" -> value.sponsorableLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CreateSponsorsTierInput(amount : Int, clientMutationId : scala.Option[String] = None, description : String, isRecurring : scala.Option[Boolean] = None, publish : scala.Option[Boolean] = None, repositoryId : scala.Option[String] = None, repositoryName : scala.Option[String] = None, repositoryOwnerLogin : scala.Option[String] = None, sponsorableId : scala.Option[String] = None, sponsorableLogin : scala.Option[String] = None, welcomeMessage : scala.Option[String] = None)
object CreateSponsorsTierInput {
  implicit val encoder: ArgEncoder[CreateSponsorsTierInput] = new ArgEncoder[CreateSponsorsTierInput] {
    override def encode(value: CreateSponsorsTierInput): __Value =
      __ObjectValue(List("amount" -> implicitly[ArgEncoder[Int]].encode(value.amount), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> implicitly[ArgEncoder[String]].encode(value.description), "isRecurring" -> value.isRecurring.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "publish" -> value.publish.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "repositoryId" -> value.repositoryId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryName" -> value.repositoryName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryOwnerLogin" -> value.repositoryOwnerLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableId" -> value.sponsorableId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableLogin" -> value.sponsorableLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "welcomeMessage" -> value.welcomeMessage.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CreateSponsorshipInput(amount : scala.Option[Int] = None, clientMutationId : scala.Option[String] = None, isRecurring : scala.Option[Boolean] = None, privacyLevel : scala.Option[SponsorshipPrivacy] = None, receiveEmails : scala.Option[Boolean] = None, sponsorId : scala.Option[String] = None, sponsorLogin : scala.Option[String] = None, sponsorableId : scala.Option[String] = None, sponsorableLogin : scala.Option[String] = None, tierId : scala.Option[String] = None)
object CreateSponsorshipInput {
  implicit val encoder: ArgEncoder[CreateSponsorshipInput] = new ArgEncoder[CreateSponsorshipInput] {
    override def encode(value: CreateSponsorshipInput): __Value =
      __ObjectValue(List("amount" -> value.amount.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "isRecurring" -> value.isRecurring.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "privacyLevel" -> value.privacyLevel.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[SponsorshipPrivacy]].encode(value)), "receiveEmails" -> value.receiveEmails.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "sponsorId" -> value.sponsorId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorLogin" -> value.sponsorLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableId" -> value.sponsorableId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableLogin" -> value.sponsorableLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "tierId" -> value.tierId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class CreateSponsorshipsInput(clientMutationId : scala.Option[String] = None, privacyLevel : scala.Option[SponsorshipPrivacy] = None, receiveEmails : scala.Option[Boolean] = None, sponsorLogin : String, sponsorships : List[BulkSponsorship] = Nil)
object CreateSponsorshipsInput {
  implicit val encoder: ArgEncoder[CreateSponsorshipsInput] = new ArgEncoder[CreateSponsorshipsInput] {
    override def encode(value: CreateSponsorshipsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "privacyLevel" -> value.privacyLevel.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[SponsorshipPrivacy]].encode(value)), "receiveEmails" -> value.receiveEmails.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "sponsorLogin" -> implicitly[ArgEncoder[String]].encode(value.sponsorLogin), "sponsorships" -> __ListValue(value.sponsorships.map(value => implicitly[ArgEncoder[BulkSponsorship]].encode(value)))))
  }
}
final case class CreateTeamDiscussionCommentInput(body : String, clientMutationId : scala.Option[String] = None, discussionId : String)
object CreateTeamDiscussionCommentInput {
  implicit val encoder: ArgEncoder[CreateTeamDiscussionCommentInput] = new ArgEncoder[CreateTeamDiscussionCommentInput] {
    override def encode(value: CreateTeamDiscussionCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "discussionId" -> implicitly[ArgEncoder[String]].encode(value.discussionId)))
  }
}
final case class CreateTeamDiscussionInput(body : String, clientMutationId : scala.Option[String] = None, `private` : scala.Option[Boolean] = None, teamId : String, title : String)
object CreateTeamDiscussionInput {
  implicit val encoder: ArgEncoder[CreateTeamDiscussionInput] = new ArgEncoder[CreateTeamDiscussionInput] {
    override def encode(value: CreateTeamDiscussionInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "private" -> value.`private`.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "teamId" -> implicitly[ArgEncoder[String]].encode(value.teamId), "title" -> implicitly[ArgEncoder[String]].encode(value.title)))
  }
}
final case class DeclineTopicSuggestionInput(clientMutationId : scala.Option[String] = None, name : String, reason : TopicSuggestionDeclineReason, repositoryId : String)
object DeclineTopicSuggestionInput {
  implicit val encoder: ArgEncoder[DeclineTopicSuggestionInput] = new ArgEncoder[DeclineTopicSuggestionInput] {
    override def encode(value: DeclineTopicSuggestionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "reason" -> implicitly[ArgEncoder[TopicSuggestionDeclineReason]].encode(value.reason), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class DeleteBranchProtectionRuleInput(branchProtectionRuleId : String, clientMutationId : scala.Option[String] = None)
object DeleteBranchProtectionRuleInput {
  implicit val encoder: ArgEncoder[DeleteBranchProtectionRuleInput] = new ArgEncoder[DeleteBranchProtectionRuleInput] {
    override def encode(value: DeleteBranchProtectionRuleInput): __Value =
      __ObjectValue(List("branchProtectionRuleId" -> implicitly[ArgEncoder[String]].encode(value.branchProtectionRuleId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class DeleteDeploymentInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteDeploymentInput {
  implicit val encoder: ArgEncoder[DeleteDeploymentInput] = new ArgEncoder[DeleteDeploymentInput] {
    override def encode(value: DeleteDeploymentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteDiscussionCommentInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteDiscussionCommentInput {
  implicit val encoder: ArgEncoder[DeleteDiscussionCommentInput] = new ArgEncoder[DeleteDiscussionCommentInput] {
    override def encode(value: DeleteDiscussionCommentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteDiscussionInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteDiscussionInput {
  implicit val encoder: ArgEncoder[DeleteDiscussionInput] = new ArgEncoder[DeleteDiscussionInput] {
    override def encode(value: DeleteDiscussionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteEnvironmentInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteEnvironmentInput {
  implicit val encoder: ArgEncoder[DeleteEnvironmentInput] = new ArgEncoder[DeleteEnvironmentInput] {
    override def encode(value: DeleteEnvironmentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteIpAllowListEntryInput(clientMutationId : scala.Option[String] = None, ipAllowListEntryId : String)
object DeleteIpAllowListEntryInput {
  implicit val encoder: ArgEncoder[DeleteIpAllowListEntryInput] = new ArgEncoder[DeleteIpAllowListEntryInput] {
    override def encode(value: DeleteIpAllowListEntryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ipAllowListEntryId" -> implicitly[ArgEncoder[String]].encode(value.ipAllowListEntryId)))
  }
}
final case class DeleteIssueCommentInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteIssueCommentInput {
  implicit val encoder: ArgEncoder[DeleteIssueCommentInput] = new ArgEncoder[DeleteIssueCommentInput] {
    override def encode(value: DeleteIssueCommentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteIssueInput(clientMutationId : scala.Option[String] = None, issueId : String)
object DeleteIssueInput {
  implicit val encoder: ArgEncoder[DeleteIssueInput] = new ArgEncoder[DeleteIssueInput] {
    override def encode(value: DeleteIssueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)))
  }
}
final case class DeleteLabelInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteLabelInput {
  implicit val encoder: ArgEncoder[DeleteLabelInput] = new ArgEncoder[DeleteLabelInput] {
    override def encode(value: DeleteLabelInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteLinkedBranchInput(clientMutationId : scala.Option[String] = None, linkedBranchId : String)
object DeleteLinkedBranchInput {
  implicit val encoder: ArgEncoder[DeleteLinkedBranchInput] = new ArgEncoder[DeleteLinkedBranchInput] {
    override def encode(value: DeleteLinkedBranchInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "linkedBranchId" -> implicitly[ArgEncoder[String]].encode(value.linkedBranchId)))
  }
}
final case class DeletePackageVersionInput(clientMutationId : scala.Option[String] = None, packageVersionId : String)
object DeletePackageVersionInput {
  implicit val encoder: ArgEncoder[DeletePackageVersionInput] = new ArgEncoder[DeletePackageVersionInput] {
    override def encode(value: DeletePackageVersionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "packageVersionId" -> implicitly[ArgEncoder[String]].encode(value.packageVersionId)))
  }
}
final case class DeleteProjectCardInput(cardId : String, clientMutationId : scala.Option[String] = None)
object DeleteProjectCardInput {
  implicit val encoder: ArgEncoder[DeleteProjectCardInput] = new ArgEncoder[DeleteProjectCardInput] {
    override def encode(value: DeleteProjectCardInput): __Value =
      __ObjectValue(List("cardId" -> implicitly[ArgEncoder[String]].encode(value.cardId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class DeleteProjectColumnInput(clientMutationId : scala.Option[String] = None, columnId : String)
object DeleteProjectColumnInput {
  implicit val encoder: ArgEncoder[DeleteProjectColumnInput] = new ArgEncoder[DeleteProjectColumnInput] {
    override def encode(value: DeleteProjectColumnInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "columnId" -> implicitly[ArgEncoder[String]].encode(value.columnId)))
  }
}
final case class DeleteProjectInput(clientMutationId : scala.Option[String] = None, projectId : String)
object DeleteProjectInput {
  implicit val encoder: ArgEncoder[DeleteProjectInput] = new ArgEncoder[DeleteProjectInput] {
    override def encode(value: DeleteProjectInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class DeleteProjectV2FieldInput(clientMutationId : scala.Option[String] = None, fieldId : String)
object DeleteProjectV2FieldInput {
  implicit val encoder: ArgEncoder[DeleteProjectV2FieldInput] = new ArgEncoder[DeleteProjectV2FieldInput] {
    override def encode(value: DeleteProjectV2FieldInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "fieldId" -> implicitly[ArgEncoder[String]].encode(value.fieldId)))
  }
}
final case class DeleteProjectV2Input(clientMutationId : scala.Option[String] = None, projectId : String)
object DeleteProjectV2Input {
  implicit val encoder: ArgEncoder[DeleteProjectV2Input] = new ArgEncoder[DeleteProjectV2Input] {
    override def encode(value: DeleteProjectV2Input): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class DeleteProjectV2ItemInput(clientMutationId : scala.Option[String] = None, itemId : String, projectId : String)
object DeleteProjectV2ItemInput {
  implicit val encoder: ArgEncoder[DeleteProjectV2ItemInput] = new ArgEncoder[DeleteProjectV2ItemInput] {
    override def encode(value: DeleteProjectV2ItemInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "itemId" -> implicitly[ArgEncoder[String]].encode(value.itemId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class DeleteProjectV2WorkflowInput(clientMutationId : scala.Option[String] = None, workflowId : String)
object DeleteProjectV2WorkflowInput {
  implicit val encoder: ArgEncoder[DeleteProjectV2WorkflowInput] = new ArgEncoder[DeleteProjectV2WorkflowInput] {
    override def encode(value: DeleteProjectV2WorkflowInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "workflowId" -> implicitly[ArgEncoder[String]].encode(value.workflowId)))
  }
}
final case class DeletePullRequestReviewCommentInput(clientMutationId : scala.Option[String] = None, id : String)
object DeletePullRequestReviewCommentInput {
  implicit val encoder: ArgEncoder[DeletePullRequestReviewCommentInput] = new ArgEncoder[DeletePullRequestReviewCommentInput] {
    override def encode(value: DeletePullRequestReviewCommentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeletePullRequestReviewInput(clientMutationId : scala.Option[String] = None, pullRequestReviewId : String)
object DeletePullRequestReviewInput {
  implicit val encoder: ArgEncoder[DeletePullRequestReviewInput] = new ArgEncoder[DeletePullRequestReviewInput] {
    override def encode(value: DeletePullRequestReviewInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestReviewId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestReviewId)))
  }
}
final case class DeleteRefInput(clientMutationId : scala.Option[String] = None, refId : String)
object DeleteRefInput {
  implicit val encoder: ArgEncoder[DeleteRefInput] = new ArgEncoder[DeleteRefInput] {
    override def encode(value: DeleteRefInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "refId" -> implicitly[ArgEncoder[String]].encode(value.refId)))
  }
}
final case class DeleteRepositoryRulesetInput(clientMutationId : scala.Option[String] = None, repositoryRulesetId : String)
object DeleteRepositoryRulesetInput {
  implicit val encoder: ArgEncoder[DeleteRepositoryRulesetInput] = new ArgEncoder[DeleteRepositoryRulesetInput] {
    override def encode(value: DeleteRepositoryRulesetInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryRulesetId" -> implicitly[ArgEncoder[String]].encode(value.repositoryRulesetId)))
  }
}
final case class DeleteTeamDiscussionCommentInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteTeamDiscussionCommentInput {
  implicit val encoder: ArgEncoder[DeleteTeamDiscussionCommentInput] = new ArgEncoder[DeleteTeamDiscussionCommentInput] {
    override def encode(value: DeleteTeamDiscussionCommentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteTeamDiscussionInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteTeamDiscussionInput {
  implicit val encoder: ArgEncoder[DeleteTeamDiscussionInput] = new ArgEncoder[DeleteTeamDiscussionInput] {
    override def encode(value: DeleteTeamDiscussionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeleteVerifiableDomainInput(clientMutationId : scala.Option[String] = None, id : String)
object DeleteVerifiableDomainInput {
  implicit val encoder: ArgEncoder[DeleteVerifiableDomainInput] = new ArgEncoder[DeleteVerifiableDomainInput] {
    override def encode(value: DeleteVerifiableDomainInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DeploymentOrder(direction : OrderDirection, field : DeploymentOrderField)
object DeploymentOrder {
  implicit val encoder: ArgEncoder[DeploymentOrder] = new ArgEncoder[DeploymentOrder] {
    override def encode(value: DeploymentOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[DeploymentOrderField]].encode(value.field)))
  }
}
final case class DequeuePullRequestInput(clientMutationId : scala.Option[String] = None, id : String)
object DequeuePullRequestInput {
  implicit val encoder: ArgEncoder[DequeuePullRequestInput] = new ArgEncoder[DequeuePullRequestInput] {
    override def encode(value: DequeuePullRequestInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class DisablePullRequestAutoMergeInput(clientMutationId : scala.Option[String] = None, pullRequestId : String)
object DisablePullRequestAutoMergeInput {
  implicit val encoder: ArgEncoder[DisablePullRequestAutoMergeInput] = new ArgEncoder[DisablePullRequestAutoMergeInput] {
    override def encode(value: DisablePullRequestAutoMergeInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class DiscussionOrder(direction : OrderDirection, field : DiscussionOrderField)
object DiscussionOrder {
  implicit val encoder: ArgEncoder[DiscussionOrder] = new ArgEncoder[DiscussionOrder] {
    override def encode(value: DiscussionOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[DiscussionOrderField]].encode(value.field)))
  }
}
final case class DiscussionPollOptionOrder(direction : OrderDirection, field : DiscussionPollOptionOrderField)
object DiscussionPollOptionOrder {
  implicit val encoder: ArgEncoder[DiscussionPollOptionOrder] = new ArgEncoder[DiscussionPollOptionOrder] {
    override def encode(value: DiscussionPollOptionOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[DiscussionPollOptionOrderField]].encode(value.field)))
  }
}
final case class DismissPullRequestReviewInput(clientMutationId : scala.Option[String] = None, message : String, pullRequestReviewId : String)
object DismissPullRequestReviewInput {
  implicit val encoder: ArgEncoder[DismissPullRequestReviewInput] = new ArgEncoder[DismissPullRequestReviewInput] {
    override def encode(value: DismissPullRequestReviewInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "message" -> implicitly[ArgEncoder[String]].encode(value.message), "pullRequestReviewId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestReviewId)))
  }
}
final case class DismissRepositoryVulnerabilityAlertInput(clientMutationId : scala.Option[String] = None, dismissReason : DismissReason, repositoryVulnerabilityAlertId : String)
object DismissRepositoryVulnerabilityAlertInput {
  implicit val encoder: ArgEncoder[DismissRepositoryVulnerabilityAlertInput] = new ArgEncoder[DismissRepositoryVulnerabilityAlertInput] {
    override def encode(value: DismissRepositoryVulnerabilityAlertInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "dismissReason" -> implicitly[ArgEncoder[DismissReason]].encode(value.dismissReason), "repositoryVulnerabilityAlertId" -> implicitly[ArgEncoder[String]].encode(value.repositoryVulnerabilityAlertId)))
  }
}
final case class DraftPullRequestReviewComment(body : String, path : String, position : Int)
object DraftPullRequestReviewComment {
  implicit val encoder: ArgEncoder[DraftPullRequestReviewComment] = new ArgEncoder[DraftPullRequestReviewComment] {
    override def encode(value: DraftPullRequestReviewComment): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "path" -> implicitly[ArgEncoder[String]].encode(value.path), "position" -> implicitly[ArgEncoder[Int]].encode(value.position)))
  }
}
final case class DraftPullRequestReviewThread(body : String, line : Int, path : String, side : scala.Option[DiffSide] = None, startLine : scala.Option[Int] = None, startSide : scala.Option[DiffSide] = None)
object DraftPullRequestReviewThread {
  implicit val encoder: ArgEncoder[DraftPullRequestReviewThread] = new ArgEncoder[DraftPullRequestReviewThread] {
    override def encode(value: DraftPullRequestReviewThread): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "line" -> implicitly[ArgEncoder[Int]].encode(value.line), "path" -> implicitly[ArgEncoder[String]].encode(value.path), "side" -> value.side.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DiffSide]].encode(value)), "startLine" -> value.startLine.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "startSide" -> value.startSide.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DiffSide]].encode(value))))
  }
}
final case class EnablePullRequestAutoMergeInput(authorEmail : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, commitBody : scala.Option[String] = None, commitHeadline : scala.Option[String] = None, expectedHeadOid : scala.Option[GitObjectID] = None, mergeMethod : scala.Option[PullRequestMergeMethod] = None, pullRequestId : String)
object EnablePullRequestAutoMergeInput {
  implicit val encoder: ArgEncoder[EnablePullRequestAutoMergeInput] = new ArgEncoder[EnablePullRequestAutoMergeInput] {
    override def encode(value: EnablePullRequestAutoMergeInput): __Value =
      __ObjectValue(List("authorEmail" -> value.authorEmail.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commitBody" -> value.commitBody.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commitHeadline" -> value.commitHeadline.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expectedHeadOid" -> value.expectedHeadOid.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "mergeMethod" -> value.mergeMethod.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PullRequestMergeMethod]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class EnqueuePullRequestInput(clientMutationId : scala.Option[String] = None, expectedHeadOid : scala.Option[GitObjectID] = None, jump : scala.Option[Boolean] = None, pullRequestId : String)
object EnqueuePullRequestInput {
  implicit val encoder: ArgEncoder[EnqueuePullRequestInput] = new ArgEncoder[EnqueuePullRequestInput] {
    override def encode(value: EnqueuePullRequestInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expectedHeadOid" -> value.expectedHeadOid.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "jump" -> value.jump.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class EnterpriseAdministratorInvitationOrder(direction : OrderDirection, field : EnterpriseAdministratorInvitationOrderField)
object EnterpriseAdministratorInvitationOrder {
  implicit val encoder: ArgEncoder[EnterpriseAdministratorInvitationOrder] = new ArgEncoder[EnterpriseAdministratorInvitationOrder] {
    override def encode(value: EnterpriseAdministratorInvitationOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[EnterpriseAdministratorInvitationOrderField]].encode(value.field)))
  }
}
final case class EnterpriseMemberOrder(direction : OrderDirection, field : EnterpriseMemberOrderField)
object EnterpriseMemberOrder {
  implicit val encoder: ArgEncoder[EnterpriseMemberOrder] = new ArgEncoder[EnterpriseMemberOrder] {
    override def encode(value: EnterpriseMemberOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[EnterpriseMemberOrderField]].encode(value.field)))
  }
}
final case class EnterpriseServerInstallationOrder(direction : OrderDirection, field : EnterpriseServerInstallationOrderField)
object EnterpriseServerInstallationOrder {
  implicit val encoder: ArgEncoder[EnterpriseServerInstallationOrder] = new ArgEncoder[EnterpriseServerInstallationOrder] {
    override def encode(value: EnterpriseServerInstallationOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[EnterpriseServerInstallationOrderField]].encode(value.field)))
  }
}
final case class EnterpriseServerUserAccountEmailOrder(direction : OrderDirection, field : EnterpriseServerUserAccountEmailOrderField)
object EnterpriseServerUserAccountEmailOrder {
  implicit val encoder: ArgEncoder[EnterpriseServerUserAccountEmailOrder] = new ArgEncoder[EnterpriseServerUserAccountEmailOrder] {
    override def encode(value: EnterpriseServerUserAccountEmailOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[EnterpriseServerUserAccountEmailOrderField]].encode(value.field)))
  }
}
final case class EnterpriseServerUserAccountOrder(direction : OrderDirection, field : EnterpriseServerUserAccountOrderField)
object EnterpriseServerUserAccountOrder {
  implicit val encoder: ArgEncoder[EnterpriseServerUserAccountOrder] = new ArgEncoder[EnterpriseServerUserAccountOrder] {
    override def encode(value: EnterpriseServerUserAccountOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[EnterpriseServerUserAccountOrderField]].encode(value.field)))
  }
}
final case class EnterpriseServerUserAccountsUploadOrder(direction : OrderDirection, field : EnterpriseServerUserAccountsUploadOrderField)
object EnterpriseServerUserAccountsUploadOrder {
  implicit val encoder: ArgEncoder[EnterpriseServerUserAccountsUploadOrder] = new ArgEncoder[EnterpriseServerUserAccountsUploadOrder] {
    override def encode(value: EnterpriseServerUserAccountsUploadOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[EnterpriseServerUserAccountsUploadOrderField]].encode(value.field)))
  }
}
final case class FileAddition(contents : Base64String, path : String)
object FileAddition {
  implicit val encoder: ArgEncoder[FileAddition] = new ArgEncoder[FileAddition] {
    override def encode(value: FileAddition): __Value =
      __ObjectValue(List("contents" -> implicitly[ArgEncoder[Base64String]].encode(value.contents), "path" -> implicitly[ArgEncoder[String]].encode(value.path)))
  }
}
final case class FileChanges(additions : scala.Option[List[FileAddition]] = None, deletions : scala.Option[List[FileDeletion]] = None)
object FileChanges {
  implicit val encoder: ArgEncoder[FileChanges] = new ArgEncoder[FileChanges] {
    override def encode(value: FileChanges): __Value =
      __ObjectValue(List("additions" -> value.additions.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[FileAddition]].encode(value)))), "deletions" -> value.deletions.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[FileDeletion]].encode(value))))))
  }
}
final case class FileDeletion(path : String)
object FileDeletion {
  implicit val encoder: ArgEncoder[FileDeletion] = new ArgEncoder[FileDeletion] {
    override def encode(value: FileDeletion): __Value =
      __ObjectValue(List("path" -> implicitly[ArgEncoder[String]].encode(value.path)))
  }
}
final case class FollowOrganizationInput(clientMutationId : scala.Option[String] = None, organizationId : String)
object FollowOrganizationInput {
  implicit val encoder: ArgEncoder[FollowOrganizationInput] = new ArgEncoder[FollowOrganizationInput] {
    override def encode(value: FollowOrganizationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class FollowUserInput(clientMutationId : scala.Option[String] = None, userId : String)
object FollowUserInput {
  implicit val encoder: ArgEncoder[FollowUserInput] = new ArgEncoder[FollowUserInput] {
    override def encode(value: FollowUserInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)))
  }
}
final case class GistOrder(direction : OrderDirection, field : GistOrderField)
object GistOrder {
  implicit val encoder: ArgEncoder[GistOrder] = new ArgEncoder[GistOrder] {
    override def encode(value: GistOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[GistOrderField]].encode(value.field)))
  }
}
final case class GrantEnterpriseOrganizationsMigratorRoleInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String)
object GrantEnterpriseOrganizationsMigratorRoleInput {
  implicit val encoder: ArgEncoder[GrantEnterpriseOrganizationsMigratorRoleInput] = new ArgEncoder[GrantEnterpriseOrganizationsMigratorRoleInput] {
    override def encode(value: GrantEnterpriseOrganizationsMigratorRoleInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login)))
  }
}
final case class GrantMigratorRoleInput(actor : String, actorType : ActorType, clientMutationId : scala.Option[String] = None, organizationId : String)
object GrantMigratorRoleInput {
  implicit val encoder: ArgEncoder[GrantMigratorRoleInput] = new ArgEncoder[GrantMigratorRoleInput] {
    override def encode(value: GrantMigratorRoleInput): __Value =
      __ObjectValue(List("actor" -> implicitly[ArgEncoder[String]].encode(value.actor), "actorType" -> implicitly[ArgEncoder[ActorType]].encode(value.actorType), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class ImportProjectInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, columnImports : List[ProjectColumnImport] = Nil, name : String, ownerName : String, public : scala.Option[Boolean] = None)
object ImportProjectInput {
  implicit val encoder: ArgEncoder[ImportProjectInput] = new ArgEncoder[ImportProjectInput] {
    override def encode(value: ImportProjectInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "columnImports" -> __ListValue(value.columnImports.map(value => implicitly[ArgEncoder[ProjectColumnImport]].encode(value))), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "ownerName" -> implicitly[ArgEncoder[String]].encode(value.ownerName), "public" -> value.public.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value))))
  }
}
final case class InviteEnterpriseAdminInput(clientMutationId : scala.Option[String] = None, email : scala.Option[String] = None, enterpriseId : String, invitee : scala.Option[String] = None, role : scala.Option[EnterpriseAdministratorRole] = None)
object InviteEnterpriseAdminInput {
  implicit val encoder: ArgEncoder[InviteEnterpriseAdminInput] = new ArgEncoder[InviteEnterpriseAdminInput] {
    override def encode(value: InviteEnterpriseAdminInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "email" -> value.email.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "invitee" -> value.invitee.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "role" -> value.role.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EnterpriseAdministratorRole]].encode(value))))
  }
}
final case class IpAllowListEntryOrder(direction : OrderDirection, field : IpAllowListEntryOrderField)
object IpAllowListEntryOrder {
  implicit val encoder: ArgEncoder[IpAllowListEntryOrder] = new ArgEncoder[IpAllowListEntryOrder] {
    override def encode(value: IpAllowListEntryOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[IpAllowListEntryOrderField]].encode(value.field)))
  }
}
final case class IssueCommentOrder(direction : OrderDirection, field : IssueCommentOrderField)
object IssueCommentOrder {
  implicit val encoder: ArgEncoder[IssueCommentOrder] = new ArgEncoder[IssueCommentOrder] {
    override def encode(value: IssueCommentOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[IssueCommentOrderField]].encode(value.field)))
  }
}
final case class IssueFilters(assignee : scala.Option[String] = None, createdBy : scala.Option[String] = None, labels : scala.Option[List[String]] = None, mentioned : scala.Option[String] = None, milestone : scala.Option[String] = None, milestoneNumber : scala.Option[String] = None, since : scala.Option[DateTime] = None, states : scala.Option[List[IssueState]] = None, viewerSubscribed : scala.Option[Boolean] = None)
object IssueFilters {
  implicit val encoder: ArgEncoder[IssueFilters] = new ArgEncoder[IssueFilters] {
    override def encode(value: IssueFilters): __Value =
      __ObjectValue(List("assignee" -> value.assignee.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "createdBy" -> value.createdBy.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "labels" -> value.labels.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "mentioned" -> value.mentioned.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "milestone" -> value.milestone.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "milestoneNumber" -> value.milestoneNumber.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "since" -> value.since.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DateTime]].encode(value)), "states" -> value.states.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[IssueState]].encode(value)))), "viewerSubscribed" -> value.viewerSubscribed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value))))
  }
}
final case class IssueOrder(direction : OrderDirection, field : IssueOrderField)
object IssueOrder {
  implicit val encoder: ArgEncoder[IssueOrder] = new ArgEncoder[IssueOrder] {
    override def encode(value: IssueOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[IssueOrderField]].encode(value.field)))
  }
}
final case class LabelOrder(direction : OrderDirection, field : LabelOrderField)
object LabelOrder {
  implicit val encoder: ArgEncoder[LabelOrder] = new ArgEncoder[LabelOrder] {
    override def encode(value: LabelOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[LabelOrderField]].encode(value.field)))
  }
}
final case class LanguageOrder(direction : OrderDirection, field : LanguageOrderField)
object LanguageOrder {
  implicit val encoder: ArgEncoder[LanguageOrder] = new ArgEncoder[LanguageOrder] {
    override def encode(value: LanguageOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[LanguageOrderField]].encode(value.field)))
  }
}
final case class LinkProjectV2ToRepositoryInput(clientMutationId : scala.Option[String] = None, projectId : String, repositoryId : String)
object LinkProjectV2ToRepositoryInput {
  implicit val encoder: ArgEncoder[LinkProjectV2ToRepositoryInput] = new ArgEncoder[LinkProjectV2ToRepositoryInput] {
    override def encode(value: LinkProjectV2ToRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class LinkProjectV2ToTeamInput(clientMutationId : scala.Option[String] = None, projectId : String, teamId : String)
object LinkProjectV2ToTeamInput {
  implicit val encoder: ArgEncoder[LinkProjectV2ToTeamInput] = new ArgEncoder[LinkProjectV2ToTeamInput] {
    override def encode(value: LinkProjectV2ToTeamInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "teamId" -> implicitly[ArgEncoder[String]].encode(value.teamId)))
  }
}
final case class LinkRepositoryToProjectInput(clientMutationId : scala.Option[String] = None, projectId : String, repositoryId : String)
object LinkRepositoryToProjectInput {
  implicit val encoder: ArgEncoder[LinkRepositoryToProjectInput] = new ArgEncoder[LinkRepositoryToProjectInput] {
    override def encode(value: LinkRepositoryToProjectInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class LockLockableInput(clientMutationId : scala.Option[String] = None, lockReason : scala.Option[LockReason] = None, lockableId : String)
object LockLockableInput {
  implicit val encoder: ArgEncoder[LockLockableInput] = new ArgEncoder[LockLockableInput] {
    override def encode(value: LockLockableInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "lockReason" -> value.lockReason.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[LockReason]].encode(value)), "lockableId" -> implicitly[ArgEncoder[String]].encode(value.lockableId)))
  }
}
final case class MannequinOrder(direction : OrderDirection, field : MannequinOrderField)
object MannequinOrder {
  implicit val encoder: ArgEncoder[MannequinOrder] = new ArgEncoder[MannequinOrder] {
    override def encode(value: MannequinOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[MannequinOrderField]].encode(value.field)))
  }
}
final case class MarkDiscussionCommentAsAnswerInput(clientMutationId : scala.Option[String] = None, id : String)
object MarkDiscussionCommentAsAnswerInput {
  implicit val encoder: ArgEncoder[MarkDiscussionCommentAsAnswerInput] = new ArgEncoder[MarkDiscussionCommentAsAnswerInput] {
    override def encode(value: MarkDiscussionCommentAsAnswerInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class MarkFileAsViewedInput(clientMutationId : scala.Option[String] = None, path : String, pullRequestId : String)
object MarkFileAsViewedInput {
  implicit val encoder: ArgEncoder[MarkFileAsViewedInput] = new ArgEncoder[MarkFileAsViewedInput] {
    override def encode(value: MarkFileAsViewedInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "path" -> implicitly[ArgEncoder[String]].encode(value.path), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class MarkProjectV2AsTemplateInput(clientMutationId : scala.Option[String] = None, projectId : String)
object MarkProjectV2AsTemplateInput {
  implicit val encoder: ArgEncoder[MarkProjectV2AsTemplateInput] = new ArgEncoder[MarkProjectV2AsTemplateInput] {
    override def encode(value: MarkProjectV2AsTemplateInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class MarkPullRequestReadyForReviewInput(clientMutationId : scala.Option[String] = None, pullRequestId : String)
object MarkPullRequestReadyForReviewInput {
  implicit val encoder: ArgEncoder[MarkPullRequestReadyForReviewInput] = new ArgEncoder[MarkPullRequestReadyForReviewInput] {
    override def encode(value: MarkPullRequestReadyForReviewInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class MergeBranchInput(authorEmail : scala.Option[String] = None, base : String, clientMutationId : scala.Option[String] = None, commitMessage : scala.Option[String] = None, head : String, repositoryId : String)
object MergeBranchInput {
  implicit val encoder: ArgEncoder[MergeBranchInput] = new ArgEncoder[MergeBranchInput] {
    override def encode(value: MergeBranchInput): __Value =
      __ObjectValue(List("authorEmail" -> value.authorEmail.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "base" -> implicitly[ArgEncoder[String]].encode(value.base), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commitMessage" -> value.commitMessage.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "head" -> implicitly[ArgEncoder[String]].encode(value.head), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class MergePullRequestInput(authorEmail : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, commitBody : scala.Option[String] = None, commitHeadline : scala.Option[String] = None, expectedHeadOid : scala.Option[GitObjectID] = None, mergeMethod : scala.Option[PullRequestMergeMethod] = None, pullRequestId : String)
object MergePullRequestInput {
  implicit val encoder: ArgEncoder[MergePullRequestInput] = new ArgEncoder[MergePullRequestInput] {
    override def encode(value: MergePullRequestInput): __Value =
      __ObjectValue(List("authorEmail" -> value.authorEmail.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commitBody" -> value.commitBody.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commitHeadline" -> value.commitHeadline.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expectedHeadOid" -> value.expectedHeadOid.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "mergeMethod" -> value.mergeMethod.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PullRequestMergeMethod]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class MilestoneOrder(direction : OrderDirection, field : MilestoneOrderField)
object MilestoneOrder {
  implicit val encoder: ArgEncoder[MilestoneOrder] = new ArgEncoder[MilestoneOrder] {
    override def encode(value: MilestoneOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[MilestoneOrderField]].encode(value.field)))
  }
}
final case class MinimizeCommentInput(classifier : ReportedContentClassifiers, clientMutationId : scala.Option[String] = None, subjectId : String)
object MinimizeCommentInput {
  implicit val encoder: ArgEncoder[MinimizeCommentInput] = new ArgEncoder[MinimizeCommentInput] {
    override def encode(value: MinimizeCommentInput): __Value =
      __ObjectValue(List("classifier" -> implicitly[ArgEncoder[ReportedContentClassifiers]].encode(value.classifier), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class MoveProjectCardInput(afterCardId : scala.Option[String] = None, cardId : String, clientMutationId : scala.Option[String] = None, columnId : String)
object MoveProjectCardInput {
  implicit val encoder: ArgEncoder[MoveProjectCardInput] = new ArgEncoder[MoveProjectCardInput] {
    override def encode(value: MoveProjectCardInput): __Value =
      __ObjectValue(List("afterCardId" -> value.afterCardId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "cardId" -> implicitly[ArgEncoder[String]].encode(value.cardId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "columnId" -> implicitly[ArgEncoder[String]].encode(value.columnId)))
  }
}
final case class MoveProjectColumnInput(afterColumnId : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, columnId : String)
object MoveProjectColumnInput {
  implicit val encoder: ArgEncoder[MoveProjectColumnInput] = new ArgEncoder[MoveProjectColumnInput] {
    override def encode(value: MoveProjectColumnInput): __Value =
      __ObjectValue(List("afterColumnId" -> value.afterColumnId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "columnId" -> implicitly[ArgEncoder[String]].encode(value.columnId)))
  }
}
final case class OrgEnterpriseOwnerOrder(direction : OrderDirection, field : OrgEnterpriseOwnerOrderField)
object OrgEnterpriseOwnerOrder {
  implicit val encoder: ArgEncoder[OrgEnterpriseOwnerOrder] = new ArgEncoder[OrgEnterpriseOwnerOrder] {
    override def encode(value: OrgEnterpriseOwnerOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[OrgEnterpriseOwnerOrderField]].encode(value.field)))
  }
}
final case class OrganizationOrder(direction : OrderDirection, field : OrganizationOrderField)
object OrganizationOrder {
  implicit val encoder: ArgEncoder[OrganizationOrder] = new ArgEncoder[OrganizationOrder] {
    override def encode(value: OrganizationOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[OrganizationOrderField]].encode(value.field)))
  }
}
final case class PackageFileOrder(direction : scala.Option[OrderDirection] = None, field : scala.Option[PackageFileOrderField] = None)
object PackageFileOrder {
  implicit val encoder: ArgEncoder[PackageFileOrder] = new ArgEncoder[PackageFileOrder] {
    override def encode(value: PackageFileOrder): __Value =
      __ObjectValue(List("direction" -> value.direction.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OrderDirection]].encode(value)), "field" -> value.field.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PackageFileOrderField]].encode(value))))
  }
}
final case class PackageOrder(direction : scala.Option[OrderDirection] = None, field : scala.Option[PackageOrderField] = None)
object PackageOrder {
  implicit val encoder: ArgEncoder[PackageOrder] = new ArgEncoder[PackageOrder] {
    override def encode(value: PackageOrder): __Value =
      __ObjectValue(List("direction" -> value.direction.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OrderDirection]].encode(value)), "field" -> value.field.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PackageOrderField]].encode(value))))
  }
}
final case class PackageVersionOrder(direction : scala.Option[OrderDirection] = None, field : scala.Option[PackageVersionOrderField] = None)
object PackageVersionOrder {
  implicit val encoder: ArgEncoder[PackageVersionOrder] = new ArgEncoder[PackageVersionOrder] {
    override def encode(value: PackageVersionOrder): __Value =
      __ObjectValue(List("direction" -> value.direction.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[OrderDirection]].encode(value)), "field" -> value.field.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PackageVersionOrderField]].encode(value))))
  }
}
final case class PinIssueInput(clientMutationId : scala.Option[String] = None, issueId : String)
object PinIssueInput {
  implicit val encoder: ArgEncoder[PinIssueInput] = new ArgEncoder[PinIssueInput] {
    override def encode(value: PinIssueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)))
  }
}
final case class ProjectCardImport(number : Int, repository : String)
object ProjectCardImport {
  implicit val encoder: ArgEncoder[ProjectCardImport] = new ArgEncoder[ProjectCardImport] {
    override def encode(value: ProjectCardImport): __Value =
      __ObjectValue(List("number" -> implicitly[ArgEncoder[Int]].encode(value.number), "repository" -> implicitly[ArgEncoder[String]].encode(value.repository)))
  }
}
final case class ProjectColumnImport(columnName : String, issues : scala.Option[List[ProjectCardImport]] = None, position : Int)
object ProjectColumnImport {
  implicit val encoder: ArgEncoder[ProjectColumnImport] = new ArgEncoder[ProjectColumnImport] {
    override def encode(value: ProjectColumnImport): __Value =
      __ObjectValue(List("columnName" -> implicitly[ArgEncoder[String]].encode(value.columnName), "issues" -> value.issues.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[ProjectCardImport]].encode(value)))), "position" -> implicitly[ArgEncoder[Int]].encode(value.position)))
  }
}
final case class ProjectOrder(direction : OrderDirection, field : ProjectOrderField)
object ProjectOrder {
  implicit val encoder: ArgEncoder[ProjectOrder] = new ArgEncoder[ProjectOrder] {
    override def encode(value: ProjectOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectOrderField]].encode(value.field)))
  }
}
final case class ProjectV2FieldOrder(direction : OrderDirection, field : ProjectV2FieldOrderField)
object ProjectV2FieldOrder {
  implicit val encoder: ArgEncoder[ProjectV2FieldOrder] = new ArgEncoder[ProjectV2FieldOrder] {
    override def encode(value: ProjectV2FieldOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectV2FieldOrderField]].encode(value.field)))
  }
}
final case class ProjectV2FieldValue(date : scala.Option[Date] = None, iterationId : scala.Option[String] = None, number : scala.Option[Double] = None, singleSelectOptionId : scala.Option[String] = None, text : scala.Option[String] = None)
object ProjectV2FieldValue {
  implicit val encoder: ArgEncoder[ProjectV2FieldValue] = new ArgEncoder[ProjectV2FieldValue] {
    override def encode(value: ProjectV2FieldValue): __Value =
      __ObjectValue(List("date" -> value.date.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Date]].encode(value)), "iterationId" -> value.iterationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "number" -> value.number.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Double]].encode(value)), "singleSelectOptionId" -> value.singleSelectOptionId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "text" -> value.text.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class ProjectV2Filters(state : scala.Option[ProjectV2State] = None)
object ProjectV2Filters {
  implicit val encoder: ArgEncoder[ProjectV2Filters] = new ArgEncoder[ProjectV2Filters] {
    override def encode(value: ProjectV2Filters): __Value =
      __ObjectValue(List("state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ProjectV2State]].encode(value))))
  }
}
final case class ProjectV2ItemFieldValueOrder(direction : OrderDirection, field : ProjectV2ItemFieldValueOrderField)
object ProjectV2ItemFieldValueOrder {
  implicit val encoder: ArgEncoder[ProjectV2ItemFieldValueOrder] = new ArgEncoder[ProjectV2ItemFieldValueOrder] {
    override def encode(value: ProjectV2ItemFieldValueOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectV2ItemFieldValueOrderField]].encode(value.field)))
  }
}
final case class ProjectV2ItemOrder(direction : OrderDirection, field : ProjectV2ItemOrderField)
object ProjectV2ItemOrder {
  implicit val encoder: ArgEncoder[ProjectV2ItemOrder] = new ArgEncoder[ProjectV2ItemOrder] {
    override def encode(value: ProjectV2ItemOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectV2ItemOrderField]].encode(value.field)))
  }
}
final case class ProjectV2Order(direction : OrderDirection, field : ProjectV2OrderField)
object ProjectV2Order {
  implicit val encoder: ArgEncoder[ProjectV2Order] = new ArgEncoder[ProjectV2Order] {
    override def encode(value: ProjectV2Order): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectV2OrderField]].encode(value.field)))
  }
}
final case class ProjectV2SingleSelectFieldOptionInput(color : ProjectV2SingleSelectFieldOptionColor, description : String, name : String)
object ProjectV2SingleSelectFieldOptionInput {
  implicit val encoder: ArgEncoder[ProjectV2SingleSelectFieldOptionInput] = new ArgEncoder[ProjectV2SingleSelectFieldOptionInput] {
    override def encode(value: ProjectV2SingleSelectFieldOptionInput): __Value =
      __ObjectValue(List("color" -> implicitly[ArgEncoder[ProjectV2SingleSelectFieldOptionColor]].encode(value.color), "description" -> implicitly[ArgEncoder[String]].encode(value.description), "name" -> implicitly[ArgEncoder[String]].encode(value.name)))
  }
}
final case class ProjectV2ViewOrder(direction : OrderDirection, field : ProjectV2ViewOrderField)
object ProjectV2ViewOrder {
  implicit val encoder: ArgEncoder[ProjectV2ViewOrder] = new ArgEncoder[ProjectV2ViewOrder] {
    override def encode(value: ProjectV2ViewOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectV2ViewOrderField]].encode(value.field)))
  }
}
final case class ProjectV2WorkflowOrder(direction : OrderDirection, field : ProjectV2WorkflowsOrderField)
object ProjectV2WorkflowOrder {
  implicit val encoder: ArgEncoder[ProjectV2WorkflowOrder] = new ArgEncoder[ProjectV2WorkflowOrder] {
    override def encode(value: ProjectV2WorkflowOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ProjectV2WorkflowsOrderField]].encode(value.field)))
  }
}
final case class PublishSponsorsTierInput(clientMutationId : scala.Option[String] = None, tierId : String)
object PublishSponsorsTierInput {
  implicit val encoder: ArgEncoder[PublishSponsorsTierInput] = new ArgEncoder[PublishSponsorsTierInput] {
    override def encode(value: PublishSponsorsTierInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "tierId" -> implicitly[ArgEncoder[String]].encode(value.tierId)))
  }
}
final case class PullRequestOrder(direction : OrderDirection, field : PullRequestOrderField)
object PullRequestOrder {
  implicit val encoder: ArgEncoder[PullRequestOrder] = new ArgEncoder[PullRequestOrder] {
    override def encode(value: PullRequestOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[PullRequestOrderField]].encode(value.field)))
  }
}
final case class PullRequestParametersInput(dismissStaleReviewsOnPush : Boolean, requireCodeOwnerReview : Boolean, requireLastPushApproval : Boolean, requiredApprovingReviewCount : Int, requiredReviewThreadResolution : Boolean)
object PullRequestParametersInput {
  implicit val encoder: ArgEncoder[PullRequestParametersInput] = new ArgEncoder[PullRequestParametersInput] {
    override def encode(value: PullRequestParametersInput): __Value =
      __ObjectValue(List("dismissStaleReviewsOnPush" -> implicitly[ArgEncoder[Boolean]].encode(value.dismissStaleReviewsOnPush), "requireCodeOwnerReview" -> implicitly[ArgEncoder[Boolean]].encode(value.requireCodeOwnerReview), "requireLastPushApproval" -> implicitly[ArgEncoder[Boolean]].encode(value.requireLastPushApproval), "requiredApprovingReviewCount" -> implicitly[ArgEncoder[Int]].encode(value.requiredApprovingReviewCount), "requiredReviewThreadResolution" -> implicitly[ArgEncoder[Boolean]].encode(value.requiredReviewThreadResolution)))
  }
}
final case class ReactionOrder(direction : OrderDirection, field : ReactionOrderField)
object ReactionOrder {
  implicit val encoder: ArgEncoder[ReactionOrder] = new ArgEncoder[ReactionOrder] {
    override def encode(value: ReactionOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ReactionOrderField]].encode(value.field)))
  }
}
final case class RefNameConditionTargetInput(exclude : List[String] = Nil, include : List[String] = Nil)
object RefNameConditionTargetInput {
  implicit val encoder: ArgEncoder[RefNameConditionTargetInput] = new ArgEncoder[RefNameConditionTargetInput] {
    override def encode(value: RefNameConditionTargetInput): __Value =
      __ObjectValue(List("exclude" -> __ListValue(value.exclude.map(value => implicitly[ArgEncoder[String]].encode(value))), "include" -> __ListValue(value.include.map(value => implicitly[ArgEncoder[String]].encode(value)))))
  }
}
final case class RefOrder(direction : OrderDirection, field : RefOrderField)
object RefOrder {
  implicit val encoder: ArgEncoder[RefOrder] = new ArgEncoder[RefOrder] {
    override def encode(value: RefOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[RefOrderField]].encode(value.field)))
  }
}
final case class RefUpdate(afterOid : GitObjectID, beforeOid : scala.Option[GitObjectID] = None, force : scala.Option[Boolean] = None, name : GitRefname)
object RefUpdate {
  implicit val encoder: ArgEncoder[RefUpdate] = new ArgEncoder[RefUpdate] {
    override def encode(value: RefUpdate): __Value =
      __ObjectValue(List("afterOid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.afterOid), "beforeOid" -> value.beforeOid.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "force" -> value.force.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "name" -> implicitly[ArgEncoder[GitRefname]].encode(value.name)))
  }
}
final case class RegenerateEnterpriseIdentityProviderRecoveryCodesInput(clientMutationId : scala.Option[String] = None, enterpriseId : String)
object RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
  implicit val encoder: ArgEncoder[RegenerateEnterpriseIdentityProviderRecoveryCodesInput] = new ArgEncoder[RegenerateEnterpriseIdentityProviderRecoveryCodesInput] {
    override def encode(value: RegenerateEnterpriseIdentityProviderRecoveryCodesInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId)))
  }
}
final case class RegenerateVerifiableDomainTokenInput(clientMutationId : scala.Option[String] = None, id : String)
object RegenerateVerifiableDomainTokenInput {
  implicit val encoder: ArgEncoder[RegenerateVerifiableDomainTokenInput] = new ArgEncoder[RegenerateVerifiableDomainTokenInput] {
    override def encode(value: RegenerateVerifiableDomainTokenInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class RejectDeploymentsInput(clientMutationId : scala.Option[String] = None, comment : scala.Option[String] = None, environmentIds : List[String] = Nil, workflowRunId : String)
object RejectDeploymentsInput {
  implicit val encoder: ArgEncoder[RejectDeploymentsInput] = new ArgEncoder[RejectDeploymentsInput] {
    override def encode(value: RejectDeploymentsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "comment" -> value.comment.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "environmentIds" -> __ListValue(value.environmentIds.map(value => implicitly[ArgEncoder[String]].encode(value))), "workflowRunId" -> implicitly[ArgEncoder[String]].encode(value.workflowRunId)))
  }
}
final case class ReleaseOrder(direction : OrderDirection, field : ReleaseOrderField)
object ReleaseOrder {
  implicit val encoder: ArgEncoder[ReleaseOrder] = new ArgEncoder[ReleaseOrder] {
    override def encode(value: ReleaseOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[ReleaseOrderField]].encode(value.field)))
  }
}
final case class RemoveAssigneesFromAssignableInput(assignableId : String, assigneeIds : List[String] = Nil, clientMutationId : scala.Option[String] = None)
object RemoveAssigneesFromAssignableInput {
  implicit val encoder: ArgEncoder[RemoveAssigneesFromAssignableInput] = new ArgEncoder[RemoveAssigneesFromAssignableInput] {
    override def encode(value: RemoveAssigneesFromAssignableInput): __Value =
      __ObjectValue(List("assignableId" -> implicitly[ArgEncoder[String]].encode(value.assignableId), "assigneeIds" -> __ListValue(value.assigneeIds.map(value => implicitly[ArgEncoder[String]].encode(value))), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class RemoveEnterpriseAdminInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String)
object RemoveEnterpriseAdminInput {
  implicit val encoder: ArgEncoder[RemoveEnterpriseAdminInput] = new ArgEncoder[RemoveEnterpriseAdminInput] {
    override def encode(value: RemoveEnterpriseAdminInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login)))
  }
}
final case class RemoveEnterpriseIdentityProviderInput(clientMutationId : scala.Option[String] = None, enterpriseId : String)
object RemoveEnterpriseIdentityProviderInput {
  implicit val encoder: ArgEncoder[RemoveEnterpriseIdentityProviderInput] = new ArgEncoder[RemoveEnterpriseIdentityProviderInput] {
    override def encode(value: RemoveEnterpriseIdentityProviderInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId)))
  }
}
final case class RemoveEnterpriseMemberInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, userId : String)
object RemoveEnterpriseMemberInput {
  implicit val encoder: ArgEncoder[RemoveEnterpriseMemberInput] = new ArgEncoder[RemoveEnterpriseMemberInput] {
    override def encode(value: RemoveEnterpriseMemberInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)))
  }
}
final case class RemoveEnterpriseOrganizationInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, organizationId : String)
object RemoveEnterpriseOrganizationInput {
  implicit val encoder: ArgEncoder[RemoveEnterpriseOrganizationInput] = new ArgEncoder[RemoveEnterpriseOrganizationInput] {
    override def encode(value: RemoveEnterpriseOrganizationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class RemoveEnterpriseSupportEntitlementInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String)
object RemoveEnterpriseSupportEntitlementInput {
  implicit val encoder: ArgEncoder[RemoveEnterpriseSupportEntitlementInput] = new ArgEncoder[RemoveEnterpriseSupportEntitlementInput] {
    override def encode(value: RemoveEnterpriseSupportEntitlementInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login)))
  }
}
final case class RemoveLabelsFromLabelableInput(clientMutationId : scala.Option[String] = None, labelIds : List[String] = Nil, labelableId : String)
object RemoveLabelsFromLabelableInput {
  implicit val encoder: ArgEncoder[RemoveLabelsFromLabelableInput] = new ArgEncoder[RemoveLabelsFromLabelableInput] {
    override def encode(value: RemoveLabelsFromLabelableInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "labelIds" -> __ListValue(value.labelIds.map(value => implicitly[ArgEncoder[String]].encode(value))), "labelableId" -> implicitly[ArgEncoder[String]].encode(value.labelableId)))
  }
}
final case class RemoveOutsideCollaboratorInput(clientMutationId : scala.Option[String] = None, organizationId : String, userId : String)
object RemoveOutsideCollaboratorInput {
  implicit val encoder: ArgEncoder[RemoveOutsideCollaboratorInput] = new ArgEncoder[RemoveOutsideCollaboratorInput] {
    override def encode(value: RemoveOutsideCollaboratorInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId), "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)))
  }
}
final case class RemoveReactionInput(clientMutationId : scala.Option[String] = None, content : ReactionContent, subjectId : String)
object RemoveReactionInput {
  implicit val encoder: ArgEncoder[RemoveReactionInput] = new ArgEncoder[RemoveReactionInput] {
    override def encode(value: RemoveReactionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "content" -> implicitly[ArgEncoder[ReactionContent]].encode(value.content), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class RemoveStarInput(clientMutationId : scala.Option[String] = None, starrableId : String)
object RemoveStarInput {
  implicit val encoder: ArgEncoder[RemoveStarInput] = new ArgEncoder[RemoveStarInput] {
    override def encode(value: RemoveStarInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "starrableId" -> implicitly[ArgEncoder[String]].encode(value.starrableId)))
  }
}
final case class RemoveUpvoteInput(clientMutationId : scala.Option[String] = None, subjectId : String)
object RemoveUpvoteInput {
  implicit val encoder: ArgEncoder[RemoveUpvoteInput] = new ArgEncoder[RemoveUpvoteInput] {
    override def encode(value: RemoveUpvoteInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class ReopenDiscussionInput(clientMutationId : scala.Option[String] = None, discussionId : String)
object ReopenDiscussionInput {
  implicit val encoder: ArgEncoder[ReopenDiscussionInput] = new ArgEncoder[ReopenDiscussionInput] {
    override def encode(value: ReopenDiscussionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "discussionId" -> implicitly[ArgEncoder[String]].encode(value.discussionId)))
  }
}
final case class ReopenIssueInput(clientMutationId : scala.Option[String] = None, issueId : String)
object ReopenIssueInput {
  implicit val encoder: ArgEncoder[ReopenIssueInput] = new ArgEncoder[ReopenIssueInput] {
    override def encode(value: ReopenIssueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)))
  }
}
final case class ReopenPullRequestInput(clientMutationId : scala.Option[String] = None, pullRequestId : String)
object ReopenPullRequestInput {
  implicit val encoder: ArgEncoder[ReopenPullRequestInput] = new ArgEncoder[ReopenPullRequestInput] {
    override def encode(value: ReopenPullRequestInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class RepositoryInvitationOrder(direction : OrderDirection, field : RepositoryInvitationOrderField)
object RepositoryInvitationOrder {
  implicit val encoder: ArgEncoder[RepositoryInvitationOrder] = new ArgEncoder[RepositoryInvitationOrder] {
    override def encode(value: RepositoryInvitationOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[RepositoryInvitationOrderField]].encode(value.field)))
  }
}
final case class RepositoryMigrationOrder(direction : RepositoryMigrationOrderDirection, field : RepositoryMigrationOrderField)
object RepositoryMigrationOrder {
  implicit val encoder: ArgEncoder[RepositoryMigrationOrder] = new ArgEncoder[RepositoryMigrationOrder] {
    override def encode(value: RepositoryMigrationOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[RepositoryMigrationOrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[RepositoryMigrationOrderField]].encode(value.field)))
  }
}
final case class RepositoryNameConditionTargetInput(exclude : List[String] = Nil, include : List[String] = Nil, `protected` : scala.Option[Boolean] = None)
object RepositoryNameConditionTargetInput {
  implicit val encoder: ArgEncoder[RepositoryNameConditionTargetInput] = new ArgEncoder[RepositoryNameConditionTargetInput] {
    override def encode(value: RepositoryNameConditionTargetInput): __Value =
      __ObjectValue(List("exclude" -> __ListValue(value.exclude.map(value => implicitly[ArgEncoder[String]].encode(value))), "include" -> __ListValue(value.include.map(value => implicitly[ArgEncoder[String]].encode(value))), "protected" -> value.`protected`.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value))))
  }
}
final case class RepositoryOrder(direction : OrderDirection, field : RepositoryOrderField)
object RepositoryOrder {
  implicit val encoder: ArgEncoder[RepositoryOrder] = new ArgEncoder[RepositoryOrder] {
    override def encode(value: RepositoryOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[RepositoryOrderField]].encode(value.field)))
  }
}
final case class RepositoryRuleConditionsInput(refName : scala.Option[RefNameConditionTargetInput] = None, repositoryName : scala.Option[RepositoryNameConditionTargetInput] = None)
object RepositoryRuleConditionsInput {
  implicit val encoder: ArgEncoder[RepositoryRuleConditionsInput] = new ArgEncoder[RepositoryRuleConditionsInput] {
    override def encode(value: RepositoryRuleConditionsInput): __Value =
      __ObjectValue(List("refName" -> value.refName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RefNameConditionTargetInput]].encode(value)), "repositoryName" -> value.repositoryName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryNameConditionTargetInput]].encode(value))))
  }
}
final case class RepositoryRuleInput(id : scala.Option[String] = None, parameters : scala.Option[RuleParametersInput] = None, `type` : RepositoryRuleType)
object RepositoryRuleInput {
  implicit val encoder: ArgEncoder[RepositoryRuleInput] = new ArgEncoder[RepositoryRuleInput] {
    override def encode(value: RepositoryRuleInput): __Value =
      __ObjectValue(List("id" -> value.id.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "parameters" -> value.parameters.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RuleParametersInput]].encode(value)), "type" -> implicitly[ArgEncoder[RepositoryRuleType]].encode(value.`type`)))
  }
}
final case class RequestReviewsInput(clientMutationId : scala.Option[String] = None, pullRequestId : String, teamIds : scala.Option[List[String]] = None, union : scala.Option[Boolean] = None, userIds : scala.Option[List[String]] = None)
object RequestReviewsInput {
  implicit val encoder: ArgEncoder[RequestReviewsInput] = new ArgEncoder[RequestReviewsInput] {
    override def encode(value: RequestReviewsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId), "teamIds" -> value.teamIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "union" -> value.union.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "userIds" -> value.userIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value))))))
  }
}
final case class RequiredDeploymentsParametersInput(requiredDeploymentEnvironments : List[String] = Nil)
object RequiredDeploymentsParametersInput {
  implicit val encoder: ArgEncoder[RequiredDeploymentsParametersInput] = new ArgEncoder[RequiredDeploymentsParametersInput] {
    override def encode(value: RequiredDeploymentsParametersInput): __Value =
      __ObjectValue(List("requiredDeploymentEnvironments" -> __ListValue(value.requiredDeploymentEnvironments.map(value => implicitly[ArgEncoder[String]].encode(value)))))
  }
}
final case class RequiredStatusCheckInput(appId : scala.Option[String] = None, context : String)
object RequiredStatusCheckInput {
  implicit val encoder: ArgEncoder[RequiredStatusCheckInput] = new ArgEncoder[RequiredStatusCheckInput] {
    override def encode(value: RequiredStatusCheckInput): __Value =
      __ObjectValue(List("appId" -> value.appId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "context" -> implicitly[ArgEncoder[String]].encode(value.context)))
  }
}
final case class RequiredStatusChecksParametersInput(requiredStatusChecks : List[StatusCheckConfigurationInput] = Nil, strictRequiredStatusChecksPolicy : Boolean)
object RequiredStatusChecksParametersInput {
  implicit val encoder: ArgEncoder[RequiredStatusChecksParametersInput] = new ArgEncoder[RequiredStatusChecksParametersInput] {
    override def encode(value: RequiredStatusChecksParametersInput): __Value =
      __ObjectValue(List("requiredStatusChecks" -> __ListValue(value.requiredStatusChecks.map(value => implicitly[ArgEncoder[StatusCheckConfigurationInput]].encode(value))), "strictRequiredStatusChecksPolicy" -> implicitly[ArgEncoder[Boolean]].encode(value.strictRequiredStatusChecksPolicy)))
  }
}
final case class RerequestCheckSuiteInput(checkSuiteId : String, clientMutationId : scala.Option[String] = None, repositoryId : String)
object RerequestCheckSuiteInput {
  implicit val encoder: ArgEncoder[RerequestCheckSuiteInput] = new ArgEncoder[RerequestCheckSuiteInput] {
    override def encode(value: RerequestCheckSuiteInput): __Value =
      __ObjectValue(List("checkSuiteId" -> implicitly[ArgEncoder[String]].encode(value.checkSuiteId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class ResolveReviewThreadInput(clientMutationId : scala.Option[String] = None, threadId : String)
object ResolveReviewThreadInput {
  implicit val encoder: ArgEncoder[ResolveReviewThreadInput] = new ArgEncoder[ResolveReviewThreadInput] {
    override def encode(value: ResolveReviewThreadInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "threadId" -> implicitly[ArgEncoder[String]].encode(value.threadId)))
  }
}
final case class RetireSponsorsTierInput(clientMutationId : scala.Option[String] = None, tierId : String)
object RetireSponsorsTierInput {
  implicit val encoder: ArgEncoder[RetireSponsorsTierInput] = new ArgEncoder[RetireSponsorsTierInput] {
    override def encode(value: RetireSponsorsTierInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "tierId" -> implicitly[ArgEncoder[String]].encode(value.tierId)))
  }
}
final case class RevertPullRequestInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, draft : scala.Option[Boolean] = None, pullRequestId : String, title : scala.Option[String] = None)
object RevertPullRequestInput {
  implicit val encoder: ArgEncoder[RevertPullRequestInput] = new ArgEncoder[RevertPullRequestInput] {
    override def encode(value: RevertPullRequestInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "draft" -> value.draft.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class RevokeEnterpriseOrganizationsMigratorRoleInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String)
object RevokeEnterpriseOrganizationsMigratorRoleInput {
  implicit val encoder: ArgEncoder[RevokeEnterpriseOrganizationsMigratorRoleInput] = new ArgEncoder[RevokeEnterpriseOrganizationsMigratorRoleInput] {
    override def encode(value: RevokeEnterpriseOrganizationsMigratorRoleInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login)))
  }
}
final case class RevokeMigratorRoleInput(actor : String, actorType : ActorType, clientMutationId : scala.Option[String] = None, organizationId : String)
object RevokeMigratorRoleInput {
  implicit val encoder: ArgEncoder[RevokeMigratorRoleInput] = new ArgEncoder[RevokeMigratorRoleInput] {
    override def encode(value: RevokeMigratorRoleInput): __Value =
      __ObjectValue(List("actor" -> implicitly[ArgEncoder[String]].encode(value.actor), "actorType" -> implicitly[ArgEncoder[ActorType]].encode(value.actorType), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class RuleParametersInput(branchNamePattern : scala.Option[BranchNamePatternParametersInput] = None, commitAuthorEmailPattern : scala.Option[CommitAuthorEmailPatternParametersInput] = None, commitMessagePattern : scala.Option[CommitMessagePatternParametersInput] = None, committerEmailPattern : scala.Option[CommitterEmailPatternParametersInput] = None, pullRequest : scala.Option[PullRequestParametersInput] = None, requiredDeployments : scala.Option[RequiredDeploymentsParametersInput] = None, requiredStatusChecks : scala.Option[RequiredStatusChecksParametersInput] = None, tagNamePattern : scala.Option[TagNamePatternParametersInput] = None, update : scala.Option[UpdateParametersInput] = None)
object RuleParametersInput {
  implicit val encoder: ArgEncoder[RuleParametersInput] = new ArgEncoder[RuleParametersInput] {
    override def encode(value: RuleParametersInput): __Value =
      __ObjectValue(List("branchNamePattern" -> value.branchNamePattern.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[BranchNamePatternParametersInput]].encode(value)), "commitAuthorEmailPattern" -> value.commitAuthorEmailPattern.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CommitAuthorEmailPatternParametersInput]].encode(value)), "commitMessagePattern" -> value.commitMessagePattern.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CommitMessagePatternParametersInput]].encode(value)), "committerEmailPattern" -> value.committerEmailPattern.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CommitterEmailPatternParametersInput]].encode(value)), "pullRequest" -> value.pullRequest.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PullRequestParametersInput]].encode(value)), "requiredDeployments" -> value.requiredDeployments.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RequiredDeploymentsParametersInput]].encode(value)), "requiredStatusChecks" -> value.requiredStatusChecks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RequiredStatusChecksParametersInput]].encode(value)), "tagNamePattern" -> value.tagNamePattern.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[TagNamePatternParametersInput]].encode(value)), "update" -> value.update.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[UpdateParametersInput]].encode(value))))
  }
}
final case class SavedReplyOrder(direction : OrderDirection, field : SavedReplyOrderField)
object SavedReplyOrder {
  implicit val encoder: ArgEncoder[SavedReplyOrder] = new ArgEncoder[SavedReplyOrder] {
    override def encode(value: SavedReplyOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SavedReplyOrderField]].encode(value.field)))
  }
}
final case class SecurityAdvisoryIdentifierFilter(`type` : SecurityAdvisoryIdentifierType, value : String)
object SecurityAdvisoryIdentifierFilter {
  implicit val encoder: ArgEncoder[SecurityAdvisoryIdentifierFilter] = new ArgEncoder[SecurityAdvisoryIdentifierFilter] {
    override def encode(value: SecurityAdvisoryIdentifierFilter): __Value =
      __ObjectValue(List("type" -> implicitly[ArgEncoder[SecurityAdvisoryIdentifierType]].encode(value.`type`), "value" -> implicitly[ArgEncoder[String]].encode(value.value)))
  }
}
final case class SecurityAdvisoryOrder(direction : OrderDirection, field : SecurityAdvisoryOrderField)
object SecurityAdvisoryOrder {
  implicit val encoder: ArgEncoder[SecurityAdvisoryOrder] = new ArgEncoder[SecurityAdvisoryOrder] {
    override def encode(value: SecurityAdvisoryOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SecurityAdvisoryOrderField]].encode(value.field)))
  }
}
final case class SecurityVulnerabilityOrder(direction : OrderDirection, field : SecurityVulnerabilityOrderField)
object SecurityVulnerabilityOrder {
  implicit val encoder: ArgEncoder[SecurityVulnerabilityOrder] = new ArgEncoder[SecurityVulnerabilityOrder] {
    override def encode(value: SecurityVulnerabilityOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SecurityVulnerabilityOrderField]].encode(value.field)))
  }
}
final case class SetEnterpriseIdentityProviderInput(clientMutationId : scala.Option[String] = None, digestMethod : SamlDigestAlgorithm, enterpriseId : String, idpCertificate : String, issuer : scala.Option[String] = None, signatureMethod : SamlSignatureAlgorithm, ssoUrl : URI)
object SetEnterpriseIdentityProviderInput {
  implicit val encoder: ArgEncoder[SetEnterpriseIdentityProviderInput] = new ArgEncoder[SetEnterpriseIdentityProviderInput] {
    override def encode(value: SetEnterpriseIdentityProviderInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "digestMethod" -> implicitly[ArgEncoder[SamlDigestAlgorithm]].encode(value.digestMethod), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "idpCertificate" -> implicitly[ArgEncoder[String]].encode(value.idpCertificate), "issuer" -> value.issuer.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "signatureMethod" -> implicitly[ArgEncoder[SamlSignatureAlgorithm]].encode(value.signatureMethod), "ssoUrl" -> implicitly[ArgEncoder[URI]].encode(value.ssoUrl)))
  }
}
final case class SetOrganizationInteractionLimitInput(clientMutationId : scala.Option[String] = None, expiry : scala.Option[RepositoryInteractionLimitExpiry] = None, limit : RepositoryInteractionLimit, organizationId : String)
object SetOrganizationInteractionLimitInput {
  implicit val encoder: ArgEncoder[SetOrganizationInteractionLimitInput] = new ArgEncoder[SetOrganizationInteractionLimitInput] {
    override def encode(value: SetOrganizationInteractionLimitInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expiry" -> value.expiry.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryInteractionLimitExpiry]].encode(value)), "limit" -> implicitly[ArgEncoder[RepositoryInteractionLimit]].encode(value.limit), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class SetRepositoryInteractionLimitInput(clientMutationId : scala.Option[String] = None, expiry : scala.Option[RepositoryInteractionLimitExpiry] = None, limit : RepositoryInteractionLimit, repositoryId : String)
object SetRepositoryInteractionLimitInput {
  implicit val encoder: ArgEncoder[SetRepositoryInteractionLimitInput] = new ArgEncoder[SetRepositoryInteractionLimitInput] {
    override def encode(value: SetRepositoryInteractionLimitInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expiry" -> value.expiry.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryInteractionLimitExpiry]].encode(value)), "limit" -> implicitly[ArgEncoder[RepositoryInteractionLimit]].encode(value.limit), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class SetUserInteractionLimitInput(clientMutationId : scala.Option[String] = None, expiry : scala.Option[RepositoryInteractionLimitExpiry] = None, limit : RepositoryInteractionLimit, userId : String)
object SetUserInteractionLimitInput {
  implicit val encoder: ArgEncoder[SetUserInteractionLimitInput] = new ArgEncoder[SetUserInteractionLimitInput] {
    override def encode(value: SetUserInteractionLimitInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expiry" -> value.expiry.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryInteractionLimitExpiry]].encode(value)), "limit" -> implicitly[ArgEncoder[RepositoryInteractionLimit]].encode(value.limit), "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)))
  }
}
final case class SponsorOrder(direction : OrderDirection, field : SponsorOrderField)
object SponsorOrder {
  implicit val encoder: ArgEncoder[SponsorOrder] = new ArgEncoder[SponsorOrder] {
    override def encode(value: SponsorOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SponsorOrderField]].encode(value.field)))
  }
}
final case class SponsorableOrder(direction : OrderDirection, field : SponsorableOrderField)
object SponsorableOrder {
  implicit val encoder: ArgEncoder[SponsorableOrder] = new ArgEncoder[SponsorableOrder] {
    override def encode(value: SponsorableOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SponsorableOrderField]].encode(value.field)))
  }
}
final case class SponsorsActivityOrder(direction : OrderDirection, field : SponsorsActivityOrderField)
object SponsorsActivityOrder {
  implicit val encoder: ArgEncoder[SponsorsActivityOrder] = new ArgEncoder[SponsorsActivityOrder] {
    override def encode(value: SponsorsActivityOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SponsorsActivityOrderField]].encode(value.field)))
  }
}
final case class SponsorsTierOrder(direction : OrderDirection, field : SponsorsTierOrderField)
object SponsorsTierOrder {
  implicit val encoder: ArgEncoder[SponsorsTierOrder] = new ArgEncoder[SponsorsTierOrder] {
    override def encode(value: SponsorsTierOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SponsorsTierOrderField]].encode(value.field)))
  }
}
final case class SponsorshipNewsletterOrder(direction : OrderDirection, field : SponsorshipNewsletterOrderField)
object SponsorshipNewsletterOrder {
  implicit val encoder: ArgEncoder[SponsorshipNewsletterOrder] = new ArgEncoder[SponsorshipNewsletterOrder] {
    override def encode(value: SponsorshipNewsletterOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SponsorshipNewsletterOrderField]].encode(value.field)))
  }
}
final case class SponsorshipOrder(direction : OrderDirection, field : SponsorshipOrderField)
object SponsorshipOrder {
  implicit val encoder: ArgEncoder[SponsorshipOrder] = new ArgEncoder[SponsorshipOrder] {
    override def encode(value: SponsorshipOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[SponsorshipOrderField]].encode(value.field)))
  }
}
final case class StarOrder(direction : OrderDirection, field : StarOrderField)
object StarOrder {
  implicit val encoder: ArgEncoder[StarOrder] = new ArgEncoder[StarOrder] {
    override def encode(value: StarOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[StarOrderField]].encode(value.field)))
  }
}
final case class StartOrganizationMigrationInput(clientMutationId : scala.Option[String] = None, sourceAccessToken : String, sourceOrgUrl : URI, targetEnterpriseId : String, targetOrgName : String)
object StartOrganizationMigrationInput {
  implicit val encoder: ArgEncoder[StartOrganizationMigrationInput] = new ArgEncoder[StartOrganizationMigrationInput] {
    override def encode(value: StartOrganizationMigrationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sourceAccessToken" -> implicitly[ArgEncoder[String]].encode(value.sourceAccessToken), "sourceOrgUrl" -> implicitly[ArgEncoder[URI]].encode(value.sourceOrgUrl), "targetEnterpriseId" -> implicitly[ArgEncoder[String]].encode(value.targetEnterpriseId), "targetOrgName" -> implicitly[ArgEncoder[String]].encode(value.targetOrgName)))
  }
}
final case class StartRepositoryMigrationInput(accessToken : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, continueOnError : scala.Option[Boolean] = None, gitArchiveUrl : scala.Option[String] = None, githubPat : scala.Option[String] = None, lockSource : scala.Option[Boolean] = None, metadataArchiveUrl : scala.Option[String] = None, ownerId : String, repositoryName : String, skipReleases : scala.Option[Boolean] = None, sourceId : String, sourceRepositoryUrl : scala.Option[URI] = None, targetRepoVisibility : scala.Option[String] = None)
object StartRepositoryMigrationInput {
  implicit val encoder: ArgEncoder[StartRepositoryMigrationInput] = new ArgEncoder[StartRepositoryMigrationInput] {
    override def encode(value: StartRepositoryMigrationInput): __Value =
      __ObjectValue(List("accessToken" -> value.accessToken.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "continueOnError" -> value.continueOnError.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "gitArchiveUrl" -> value.gitArchiveUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "githubPat" -> value.githubPat.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "lockSource" -> value.lockSource.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "metadataArchiveUrl" -> value.metadataArchiveUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "repositoryName" -> implicitly[ArgEncoder[String]].encode(value.repositoryName), "skipReleases" -> value.skipReleases.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "sourceId" -> implicitly[ArgEncoder[String]].encode(value.sourceId), "sourceRepositoryUrl" -> value.sourceRepositoryUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[URI]].encode(value)), "targetRepoVisibility" -> value.targetRepoVisibility.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class StatusCheckConfigurationInput(context : String, integrationId : scala.Option[Int] = None)
object StatusCheckConfigurationInput {
  implicit val encoder: ArgEncoder[StatusCheckConfigurationInput] = new ArgEncoder[StatusCheckConfigurationInput] {
    override def encode(value: StatusCheckConfigurationInput): __Value =
      __ObjectValue(List("context" -> implicitly[ArgEncoder[String]].encode(value.context), "integrationId" -> value.integrationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value))))
  }
}
final case class SubmitPullRequestReviewInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, event : PullRequestReviewEvent, pullRequestId : scala.Option[String] = None, pullRequestReviewId : scala.Option[String] = None)
object SubmitPullRequestReviewInput {
  implicit val encoder: ArgEncoder[SubmitPullRequestReviewInput] = new ArgEncoder[SubmitPullRequestReviewInput] {
    override def encode(value: SubmitPullRequestReviewInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "event" -> implicitly[ArgEncoder[PullRequestReviewEvent]].encode(value.event), "pullRequestId" -> value.pullRequestId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestReviewId" -> value.pullRequestReviewId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class TagNamePatternParametersInput(name : scala.Option[String] = None, negate : scala.Option[Boolean] = None, operator : String, pattern : String)
object TagNamePatternParametersInput {
  implicit val encoder: ArgEncoder[TagNamePatternParametersInput] = new ArgEncoder[TagNamePatternParametersInput] {
    override def encode(value: TagNamePatternParametersInput): __Value =
      __ObjectValue(List("name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "negate" -> value.negate.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "operator" -> implicitly[ArgEncoder[String]].encode(value.operator), "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern)))
  }
}
final case class TeamDiscussionCommentOrder(direction : OrderDirection, field : TeamDiscussionCommentOrderField)
object TeamDiscussionCommentOrder {
  implicit val encoder: ArgEncoder[TeamDiscussionCommentOrder] = new ArgEncoder[TeamDiscussionCommentOrder] {
    override def encode(value: TeamDiscussionCommentOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[TeamDiscussionCommentOrderField]].encode(value.field)))
  }
}
final case class TeamDiscussionOrder(direction : OrderDirection, field : TeamDiscussionOrderField)
object TeamDiscussionOrder {
  implicit val encoder: ArgEncoder[TeamDiscussionOrder] = new ArgEncoder[TeamDiscussionOrder] {
    override def encode(value: TeamDiscussionOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[TeamDiscussionOrderField]].encode(value.field)))
  }
}
final case class TeamMemberOrder(direction : OrderDirection, field : TeamMemberOrderField)
object TeamMemberOrder {
  implicit val encoder: ArgEncoder[TeamMemberOrder] = new ArgEncoder[TeamMemberOrder] {
    override def encode(value: TeamMemberOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[TeamMemberOrderField]].encode(value.field)))
  }
}
final case class TeamOrder(direction : OrderDirection, field : TeamOrderField)
object TeamOrder {
  implicit val encoder: ArgEncoder[TeamOrder] = new ArgEncoder[TeamOrder] {
    override def encode(value: TeamOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[TeamOrderField]].encode(value.field)))
  }
}
final case class TeamRepositoryOrder(direction : OrderDirection, field : TeamRepositoryOrderField)
object TeamRepositoryOrder {
  implicit val encoder: ArgEncoder[TeamRepositoryOrder] = new ArgEncoder[TeamRepositoryOrder] {
    override def encode(value: TeamRepositoryOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[TeamRepositoryOrderField]].encode(value.field)))
  }
}
final case class TransferEnterpriseOrganizationInput(clientMutationId : scala.Option[String] = None, destinationEnterpriseId : String, organizationId : String)
object TransferEnterpriseOrganizationInput {
  implicit val encoder: ArgEncoder[TransferEnterpriseOrganizationInput] = new ArgEncoder[TransferEnterpriseOrganizationInput] {
    override def encode(value: TransferEnterpriseOrganizationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "destinationEnterpriseId" -> implicitly[ArgEncoder[String]].encode(value.destinationEnterpriseId), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class TransferIssueInput(clientMutationId : scala.Option[String] = None, createLabelsIfMissing : scala.Option[Boolean] = None, issueId : String, repositoryId : String)
object TransferIssueInput {
  implicit val encoder: ArgEncoder[TransferIssueInput] = new ArgEncoder[TransferIssueInput] {
    override def encode(value: TransferIssueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "createLabelsIfMissing" -> value.createLabelsIfMissing.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class UnarchiveProjectV2ItemInput(clientMutationId : scala.Option[String] = None, itemId : String, projectId : String)
object UnarchiveProjectV2ItemInput {
  implicit val encoder: ArgEncoder[UnarchiveProjectV2ItemInput] = new ArgEncoder[UnarchiveProjectV2ItemInput] {
    override def encode(value: UnarchiveProjectV2ItemInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "itemId" -> implicitly[ArgEncoder[String]].encode(value.itemId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class UnarchiveRepositoryInput(clientMutationId : scala.Option[String] = None, repositoryId : String)
object UnarchiveRepositoryInput {
  implicit val encoder: ArgEncoder[UnarchiveRepositoryInput] = new ArgEncoder[UnarchiveRepositoryInput] {
    override def encode(value: UnarchiveRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class UnfollowOrganizationInput(clientMutationId : scala.Option[String] = None, organizationId : String)
object UnfollowOrganizationInput {
  implicit val encoder: ArgEncoder[UnfollowOrganizationInput] = new ArgEncoder[UnfollowOrganizationInput] {
    override def encode(value: UnfollowOrganizationInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class UnfollowUserInput(clientMutationId : scala.Option[String] = None, userId : String)
object UnfollowUserInput {
  implicit val encoder: ArgEncoder[UnfollowUserInput] = new ArgEncoder[UnfollowUserInput] {
    override def encode(value: UnfollowUserInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)))
  }
}
final case class UnlinkProjectV2FromRepositoryInput(clientMutationId : scala.Option[String] = None, projectId : String, repositoryId : String)
object UnlinkProjectV2FromRepositoryInput {
  implicit val encoder: ArgEncoder[UnlinkProjectV2FromRepositoryInput] = new ArgEncoder[UnlinkProjectV2FromRepositoryInput] {
    override def encode(value: UnlinkProjectV2FromRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class UnlinkProjectV2FromTeamInput(clientMutationId : scala.Option[String] = None, projectId : String, teamId : String)
object UnlinkProjectV2FromTeamInput {
  implicit val encoder: ArgEncoder[UnlinkProjectV2FromTeamInput] = new ArgEncoder[UnlinkProjectV2FromTeamInput] {
    override def encode(value: UnlinkProjectV2FromTeamInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "teamId" -> implicitly[ArgEncoder[String]].encode(value.teamId)))
  }
}
final case class UnlinkRepositoryFromProjectInput(clientMutationId : scala.Option[String] = None, projectId : String, repositoryId : String)
object UnlinkRepositoryFromProjectInput {
  implicit val encoder: ArgEncoder[UnlinkRepositoryFromProjectInput] = new ArgEncoder[UnlinkRepositoryFromProjectInput] {
    override def encode(value: UnlinkRepositoryFromProjectInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class UnlockLockableInput(clientMutationId : scala.Option[String] = None, lockableId : String)
object UnlockLockableInput {
  implicit val encoder: ArgEncoder[UnlockLockableInput] = new ArgEncoder[UnlockLockableInput] {
    override def encode(value: UnlockLockableInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "lockableId" -> implicitly[ArgEncoder[String]].encode(value.lockableId)))
  }
}
final case class UnmarkDiscussionCommentAsAnswerInput(clientMutationId : scala.Option[String] = None, id : String)
object UnmarkDiscussionCommentAsAnswerInput {
  implicit val encoder: ArgEncoder[UnmarkDiscussionCommentAsAnswerInput] = new ArgEncoder[UnmarkDiscussionCommentAsAnswerInput] {
    override def encode(value: UnmarkDiscussionCommentAsAnswerInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class UnmarkFileAsViewedInput(clientMutationId : scala.Option[String] = None, path : String, pullRequestId : String)
object UnmarkFileAsViewedInput {
  implicit val encoder: ArgEncoder[UnmarkFileAsViewedInput] = new ArgEncoder[UnmarkFileAsViewedInput] {
    override def encode(value: UnmarkFileAsViewedInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "path" -> implicitly[ArgEncoder[String]].encode(value.path), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class UnmarkIssueAsDuplicateInput(canonicalId : String, clientMutationId : scala.Option[String] = None, duplicateId : String)
object UnmarkIssueAsDuplicateInput {
  implicit val encoder: ArgEncoder[UnmarkIssueAsDuplicateInput] = new ArgEncoder[UnmarkIssueAsDuplicateInput] {
    override def encode(value: UnmarkIssueAsDuplicateInput): __Value =
      __ObjectValue(List("canonicalId" -> implicitly[ArgEncoder[String]].encode(value.canonicalId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "duplicateId" -> implicitly[ArgEncoder[String]].encode(value.duplicateId)))
  }
}
final case class UnmarkProjectV2AsTemplateInput(clientMutationId : scala.Option[String] = None, projectId : String)
object UnmarkProjectV2AsTemplateInput {
  implicit val encoder: ArgEncoder[UnmarkProjectV2AsTemplateInput] = new ArgEncoder[UnmarkProjectV2AsTemplateInput] {
    override def encode(value: UnmarkProjectV2AsTemplateInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class UnminimizeCommentInput(clientMutationId : scala.Option[String] = None, subjectId : String)
object UnminimizeCommentInput {
  implicit val encoder: ArgEncoder[UnminimizeCommentInput] = new ArgEncoder[UnminimizeCommentInput] {
    override def encode(value: UnminimizeCommentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "subjectId" -> implicitly[ArgEncoder[String]].encode(value.subjectId)))
  }
}
final case class UnpinIssueInput(clientMutationId : scala.Option[String] = None, issueId : String)
object UnpinIssueInput {
  implicit val encoder: ArgEncoder[UnpinIssueInput] = new ArgEncoder[UnpinIssueInput] {
    override def encode(value: UnpinIssueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)))
  }
}
final case class UnresolveReviewThreadInput(clientMutationId : scala.Option[String] = None, threadId : String)
object UnresolveReviewThreadInput {
  implicit val encoder: ArgEncoder[UnresolveReviewThreadInput] = new ArgEncoder[UnresolveReviewThreadInput] {
    override def encode(value: UnresolveReviewThreadInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "threadId" -> implicitly[ArgEncoder[String]].encode(value.threadId)))
  }
}
final case class UpdateBranchProtectionRuleInput(allowsDeletions : scala.Option[Boolean] = None, allowsForcePushes : scala.Option[Boolean] = None, blocksCreations : scala.Option[Boolean] = None, branchProtectionRuleId : String, bypassForcePushActorIds : scala.Option[List[String]] = None, bypassPullRequestActorIds : scala.Option[List[String]] = None, clientMutationId : scala.Option[String] = None, dismissesStaleReviews : scala.Option[Boolean] = None, isAdminEnforced : scala.Option[Boolean] = None, lockAllowsFetchAndMerge : scala.Option[Boolean] = None, lockBranch : scala.Option[Boolean] = None, pattern : scala.Option[String] = None, pushActorIds : scala.Option[List[String]] = None, requireLastPushApproval : scala.Option[Boolean] = None, requiredApprovingReviewCount : scala.Option[Int] = None, requiredDeploymentEnvironments : scala.Option[List[String]] = None, requiredStatusCheckContexts : scala.Option[List[String]] = None, requiredStatusChecks : scala.Option[List[RequiredStatusCheckInput]] = None, requiresApprovingReviews : scala.Option[Boolean] = None, requiresCodeOwnerReviews : scala.Option[Boolean] = None, requiresCommitSignatures : scala.Option[Boolean] = None, requiresConversationResolution : scala.Option[Boolean] = None, requiresDeployments : scala.Option[Boolean] = None, requiresLinearHistory : scala.Option[Boolean] = None, requiresStatusChecks : scala.Option[Boolean] = None, requiresStrictStatusChecks : scala.Option[Boolean] = None, restrictsPushes : scala.Option[Boolean] = None, restrictsReviewDismissals : scala.Option[Boolean] = None, reviewDismissalActorIds : scala.Option[List[String]] = None)
object UpdateBranchProtectionRuleInput {
  implicit val encoder: ArgEncoder[UpdateBranchProtectionRuleInput] = new ArgEncoder[UpdateBranchProtectionRuleInput] {
    override def encode(value: UpdateBranchProtectionRuleInput): __Value =
      __ObjectValue(List("allowsDeletions" -> value.allowsDeletions.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "allowsForcePushes" -> value.allowsForcePushes.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "blocksCreations" -> value.blocksCreations.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "branchProtectionRuleId" -> implicitly[ArgEncoder[String]].encode(value.branchProtectionRuleId), "bypassForcePushActorIds" -> value.bypassForcePushActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "bypassPullRequestActorIds" -> value.bypassPullRequestActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "dismissesStaleReviews" -> value.dismissesStaleReviews.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "isAdminEnforced" -> value.isAdminEnforced.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "lockAllowsFetchAndMerge" -> value.lockAllowsFetchAndMerge.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "lockBranch" -> value.lockBranch.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "pattern" -> value.pattern.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pushActorIds" -> value.pushActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "requireLastPushApproval" -> value.requireLastPushApproval.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiredApprovingReviewCount" -> value.requiredApprovingReviewCount.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value)), "requiredDeploymentEnvironments" -> value.requiredDeploymentEnvironments.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "requiredStatusCheckContexts" -> value.requiredStatusCheckContexts.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "requiredStatusChecks" -> value.requiredStatusChecks.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[RequiredStatusCheckInput]].encode(value)))), "requiresApprovingReviews" -> value.requiresApprovingReviews.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresCodeOwnerReviews" -> value.requiresCodeOwnerReviews.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresCommitSignatures" -> value.requiresCommitSignatures.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresConversationResolution" -> value.requiresConversationResolution.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresDeployments" -> value.requiresDeployments.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresLinearHistory" -> value.requiresLinearHistory.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresStatusChecks" -> value.requiresStatusChecks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "requiresStrictStatusChecks" -> value.requiresStrictStatusChecks.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "restrictsPushes" -> value.restrictsPushes.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "restrictsReviewDismissals" -> value.restrictsReviewDismissals.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "reviewDismissalActorIds" -> value.reviewDismissalActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value))))))
  }
}
final case class UpdateCheckRunInput(actions : scala.Option[List[CheckRunAction]] = None, checkRunId : String, clientMutationId : scala.Option[String] = None, completedAt : scala.Option[DateTime] = None, conclusion : scala.Option[CheckConclusionState] = None, detailsUrl : scala.Option[URI] = None, externalId : scala.Option[String] = None, name : scala.Option[String] = None, output : scala.Option[CheckRunOutput] = None, repositoryId : String, startedAt : scala.Option[DateTime] = None, status : scala.Option[RequestableCheckStatusState] = None)
object UpdateCheckRunInput {
  implicit val encoder: ArgEncoder[UpdateCheckRunInput] = new ArgEncoder[UpdateCheckRunInput] {
    override def encode(value: UpdateCheckRunInput): __Value =
      __ObjectValue(List("actions" -> value.actions.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[CheckRunAction]].encode(value)))), "checkRunId" -> implicitly[ArgEncoder[String]].encode(value.checkRunId), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "completedAt" -> value.completedAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DateTime]].encode(value)), "conclusion" -> value.conclusion.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CheckConclusionState]].encode(value)), "detailsUrl" -> value.detailsUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[URI]].encode(value)), "externalId" -> value.externalId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "output" -> value.output.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[CheckRunOutput]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "startedAt" -> value.startedAt.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[DateTime]].encode(value)), "status" -> value.status.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RequestableCheckStatusState]].encode(value))))
  }
}
final case class UpdateCheckSuitePreferencesInput(autoTriggerPreferences : List[CheckSuiteAutoTriggerPreference] = Nil, clientMutationId : scala.Option[String] = None, repositoryId : String)
object UpdateCheckSuitePreferencesInput {
  implicit val encoder: ArgEncoder[UpdateCheckSuitePreferencesInput] = new ArgEncoder[UpdateCheckSuitePreferencesInput] {
    override def encode(value: UpdateCheckSuitePreferencesInput): __Value =
      __ObjectValue(List("autoTriggerPreferences" -> __ListValue(value.autoTriggerPreferences.map(value => implicitly[ArgEncoder[CheckSuiteAutoTriggerPreference]].encode(value))), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class UpdateDiscussionCommentInput(body : String, clientMutationId : scala.Option[String] = None, commentId : String)
object UpdateDiscussionCommentInput {
  implicit val encoder: ArgEncoder[UpdateDiscussionCommentInput] = new ArgEncoder[UpdateDiscussionCommentInput] {
    override def encode(value: UpdateDiscussionCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "commentId" -> implicitly[ArgEncoder[String]].encode(value.commentId)))
  }
}
final case class UpdateDiscussionInput(body : scala.Option[String] = None, categoryId : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, discussionId : String, title : scala.Option[String] = None)
object UpdateDiscussionInput {
  implicit val encoder: ArgEncoder[UpdateDiscussionInput] = new ArgEncoder[UpdateDiscussionInput] {
    override def encode(value: UpdateDiscussionInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "categoryId" -> value.categoryId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "discussionId" -> implicitly[ArgEncoder[String]].encode(value.discussionId), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateEnterpriseAdministratorRoleInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, login : String, role : EnterpriseAdministratorRole)
object UpdateEnterpriseAdministratorRoleInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseAdministratorRoleInput] = new ArgEncoder[UpdateEnterpriseAdministratorRoleInput] {
    override def encode(value: UpdateEnterpriseAdministratorRoleInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "login" -> implicitly[ArgEncoder[String]].encode(value.login), "role" -> implicitly[ArgEncoder[EnterpriseAdministratorRole]].encode(value.role)))
  }
}
final case class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, policyValue : scala.Option[EnterpriseAllowPrivateRepositoryForkingPolicyValue] = None, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput] = new ArgEncoder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput] {
    override def encode(value: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "policyValue" -> value.policyValue.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EnterpriseAllowPrivateRepositoryForkingPolicyValue]].encode(value)), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseDefaultRepositoryPermissionSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseDefaultRepositoryPermissionSettingValue)
object UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseDefaultRepositoryPermissionSettingInput] = new ArgEncoder[UpdateEnterpriseDefaultRepositoryPermissionSettingInput] {
    override def encode(value: UpdateEnterpriseDefaultRepositoryPermissionSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseDefaultRepositoryPermissionSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, membersCanCreateInternalRepositories : scala.Option[Boolean] = None, membersCanCreatePrivateRepositories : scala.Option[Boolean] = None, membersCanCreatePublicRepositories : scala.Option[Boolean] = None, membersCanCreateRepositoriesPolicyEnabled : scala.Option[Boolean] = None, settingValue : scala.Option[EnterpriseMembersCanCreateRepositoriesSettingValue] = None)
object UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanCreateRepositoriesSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanCreateRepositoriesSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "membersCanCreateInternalRepositories" -> value.membersCanCreateInternalRepositories.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "membersCanCreatePrivateRepositories" -> value.membersCanCreatePrivateRepositories.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "membersCanCreatePublicRepositories" -> value.membersCanCreatePublicRepositories.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "membersCanCreateRepositoriesPolicyEnabled" -> value.membersCanCreateRepositoriesPolicyEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "settingValue" -> value.settingValue.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[EnterpriseMembersCanCreateRepositoriesSettingValue]].encode(value))))
  }
}
final case class UpdateEnterpriseMembersCanDeleteIssuesSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanDeleteIssuesSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanDeleteIssuesSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanDeleteIssuesSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanMakePurchasesSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseMembersCanMakePurchasesSettingValue)
object UpdateEnterpriseMembersCanMakePurchasesSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanMakePurchasesSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanMakePurchasesSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanMakePurchasesSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseMembersCanMakePurchasesSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput] = new ArgEncoder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput] {
    override def encode(value: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseOrganizationProjectsSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseOrganizationProjectsSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseOrganizationProjectsSettingInput] = new ArgEncoder[UpdateEnterpriseOrganizationProjectsSettingInput] {
    override def encode(value: UpdateEnterpriseOrganizationProjectsSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseOwnerOrganizationRoleInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, organizationId : String, organizationRole : RoleInOrganization)
object UpdateEnterpriseOwnerOrganizationRoleInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseOwnerOrganizationRoleInput] = new ArgEncoder[UpdateEnterpriseOwnerOrganizationRoleInput] {
    override def encode(value: UpdateEnterpriseOwnerOrganizationRoleInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId), "organizationRole" -> implicitly[ArgEncoder[RoleInOrganization]].encode(value.organizationRole)))
  }
}
final case class UpdateEnterpriseProfileInput(clientMutationId : scala.Option[String] = None, description : scala.Option[String] = None, enterpriseId : String, location : scala.Option[String] = None, name : scala.Option[String] = None, websiteUrl : scala.Option[String] = None)
object UpdateEnterpriseProfileInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseProfileInput] = new ArgEncoder[UpdateEnterpriseProfileInput] {
    override def encode(value: UpdateEnterpriseProfileInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "location" -> value.location.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "websiteUrl" -> value.websiteUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateEnterpriseRepositoryProjectsSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseRepositoryProjectsSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseRepositoryProjectsSettingInput] = new ArgEncoder[UpdateEnterpriseRepositoryProjectsSettingInput] {
    override def encode(value: UpdateEnterpriseRepositoryProjectsSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseTeamDiscussionsSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledDisabledSettingValue)
object UpdateEnterpriseTeamDiscussionsSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseTeamDiscussionsSettingInput] = new ArgEncoder[UpdateEnterpriseTeamDiscussionsSettingInput] {
    override def encode(value: UpdateEnterpriseTeamDiscussionsSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledDisabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(clientMutationId : scala.Option[String] = None, enterpriseId : String, settingValue : EnterpriseEnabledSettingValue)
object UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
  implicit val encoder: ArgEncoder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput] = new ArgEncoder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput] {
    override def encode(value: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enterpriseId" -> implicitly[ArgEncoder[String]].encode(value.enterpriseId), "settingValue" -> implicitly[ArgEncoder[EnterpriseEnabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateEnvironmentInput(clientMutationId : scala.Option[String] = None, environmentId : String, reviewers : scala.Option[List[String]] = None, waitTimer : scala.Option[Int] = None)
object UpdateEnvironmentInput {
  implicit val encoder: ArgEncoder[UpdateEnvironmentInput] = new ArgEncoder[UpdateEnvironmentInput] {
    override def encode(value: UpdateEnvironmentInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "environmentId" -> implicitly[ArgEncoder[String]].encode(value.environmentId), "reviewers" -> value.reviewers.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "waitTimer" -> value.waitTimer.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value))))
  }
}
final case class UpdateIpAllowListEnabledSettingInput(clientMutationId : scala.Option[String] = None, ownerId : String, settingValue : IpAllowListEnabledSettingValue)
object UpdateIpAllowListEnabledSettingInput {
  implicit val encoder: ArgEncoder[UpdateIpAllowListEnabledSettingInput] = new ArgEncoder[UpdateIpAllowListEnabledSettingInput] {
    override def encode(value: UpdateIpAllowListEnabledSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "settingValue" -> implicitly[ArgEncoder[IpAllowListEnabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateIpAllowListEntryInput(allowListValue : String, clientMutationId : scala.Option[String] = None, ipAllowListEntryId : String, isActive : Boolean, name : scala.Option[String] = None)
object UpdateIpAllowListEntryInput {
  implicit val encoder: ArgEncoder[UpdateIpAllowListEntryInput] = new ArgEncoder[UpdateIpAllowListEntryInput] {
    override def encode(value: UpdateIpAllowListEntryInput): __Value =
      __ObjectValue(List("allowListValue" -> implicitly[ArgEncoder[String]].encode(value.allowListValue), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ipAllowListEntryId" -> implicitly[ArgEncoder[String]].encode(value.ipAllowListEntryId), "isActive" -> implicitly[ArgEncoder[Boolean]].encode(value.isActive), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateIpAllowListForInstalledAppsEnabledSettingInput(clientMutationId : scala.Option[String] = None, ownerId : String, settingValue : IpAllowListForInstalledAppsEnabledSettingValue)
object UpdateIpAllowListForInstalledAppsEnabledSettingInput {
  implicit val encoder: ArgEncoder[UpdateIpAllowListForInstalledAppsEnabledSettingInput] = new ArgEncoder[UpdateIpAllowListForInstalledAppsEnabledSettingInput] {
    override def encode(value: UpdateIpAllowListForInstalledAppsEnabledSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "settingValue" -> implicitly[ArgEncoder[IpAllowListForInstalledAppsEnabledSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateIssueCommentInput(body : String, clientMutationId : scala.Option[String] = None, id : String)
object UpdateIssueCommentInput {
  implicit val encoder: ArgEncoder[UpdateIssueCommentInput] = new ArgEncoder[UpdateIssueCommentInput] {
    override def encode(value: UpdateIssueCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class UpdateIssueInput(assigneeIds : scala.Option[List[String]] = None, body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, id : String, labelIds : scala.Option[List[String]] = None, milestoneId : scala.Option[String] = None, projectIds : scala.Option[List[String]] = None, state : scala.Option[IssueState] = None, title : scala.Option[String] = None)
object UpdateIssueInput {
  implicit val encoder: ArgEncoder[UpdateIssueInput] = new ArgEncoder[UpdateIssueInput] {
    override def encode(value: UpdateIssueInput): __Value =
      __ObjectValue(List("assigneeIds" -> value.assigneeIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id), "labelIds" -> value.labelIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectIds" -> value.projectIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[IssueState]].encode(value)), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateLabelInput(clientMutationId : scala.Option[String] = None, color : scala.Option[String] = None, description : scala.Option[String] = None, id : String, name : scala.Option[String] = None)
object UpdateLabelInput {
  implicit val encoder: ArgEncoder[UpdateLabelInput] = new ArgEncoder[UpdateLabelInput] {
    override def encode(value: UpdateLabelInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "color" -> value.color.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateNotificationRestrictionSettingInput(clientMutationId : scala.Option[String] = None, ownerId : String, settingValue : NotificationRestrictionSettingValue)
object UpdateNotificationRestrictionSettingInput {
  implicit val encoder: ArgEncoder[UpdateNotificationRestrictionSettingInput] = new ArgEncoder[UpdateNotificationRestrictionSettingInput] {
    override def encode(value: UpdateNotificationRestrictionSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId), "settingValue" -> implicitly[ArgEncoder[NotificationRestrictionSettingValue]].encode(value.settingValue)))
  }
}
final case class UpdateOrganizationAllowPrivateRepositoryForkingSettingInput(clientMutationId : scala.Option[String] = None, forkingEnabled : Boolean, organizationId : String)
object UpdateOrganizationAllowPrivateRepositoryForkingSettingInput {
  implicit val encoder: ArgEncoder[UpdateOrganizationAllowPrivateRepositoryForkingSettingInput] = new ArgEncoder[UpdateOrganizationAllowPrivateRepositoryForkingSettingInput] {
    override def encode(value: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "forkingEnabled" -> implicitly[ArgEncoder[Boolean]].encode(value.forkingEnabled), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId)))
  }
}
final case class UpdateOrganizationWebCommitSignoffSettingInput(clientMutationId : scala.Option[String] = None, organizationId : String, webCommitSignoffRequired : Boolean)
object UpdateOrganizationWebCommitSignoffSettingInput {
  implicit val encoder: ArgEncoder[UpdateOrganizationWebCommitSignoffSettingInput] = new ArgEncoder[UpdateOrganizationWebCommitSignoffSettingInput] {
    override def encode(value: UpdateOrganizationWebCommitSignoffSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "organizationId" -> implicitly[ArgEncoder[String]].encode(value.organizationId), "webCommitSignoffRequired" -> implicitly[ArgEncoder[Boolean]].encode(value.webCommitSignoffRequired)))
  }
}
final case class UpdateParametersInput(updateAllowsFetchAndMerge : Boolean)
object UpdateParametersInput {
  implicit val encoder: ArgEncoder[UpdateParametersInput] = new ArgEncoder[UpdateParametersInput] {
    override def encode(value: UpdateParametersInput): __Value =
      __ObjectValue(List("updateAllowsFetchAndMerge" -> implicitly[ArgEncoder[Boolean]].encode(value.updateAllowsFetchAndMerge)))
  }
}
final case class UpdateProjectCardInput(clientMutationId : scala.Option[String] = None, isArchived : scala.Option[Boolean] = None, note : scala.Option[String] = None, projectCardId : String)
object UpdateProjectCardInput {
  implicit val encoder: ArgEncoder[UpdateProjectCardInput] = new ArgEncoder[UpdateProjectCardInput] {
    override def encode(value: UpdateProjectCardInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "isArchived" -> value.isArchived.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "note" -> value.note.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectCardId" -> implicitly[ArgEncoder[String]].encode(value.projectCardId)))
  }
}
final case class UpdateProjectColumnInput(clientMutationId : scala.Option[String] = None, name : String, projectColumnId : String)
object UpdateProjectColumnInput {
  implicit val encoder: ArgEncoder[UpdateProjectColumnInput] = new ArgEncoder[UpdateProjectColumnInput] {
    override def encode(value: UpdateProjectColumnInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> implicitly[ArgEncoder[String]].encode(value.name), "projectColumnId" -> implicitly[ArgEncoder[String]].encode(value.projectColumnId)))
  }
}
final case class UpdateProjectInput(body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, name : scala.Option[String] = None, projectId : String, public : scala.Option[Boolean] = None, state : scala.Option[ProjectState] = None)
object UpdateProjectInput {
  implicit val encoder: ArgEncoder[UpdateProjectInput] = new ArgEncoder[UpdateProjectInput] {
    override def encode(value: UpdateProjectInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "public" -> value.public.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[ProjectState]].encode(value))))
  }
}
final case class UpdateProjectV2DraftIssueInput(assigneeIds : scala.Option[List[String]] = None, body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, draftIssueId : String, title : scala.Option[String] = None)
object UpdateProjectV2DraftIssueInput {
  implicit val encoder: ArgEncoder[UpdateProjectV2DraftIssueInput] = new ArgEncoder[UpdateProjectV2DraftIssueInput] {
    override def encode(value: UpdateProjectV2DraftIssueInput): __Value =
      __ObjectValue(List("assigneeIds" -> value.assigneeIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "draftIssueId" -> implicitly[ArgEncoder[String]].encode(value.draftIssueId), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateProjectV2Input(clientMutationId : scala.Option[String] = None, closed : scala.Option[Boolean] = None, projectId : String, public : scala.Option[Boolean] = None, readme : scala.Option[String] = None, shortDescription : scala.Option[String] = None, title : scala.Option[String] = None)
object UpdateProjectV2Input {
  implicit val encoder: ArgEncoder[UpdateProjectV2Input] = new ArgEncoder[UpdateProjectV2Input] {
    override def encode(value: UpdateProjectV2Input): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "closed" -> value.closed.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "public" -> value.public.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "readme" -> value.readme.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "shortDescription" -> value.shortDescription.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateProjectV2ItemFieldValueInput(clientMutationId : scala.Option[String] = None, fieldId : String, itemId : String, projectId : String, value : ProjectV2FieldValue)
object UpdateProjectV2ItemFieldValueInput {
  implicit val encoder: ArgEncoder[UpdateProjectV2ItemFieldValueInput] = new ArgEncoder[UpdateProjectV2ItemFieldValueInput] {
    override def encode(value: UpdateProjectV2ItemFieldValueInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "fieldId" -> implicitly[ArgEncoder[String]].encode(value.fieldId), "itemId" -> implicitly[ArgEncoder[String]].encode(value.itemId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId), "value" -> implicitly[ArgEncoder[ProjectV2FieldValue]].encode(value.value)))
  }
}
final case class UpdateProjectV2ItemPositionInput(afterId : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, itemId : String, projectId : String)
object UpdateProjectV2ItemPositionInput {
  implicit val encoder: ArgEncoder[UpdateProjectV2ItemPositionInput] = new ArgEncoder[UpdateProjectV2ItemPositionInput] {
    override def encode(value: UpdateProjectV2ItemPositionInput): __Value =
      __ObjectValue(List("afterId" -> value.afterId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "itemId" -> implicitly[ArgEncoder[String]].encode(value.itemId), "projectId" -> implicitly[ArgEncoder[String]].encode(value.projectId)))
  }
}
final case class UpdatePullRequestBranchInput(clientMutationId : scala.Option[String] = None, expectedHeadOid : scala.Option[GitObjectID] = None, pullRequestId : String)
object UpdatePullRequestBranchInput {
  implicit val encoder: ArgEncoder[UpdatePullRequestBranchInput] = new ArgEncoder[UpdatePullRequestBranchInput] {
    override def encode(value: UpdatePullRequestBranchInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "expectedHeadOid" -> value.expectedHeadOid.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[GitObjectID]].encode(value)), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId)))
  }
}
final case class UpdatePullRequestInput(assigneeIds : scala.Option[List[String]] = None, baseRefName : scala.Option[String] = None, body : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, labelIds : scala.Option[List[String]] = None, maintainerCanModify : scala.Option[Boolean] = None, milestoneId : scala.Option[String] = None, projectIds : scala.Option[List[String]] = None, pullRequestId : String, state : scala.Option[PullRequestUpdateState] = None, title : scala.Option[String] = None)
object UpdatePullRequestInput {
  implicit val encoder: ArgEncoder[UpdatePullRequestInput] = new ArgEncoder[UpdatePullRequestInput] {
    override def encode(value: UpdatePullRequestInput): __Value =
      __ObjectValue(List("assigneeIds" -> value.assigneeIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "baseRefName" -> value.baseRefName.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "labelIds" -> value.labelIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "maintainerCanModify" -> value.maintainerCanModify.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "milestoneId" -> value.milestoneId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "projectIds" -> value.projectIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "pullRequestId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestId), "state" -> value.state.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[PullRequestUpdateState]].encode(value)), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdatePullRequestReviewCommentInput(body : String, clientMutationId : scala.Option[String] = None, pullRequestReviewCommentId : String)
object UpdatePullRequestReviewCommentInput {
  implicit val encoder: ArgEncoder[UpdatePullRequestReviewCommentInput] = new ArgEncoder[UpdatePullRequestReviewCommentInput] {
    override def encode(value: UpdatePullRequestReviewCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestReviewCommentId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestReviewCommentId)))
  }
}
final case class UpdatePullRequestReviewInput(body : String, clientMutationId : scala.Option[String] = None, pullRequestReviewId : String)
object UpdatePullRequestReviewInput {
  implicit val encoder: ArgEncoder[UpdatePullRequestReviewInput] = new ArgEncoder[UpdatePullRequestReviewInput] {
    override def encode(value: UpdatePullRequestReviewInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "pullRequestReviewId" -> implicitly[ArgEncoder[String]].encode(value.pullRequestReviewId)))
  }
}
final case class UpdateRefInput(clientMutationId : scala.Option[String] = None, force : scala.Option[Boolean] = None, oid : GitObjectID, refId : String)
object UpdateRefInput {
  implicit val encoder: ArgEncoder[UpdateRefInput] = new ArgEncoder[UpdateRefInput] {
    override def encode(value: UpdateRefInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "force" -> value.force.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "oid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.oid), "refId" -> implicitly[ArgEncoder[String]].encode(value.refId)))
  }
}
final case class UpdateRefsInput(clientMutationId : scala.Option[String] = None, refUpdates : List[RefUpdate] = Nil, repositoryId : String)
object UpdateRefsInput {
  implicit val encoder: ArgEncoder[UpdateRefsInput] = new ArgEncoder[UpdateRefsInput] {
    override def encode(value: UpdateRefsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "refUpdates" -> __ListValue(value.refUpdates.map(value => implicitly[ArgEncoder[RefUpdate]].encode(value))), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId)))
  }
}
final case class UpdateRepositoryInput(clientMutationId : scala.Option[String] = None, description : scala.Option[String] = None, hasDiscussionsEnabled : scala.Option[Boolean] = None, hasIssuesEnabled : scala.Option[Boolean] = None, hasProjectsEnabled : scala.Option[Boolean] = None, hasWikiEnabled : scala.Option[Boolean] = None, homepageUrl : scala.Option[URI] = None, name : scala.Option[String] = None, repositoryId : String, template : scala.Option[Boolean] = None)
object UpdateRepositoryInput {
  implicit val encoder: ArgEncoder[UpdateRepositoryInput] = new ArgEncoder[UpdateRepositoryInput] {
    override def encode(value: UpdateRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "description" -> value.description.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "hasDiscussionsEnabled" -> value.hasDiscussionsEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "hasIssuesEnabled" -> value.hasIssuesEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "hasProjectsEnabled" -> value.hasProjectsEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "hasWikiEnabled" -> value.hasWikiEnabled.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "homepageUrl" -> value.homepageUrl.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[URI]].encode(value)), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "template" -> value.template.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value))))
  }
}
final case class UpdateRepositoryRulesetInput(bypassActorIds : scala.Option[List[String]] = None, bypassMode : scala.Option[RuleBypassMode] = None, clientMutationId : scala.Option[String] = None, conditions : scala.Option[RepositoryRuleConditionsInput] = None, enforcement : scala.Option[RuleEnforcement] = None, name : scala.Option[String] = None, repositoryRulesetId : String, rules : scala.Option[List[RepositoryRuleInput]] = None, target : scala.Option[RepositoryRulesetTarget] = None)
object UpdateRepositoryRulesetInput {
  implicit val encoder: ArgEncoder[UpdateRepositoryRulesetInput] = new ArgEncoder[UpdateRepositoryRulesetInput] {
    override def encode(value: UpdateRepositoryRulesetInput): __Value =
      __ObjectValue(List("bypassActorIds" -> value.bypassActorIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "bypassMode" -> value.bypassMode.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RuleBypassMode]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "conditions" -> value.conditions.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryRuleConditionsInput]].encode(value)), "enforcement" -> value.enforcement.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RuleEnforcement]].encode(value)), "name" -> value.name.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryRulesetId" -> implicitly[ArgEncoder[String]].encode(value.repositoryRulesetId), "rules" -> value.rules.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[RepositoryRuleInput]].encode(value)))), "target" -> value.target.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[RepositoryRulesetTarget]].encode(value))))
  }
}
final case class UpdateRepositoryWebCommitSignoffSettingInput(clientMutationId : scala.Option[String] = None, repositoryId : String, webCommitSignoffRequired : Boolean)
object UpdateRepositoryWebCommitSignoffSettingInput {
  implicit val encoder: ArgEncoder[UpdateRepositoryWebCommitSignoffSettingInput] = new ArgEncoder[UpdateRepositoryWebCommitSignoffSettingInput] {
    override def encode(value: UpdateRepositoryWebCommitSignoffSettingInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "webCommitSignoffRequired" -> implicitly[ArgEncoder[Boolean]].encode(value.webCommitSignoffRequired)))
  }
}
final case class UpdateSponsorshipPreferencesInput(clientMutationId : scala.Option[String] = None, privacyLevel : scala.Option[SponsorshipPrivacy] = None, receiveEmails : scala.Option[Boolean] = None, sponsorId : scala.Option[String] = None, sponsorLogin : scala.Option[String] = None, sponsorableId : scala.Option[String] = None, sponsorableLogin : scala.Option[String] = None)
object UpdateSponsorshipPreferencesInput {
  implicit val encoder: ArgEncoder[UpdateSponsorshipPreferencesInput] = new ArgEncoder[UpdateSponsorshipPreferencesInput] {
    override def encode(value: UpdateSponsorshipPreferencesInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "privacyLevel" -> value.privacyLevel.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[SponsorshipPrivacy]].encode(value)), "receiveEmails" -> value.receiveEmails.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "sponsorId" -> value.sponsorId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorLogin" -> value.sponsorLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableId" -> value.sponsorableId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "sponsorableLogin" -> value.sponsorableLogin.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateSubscriptionInput(clientMutationId : scala.Option[String] = None, state : SubscriptionState, subscribableId : String)
object UpdateSubscriptionInput {
  implicit val encoder: ArgEncoder[UpdateSubscriptionInput] = new ArgEncoder[UpdateSubscriptionInput] {
    override def encode(value: UpdateSubscriptionInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "state" -> implicitly[ArgEncoder[SubscriptionState]].encode(value.state), "subscribableId" -> implicitly[ArgEncoder[String]].encode(value.subscribableId)))
  }
}
final case class UpdateTeamDiscussionCommentInput(body : String, bodyVersion : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, id : String)
object UpdateTeamDiscussionCommentInput {
  implicit val encoder: ArgEncoder[UpdateTeamDiscussionCommentInput] = new ArgEncoder[UpdateTeamDiscussionCommentInput] {
    override def encode(value: UpdateTeamDiscussionCommentInput): __Value =
      __ObjectValue(List("body" -> implicitly[ArgEncoder[String]].encode(value.body), "bodyVersion" -> value.bodyVersion.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class UpdateTeamDiscussionInput(body : scala.Option[String] = None, bodyVersion : scala.Option[String] = None, clientMutationId : scala.Option[String] = None, id : String, pinned : scala.Option[Boolean] = None, title : scala.Option[String] = None)
object UpdateTeamDiscussionInput {
  implicit val encoder: ArgEncoder[UpdateTeamDiscussionInput] = new ArgEncoder[UpdateTeamDiscussionInput] {
    override def encode(value: UpdateTeamDiscussionInput): __Value =
      __ObjectValue(List("body" -> value.body.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "bodyVersion" -> value.bodyVersion.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id), "pinned" -> value.pinned.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "title" -> value.title.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value))))
  }
}
final case class UpdateTeamReviewAssignmentInput(algorithm : scala.Option[TeamReviewAssignmentAlgorithm] = None, clientMutationId : scala.Option[String] = None, enabled : Boolean, excludedTeamMemberIds : scala.Option[List[String]] = None, id : String, notifyTeam : scala.Option[Boolean] = None, teamMemberCount : scala.Option[Int] = None)
object UpdateTeamReviewAssignmentInput {
  implicit val encoder: ArgEncoder[UpdateTeamReviewAssignmentInput] = new ArgEncoder[UpdateTeamReviewAssignmentInput] {
    override def encode(value: UpdateTeamReviewAssignmentInput): __Value =
      __ObjectValue(List("algorithm" -> value.algorithm.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[TeamReviewAssignmentAlgorithm]].encode(value)), "clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "enabled" -> implicitly[ArgEncoder[Boolean]].encode(value.enabled), "excludedTeamMemberIds" -> value.excludedTeamMemberIds.fold(__NullValue: __Value)(value => __ListValue(value.map(value => implicitly[ArgEncoder[String]].encode(value)))), "id" -> implicitly[ArgEncoder[String]].encode(value.id), "notifyTeam" -> value.notifyTeam.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Boolean]].encode(value)), "teamMemberCount" -> value.teamMemberCount.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[Int]].encode(value))))
  }
}
final case class UpdateTeamsRepositoryInput(clientMutationId : scala.Option[String] = None, permission : RepositoryPermission, repositoryId : String, teamIds : List[String] = Nil)
object UpdateTeamsRepositoryInput {
  implicit val encoder: ArgEncoder[UpdateTeamsRepositoryInput] = new ArgEncoder[UpdateTeamsRepositoryInput] {
    override def encode(value: UpdateTeamsRepositoryInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "permission" -> implicitly[ArgEncoder[RepositoryPermission]].encode(value.permission), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "teamIds" -> __ListValue(value.teamIds.map(value => implicitly[ArgEncoder[String]].encode(value)))))
  }
}
final case class UpdateTopicsInput(clientMutationId : scala.Option[String] = None, repositoryId : String, topicNames : List[String] = Nil)
object UpdateTopicsInput {
  implicit val encoder: ArgEncoder[UpdateTopicsInput] = new ArgEncoder[UpdateTopicsInput] {
    override def encode(value: UpdateTopicsInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "repositoryId" -> implicitly[ArgEncoder[String]].encode(value.repositoryId), "topicNames" -> __ListValue(value.topicNames.map(value => implicitly[ArgEncoder[String]].encode(value)))))
  }
}
final case class UserStatusOrder(direction : OrderDirection, field : UserStatusOrderField)
object UserStatusOrder {
  implicit val encoder: ArgEncoder[UserStatusOrder] = new ArgEncoder[UserStatusOrder] {
    override def encode(value: UserStatusOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[UserStatusOrderField]].encode(value.field)))
  }
}
final case class VerifiableDomainOrder(direction : OrderDirection, field : VerifiableDomainOrderField)
object VerifiableDomainOrder {
  implicit val encoder: ArgEncoder[VerifiableDomainOrder] = new ArgEncoder[VerifiableDomainOrder] {
    override def encode(value: VerifiableDomainOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[VerifiableDomainOrderField]].encode(value.field)))
  }
}
final case class VerifyVerifiableDomainInput(clientMutationId : scala.Option[String] = None, id : String)
object VerifyVerifiableDomainInput {
  implicit val encoder: ArgEncoder[VerifyVerifiableDomainInput] = new ArgEncoder[VerifyVerifiableDomainInput] {
    override def encode(value: VerifyVerifiableDomainInput): __Value =
      __ObjectValue(List("clientMutationId" -> value.clientMutationId.fold(__NullValue: __Value)(value => implicitly[ArgEncoder[String]].encode(value)), "id" -> implicitly[ArgEncoder[String]].encode(value.id)))
  }
}
final case class WorkflowRunOrder(direction : OrderDirection, field : WorkflowRunOrderField)
object WorkflowRunOrder {
  implicit val encoder: ArgEncoder[WorkflowRunOrder] = new ArgEncoder[WorkflowRunOrder] {
    override def encode(value: WorkflowRunOrder): __Value =
      __ObjectValue(List("direction" -> implicitly[ArgEncoder[OrderDirection]].encode(value.direction), "field" -> implicitly[ArgEncoder[WorkflowRunOrderField]].encode(value.field)))
  }
}
  type Query = _root_.caliban.client.Operations.RootQuery
object Query {
  /**
 * Look up a code of conduct by its key
 */
def codeOfConduct[A](key : String)(innerSelection: SelectionBuilder[CodeOfConduct, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("codeOfConduct", OptionOf(Obj(innerSelection)), arguments = List(Argument("key", key, "String!")(encoder0)))
  /**
 * Look up a code of conduct by its key
 */
def codesOfConduct[A](innerSelection: SelectionBuilder[CodeOfConduct, A]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[List[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("codesOfConduct", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  /**
 * Look up an enterprise by URL slug.
 */
def enterprise[A](invitationToken : scala.Option[String] = None, slug : String)(innerSelection: SelectionBuilder[Enterprise, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterprise", OptionOf(Obj(innerSelection)), arguments = List(Argument("invitationToken", invitationToken, "String")(encoder0), Argument("slug", slug, "String!")(encoder1)))
  /**
 * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
 */
def enterpriseAdministratorInvitation[A](enterpriseSlug : String, role : EnterpriseAdministratorRole, userLogin : String)(innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A])(implicit encoder0: ArgEncoder[String], encoder1: ArgEncoder[EnterpriseAdministratorRole], encoder2: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseAdministratorInvitation", OptionOf(Obj(innerSelection)), arguments = List(Argument("enterpriseSlug", enterpriseSlug, "String!")(encoder0), Argument("role", role, "EnterpriseAdministratorRole!")(encoder1), Argument("userLogin", userLogin, "String!")(encoder2)))
  /**
 * Look up a pending enterprise administrator invitation by invitation token.
 */
def enterpriseAdministratorInvitationByToken[A](invitationToken : String)(innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enterpriseAdministratorInvitationByToken", OptionOf(Obj(innerSelection)), arguments = List(Argument("invitationToken", invitationToken, "String!")(encoder0)))
  /**
 * Look up an open source license by its key
 */
def license[A](key : String)(innerSelection: SelectionBuilder[License, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("license", OptionOf(Obj(innerSelection)), arguments = List(Argument("key", key, "String!")(encoder0)))
  /**
 * Return a list of known open source licenses
 */
def licenses[A](innerSelection: SelectionBuilder[License, A]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("licenses", ListOf(OptionOf(Obj(innerSelection))))
  /**
 * Get alphabetically sorted list of Marketplace categories
 */
def marketplaceCategories[A](excludeEmpty : scala.Option[Boolean] = None, excludeSubcategories : scala.Option[Boolean] = None, includeCategories : scala.Option[List[String]] = None)(innerSelection: SelectionBuilder[MarketplaceCategory, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[scala.Option[Boolean]], encoder2: ArgEncoder[scala.Option[List[String]]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, List[A]] = _root_.caliban.client.SelectionBuilder.Field("marketplaceCategories", ListOf(Obj(innerSelection)), arguments = List(Argument("excludeEmpty", excludeEmpty, "Boolean")(encoder0), Argument("excludeSubcategories", excludeSubcategories, "Boolean")(encoder1), Argument("includeCategories", includeCategories, "[String!]")(encoder2)))
  /**
 * Look up a Marketplace category by its slug.
 */
def marketplaceCategory[A](slug : String, useTopicAliases : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[MarketplaceCategory, A])(implicit encoder0: ArgEncoder[String], encoder1: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("marketplaceCategory", OptionOf(Obj(innerSelection)), arguments = List(Argument("slug", slug, "String!")(encoder0), Argument("useTopicAliases", useTopicAliases, "Boolean")(encoder1)))
  /**
 * Look up a single Marketplace listing
 */
def marketplaceListing[A](slug : String)(innerSelection: SelectionBuilder[MarketplaceListing, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("marketplaceListing", OptionOf(Obj(innerSelection)), arguments = List(Argument("slug", slug, "String!")(encoder0)))
  /**
 * Look up Marketplace listings
 */
def marketplaceListings[A](adminId : scala.Option[String] = None, after : scala.Option[String] = None, allStates : scala.Option[Boolean] = None, before : scala.Option[String] = None, categorySlug : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, organizationId : scala.Option[String] = None, primaryCategoryOnly : scala.Option[Boolean] = None, slugs : scala.Option[List[scala.Option[String]]] = None, useTopicAliases : scala.Option[Boolean] = None, viewerCanAdmin : scala.Option[Boolean] = None, withFreeTrialsOnly : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[MarketplaceListingConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Boolean]], encoder3: ArgEncoder[scala.Option[String]], encoder4: ArgEncoder[scala.Option[String]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[Int]], encoder7: ArgEncoder[scala.Option[String]], encoder8: ArgEncoder[scala.Option[Boolean]], encoder9: ArgEncoder[scala.Option[List[scala.Option[String]]]], encoder10: ArgEncoder[scala.Option[Boolean]], encoder11: ArgEncoder[scala.Option[Boolean]], encoder12: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("marketplaceListings", Obj(innerSelection), arguments = List(Argument("adminId", adminId, "ID")(encoder0), Argument("after", after, "String")(encoder1), Argument("allStates", allStates, "Boolean")(encoder2), Argument("before", before, "String")(encoder3), Argument("categorySlug", categorySlug, "String")(encoder4), Argument("first", first, "Int")(encoder5), Argument("last", last, "Int")(encoder6), Argument("organizationId", organizationId, "ID")(encoder7), Argument("primaryCategoryOnly", primaryCategoryOnly, "Boolean")(encoder8), Argument("slugs", slugs, "[String]")(encoder9), Argument("useTopicAliases", useTopicAliases, "Boolean")(encoder10), Argument("viewerCanAdmin", viewerCanAdmin, "Boolean")(encoder11), Argument("withFreeTrialsOnly", withFreeTrialsOnly, "Boolean")(encoder12)))
  /**
 * Return information about the GitHub instance
 */
def meta[A](innerSelection: SelectionBuilder[GitHubMetadata, A]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("meta", Obj(innerSelection))
  /**
 * Fetches an object given its ID.
 */
def node[A](id : String)(onAddedToMergeQueueEvent: SelectionBuilder[AddedToMergeQueueEvent, A], onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onApp: SelectionBuilder[App, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onAutoMergeDisabledEvent: SelectionBuilder[AutoMergeDisabledEvent, A], onAutoMergeEnabledEvent: SelectionBuilder[AutoMergeEnabledEvent, A], onAutoRebaseEnabledEvent: SelectionBuilder[AutoRebaseEnabledEvent, A], onAutoSquashEnabledEvent: SelectionBuilder[AutoSquashEnabledEvent, A], onAutomaticBaseChangeFailedEvent: SelectionBuilder[AutomaticBaseChangeFailedEvent, A], onAutomaticBaseChangeSucceededEvent: SelectionBuilder[AutomaticBaseChangeSucceededEvent, A], onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onBlob: SelectionBuilder[Blob, A], onBot: SelectionBuilder[Bot, A], onBranchProtectionRule: SelectionBuilder[BranchProtectionRule, A], onBypassForcePushAllowance: SelectionBuilder[BypassForcePushAllowance, A], onBypassPullRequestAllowance: SelectionBuilder[BypassPullRequestAllowance, A], onCWE: SelectionBuilder[CWE, A], onCheckRun: SelectionBuilder[CheckRun, A], onCheckSuite: SelectionBuilder[CheckSuite, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCodeOfConduct: SelectionBuilder[CodeOfConduct, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onCommit: SelectionBuilder[Commit, A], onCommitComment: SelectionBuilder[CommitComment, A], onCommitCommentThread: SelectionBuilder[CommitCommentThread, A], onComparison: SelectionBuilder[Comparison, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDependencyGraphManifest: SelectionBuilder[DependencyGraphManifest, A], onDeployKey: SelectionBuilder[DeployKey, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeployment: SelectionBuilder[Deployment, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onDeploymentReview: SelectionBuilder[DeploymentReview, A], onDeploymentStatus: SelectionBuilder[DeploymentStatus, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionCategory: SelectionBuilder[DiscussionCategory, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onDiscussionPoll: SelectionBuilder[DiscussionPoll, A], onDiscussionPollOption: SelectionBuilder[DiscussionPollOption, A], onDraftIssue: SelectionBuilder[DraftIssue, A], onEnterprise: SelectionBuilder[Enterprise, A], onEnterpriseAdministratorInvitation: SelectionBuilder[EnterpriseAdministratorInvitation, A], onEnterpriseIdentityProvider: SelectionBuilder[EnterpriseIdentityProvider, A], onEnterpriseRepositoryInfo: SelectionBuilder[EnterpriseRepositoryInfo, A], onEnterpriseServerInstallation: SelectionBuilder[EnterpriseServerInstallation, A], onEnterpriseServerUserAccount: SelectionBuilder[EnterpriseServerUserAccount, A], onEnterpriseServerUserAccountEmail: SelectionBuilder[EnterpriseServerUserAccountEmail, A], onEnterpriseServerUserAccountsUpload: SelectionBuilder[EnterpriseServerUserAccountsUpload, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onEnvironment: SelectionBuilder[Environment, A], onExternalIdentity: SelectionBuilder[ExternalIdentity, A], onGist: SelectionBuilder[Gist, A], onGistComment: SelectionBuilder[GistComment, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIpAllowListEntry: SelectionBuilder[IpAllowListEntry, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabel: SelectionBuilder[Label, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLanguage: SelectionBuilder[Language, A], onLicense: SelectionBuilder[License, A], onLinkedBranch: SelectionBuilder[LinkedBranch, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMannequin: SelectionBuilder[Mannequin, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMarketplaceCategory: SelectionBuilder[MarketplaceCategory, A], onMarketplaceListing: SelectionBuilder[MarketplaceListing, A], onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A], onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A], onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMergeQueue: SelectionBuilder[MergeQueue, A], onMergeQueueEntry: SelectionBuilder[MergeQueueEntry, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMigrationSource: SelectionBuilder[MigrationSource, A], onMilestone: SelectionBuilder[Milestone, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onOIDCProvider: SelectionBuilder[OIDCProvider, A], onOauthApplicationCreateAuditEntry: SelectionBuilder[OauthApplicationCreateAuditEntry, A], onOrgAddBillingManagerAuditEntry: SelectionBuilder[OrgAddBillingManagerAuditEntry, A], onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A], onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A], onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A], onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A], onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A], onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A], onOrgDisableSamlAuditEntry: SelectionBuilder[OrgDisableSamlAuditEntry, A], onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A], onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A], onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A], onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A], onOrgInviteMemberAuditEntry: SelectionBuilder[OrgInviteMemberAuditEntry, A], onOrgInviteToBusinessAuditEntry: SelectionBuilder[OrgInviteToBusinessAuditEntry, A], onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A], onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A], onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A], onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A], onOrgRemoveMemberAuditEntry: SelectionBuilder[OrgRemoveMemberAuditEntry, A], onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A], onOrgRestoreMemberAuditEntry: SelectionBuilder[OrgRestoreMemberAuditEntry, A], onOrgUnblockUserAuditEntry: SelectionBuilder[OrgUnblockUserAuditEntry, A], onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A], onOrgUpdateMemberAuditEntry: SelectionBuilder[OrgUpdateMemberAuditEntry, A], onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A], onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A], onOrganization: SelectionBuilder[Organization, A], onOrganizationIdentityProvider: SelectionBuilder[OrganizationIdentityProvider, A], onOrganizationInvitation: SelectionBuilder[OrganizationInvitation, A], onOrganizationMigration: SelectionBuilder[OrganizationMigration, A], onPackage: SelectionBuilder[Package, A], onPackageFile: SelectionBuilder[PackageFile, A], onPackageTag: SelectionBuilder[PackageTag, A], onPackageVersion: SelectionBuilder[PackageVersion, A], onPinnedDiscussion: SelectionBuilder[PinnedDiscussion, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onPinnedIssue: SelectionBuilder[PinnedIssue, A], onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A], onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A], onProject: SelectionBuilder[Project, A], onProjectCard: SelectionBuilder[ProjectCard, A], onProjectColumn: SelectionBuilder[ProjectColumn, A], onProjectV2: SelectionBuilder[ProjectV2, A], onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2Item: SelectionBuilder[ProjectV2Item, A], onProjectV2ItemFieldDateValue: SelectionBuilder[ProjectV2ItemFieldDateValue, A], onProjectV2ItemFieldIterationValue: SelectionBuilder[ProjectV2ItemFieldIterationValue, A], onProjectV2ItemFieldNumberValue: SelectionBuilder[ProjectV2ItemFieldNumberValue, A], onProjectV2ItemFieldSingleSelectValue: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A], onProjectV2ItemFieldTextValue: SelectionBuilder[ProjectV2ItemFieldTextValue, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A], onProjectV2View: SelectionBuilder[ProjectV2View, A], onProjectV2Workflow: SelectionBuilder[ProjectV2Workflow, A], onPublicKey: SelectionBuilder[PublicKey, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestCommit: SelectionBuilder[PullRequestCommit, A], onPullRequestCommitCommentThread: SelectionBuilder[PullRequestCommitCommentThread, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onPullRequestThread: SelectionBuilder[PullRequestThread, A], onPush: SelectionBuilder[Push, A], onPushAllowance: SelectionBuilder[PushAllowance, A], onReaction: SelectionBuilder[Reaction, A], onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A], onRef: SelectionBuilder[Ref, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRelease: SelectionBuilder[Release, A], onReleaseAsset: SelectionBuilder[ReleaseAsset, A], onRemovedFromMergeQueueEvent: SelectionBuilder[RemovedFromMergeQueueEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A], onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A], onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A], onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A], onRepoChangeMergeSettingAuditEntry: SelectionBuilder[RepoChangeMergeSettingAuditEntry, A], onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A], onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A], onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A], onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A], onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A], onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A], onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A], onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A], onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A], onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A], onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A], onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A], onRepoRemoveMemberAuditEntry: SelectionBuilder[RepoRemoveMemberAuditEntry, A], onRepoRemoveTopicAuditEntry: SelectionBuilder[RepoRemoveTopicAuditEntry, A], onRepository: SelectionBuilder[Repository, A], onRepositoryInvitation: SelectionBuilder[RepositoryInvitation, A], onRepositoryMigration: SelectionBuilder[RepositoryMigration, A], onRepositoryRule: SelectionBuilder[RepositoryRule, A], onRepositoryRuleset: SelectionBuilder[RepositoryRuleset, A], onRepositoryRulesetBypassActor: SelectionBuilder[RepositoryRulesetBypassActor, A], onRepositoryTopic: SelectionBuilder[RepositoryTopic, A], onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A], onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A], onRepositoryVulnerabilityAlert: SelectionBuilder[RepositoryVulnerabilityAlert, A], onReviewDismissalAllowance: SelectionBuilder[ReviewDismissalAllowance, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequest: SelectionBuilder[ReviewRequest, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSavedReply: SelectionBuilder[SavedReply, A], onSecurityAdvisory: SelectionBuilder[SecurityAdvisory, A], onSponsorsActivity: SelectionBuilder[SponsorsActivity, A], onSponsorsListing: SelectionBuilder[SponsorsListing, A], onSponsorsListingFeaturedItem: SelectionBuilder[SponsorsListingFeaturedItem, A], onSponsorsTier: SelectionBuilder[SponsorsTier, A], onSponsorship: SelectionBuilder[Sponsorship, A], onSponsorshipNewsletter: SelectionBuilder[SponsorshipNewsletter, A], onStatus: SelectionBuilder[Status, A], onStatusCheckRollup: SelectionBuilder[StatusCheckRollup, A], onStatusContext: SelectionBuilder[StatusContext, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTag: SelectionBuilder[Tag, A], onTeam: SelectionBuilder[Team, A], onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A], onTeamAddRepositoryAuditEntry: SelectionBuilder[TeamAddRepositoryAuditEntry, A], onTeamChangeParentTeamAuditEntry: SelectionBuilder[TeamChangeParentTeamAuditEntry, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A], onTeamRemoveMemberAuditEntry: SelectionBuilder[TeamRemoveMemberAuditEntry, A], onTeamRemoveRepositoryAuditEntry: SelectionBuilder[TeamRemoveRepositoryAuditEntry, A], onTopic: SelectionBuilder[Topic, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onTree: SelectionBuilder[Tree, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUser: SelectionBuilder[User, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A], onUserContentEdit: SelectionBuilder[UserContentEdit, A], onUserStatus: SelectionBuilder[UserStatus, A], onVerifiableDomain: SelectionBuilder[VerifiableDomain, A], onWorkflow: SelectionBuilder[Workflow, A], onWorkflowRun: SelectionBuilder[WorkflowRun, A], onWorkflowRunFile: SelectionBuilder[WorkflowRunFile, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> Obj(onAddedToMergeQueueEvent), "AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "App" -> Obj(onApp), "AssignedEvent" -> Obj(onAssignedEvent), "AutoMergeDisabledEvent" -> Obj(onAutoMergeDisabledEvent), "AutoMergeEnabledEvent" -> Obj(onAutoMergeEnabledEvent), "AutoRebaseEnabledEvent" -> Obj(onAutoRebaseEnabledEvent), "AutoSquashEnabledEvent" -> Obj(onAutoSquashEnabledEvent), "AutomaticBaseChangeFailedEvent" -> Obj(onAutomaticBaseChangeFailedEvent), "AutomaticBaseChangeSucceededEvent" -> Obj(onAutomaticBaseChangeSucceededEvent), "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "Blob" -> Obj(onBlob), "Bot" -> Obj(onBot), "BranchProtectionRule" -> Obj(onBranchProtectionRule), "BypassForcePushAllowance" -> Obj(onBypassForcePushAllowance), "BypassPullRequestAllowance" -> Obj(onBypassPullRequestAllowance), "CWE" -> Obj(onCWE), "CheckRun" -> Obj(onCheckRun), "CheckSuite" -> Obj(onCheckSuite), "ClosedEvent" -> Obj(onClosedEvent), "CodeOfConduct" -> Obj(onCodeOfConduct), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "Commit" -> Obj(onCommit), "CommitComment" -> Obj(onCommitComment), "CommitCommentThread" -> Obj(onCommitCommentThread), "Comparison" -> Obj(onComparison), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DependencyGraphManifest" -> Obj(onDependencyGraphManifest), "DeployKey" -> Obj(onDeployKey), "DeployedEvent" -> Obj(onDeployedEvent), "Deployment" -> Obj(onDeployment), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "DeploymentReview" -> Obj(onDeploymentReview), "DeploymentStatus" -> Obj(onDeploymentStatus), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "Discussion" -> Obj(onDiscussion), "DiscussionCategory" -> Obj(onDiscussionCategory), "DiscussionComment" -> Obj(onDiscussionComment), "DiscussionPoll" -> Obj(onDiscussionPoll), "DiscussionPollOption" -> Obj(onDiscussionPollOption), "DraftIssue" -> Obj(onDraftIssue), "Enterprise" -> Obj(onEnterprise), "EnterpriseAdministratorInvitation" -> Obj(onEnterpriseAdministratorInvitation), "EnterpriseIdentityProvider" -> Obj(onEnterpriseIdentityProvider), "EnterpriseRepositoryInfo" -> Obj(onEnterpriseRepositoryInfo), "EnterpriseServerInstallation" -> Obj(onEnterpriseServerInstallation), "EnterpriseServerUserAccount" -> Obj(onEnterpriseServerUserAccount), "EnterpriseServerUserAccountEmail" -> Obj(onEnterpriseServerUserAccountEmail), "EnterpriseServerUserAccountsUpload" -> Obj(onEnterpriseServerUserAccountsUpload), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Environment" -> Obj(onEnvironment), "ExternalIdentity" -> Obj(onExternalIdentity), "Gist" -> Obj(onGist), "GistComment" -> Obj(onGistComment), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IpAllowListEntry" -> Obj(onIpAllowListEntry), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "Label" -> Obj(onLabel), "LabeledEvent" -> Obj(onLabeledEvent), "Language" -> Obj(onLanguage), "License" -> Obj(onLicense), "LinkedBranch" -> Obj(onLinkedBranch), "LockedEvent" -> Obj(onLockedEvent), "Mannequin" -> Obj(onMannequin), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MarketplaceCategory" -> Obj(onMarketplaceCategory), "MarketplaceListing" -> Obj(onMarketplaceListing), "MembersCanDeleteReposClearAuditEntry" -> Obj(onMembersCanDeleteReposClearAuditEntry), "MembersCanDeleteReposDisableAuditEntry" -> Obj(onMembersCanDeleteReposDisableAuditEntry), "MembersCanDeleteReposEnableAuditEntry" -> Obj(onMembersCanDeleteReposEnableAuditEntry), "MentionedEvent" -> Obj(onMentionedEvent), "MergeQueue" -> Obj(onMergeQueue), "MergeQueueEntry" -> Obj(onMergeQueueEntry), "MergedEvent" -> Obj(onMergedEvent), "MigrationSource" -> Obj(onMigrationSource), "Milestone" -> Obj(onMilestone), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "OIDCProvider" -> Obj(onOIDCProvider), "OauthApplicationCreateAuditEntry" -> Obj(onOauthApplicationCreateAuditEntry), "OrgAddBillingManagerAuditEntry" -> Obj(onOrgAddBillingManagerAuditEntry), "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry), "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigDisableCollaboratorsOnlyAuditEntry), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigEnableCollaboratorsOnlyAuditEntry), "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry), "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(onOrgDisableOauthAppRestrictionsAuditEntry), "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry), "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(onOrgDisableTwoFactorRequirementAuditEntry), "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(onOrgEnableOauthAppRestrictionsAuditEntry), "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry), "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(onOrgEnableTwoFactorRequirementAuditEntry), "OrgInviteMemberAuditEntry" -> Obj(onOrgInviteMemberAuditEntry), "OrgInviteToBusinessAuditEntry" -> Obj(onOrgInviteToBusinessAuditEntry), "OrgOauthAppAccessApprovedAuditEntry" -> Obj(onOrgOauthAppAccessApprovedAuditEntry), "OrgOauthAppAccessDeniedAuditEntry" -> Obj(onOrgOauthAppAccessDeniedAuditEntry), "OrgOauthAppAccessRequestedAuditEntry" -> Obj(onOrgOauthAppAccessRequestedAuditEntry), "OrgRemoveBillingManagerAuditEntry" -> Obj(onOrgRemoveBillingManagerAuditEntry), "OrgRemoveMemberAuditEntry" -> Obj(onOrgRemoveMemberAuditEntry), "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(onOrgRemoveOutsideCollaboratorAuditEntry), "OrgRestoreMemberAuditEntry" -> Obj(onOrgRestoreMemberAuditEntry), "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(onOrgUpdateDefaultRepositoryPermissionAuditEntry), "OrgUpdateMemberAuditEntry" -> Obj(onOrgUpdateMemberAuditEntry), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryCreationPermissionAuditEntry), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry), "Organization" -> Obj(onOrganization), "OrganizationIdentityProvider" -> Obj(onOrganizationIdentityProvider), "OrganizationInvitation" -> Obj(onOrganizationInvitation), "OrganizationMigration" -> Obj(onOrganizationMigration), "Package" -> Obj(onPackage), "PackageFile" -> Obj(onPackageFile), "PackageTag" -> Obj(onPackageTag), "PackageVersion" -> Obj(onPackageVersion), "PinnedDiscussion" -> Obj(onPinnedDiscussion), "PinnedEvent" -> Obj(onPinnedEvent), "PinnedIssue" -> Obj(onPinnedIssue), "PrivateRepositoryForkingDisableAuditEntry" -> Obj(onPrivateRepositoryForkingDisableAuditEntry), "PrivateRepositoryForkingEnableAuditEntry" -> Obj(onPrivateRepositoryForkingEnableAuditEntry), "Project" -> Obj(onProject), "ProjectCard" -> Obj(onProjectCard), "ProjectColumn" -> Obj(onProjectColumn), "ProjectV2" -> Obj(onProjectV2), "ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2Item" -> Obj(onProjectV2Item), "ProjectV2ItemFieldDateValue" -> Obj(onProjectV2ItemFieldDateValue), "ProjectV2ItemFieldIterationValue" -> Obj(onProjectV2ItemFieldIterationValue), "ProjectV2ItemFieldNumberValue" -> Obj(onProjectV2ItemFieldNumberValue), "ProjectV2ItemFieldSingleSelectValue" -> Obj(onProjectV2ItemFieldSingleSelectValue), "ProjectV2ItemFieldTextValue" -> Obj(onProjectV2ItemFieldTextValue), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField), "ProjectV2View" -> Obj(onProjectV2View), "ProjectV2Workflow" -> Obj(onProjectV2Workflow), "PublicKey" -> Obj(onPublicKey), "PullRequest" -> Obj(onPullRequest), "PullRequestCommit" -> Obj(onPullRequestCommit), "PullRequestCommitCommentThread" -> Obj(onPullRequestCommitCommentThread), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "PullRequestThread" -> Obj(onPullRequestThread), "Push" -> Obj(onPush), "PushAllowance" -> Obj(onPushAllowance), "Reaction" -> Obj(onReaction), "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent), "Ref" -> Obj(onRef), "ReferencedEvent" -> Obj(onReferencedEvent), "Release" -> Obj(onRelease), "ReleaseAsset" -> Obj(onReleaseAsset), "RemovedFromMergeQueueEvent" -> Obj(onRemovedFromMergeQueueEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry), "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry), "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry), "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry), "RepoChangeMergeSettingAuditEntry" -> Obj(onRepoChangeMergeSettingAuditEntry), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigDisableAnonymousGitAccessAuditEntry), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigDisableCollaboratorsOnlyAuditEntry), "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(onRepoConfigDisableContributorsOnlyAuditEntry), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigDisableSockpuppetDisallowedAuditEntry), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigEnableAnonymousGitAccessAuditEntry), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigEnableCollaboratorsOnlyAuditEntry), "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(onRepoConfigEnableContributorsOnlyAuditEntry), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigEnableSockpuppetDisallowedAuditEntry), "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigLockAnonymousGitAccessAuditEntry), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigUnlockAnonymousGitAccessAuditEntry), "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry), "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry), "RepoRemoveMemberAuditEntry" -> Obj(onRepoRemoveMemberAuditEntry), "RepoRemoveTopicAuditEntry" -> Obj(onRepoRemoveTopicAuditEntry), "Repository" -> Obj(onRepository), "RepositoryInvitation" -> Obj(onRepositoryInvitation), "RepositoryMigration" -> Obj(onRepositoryMigration), "RepositoryRule" -> Obj(onRepositoryRule), "RepositoryRuleset" -> Obj(onRepositoryRuleset), "RepositoryRulesetBypassActor" -> Obj(onRepositoryRulesetBypassActor), "RepositoryTopic" -> Obj(onRepositoryTopic), "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(onRepositoryVisibilityChangeDisableAuditEntry), "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(onRepositoryVisibilityChangeEnableAuditEntry), "RepositoryVulnerabilityAlert" -> Obj(onRepositoryVulnerabilityAlert), "ReviewDismissalAllowance" -> Obj(onReviewDismissalAllowance), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequest" -> Obj(onReviewRequest), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SavedReply" -> Obj(onSavedReply), "SecurityAdvisory" -> Obj(onSecurityAdvisory), "SponsorsActivity" -> Obj(onSponsorsActivity), "SponsorsListing" -> Obj(onSponsorsListing), "SponsorsListingFeaturedItem" -> Obj(onSponsorsListingFeaturedItem), "SponsorsTier" -> Obj(onSponsorsTier), "Sponsorship" -> Obj(onSponsorship), "SponsorshipNewsletter" -> Obj(onSponsorshipNewsletter), "Status" -> Obj(onStatus), "StatusCheckRollup" -> Obj(onStatusCheckRollup), "StatusContext" -> Obj(onStatusContext), "SubscribedEvent" -> Obj(onSubscribedEvent), "Tag" -> Obj(onTag), "Team" -> Obj(onTeam), "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry), "TeamAddRepositoryAuditEntry" -> Obj(onTeamAddRepositoryAuditEntry), "TeamChangeParentTeamAuditEntry" -> Obj(onTeamChangeParentTeamAuditEntry), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment), "TeamRemoveMemberAuditEntry" -> Obj(onTeamRemoveMemberAuditEntry), "TeamRemoveRepositoryAuditEntry" -> Obj(onTeamRemoveRepositoryAuditEntry), "Topic" -> Obj(onTopic), "TransferredEvent" -> Obj(onTransferredEvent), "Tree" -> Obj(onTree), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "User" -> Obj(onUser), "UserBlockedEvent" -> Obj(onUserBlockedEvent), "UserContentEdit" -> Obj(onUserContentEdit), "UserStatus" -> Obj(onUserStatus), "VerifiableDomain" -> Obj(onVerifiableDomain), "Workflow" -> Obj(onWorkflow), "WorkflowRun" -> Obj(onWorkflowRun), "WorkflowRunFile" -> Obj(onWorkflowRunFile)))), arguments = List(Argument("id", id, "ID!")(encoder0)))
  /**
 * Fetches an object given its ID.
 */
def nodeOption[A](id : String)(onAddedToMergeQueueEvent: scala.Option[SelectionBuilder[AddedToMergeQueueEvent, A]] = None, onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onApp: scala.Option[SelectionBuilder[App, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onAutoMergeDisabledEvent: scala.Option[SelectionBuilder[AutoMergeDisabledEvent, A]] = None, onAutoMergeEnabledEvent: scala.Option[SelectionBuilder[AutoMergeEnabledEvent, A]] = None, onAutoRebaseEnabledEvent: scala.Option[SelectionBuilder[AutoRebaseEnabledEvent, A]] = None, onAutoSquashEnabledEvent: scala.Option[SelectionBuilder[AutoSquashEnabledEvent, A]] = None, onAutomaticBaseChangeFailedEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeFailedEvent, A]] = None, onAutomaticBaseChangeSucceededEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]] = None, onBaseRefChangedEvent: scala.Option[SelectionBuilder[BaseRefChangedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onBranchProtectionRule: scala.Option[SelectionBuilder[BranchProtectionRule, A]] = None, onBypassForcePushAllowance: scala.Option[SelectionBuilder[BypassForcePushAllowance, A]] = None, onBypassPullRequestAllowance: scala.Option[SelectionBuilder[BypassPullRequestAllowance, A]] = None, onCWE: scala.Option[SelectionBuilder[CWE, A]] = None, onCheckRun: scala.Option[SelectionBuilder[CheckRun, A]] = None, onCheckSuite: scala.Option[SelectionBuilder[CheckSuite, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCodeOfConduct: scala.Option[SelectionBuilder[CodeOfConduct, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onCommitCommentThread: scala.Option[SelectionBuilder[CommitCommentThread, A]] = None, onComparison: scala.Option[SelectionBuilder[Comparison, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertToDraftEvent: scala.Option[SelectionBuilder[ConvertToDraftEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDependencyGraphManifest: scala.Option[SelectionBuilder[DependencyGraphManifest, A]] = None, onDeployKey: scala.Option[SelectionBuilder[DeployKey, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeployment: scala.Option[SelectionBuilder[Deployment, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onDeploymentReview: scala.Option[SelectionBuilder[DeploymentReview, A]] = None, onDeploymentStatus: scala.Option[SelectionBuilder[DeploymentStatus, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionCategory: scala.Option[SelectionBuilder[DiscussionCategory, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onDiscussionPoll: scala.Option[SelectionBuilder[DiscussionPoll, A]] = None, onDiscussionPollOption: scala.Option[SelectionBuilder[DiscussionPollOption, A]] = None, onDraftIssue: scala.Option[SelectionBuilder[DraftIssue, A]] = None, onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onEnterpriseAdministratorInvitation: scala.Option[SelectionBuilder[EnterpriseAdministratorInvitation, A]] = None, onEnterpriseIdentityProvider: scala.Option[SelectionBuilder[EnterpriseIdentityProvider, A]] = None, onEnterpriseRepositoryInfo: scala.Option[SelectionBuilder[EnterpriseRepositoryInfo, A]] = None, onEnterpriseServerInstallation: scala.Option[SelectionBuilder[EnterpriseServerInstallation, A]] = None, onEnterpriseServerUserAccount: scala.Option[SelectionBuilder[EnterpriseServerUserAccount, A]] = None, onEnterpriseServerUserAccountEmail: scala.Option[SelectionBuilder[EnterpriseServerUserAccountEmail, A]] = None, onEnterpriseServerUserAccountsUpload: scala.Option[SelectionBuilder[EnterpriseServerUserAccountsUpload, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onEnvironment: scala.Option[SelectionBuilder[Environment, A]] = None, onExternalIdentity: scala.Option[SelectionBuilder[ExternalIdentity, A]] = None, onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onGistComment: scala.Option[SelectionBuilder[GistComment, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIpAllowListEntry: scala.Option[SelectionBuilder[IpAllowListEntry, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabel: scala.Option[SelectionBuilder[Label, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLanguage: scala.Option[SelectionBuilder[Language, A]] = None, onLicense: scala.Option[SelectionBuilder[License, A]] = None, onLinkedBranch: scala.Option[SelectionBuilder[LinkedBranch, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMarketplaceCategory: scala.Option[SelectionBuilder[MarketplaceCategory, A]] = None, onMarketplaceListing: scala.Option[SelectionBuilder[MarketplaceListing, A]] = None, onMembersCanDeleteReposClearAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]] = None, onMembersCanDeleteReposDisableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]] = None, onMembersCanDeleteReposEnableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMergeQueue: scala.Option[SelectionBuilder[MergeQueue, A]] = None, onMergeQueueEntry: scala.Option[SelectionBuilder[MergeQueueEntry, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMigrationSource: scala.Option[SelectionBuilder[MigrationSource, A]] = None, onMilestone: scala.Option[SelectionBuilder[Milestone, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onOIDCProvider: scala.Option[SelectionBuilder[OIDCProvider, A]] = None, onOauthApplicationCreateAuditEntry: scala.Option[SelectionBuilder[OauthApplicationCreateAuditEntry, A]] = None, onOrgAddBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgAddBillingManagerAuditEntry, A]] = None, onOrgAddMemberAuditEntry: scala.Option[SelectionBuilder[OrgAddMemberAuditEntry, A]] = None, onOrgBlockUserAuditEntry: scala.Option[SelectionBuilder[OrgBlockUserAuditEntry, A]] = None, onOrgConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onOrgConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onOrgCreateAuditEntry: scala.Option[SelectionBuilder[OrgCreateAuditEntry, A]] = None, onOrgDisableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]] = None, onOrgDisableSamlAuditEntry: scala.Option[SelectionBuilder[OrgDisableSamlAuditEntry, A]] = None, onOrgDisableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]] = None, onOrgEnableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]] = None, onOrgEnableSamlAuditEntry: scala.Option[SelectionBuilder[OrgEnableSamlAuditEntry, A]] = None, onOrgEnableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]] = None, onOrgInviteMemberAuditEntry: scala.Option[SelectionBuilder[OrgInviteMemberAuditEntry, A]] = None, onOrgInviteToBusinessAuditEntry: scala.Option[SelectionBuilder[OrgInviteToBusinessAuditEntry, A]] = None, onOrgOauthAppAccessApprovedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]] = None, onOrgOauthAppAccessDeniedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]] = None, onOrgOauthAppAccessRequestedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]] = None, onOrgRemoveBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]] = None, onOrgRemoveMemberAuditEntry: scala.Option[SelectionBuilder[OrgRemoveMemberAuditEntry, A]] = None, onOrgRemoveOutsideCollaboratorAuditEntry: scala.Option[SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]] = None, onOrgRestoreMemberAuditEntry: scala.Option[SelectionBuilder[OrgRestoreMemberAuditEntry, A]] = None, onOrgUnblockUserAuditEntry: scala.Option[SelectionBuilder[OrgUnblockUserAuditEntry, A]] = None, onOrgUpdateDefaultRepositoryPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]] = None, onOrgUpdateMemberAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberAuditEntry, A]] = None, onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A]] = None, onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onOrganizationIdentityProvider: scala.Option[SelectionBuilder[OrganizationIdentityProvider, A]] = None, onOrganizationInvitation: scala.Option[SelectionBuilder[OrganizationInvitation, A]] = None, onOrganizationMigration: scala.Option[SelectionBuilder[OrganizationMigration, A]] = None, onPackage: scala.Option[SelectionBuilder[Package, A]] = None, onPackageFile: scala.Option[SelectionBuilder[PackageFile, A]] = None, onPackageTag: scala.Option[SelectionBuilder[PackageTag, A]] = None, onPackageVersion: scala.Option[SelectionBuilder[PackageVersion, A]] = None, onPinnedDiscussion: scala.Option[SelectionBuilder[PinnedDiscussion, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onPinnedIssue: scala.Option[SelectionBuilder[PinnedIssue, A]] = None, onPrivateRepositoryForkingDisableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]] = None, onPrivateRepositoryForkingEnableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]] = None, onProject: scala.Option[SelectionBuilder[Project, A]] = None, onProjectCard: scala.Option[SelectionBuilder[ProjectCard, A]] = None, onProjectColumn: scala.Option[SelectionBuilder[ProjectColumn, A]] = None, onProjectV2: scala.Option[SelectionBuilder[ProjectV2, A]] = None, onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2Item: scala.Option[SelectionBuilder[ProjectV2Item, A]] = None, onProjectV2ItemFieldDateValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldDateValue, A]] = None, onProjectV2ItemFieldIterationValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldIterationValue, A]] = None, onProjectV2ItemFieldNumberValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldNumberValue, A]] = None, onProjectV2ItemFieldSingleSelectValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A]] = None, onProjectV2ItemFieldTextValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldTextValue, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None, onProjectV2View: scala.Option[SelectionBuilder[ProjectV2View, A]] = None, onProjectV2Workflow: scala.Option[SelectionBuilder[ProjectV2Workflow, A]] = None, onPublicKey: scala.Option[SelectionBuilder[PublicKey, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestCommit: scala.Option[SelectionBuilder[PullRequestCommit, A]] = None, onPullRequestCommitCommentThread: scala.Option[SelectionBuilder[PullRequestCommitCommentThread, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onPullRequestThread: scala.Option[SelectionBuilder[PullRequestThread, A]] = None, onPush: scala.Option[SelectionBuilder[Push, A]] = None, onPushAllowance: scala.Option[SelectionBuilder[PushAllowance, A]] = None, onReaction: scala.Option[SelectionBuilder[Reaction, A]] = None, onReadyForReviewEvent: scala.Option[SelectionBuilder[ReadyForReviewEvent, A]] = None, onRef: scala.Option[SelectionBuilder[Ref, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onReleaseAsset: scala.Option[SelectionBuilder[ReleaseAsset, A]] = None, onRemovedFromMergeQueueEvent: scala.Option[SelectionBuilder[RemovedFromMergeQueueEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onRepoAccessAuditEntry: scala.Option[SelectionBuilder[RepoAccessAuditEntry, A]] = None, onRepoAddMemberAuditEntry: scala.Option[SelectionBuilder[RepoAddMemberAuditEntry, A]] = None, onRepoAddTopicAuditEntry: scala.Option[SelectionBuilder[RepoAddTopicAuditEntry, A]] = None, onRepoArchivedAuditEntry: scala.Option[SelectionBuilder[RepoArchivedAuditEntry, A]] = None, onRepoChangeMergeSettingAuditEntry: scala.Option[SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]] = None, onRepoConfigDisableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigDisableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]] = None, onRepoConfigDisableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigEnableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigEnableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]] = None, onRepoConfigEnableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigLockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigUnlockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]] = None, onRepoCreateAuditEntry: scala.Option[SelectionBuilder[RepoCreateAuditEntry, A]] = None, onRepoDestroyAuditEntry: scala.Option[SelectionBuilder[RepoDestroyAuditEntry, A]] = None, onRepoRemoveMemberAuditEntry: scala.Option[SelectionBuilder[RepoRemoveMemberAuditEntry, A]] = None, onRepoRemoveTopicAuditEntry: scala.Option[SelectionBuilder[RepoRemoveTopicAuditEntry, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onRepositoryInvitation: scala.Option[SelectionBuilder[RepositoryInvitation, A]] = None, onRepositoryMigration: scala.Option[SelectionBuilder[RepositoryMigration, A]] = None, onRepositoryRule: scala.Option[SelectionBuilder[RepositoryRule, A]] = None, onRepositoryRuleset: scala.Option[SelectionBuilder[RepositoryRuleset, A]] = None, onRepositoryRulesetBypassActor: scala.Option[SelectionBuilder[RepositoryRulesetBypassActor, A]] = None, onRepositoryTopic: scala.Option[SelectionBuilder[RepositoryTopic, A]] = None, onRepositoryVisibilityChangeDisableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]] = None, onRepositoryVisibilityChangeEnableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]] = None, onRepositoryVulnerabilityAlert: scala.Option[SelectionBuilder[RepositoryVulnerabilityAlert, A]] = None, onReviewDismissalAllowance: scala.Option[SelectionBuilder[ReviewDismissalAllowance, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequest: scala.Option[SelectionBuilder[ReviewRequest, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSavedReply: scala.Option[SelectionBuilder[SavedReply, A]] = None, onSecurityAdvisory: scala.Option[SelectionBuilder[SecurityAdvisory, A]] = None, onSponsorsActivity: scala.Option[SelectionBuilder[SponsorsActivity, A]] = None, onSponsorsListing: scala.Option[SelectionBuilder[SponsorsListing, A]] = None, onSponsorsListingFeaturedItem: scala.Option[SelectionBuilder[SponsorsListingFeaturedItem, A]] = None, onSponsorsTier: scala.Option[SelectionBuilder[SponsorsTier, A]] = None, onSponsorship: scala.Option[SelectionBuilder[Sponsorship, A]] = None, onSponsorshipNewsletter: scala.Option[SelectionBuilder[SponsorshipNewsletter, A]] = None, onStatus: scala.Option[SelectionBuilder[Status, A]] = None, onStatusCheckRollup: scala.Option[SelectionBuilder[StatusCheckRollup, A]] = None, onStatusContext: scala.Option[SelectionBuilder[StatusContext, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onTeamAddMemberAuditEntry: scala.Option[SelectionBuilder[TeamAddMemberAuditEntry, A]] = None, onTeamAddRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamAddRepositoryAuditEntry, A]] = None, onTeamChangeParentTeamAuditEntry: scala.Option[SelectionBuilder[TeamChangeParentTeamAuditEntry, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None, onTeamRemoveMemberAuditEntry: scala.Option[SelectionBuilder[TeamRemoveMemberAuditEntry, A]] = None, onTeamRemoveRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]] = None, onTopic: scala.Option[SelectionBuilder[Topic, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None, onUserContentEdit: scala.Option[SelectionBuilder[UserContentEdit, A]] = None, onUserStatus: scala.Option[SelectionBuilder[UserStatus, A]] = None, onVerifiableDomain: scala.Option[SelectionBuilder[VerifiableDomain, A]] = None, onWorkflow: scala.Option[SelectionBuilder[Workflow, A]] = None, onWorkflowRun: scala.Option[SelectionBuilder[WorkflowRun, A]] = None, onWorkflowRunFile: scala.Option[SelectionBuilder[WorkflowRunFile, A]] = None)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("node", OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> onAddedToMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeDisabledEvent" -> onAutoMergeDisabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeEnabledEvent" -> onAutoMergeEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoRebaseEnabledEvent" -> onAutoRebaseEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoSquashEnabledEvent" -> onAutoSquashEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefChangedEvent" -> onBaseRefChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BranchProtectionRule" -> onBranchProtectionRule.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BypassForcePushAllowance" -> onBypassForcePushAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BypassPullRequestAllowance" -> onBypassPullRequestAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CWE" -> onCWE.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckRun" -> onCheckRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckSuite" -> onCheckSuite.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CodeOfConduct" -> onCodeOfConduct.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitCommentThread" -> onCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Comparison" -> onComparison.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertToDraftEvent" -> onConvertToDraftEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DependencyGraphManifest" -> onDependencyGraphManifest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployKey" -> onDeployKey.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Deployment" -> onDeployment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentReview" -> onDeploymentReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentStatus" -> onDeploymentStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionCategory" -> onDiscussionCategory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionPoll" -> onDiscussionPoll.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionPollOption" -> onDiscussionPollOption.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DraftIssue" -> onDraftIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseAdministratorInvitation" -> onEnterpriseAdministratorInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseIdentityProvider" -> onEnterpriseIdentityProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseRepositoryInfo" -> onEnterpriseRepositoryInfo.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerInstallation" -> onEnterpriseServerInstallation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccount" -> onEnterpriseServerUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccountEmail" -> onEnterpriseServerUserAccountEmail.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccountsUpload" -> onEnterpriseServerUserAccountsUpload.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Environment" -> onEnvironment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ExternalIdentity" -> onExternalIdentity.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "GistComment" -> onGistComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IpAllowListEntry" -> onIpAllowListEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Label" -> onLabel.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Language" -> onLanguage.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "License" -> onLicense.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LinkedBranch" -> onLinkedBranch.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceCategory" -> onMarketplaceCategory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceListing" -> onMarketplaceListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergeQueue" -> onMergeQueue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergeQueueEntry" -> onMergeQueueEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MigrationSource" -> onMigrationSource.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Milestone" -> onMilestone.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OIDCProvider" -> onOIDCProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgCreateAuditEntry" -> onOrgCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationIdentityProvider" -> onOrganizationIdentityProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationInvitation" -> onOrganizationInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationMigration" -> onOrganizationMigration.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Package" -> onPackage.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageFile" -> onPackageFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageTag" -> onPackageTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageVersion" -> onPackageVersion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedDiscussion" -> onPinnedDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedIssue" -> onPinnedIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Project" -> onProject.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectCard" -> onProjectCard.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectColumn" -> onProjectColumn.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2" -> onProjectV2.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Item" -> onProjectV2Item.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldDateValue" -> onProjectV2ItemFieldDateValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldIterationValue" -> onProjectV2ItemFieldIterationValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldNumberValue" -> onProjectV2ItemFieldNumberValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldSingleSelectValue" -> onProjectV2ItemFieldSingleSelectValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldTextValue" -> onProjectV2ItemFieldTextValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2View" -> onProjectV2View.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Workflow" -> onProjectV2Workflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PublicKey" -> onPublicKey.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommit" -> onPullRequestCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestThread" -> onPullRequestThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Push" -> onPush.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PushAllowance" -> onPushAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Reaction" -> onReaction.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReadyForReviewEvent" -> onReadyForReviewEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Ref" -> onRef.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReleaseAsset" -> onReleaseAsset.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromMergeQueueEvent" -> onRemovedFromMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAccessAuditEntry" -> onRepoAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoCreateAuditEntry" -> onRepoCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryInvitation" -> onRepositoryInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryMigration" -> onRepositoryMigration.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRule" -> onRepositoryRule.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRuleset" -> onRepositoryRuleset.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRulesetBypassActor" -> onRepositoryRulesetBypassActor.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryTopic" -> onRepositoryTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVulnerabilityAlert" -> onRepositoryVulnerabilityAlert.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissalAllowance" -> onReviewDismissalAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequest" -> onReviewRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SavedReply" -> onSavedReply.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SecurityAdvisory" -> onSecurityAdvisory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsActivity" -> onSponsorsActivity.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsListing" -> onSponsorsListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsListingFeaturedItem" -> onSponsorsListingFeaturedItem.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsTier" -> onSponsorsTier.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Sponsorship" -> onSponsorship.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorshipNewsletter" -> onSponsorshipNewsletter.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Status" -> onStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusCheckRollup" -> onStatusCheckRollup.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusContext" -> onStatusContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Topic" -> onTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserContentEdit" -> onUserContentEdit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserStatus" -> onUserStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "VerifiableDomain" -> onVerifiableDomain.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Workflow" -> onWorkflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRun" -> onWorkflowRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRunFile" -> onWorkflowRunFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("id", id, "ID!")(encoder0)))
  /**
 * Lookup nodes by a list of IDs.
 */
def nodes[A](ids : List[String] = Nil)(onAddedToMergeQueueEvent: SelectionBuilder[AddedToMergeQueueEvent, A], onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A], onApp: SelectionBuilder[App, A], onAssignedEvent: SelectionBuilder[AssignedEvent, A], onAutoMergeDisabledEvent: SelectionBuilder[AutoMergeDisabledEvent, A], onAutoMergeEnabledEvent: SelectionBuilder[AutoMergeEnabledEvent, A], onAutoRebaseEnabledEvent: SelectionBuilder[AutoRebaseEnabledEvent, A], onAutoSquashEnabledEvent: SelectionBuilder[AutoSquashEnabledEvent, A], onAutomaticBaseChangeFailedEvent: SelectionBuilder[AutomaticBaseChangeFailedEvent, A], onAutomaticBaseChangeSucceededEvent: SelectionBuilder[AutomaticBaseChangeSucceededEvent, A], onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A], onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A], onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A], onBlob: SelectionBuilder[Blob, A], onBot: SelectionBuilder[Bot, A], onBranchProtectionRule: SelectionBuilder[BranchProtectionRule, A], onBypassForcePushAllowance: SelectionBuilder[BypassForcePushAllowance, A], onBypassPullRequestAllowance: SelectionBuilder[BypassPullRequestAllowance, A], onCWE: SelectionBuilder[CWE, A], onCheckRun: SelectionBuilder[CheckRun, A], onCheckSuite: SelectionBuilder[CheckSuite, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCodeOfConduct: SelectionBuilder[CodeOfConduct, A], onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A], onCommit: SelectionBuilder[Commit, A], onCommitComment: SelectionBuilder[CommitComment, A], onCommitCommentThread: SelectionBuilder[CommitCommentThread, A], onComparison: SelectionBuilder[Comparison, A], onConnectedEvent: SelectionBuilder[ConnectedEvent, A], onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A], onConvertedNoteToIssueEvent: SelectionBuilder[ConvertedNoteToIssueEvent, A], onConvertedToDiscussionEvent: SelectionBuilder[ConvertedToDiscussionEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A], onDependencyGraphManifest: SelectionBuilder[DependencyGraphManifest, A], onDeployKey: SelectionBuilder[DeployKey, A], onDeployedEvent: SelectionBuilder[DeployedEvent, A], onDeployment: SelectionBuilder[Deployment, A], onDeploymentEnvironmentChangedEvent: SelectionBuilder[DeploymentEnvironmentChangedEvent, A], onDeploymentReview: SelectionBuilder[DeploymentReview, A], onDeploymentStatus: SelectionBuilder[DeploymentStatus, A], onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A], onDiscussion: SelectionBuilder[Discussion, A], onDiscussionCategory: SelectionBuilder[DiscussionCategory, A], onDiscussionComment: SelectionBuilder[DiscussionComment, A], onDiscussionPoll: SelectionBuilder[DiscussionPoll, A], onDiscussionPollOption: SelectionBuilder[DiscussionPollOption, A], onDraftIssue: SelectionBuilder[DraftIssue, A], onEnterprise: SelectionBuilder[Enterprise, A], onEnterpriseAdministratorInvitation: SelectionBuilder[EnterpriseAdministratorInvitation, A], onEnterpriseIdentityProvider: SelectionBuilder[EnterpriseIdentityProvider, A], onEnterpriseRepositoryInfo: SelectionBuilder[EnterpriseRepositoryInfo, A], onEnterpriseServerInstallation: SelectionBuilder[EnterpriseServerInstallation, A], onEnterpriseServerUserAccount: SelectionBuilder[EnterpriseServerUserAccount, A], onEnterpriseServerUserAccountEmail: SelectionBuilder[EnterpriseServerUserAccountEmail, A], onEnterpriseServerUserAccountsUpload: SelectionBuilder[EnterpriseServerUserAccountsUpload, A], onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A], onEnvironment: SelectionBuilder[Environment, A], onExternalIdentity: SelectionBuilder[ExternalIdentity, A], onGist: SelectionBuilder[Gist, A], onGistComment: SelectionBuilder[GistComment, A], onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A], onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A], onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A], onIpAllowListEntry: SelectionBuilder[IpAllowListEntry, A], onIssue: SelectionBuilder[Issue, A], onIssueComment: SelectionBuilder[IssueComment, A], onLabel: SelectionBuilder[Label, A], onLabeledEvent: SelectionBuilder[LabeledEvent, A], onLanguage: SelectionBuilder[Language, A], onLicense: SelectionBuilder[License, A], onLinkedBranch: SelectionBuilder[LinkedBranch, A], onLockedEvent: SelectionBuilder[LockedEvent, A], onMannequin: SelectionBuilder[Mannequin, A], onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A], onMarketplaceCategory: SelectionBuilder[MarketplaceCategory, A], onMarketplaceListing: SelectionBuilder[MarketplaceListing, A], onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A], onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A], onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A], onMentionedEvent: SelectionBuilder[MentionedEvent, A], onMergeQueue: SelectionBuilder[MergeQueue, A], onMergeQueueEntry: SelectionBuilder[MergeQueueEntry, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMigrationSource: SelectionBuilder[MigrationSource, A], onMilestone: SelectionBuilder[Milestone, A], onMilestonedEvent: SelectionBuilder[MilestonedEvent, A], onMovedColumnsInProjectEvent: SelectionBuilder[MovedColumnsInProjectEvent, A], onOIDCProvider: SelectionBuilder[OIDCProvider, A], onOauthApplicationCreateAuditEntry: SelectionBuilder[OauthApplicationCreateAuditEntry, A], onOrgAddBillingManagerAuditEntry: SelectionBuilder[OrgAddBillingManagerAuditEntry, A], onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A], onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A], onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A], onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A], onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A], onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A], onOrgDisableSamlAuditEntry: SelectionBuilder[OrgDisableSamlAuditEntry, A], onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A], onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A], onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A], onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A], onOrgInviteMemberAuditEntry: SelectionBuilder[OrgInviteMemberAuditEntry, A], onOrgInviteToBusinessAuditEntry: SelectionBuilder[OrgInviteToBusinessAuditEntry, A], onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A], onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A], onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A], onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A], onOrgRemoveMemberAuditEntry: SelectionBuilder[OrgRemoveMemberAuditEntry, A], onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A], onOrgRestoreMemberAuditEntry: SelectionBuilder[OrgRestoreMemberAuditEntry, A], onOrgUnblockUserAuditEntry: SelectionBuilder[OrgUnblockUserAuditEntry, A], onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A], onOrgUpdateMemberAuditEntry: SelectionBuilder[OrgUpdateMemberAuditEntry, A], onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A], onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A], onOrganization: SelectionBuilder[Organization, A], onOrganizationIdentityProvider: SelectionBuilder[OrganizationIdentityProvider, A], onOrganizationInvitation: SelectionBuilder[OrganizationInvitation, A], onOrganizationMigration: SelectionBuilder[OrganizationMigration, A], onPackage: SelectionBuilder[Package, A], onPackageFile: SelectionBuilder[PackageFile, A], onPackageTag: SelectionBuilder[PackageTag, A], onPackageVersion: SelectionBuilder[PackageVersion, A], onPinnedDiscussion: SelectionBuilder[PinnedDiscussion, A], onPinnedEvent: SelectionBuilder[PinnedEvent, A], onPinnedIssue: SelectionBuilder[PinnedIssue, A], onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A], onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A], onProject: SelectionBuilder[Project, A], onProjectCard: SelectionBuilder[ProjectCard, A], onProjectColumn: SelectionBuilder[ProjectColumn, A], onProjectV2: SelectionBuilder[ProjectV2, A], onProjectV2Field: SelectionBuilder[ProjectV2Field, A], onProjectV2Item: SelectionBuilder[ProjectV2Item, A], onProjectV2ItemFieldDateValue: SelectionBuilder[ProjectV2ItemFieldDateValue, A], onProjectV2ItemFieldIterationValue: SelectionBuilder[ProjectV2ItemFieldIterationValue, A], onProjectV2ItemFieldNumberValue: SelectionBuilder[ProjectV2ItemFieldNumberValue, A], onProjectV2ItemFieldSingleSelectValue: SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A], onProjectV2ItemFieldTextValue: SelectionBuilder[ProjectV2ItemFieldTextValue, A], onProjectV2IterationField: SelectionBuilder[ProjectV2IterationField, A], onProjectV2SingleSelectField: SelectionBuilder[ProjectV2SingleSelectField, A], onProjectV2View: SelectionBuilder[ProjectV2View, A], onProjectV2Workflow: SelectionBuilder[ProjectV2Workflow, A], onPublicKey: SelectionBuilder[PublicKey, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestCommit: SelectionBuilder[PullRequestCommit, A], onPullRequestCommitCommentThread: SelectionBuilder[PullRequestCommitCommentThread, A], onPullRequestReview: SelectionBuilder[PullRequestReview, A], onPullRequestReviewComment: SelectionBuilder[PullRequestReviewComment, A], onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A], onPullRequestThread: SelectionBuilder[PullRequestThread, A], onPush: SelectionBuilder[Push, A], onPushAllowance: SelectionBuilder[PushAllowance, A], onReaction: SelectionBuilder[Reaction, A], onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A], onRef: SelectionBuilder[Ref, A], onReferencedEvent: SelectionBuilder[ReferencedEvent, A], onRelease: SelectionBuilder[Release, A], onReleaseAsset: SelectionBuilder[ReleaseAsset, A], onRemovedFromMergeQueueEvent: SelectionBuilder[RemovedFromMergeQueueEvent, A], onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A], onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A], onReopenedEvent: SelectionBuilder[ReopenedEvent, A], onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A], onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A], onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A], onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A], onRepoChangeMergeSettingAuditEntry: SelectionBuilder[RepoChangeMergeSettingAuditEntry, A], onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A], onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A], onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A], onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A], onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A], onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A], onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A], onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A], onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A], onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A], onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A], onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A], onRepoRemoveMemberAuditEntry: SelectionBuilder[RepoRemoveMemberAuditEntry, A], onRepoRemoveTopicAuditEntry: SelectionBuilder[RepoRemoveTopicAuditEntry, A], onRepository: SelectionBuilder[Repository, A], onRepositoryInvitation: SelectionBuilder[RepositoryInvitation, A], onRepositoryMigration: SelectionBuilder[RepositoryMigration, A], onRepositoryRule: SelectionBuilder[RepositoryRule, A], onRepositoryRuleset: SelectionBuilder[RepositoryRuleset, A], onRepositoryRulesetBypassActor: SelectionBuilder[RepositoryRulesetBypassActor, A], onRepositoryTopic: SelectionBuilder[RepositoryTopic, A], onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A], onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A], onRepositoryVulnerabilityAlert: SelectionBuilder[RepositoryVulnerabilityAlert, A], onReviewDismissalAllowance: SelectionBuilder[ReviewDismissalAllowance, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onReviewRequest: SelectionBuilder[ReviewRequest, A], onReviewRequestRemovedEvent: SelectionBuilder[ReviewRequestRemovedEvent, A], onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A], onSavedReply: SelectionBuilder[SavedReply, A], onSecurityAdvisory: SelectionBuilder[SecurityAdvisory, A], onSponsorsActivity: SelectionBuilder[SponsorsActivity, A], onSponsorsListing: SelectionBuilder[SponsorsListing, A], onSponsorsListingFeaturedItem: SelectionBuilder[SponsorsListingFeaturedItem, A], onSponsorsTier: SelectionBuilder[SponsorsTier, A], onSponsorship: SelectionBuilder[Sponsorship, A], onSponsorshipNewsletter: SelectionBuilder[SponsorshipNewsletter, A], onStatus: SelectionBuilder[Status, A], onStatusCheckRollup: SelectionBuilder[StatusCheckRollup, A], onStatusContext: SelectionBuilder[StatusContext, A], onSubscribedEvent: SelectionBuilder[SubscribedEvent, A], onTag: SelectionBuilder[Tag, A], onTeam: SelectionBuilder[Team, A], onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A], onTeamAddRepositoryAuditEntry: SelectionBuilder[TeamAddRepositoryAuditEntry, A], onTeamChangeParentTeamAuditEntry: SelectionBuilder[TeamChangeParentTeamAuditEntry, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A], onTeamRemoveMemberAuditEntry: SelectionBuilder[TeamRemoveMemberAuditEntry, A], onTeamRemoveRepositoryAuditEntry: SelectionBuilder[TeamRemoveRepositoryAuditEntry, A], onTopic: SelectionBuilder[Topic, A], onTransferredEvent: SelectionBuilder[TransferredEvent, A], onTree: SelectionBuilder[Tree, A], onUnassignedEvent: SelectionBuilder[UnassignedEvent, A], onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A], onUnlockedEvent: SelectionBuilder[UnlockedEvent, A], onUnmarkedAsDuplicateEvent: SelectionBuilder[UnmarkedAsDuplicateEvent, A], onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A], onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A], onUser: SelectionBuilder[User, A], onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A], onUserContentEdit: SelectionBuilder[UserContentEdit, A], onUserStatus: SelectionBuilder[UserStatus, A], onVerifiableDomain: SelectionBuilder[VerifiableDomain, A], onWorkflow: SelectionBuilder[Workflow, A], onWorkflowRun: SelectionBuilder[WorkflowRun, A], onWorkflowRunFile: SelectionBuilder[WorkflowRunFile, A])(implicit encoder0: ArgEncoder[List[String]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, List[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", ListOf(OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> Obj(onAddedToMergeQueueEvent), "AddedToProjectEvent" -> Obj(onAddedToProjectEvent), "App" -> Obj(onApp), "AssignedEvent" -> Obj(onAssignedEvent), "AutoMergeDisabledEvent" -> Obj(onAutoMergeDisabledEvent), "AutoMergeEnabledEvent" -> Obj(onAutoMergeEnabledEvent), "AutoRebaseEnabledEvent" -> Obj(onAutoRebaseEnabledEvent), "AutoSquashEnabledEvent" -> Obj(onAutoSquashEnabledEvent), "AutomaticBaseChangeFailedEvent" -> Obj(onAutomaticBaseChangeFailedEvent), "AutomaticBaseChangeSucceededEvent" -> Obj(onAutomaticBaseChangeSucceededEvent), "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent), "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent), "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent), "Blob" -> Obj(onBlob), "Bot" -> Obj(onBot), "BranchProtectionRule" -> Obj(onBranchProtectionRule), "BypassForcePushAllowance" -> Obj(onBypassForcePushAllowance), "BypassPullRequestAllowance" -> Obj(onBypassPullRequestAllowance), "CWE" -> Obj(onCWE), "CheckRun" -> Obj(onCheckRun), "CheckSuite" -> Obj(onCheckSuite), "ClosedEvent" -> Obj(onClosedEvent), "CodeOfConduct" -> Obj(onCodeOfConduct), "CommentDeletedEvent" -> Obj(onCommentDeletedEvent), "Commit" -> Obj(onCommit), "CommitComment" -> Obj(onCommitComment), "CommitCommentThread" -> Obj(onCommitCommentThread), "Comparison" -> Obj(onComparison), "ConnectedEvent" -> Obj(onConnectedEvent), "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent), "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent), "ConvertedToDiscussionEvent" -> Obj(onConvertedToDiscussionEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "DemilestonedEvent" -> Obj(onDemilestonedEvent), "DependencyGraphManifest" -> Obj(onDependencyGraphManifest), "DeployKey" -> Obj(onDeployKey), "DeployedEvent" -> Obj(onDeployedEvent), "Deployment" -> Obj(onDeployment), "DeploymentEnvironmentChangedEvent" -> Obj(onDeploymentEnvironmentChangedEvent), "DeploymentReview" -> Obj(onDeploymentReview), "DeploymentStatus" -> Obj(onDeploymentStatus), "DisconnectedEvent" -> Obj(onDisconnectedEvent), "Discussion" -> Obj(onDiscussion), "DiscussionCategory" -> Obj(onDiscussionCategory), "DiscussionComment" -> Obj(onDiscussionComment), "DiscussionPoll" -> Obj(onDiscussionPoll), "DiscussionPollOption" -> Obj(onDiscussionPollOption), "DraftIssue" -> Obj(onDraftIssue), "Enterprise" -> Obj(onEnterprise), "EnterpriseAdministratorInvitation" -> Obj(onEnterpriseAdministratorInvitation), "EnterpriseIdentityProvider" -> Obj(onEnterpriseIdentityProvider), "EnterpriseRepositoryInfo" -> Obj(onEnterpriseRepositoryInfo), "EnterpriseServerInstallation" -> Obj(onEnterpriseServerInstallation), "EnterpriseServerUserAccount" -> Obj(onEnterpriseServerUserAccount), "EnterpriseServerUserAccountEmail" -> Obj(onEnterpriseServerUserAccountEmail), "EnterpriseServerUserAccountsUpload" -> Obj(onEnterpriseServerUserAccountsUpload), "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount), "Environment" -> Obj(onEnvironment), "ExternalIdentity" -> Obj(onExternalIdentity), "Gist" -> Obj(onGist), "GistComment" -> Obj(onGistComment), "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent), "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent), "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent), "IpAllowListEntry" -> Obj(onIpAllowListEntry), "Issue" -> Obj(onIssue), "IssueComment" -> Obj(onIssueComment), "Label" -> Obj(onLabel), "LabeledEvent" -> Obj(onLabeledEvent), "Language" -> Obj(onLanguage), "License" -> Obj(onLicense), "LinkedBranch" -> Obj(onLinkedBranch), "LockedEvent" -> Obj(onLockedEvent), "Mannequin" -> Obj(onMannequin), "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent), "MarketplaceCategory" -> Obj(onMarketplaceCategory), "MarketplaceListing" -> Obj(onMarketplaceListing), "MembersCanDeleteReposClearAuditEntry" -> Obj(onMembersCanDeleteReposClearAuditEntry), "MembersCanDeleteReposDisableAuditEntry" -> Obj(onMembersCanDeleteReposDisableAuditEntry), "MembersCanDeleteReposEnableAuditEntry" -> Obj(onMembersCanDeleteReposEnableAuditEntry), "MentionedEvent" -> Obj(onMentionedEvent), "MergeQueue" -> Obj(onMergeQueue), "MergeQueueEntry" -> Obj(onMergeQueueEntry), "MergedEvent" -> Obj(onMergedEvent), "MigrationSource" -> Obj(onMigrationSource), "Milestone" -> Obj(onMilestone), "MilestonedEvent" -> Obj(onMilestonedEvent), "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent), "OIDCProvider" -> Obj(onOIDCProvider), "OauthApplicationCreateAuditEntry" -> Obj(onOauthApplicationCreateAuditEntry), "OrgAddBillingManagerAuditEntry" -> Obj(onOrgAddBillingManagerAuditEntry), "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry), "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigDisableCollaboratorsOnlyAuditEntry), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onOrgConfigEnableCollaboratorsOnlyAuditEntry), "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry), "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(onOrgDisableOauthAppRestrictionsAuditEntry), "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry), "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(onOrgDisableTwoFactorRequirementAuditEntry), "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(onOrgEnableOauthAppRestrictionsAuditEntry), "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry), "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(onOrgEnableTwoFactorRequirementAuditEntry), "OrgInviteMemberAuditEntry" -> Obj(onOrgInviteMemberAuditEntry), "OrgInviteToBusinessAuditEntry" -> Obj(onOrgInviteToBusinessAuditEntry), "OrgOauthAppAccessApprovedAuditEntry" -> Obj(onOrgOauthAppAccessApprovedAuditEntry), "OrgOauthAppAccessDeniedAuditEntry" -> Obj(onOrgOauthAppAccessDeniedAuditEntry), "OrgOauthAppAccessRequestedAuditEntry" -> Obj(onOrgOauthAppAccessRequestedAuditEntry), "OrgRemoveBillingManagerAuditEntry" -> Obj(onOrgRemoveBillingManagerAuditEntry), "OrgRemoveMemberAuditEntry" -> Obj(onOrgRemoveMemberAuditEntry), "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(onOrgRemoveOutsideCollaboratorAuditEntry), "OrgRestoreMemberAuditEntry" -> Obj(onOrgRestoreMemberAuditEntry), "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(onOrgUpdateDefaultRepositoryPermissionAuditEntry), "OrgUpdateMemberAuditEntry" -> Obj(onOrgUpdateMemberAuditEntry), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryCreationPermissionAuditEntry), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry), "Organization" -> Obj(onOrganization), "OrganizationIdentityProvider" -> Obj(onOrganizationIdentityProvider), "OrganizationInvitation" -> Obj(onOrganizationInvitation), "OrganizationMigration" -> Obj(onOrganizationMigration), "Package" -> Obj(onPackage), "PackageFile" -> Obj(onPackageFile), "PackageTag" -> Obj(onPackageTag), "PackageVersion" -> Obj(onPackageVersion), "PinnedDiscussion" -> Obj(onPinnedDiscussion), "PinnedEvent" -> Obj(onPinnedEvent), "PinnedIssue" -> Obj(onPinnedIssue), "PrivateRepositoryForkingDisableAuditEntry" -> Obj(onPrivateRepositoryForkingDisableAuditEntry), "PrivateRepositoryForkingEnableAuditEntry" -> Obj(onPrivateRepositoryForkingEnableAuditEntry), "Project" -> Obj(onProject), "ProjectCard" -> Obj(onProjectCard), "ProjectColumn" -> Obj(onProjectColumn), "ProjectV2" -> Obj(onProjectV2), "ProjectV2Field" -> Obj(onProjectV2Field), "ProjectV2Item" -> Obj(onProjectV2Item), "ProjectV2ItemFieldDateValue" -> Obj(onProjectV2ItemFieldDateValue), "ProjectV2ItemFieldIterationValue" -> Obj(onProjectV2ItemFieldIterationValue), "ProjectV2ItemFieldNumberValue" -> Obj(onProjectV2ItemFieldNumberValue), "ProjectV2ItemFieldSingleSelectValue" -> Obj(onProjectV2ItemFieldSingleSelectValue), "ProjectV2ItemFieldTextValue" -> Obj(onProjectV2ItemFieldTextValue), "ProjectV2IterationField" -> Obj(onProjectV2IterationField), "ProjectV2SingleSelectField" -> Obj(onProjectV2SingleSelectField), "ProjectV2View" -> Obj(onProjectV2View), "ProjectV2Workflow" -> Obj(onProjectV2Workflow), "PublicKey" -> Obj(onPublicKey), "PullRequest" -> Obj(onPullRequest), "PullRequestCommit" -> Obj(onPullRequestCommit), "PullRequestCommitCommentThread" -> Obj(onPullRequestCommitCommentThread), "PullRequestReview" -> Obj(onPullRequestReview), "PullRequestReviewComment" -> Obj(onPullRequestReviewComment), "PullRequestReviewThread" -> Obj(onPullRequestReviewThread), "PullRequestThread" -> Obj(onPullRequestThread), "Push" -> Obj(onPush), "PushAllowance" -> Obj(onPushAllowance), "Reaction" -> Obj(onReaction), "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent), "Ref" -> Obj(onRef), "ReferencedEvent" -> Obj(onReferencedEvent), "Release" -> Obj(onRelease), "ReleaseAsset" -> Obj(onReleaseAsset), "RemovedFromMergeQueueEvent" -> Obj(onRemovedFromMergeQueueEvent), "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent), "RenamedTitleEvent" -> Obj(onRenamedTitleEvent), "ReopenedEvent" -> Obj(onReopenedEvent), "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry), "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry), "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry), "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry), "RepoChangeMergeSettingAuditEntry" -> Obj(onRepoChangeMergeSettingAuditEntry), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigDisableAnonymousGitAccessAuditEntry), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigDisableCollaboratorsOnlyAuditEntry), "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(onRepoConfigDisableContributorsOnlyAuditEntry), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigDisableSockpuppetDisallowedAuditEntry), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigEnableAnonymousGitAccessAuditEntry), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(onRepoConfigEnableCollaboratorsOnlyAuditEntry), "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(onRepoConfigEnableContributorsOnlyAuditEntry), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(onRepoConfigEnableSockpuppetDisallowedAuditEntry), "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigLockAnonymousGitAccessAuditEntry), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(onRepoConfigUnlockAnonymousGitAccessAuditEntry), "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry), "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry), "RepoRemoveMemberAuditEntry" -> Obj(onRepoRemoveMemberAuditEntry), "RepoRemoveTopicAuditEntry" -> Obj(onRepoRemoveTopicAuditEntry), "Repository" -> Obj(onRepository), "RepositoryInvitation" -> Obj(onRepositoryInvitation), "RepositoryMigration" -> Obj(onRepositoryMigration), "RepositoryRule" -> Obj(onRepositoryRule), "RepositoryRuleset" -> Obj(onRepositoryRuleset), "RepositoryRulesetBypassActor" -> Obj(onRepositoryRulesetBypassActor), "RepositoryTopic" -> Obj(onRepositoryTopic), "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(onRepositoryVisibilityChangeDisableAuditEntry), "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(onRepositoryVisibilityChangeEnableAuditEntry), "RepositoryVulnerabilityAlert" -> Obj(onRepositoryVulnerabilityAlert), "ReviewDismissalAllowance" -> Obj(onReviewDismissalAllowance), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "ReviewRequest" -> Obj(onReviewRequest), "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent), "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent), "SavedReply" -> Obj(onSavedReply), "SecurityAdvisory" -> Obj(onSecurityAdvisory), "SponsorsActivity" -> Obj(onSponsorsActivity), "SponsorsListing" -> Obj(onSponsorsListing), "SponsorsListingFeaturedItem" -> Obj(onSponsorsListingFeaturedItem), "SponsorsTier" -> Obj(onSponsorsTier), "Sponsorship" -> Obj(onSponsorship), "SponsorshipNewsletter" -> Obj(onSponsorshipNewsletter), "Status" -> Obj(onStatus), "StatusCheckRollup" -> Obj(onStatusCheckRollup), "StatusContext" -> Obj(onStatusContext), "SubscribedEvent" -> Obj(onSubscribedEvent), "Tag" -> Obj(onTag), "Team" -> Obj(onTeam), "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry), "TeamAddRepositoryAuditEntry" -> Obj(onTeamAddRepositoryAuditEntry), "TeamChangeParentTeamAuditEntry" -> Obj(onTeamChangeParentTeamAuditEntry), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment), "TeamRemoveMemberAuditEntry" -> Obj(onTeamRemoveMemberAuditEntry), "TeamRemoveRepositoryAuditEntry" -> Obj(onTeamRemoveRepositoryAuditEntry), "Topic" -> Obj(onTopic), "TransferredEvent" -> Obj(onTransferredEvent), "Tree" -> Obj(onTree), "UnassignedEvent" -> Obj(onUnassignedEvent), "UnlabeledEvent" -> Obj(onUnlabeledEvent), "UnlockedEvent" -> Obj(onUnlockedEvent), "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent), "UnpinnedEvent" -> Obj(onUnpinnedEvent), "UnsubscribedEvent" -> Obj(onUnsubscribedEvent), "User" -> Obj(onUser), "UserBlockedEvent" -> Obj(onUserBlockedEvent), "UserContentEdit" -> Obj(onUserContentEdit), "UserStatus" -> Obj(onUserStatus), "VerifiableDomain" -> Obj(onVerifiableDomain), "Workflow" -> Obj(onWorkflow), "WorkflowRun" -> Obj(onWorkflowRun), "WorkflowRunFile" -> Obj(onWorkflowRunFile))))), arguments = List(Argument("ids", ids, "[ID!]!")(encoder0)))
  /**
 * Lookup nodes by a list of IDs.
 */
def nodesOption[A](ids : List[String] = Nil)(onAddedToMergeQueueEvent: scala.Option[SelectionBuilder[AddedToMergeQueueEvent, A]] = None, onAddedToProjectEvent: scala.Option[SelectionBuilder[AddedToProjectEvent, A]] = None, onApp: scala.Option[SelectionBuilder[App, A]] = None, onAssignedEvent: scala.Option[SelectionBuilder[AssignedEvent, A]] = None, onAutoMergeDisabledEvent: scala.Option[SelectionBuilder[AutoMergeDisabledEvent, A]] = None, onAutoMergeEnabledEvent: scala.Option[SelectionBuilder[AutoMergeEnabledEvent, A]] = None, onAutoRebaseEnabledEvent: scala.Option[SelectionBuilder[AutoRebaseEnabledEvent, A]] = None, onAutoSquashEnabledEvent: scala.Option[SelectionBuilder[AutoSquashEnabledEvent, A]] = None, onAutomaticBaseChangeFailedEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeFailedEvent, A]] = None, onAutomaticBaseChangeSucceededEvent: scala.Option[SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]] = None, onBaseRefChangedEvent: scala.Option[SelectionBuilder[BaseRefChangedEvent, A]] = None, onBaseRefDeletedEvent: scala.Option[SelectionBuilder[BaseRefDeletedEvent, A]] = None, onBaseRefForcePushedEvent: scala.Option[SelectionBuilder[BaseRefForcePushedEvent, A]] = None, onBlob: scala.Option[SelectionBuilder[Blob, A]] = None, onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onBranchProtectionRule: scala.Option[SelectionBuilder[BranchProtectionRule, A]] = None, onBypassForcePushAllowance: scala.Option[SelectionBuilder[BypassForcePushAllowance, A]] = None, onBypassPullRequestAllowance: scala.Option[SelectionBuilder[BypassPullRequestAllowance, A]] = None, onCWE: scala.Option[SelectionBuilder[CWE, A]] = None, onCheckRun: scala.Option[SelectionBuilder[CheckRun, A]] = None, onCheckSuite: scala.Option[SelectionBuilder[CheckSuite, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCodeOfConduct: scala.Option[SelectionBuilder[CodeOfConduct, A]] = None, onCommentDeletedEvent: scala.Option[SelectionBuilder[CommentDeletedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onCommitComment: scala.Option[SelectionBuilder[CommitComment, A]] = None, onCommitCommentThread: scala.Option[SelectionBuilder[CommitCommentThread, A]] = None, onComparison: scala.Option[SelectionBuilder[Comparison, A]] = None, onConnectedEvent: scala.Option[SelectionBuilder[ConnectedEvent, A]] = None, onConvertToDraftEvent: scala.Option[SelectionBuilder[ConvertToDraftEvent, A]] = None, onConvertedNoteToIssueEvent: scala.Option[SelectionBuilder[ConvertedNoteToIssueEvent, A]] = None, onConvertedToDiscussionEvent: scala.Option[SelectionBuilder[ConvertedToDiscussionEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onDemilestonedEvent: scala.Option[SelectionBuilder[DemilestonedEvent, A]] = None, onDependencyGraphManifest: scala.Option[SelectionBuilder[DependencyGraphManifest, A]] = None, onDeployKey: scala.Option[SelectionBuilder[DeployKey, A]] = None, onDeployedEvent: scala.Option[SelectionBuilder[DeployedEvent, A]] = None, onDeployment: scala.Option[SelectionBuilder[Deployment, A]] = None, onDeploymentEnvironmentChangedEvent: scala.Option[SelectionBuilder[DeploymentEnvironmentChangedEvent, A]] = None, onDeploymentReview: scala.Option[SelectionBuilder[DeploymentReview, A]] = None, onDeploymentStatus: scala.Option[SelectionBuilder[DeploymentStatus, A]] = None, onDisconnectedEvent: scala.Option[SelectionBuilder[DisconnectedEvent, A]] = None, onDiscussion: scala.Option[SelectionBuilder[Discussion, A]] = None, onDiscussionCategory: scala.Option[SelectionBuilder[DiscussionCategory, A]] = None, onDiscussionComment: scala.Option[SelectionBuilder[DiscussionComment, A]] = None, onDiscussionPoll: scala.Option[SelectionBuilder[DiscussionPoll, A]] = None, onDiscussionPollOption: scala.Option[SelectionBuilder[DiscussionPollOption, A]] = None, onDraftIssue: scala.Option[SelectionBuilder[DraftIssue, A]] = None, onEnterprise: scala.Option[SelectionBuilder[Enterprise, A]] = None, onEnterpriseAdministratorInvitation: scala.Option[SelectionBuilder[EnterpriseAdministratorInvitation, A]] = None, onEnterpriseIdentityProvider: scala.Option[SelectionBuilder[EnterpriseIdentityProvider, A]] = None, onEnterpriseRepositoryInfo: scala.Option[SelectionBuilder[EnterpriseRepositoryInfo, A]] = None, onEnterpriseServerInstallation: scala.Option[SelectionBuilder[EnterpriseServerInstallation, A]] = None, onEnterpriseServerUserAccount: scala.Option[SelectionBuilder[EnterpriseServerUserAccount, A]] = None, onEnterpriseServerUserAccountEmail: scala.Option[SelectionBuilder[EnterpriseServerUserAccountEmail, A]] = None, onEnterpriseServerUserAccountsUpload: scala.Option[SelectionBuilder[EnterpriseServerUserAccountsUpload, A]] = None, onEnterpriseUserAccount: scala.Option[SelectionBuilder[EnterpriseUserAccount, A]] = None, onEnvironment: scala.Option[SelectionBuilder[Environment, A]] = None, onExternalIdentity: scala.Option[SelectionBuilder[ExternalIdentity, A]] = None, onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onGistComment: scala.Option[SelectionBuilder[GistComment, A]] = None, onHeadRefDeletedEvent: scala.Option[SelectionBuilder[HeadRefDeletedEvent, A]] = None, onHeadRefForcePushedEvent: scala.Option[SelectionBuilder[HeadRefForcePushedEvent, A]] = None, onHeadRefRestoredEvent: scala.Option[SelectionBuilder[HeadRefRestoredEvent, A]] = None, onIpAllowListEntry: scala.Option[SelectionBuilder[IpAllowListEntry, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onIssueComment: scala.Option[SelectionBuilder[IssueComment, A]] = None, onLabel: scala.Option[SelectionBuilder[Label, A]] = None, onLabeledEvent: scala.Option[SelectionBuilder[LabeledEvent, A]] = None, onLanguage: scala.Option[SelectionBuilder[Language, A]] = None, onLicense: scala.Option[SelectionBuilder[License, A]] = None, onLinkedBranch: scala.Option[SelectionBuilder[LinkedBranch, A]] = None, onLockedEvent: scala.Option[SelectionBuilder[LockedEvent, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onMarkedAsDuplicateEvent: scala.Option[SelectionBuilder[MarkedAsDuplicateEvent, A]] = None, onMarketplaceCategory: scala.Option[SelectionBuilder[MarketplaceCategory, A]] = None, onMarketplaceListing: scala.Option[SelectionBuilder[MarketplaceListing, A]] = None, onMembersCanDeleteReposClearAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]] = None, onMembersCanDeleteReposDisableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]] = None, onMembersCanDeleteReposEnableAuditEntry: scala.Option[SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]] = None, onMentionedEvent: scala.Option[SelectionBuilder[MentionedEvent, A]] = None, onMergeQueue: scala.Option[SelectionBuilder[MergeQueue, A]] = None, onMergeQueueEntry: scala.Option[SelectionBuilder[MergeQueueEntry, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMigrationSource: scala.Option[SelectionBuilder[MigrationSource, A]] = None, onMilestone: scala.Option[SelectionBuilder[Milestone, A]] = None, onMilestonedEvent: scala.Option[SelectionBuilder[MilestonedEvent, A]] = None, onMovedColumnsInProjectEvent: scala.Option[SelectionBuilder[MovedColumnsInProjectEvent, A]] = None, onOIDCProvider: scala.Option[SelectionBuilder[OIDCProvider, A]] = None, onOauthApplicationCreateAuditEntry: scala.Option[SelectionBuilder[OauthApplicationCreateAuditEntry, A]] = None, onOrgAddBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgAddBillingManagerAuditEntry, A]] = None, onOrgAddMemberAuditEntry: scala.Option[SelectionBuilder[OrgAddMemberAuditEntry, A]] = None, onOrgBlockUserAuditEntry: scala.Option[SelectionBuilder[OrgBlockUserAuditEntry, A]] = None, onOrgConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onOrgConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onOrgCreateAuditEntry: scala.Option[SelectionBuilder[OrgCreateAuditEntry, A]] = None, onOrgDisableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]] = None, onOrgDisableSamlAuditEntry: scala.Option[SelectionBuilder[OrgDisableSamlAuditEntry, A]] = None, onOrgDisableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]] = None, onOrgEnableOauthAppRestrictionsAuditEntry: scala.Option[SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]] = None, onOrgEnableSamlAuditEntry: scala.Option[SelectionBuilder[OrgEnableSamlAuditEntry, A]] = None, onOrgEnableTwoFactorRequirementAuditEntry: scala.Option[SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]] = None, onOrgInviteMemberAuditEntry: scala.Option[SelectionBuilder[OrgInviteMemberAuditEntry, A]] = None, onOrgInviteToBusinessAuditEntry: scala.Option[SelectionBuilder[OrgInviteToBusinessAuditEntry, A]] = None, onOrgOauthAppAccessApprovedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]] = None, onOrgOauthAppAccessDeniedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]] = None, onOrgOauthAppAccessRequestedAuditEntry: scala.Option[SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]] = None, onOrgRemoveBillingManagerAuditEntry: scala.Option[SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]] = None, onOrgRemoveMemberAuditEntry: scala.Option[SelectionBuilder[OrgRemoveMemberAuditEntry, A]] = None, onOrgRemoveOutsideCollaboratorAuditEntry: scala.Option[SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]] = None, onOrgRestoreMemberAuditEntry: scala.Option[SelectionBuilder[OrgRestoreMemberAuditEntry, A]] = None, onOrgUnblockUserAuditEntry: scala.Option[SelectionBuilder[OrgUnblockUserAuditEntry, A]] = None, onOrgUpdateDefaultRepositoryPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]] = None, onOrgUpdateMemberAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberAuditEntry, A]] = None, onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryCreationPermissionAuditEntry, A]] = None, onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: scala.Option[SelectionBuilder[OrgUpdateMemberRepositoryInvitationPermissionAuditEntry, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onOrganizationIdentityProvider: scala.Option[SelectionBuilder[OrganizationIdentityProvider, A]] = None, onOrganizationInvitation: scala.Option[SelectionBuilder[OrganizationInvitation, A]] = None, onOrganizationMigration: scala.Option[SelectionBuilder[OrganizationMigration, A]] = None, onPackage: scala.Option[SelectionBuilder[Package, A]] = None, onPackageFile: scala.Option[SelectionBuilder[PackageFile, A]] = None, onPackageTag: scala.Option[SelectionBuilder[PackageTag, A]] = None, onPackageVersion: scala.Option[SelectionBuilder[PackageVersion, A]] = None, onPinnedDiscussion: scala.Option[SelectionBuilder[PinnedDiscussion, A]] = None, onPinnedEvent: scala.Option[SelectionBuilder[PinnedEvent, A]] = None, onPinnedIssue: scala.Option[SelectionBuilder[PinnedIssue, A]] = None, onPrivateRepositoryForkingDisableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]] = None, onPrivateRepositoryForkingEnableAuditEntry: scala.Option[SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]] = None, onProject: scala.Option[SelectionBuilder[Project, A]] = None, onProjectCard: scala.Option[SelectionBuilder[ProjectCard, A]] = None, onProjectColumn: scala.Option[SelectionBuilder[ProjectColumn, A]] = None, onProjectV2: scala.Option[SelectionBuilder[ProjectV2, A]] = None, onProjectV2Field: scala.Option[SelectionBuilder[ProjectV2Field, A]] = None, onProjectV2Item: scala.Option[SelectionBuilder[ProjectV2Item, A]] = None, onProjectV2ItemFieldDateValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldDateValue, A]] = None, onProjectV2ItemFieldIterationValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldIterationValue, A]] = None, onProjectV2ItemFieldNumberValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldNumberValue, A]] = None, onProjectV2ItemFieldSingleSelectValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldSingleSelectValue, A]] = None, onProjectV2ItemFieldTextValue: scala.Option[SelectionBuilder[ProjectV2ItemFieldTextValue, A]] = None, onProjectV2IterationField: scala.Option[SelectionBuilder[ProjectV2IterationField, A]] = None, onProjectV2SingleSelectField: scala.Option[SelectionBuilder[ProjectV2SingleSelectField, A]] = None, onProjectV2View: scala.Option[SelectionBuilder[ProjectV2View, A]] = None, onProjectV2Workflow: scala.Option[SelectionBuilder[ProjectV2Workflow, A]] = None, onPublicKey: scala.Option[SelectionBuilder[PublicKey, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestCommit: scala.Option[SelectionBuilder[PullRequestCommit, A]] = None, onPullRequestCommitCommentThread: scala.Option[SelectionBuilder[PullRequestCommitCommentThread, A]] = None, onPullRequestReview: scala.Option[SelectionBuilder[PullRequestReview, A]] = None, onPullRequestReviewComment: scala.Option[SelectionBuilder[PullRequestReviewComment, A]] = None, onPullRequestReviewThread: scala.Option[SelectionBuilder[PullRequestReviewThread, A]] = None, onPullRequestThread: scala.Option[SelectionBuilder[PullRequestThread, A]] = None, onPush: scala.Option[SelectionBuilder[Push, A]] = None, onPushAllowance: scala.Option[SelectionBuilder[PushAllowance, A]] = None, onReaction: scala.Option[SelectionBuilder[Reaction, A]] = None, onReadyForReviewEvent: scala.Option[SelectionBuilder[ReadyForReviewEvent, A]] = None, onRef: scala.Option[SelectionBuilder[Ref, A]] = None, onReferencedEvent: scala.Option[SelectionBuilder[ReferencedEvent, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onReleaseAsset: scala.Option[SelectionBuilder[ReleaseAsset, A]] = None, onRemovedFromMergeQueueEvent: scala.Option[SelectionBuilder[RemovedFromMergeQueueEvent, A]] = None, onRemovedFromProjectEvent: scala.Option[SelectionBuilder[RemovedFromProjectEvent, A]] = None, onRenamedTitleEvent: scala.Option[SelectionBuilder[RenamedTitleEvent, A]] = None, onReopenedEvent: scala.Option[SelectionBuilder[ReopenedEvent, A]] = None, onRepoAccessAuditEntry: scala.Option[SelectionBuilder[RepoAccessAuditEntry, A]] = None, onRepoAddMemberAuditEntry: scala.Option[SelectionBuilder[RepoAddMemberAuditEntry, A]] = None, onRepoAddTopicAuditEntry: scala.Option[SelectionBuilder[RepoAddTopicAuditEntry, A]] = None, onRepoArchivedAuditEntry: scala.Option[SelectionBuilder[RepoArchivedAuditEntry, A]] = None, onRepoChangeMergeSettingAuditEntry: scala.Option[SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]] = None, onRepoConfigDisableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigDisableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigDisableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]] = None, onRepoConfigDisableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigEnableAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigEnableCollaboratorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]] = None, onRepoConfigEnableContributorsOnlyAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]] = None, onRepoConfigEnableSockpuppetDisallowedAuditEntry: scala.Option[SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]] = None, onRepoConfigLockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]] = None, onRepoConfigUnlockAnonymousGitAccessAuditEntry: scala.Option[SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]] = None, onRepoCreateAuditEntry: scala.Option[SelectionBuilder[RepoCreateAuditEntry, A]] = None, onRepoDestroyAuditEntry: scala.Option[SelectionBuilder[RepoDestroyAuditEntry, A]] = None, onRepoRemoveMemberAuditEntry: scala.Option[SelectionBuilder[RepoRemoveMemberAuditEntry, A]] = None, onRepoRemoveTopicAuditEntry: scala.Option[SelectionBuilder[RepoRemoveTopicAuditEntry, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onRepositoryInvitation: scala.Option[SelectionBuilder[RepositoryInvitation, A]] = None, onRepositoryMigration: scala.Option[SelectionBuilder[RepositoryMigration, A]] = None, onRepositoryRule: scala.Option[SelectionBuilder[RepositoryRule, A]] = None, onRepositoryRuleset: scala.Option[SelectionBuilder[RepositoryRuleset, A]] = None, onRepositoryRulesetBypassActor: scala.Option[SelectionBuilder[RepositoryRulesetBypassActor, A]] = None, onRepositoryTopic: scala.Option[SelectionBuilder[RepositoryTopic, A]] = None, onRepositoryVisibilityChangeDisableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]] = None, onRepositoryVisibilityChangeEnableAuditEntry: scala.Option[SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]] = None, onRepositoryVulnerabilityAlert: scala.Option[SelectionBuilder[RepositoryVulnerabilityAlert, A]] = None, onReviewDismissalAllowance: scala.Option[SelectionBuilder[ReviewDismissalAllowance, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onReviewRequest: scala.Option[SelectionBuilder[ReviewRequest, A]] = None, onReviewRequestRemovedEvent: scala.Option[SelectionBuilder[ReviewRequestRemovedEvent, A]] = None, onReviewRequestedEvent: scala.Option[SelectionBuilder[ReviewRequestedEvent, A]] = None, onSavedReply: scala.Option[SelectionBuilder[SavedReply, A]] = None, onSecurityAdvisory: scala.Option[SelectionBuilder[SecurityAdvisory, A]] = None, onSponsorsActivity: scala.Option[SelectionBuilder[SponsorsActivity, A]] = None, onSponsorsListing: scala.Option[SelectionBuilder[SponsorsListing, A]] = None, onSponsorsListingFeaturedItem: scala.Option[SelectionBuilder[SponsorsListingFeaturedItem, A]] = None, onSponsorsTier: scala.Option[SelectionBuilder[SponsorsTier, A]] = None, onSponsorship: scala.Option[SelectionBuilder[Sponsorship, A]] = None, onSponsorshipNewsletter: scala.Option[SelectionBuilder[SponsorshipNewsletter, A]] = None, onStatus: scala.Option[SelectionBuilder[Status, A]] = None, onStatusCheckRollup: scala.Option[SelectionBuilder[StatusCheckRollup, A]] = None, onStatusContext: scala.Option[SelectionBuilder[StatusContext, A]] = None, onSubscribedEvent: scala.Option[SelectionBuilder[SubscribedEvent, A]] = None, onTag: scala.Option[SelectionBuilder[Tag, A]] = None, onTeam: scala.Option[SelectionBuilder[Team, A]] = None, onTeamAddMemberAuditEntry: scala.Option[SelectionBuilder[TeamAddMemberAuditEntry, A]] = None, onTeamAddRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamAddRepositoryAuditEntry, A]] = None, onTeamChangeParentTeamAuditEntry: scala.Option[SelectionBuilder[TeamChangeParentTeamAuditEntry, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None, onTeamRemoveMemberAuditEntry: scala.Option[SelectionBuilder[TeamRemoveMemberAuditEntry, A]] = None, onTeamRemoveRepositoryAuditEntry: scala.Option[SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]] = None, onTopic: scala.Option[SelectionBuilder[Topic, A]] = None, onTransferredEvent: scala.Option[SelectionBuilder[TransferredEvent, A]] = None, onTree: scala.Option[SelectionBuilder[Tree, A]] = None, onUnassignedEvent: scala.Option[SelectionBuilder[UnassignedEvent, A]] = None, onUnlabeledEvent: scala.Option[SelectionBuilder[UnlabeledEvent, A]] = None, onUnlockedEvent: scala.Option[SelectionBuilder[UnlockedEvent, A]] = None, onUnmarkedAsDuplicateEvent: scala.Option[SelectionBuilder[UnmarkedAsDuplicateEvent, A]] = None, onUnpinnedEvent: scala.Option[SelectionBuilder[UnpinnedEvent, A]] = None, onUnsubscribedEvent: scala.Option[SelectionBuilder[UnsubscribedEvent, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None, onUserBlockedEvent: scala.Option[SelectionBuilder[UserBlockedEvent, A]] = None, onUserContentEdit: scala.Option[SelectionBuilder[UserContentEdit, A]] = None, onUserStatus: scala.Option[SelectionBuilder[UserStatus, A]] = None, onVerifiableDomain: scala.Option[SelectionBuilder[VerifiableDomain, A]] = None, onWorkflow: scala.Option[SelectionBuilder[Workflow, A]] = None, onWorkflowRun: scala.Option[SelectionBuilder[WorkflowRun, A]] = None, onWorkflowRunFile: scala.Option[SelectionBuilder[WorkflowRunFile, A]] = None)(implicit encoder0: ArgEncoder[List[String]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, List[scala.Option[scala.Option[A]]]] = _root_.caliban.client.SelectionBuilder.Field("nodes", ListOf(OptionOf(ChoiceOf(Map("AddedToMergeQueueEvent" -> onAddedToMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AddedToProjectEvent" -> onAddedToProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "App" -> onApp.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AssignedEvent" -> onAssignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeDisabledEvent" -> onAutoMergeDisabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoMergeEnabledEvent" -> onAutoMergeEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoRebaseEnabledEvent" -> onAutoRebaseEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutoSquashEnabledEvent" -> onAutoSquashEnabledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefChangedEvent" -> onBaseRefChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefDeletedEvent" -> onBaseRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Blob" -> onBlob.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BranchProtectionRule" -> onBranchProtectionRule.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BypassForcePushAllowance" -> onBypassForcePushAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "BypassPullRequestAllowance" -> onBypassPullRequestAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CWE" -> onCWE.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckRun" -> onCheckRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckSuite" -> onCheckSuite.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CodeOfConduct" -> onCodeOfConduct.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommentDeletedEvent" -> onCommentDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitComment" -> onCommitComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CommitCommentThread" -> onCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Comparison" -> onComparison.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConnectedEvent" -> onConnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertToDraftEvent" -> onConvertToDraftEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertedToDiscussionEvent" -> onConvertedToDiscussionEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DemilestonedEvent" -> onDemilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DependencyGraphManifest" -> onDependencyGraphManifest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployKey" -> onDeployKey.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeployedEvent" -> onDeployedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Deployment" -> onDeployment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentReview" -> onDeploymentReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DeploymentStatus" -> onDeploymentStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DisconnectedEvent" -> onDisconnectedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Discussion" -> onDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionCategory" -> onDiscussionCategory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionComment" -> onDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionPoll" -> onDiscussionPoll.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DiscussionPollOption" -> onDiscussionPollOption.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "DraftIssue" -> onDraftIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Enterprise" -> onEnterprise.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseAdministratorInvitation" -> onEnterpriseAdministratorInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseIdentityProvider" -> onEnterpriseIdentityProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseRepositoryInfo" -> onEnterpriseRepositoryInfo.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerInstallation" -> onEnterpriseServerInstallation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccount" -> onEnterpriseServerUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccountEmail" -> onEnterpriseServerUserAccountEmail.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseServerUserAccountsUpload" -> onEnterpriseServerUserAccountsUpload.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "EnterpriseUserAccount" -> onEnterpriseUserAccount.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Environment" -> onEnvironment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ExternalIdentity" -> onExternalIdentity.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "GistComment" -> onGistComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefDeletedEvent" -> onHeadRefDeletedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "HeadRefRestoredEvent" -> onHeadRefRestoredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IpAllowListEntry" -> onIpAllowListEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "IssueComment" -> onIssueComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Label" -> onLabel.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LabeledEvent" -> onLabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Language" -> onLanguage.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "License" -> onLicense.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LinkedBranch" -> onLinkedBranch.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "LockedEvent" -> onLockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceCategory" -> onMarketplaceCategory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MarketplaceListing" -> onMarketplaceListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MentionedEvent" -> onMentionedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergeQueue" -> onMergeQueue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergeQueueEntry" -> onMergeQueueEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MigrationSource" -> onMigrationSource.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Milestone" -> onMilestone.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MilestonedEvent" -> onMilestonedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OIDCProvider" -> onOIDCProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgCreateAuditEntry" -> onOrgCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationIdentityProvider" -> onOrganizationIdentityProvider.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationInvitation" -> onOrganizationInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "OrganizationMigration" -> onOrganizationMigration.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Package" -> onPackage.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageFile" -> onPackageFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageTag" -> onPackageTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PackageVersion" -> onPackageVersion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedDiscussion" -> onPinnedDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedEvent" -> onPinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PinnedIssue" -> onPinnedIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Project" -> onProject.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectCard" -> onProjectCard.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectColumn" -> onProjectColumn.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2" -> onProjectV2.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Field" -> onProjectV2Field.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Item" -> onProjectV2Item.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldDateValue" -> onProjectV2ItemFieldDateValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldIterationValue" -> onProjectV2ItemFieldIterationValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldNumberValue" -> onProjectV2ItemFieldNumberValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldSingleSelectValue" -> onProjectV2ItemFieldSingleSelectValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2ItemFieldTextValue" -> onProjectV2ItemFieldTextValue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2IterationField" -> onProjectV2IterationField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2SingleSelectField" -> onProjectV2SingleSelectField.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2View" -> onProjectV2View.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ProjectV2Workflow" -> onProjectV2Workflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PublicKey" -> onPublicKey.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommit" -> onPullRequestCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReview" -> onPullRequestReview.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewComment" -> onPullRequestReviewComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestReviewThread" -> onPullRequestReviewThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestThread" -> onPullRequestThread.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Push" -> onPush.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PushAllowance" -> onPushAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Reaction" -> onReaction.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReadyForReviewEvent" -> onReadyForReviewEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Ref" -> onRef.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReferencedEvent" -> onReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReleaseAsset" -> onReleaseAsset.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromMergeQueueEvent" -> onRemovedFromMergeQueueEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RemovedFromProjectEvent" -> onRemovedFromProjectEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RenamedTitleEvent" -> onRenamedTitleEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReopenedEvent" -> onReopenedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAccessAuditEntry" -> onRepoAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoCreateAuditEntry" -> onRepoCreateAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryInvitation" -> onRepositoryInvitation.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryMigration" -> onRepositoryMigration.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRule" -> onRepositoryRule.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRuleset" -> onRepositoryRuleset.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryRulesetBypassActor" -> onRepositoryRulesetBypassActor.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryTopic" -> onRepositoryTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryVulnerabilityAlert" -> onRepositoryVulnerabilityAlert.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissalAllowance" -> onReviewDismissalAllowance.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequest" -> onReviewRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewRequestedEvent" -> onReviewRequestedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SavedReply" -> onSavedReply.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SecurityAdvisory" -> onSecurityAdvisory.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsActivity" -> onSponsorsActivity.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsListing" -> onSponsorsListing.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsListingFeaturedItem" -> onSponsorsListingFeaturedItem.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorsTier" -> onSponsorsTier.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Sponsorship" -> onSponsorship.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SponsorshipNewsletter" -> onSponsorshipNewsletter.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Status" -> onStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusCheckRollup" -> onStatusCheckRollup.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "StatusContext" -> onStatusContext.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "SubscribedEvent" -> onSubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tag" -> onTag.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Team" -> onTeam.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Topic" -> onTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TransferredEvent" -> onTransferredEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Tree" -> onTree.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnassignedEvent" -> onUnassignedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlabeledEvent" -> onUnlabeledEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnlockedEvent" -> onUnlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnpinnedEvent" -> onUnpinnedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UnsubscribedEvent" -> onUnsubscribedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserBlockedEvent" -> onUserBlockedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserContentEdit" -> onUserContentEdit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "UserStatus" -> onUserStatus.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "VerifiableDomain" -> onVerifiableDomain.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Workflow" -> onWorkflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRun" -> onWorkflowRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRunFile" -> onWorkflowRunFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))))))), arguments = List(Argument("ids", ids, "[ID!]!")(encoder0)))
  /**
 * Lookup a organization by login.
 */
def organization[A](login : String)(innerSelection: SelectionBuilder[Organization, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("organization", OptionOf(Obj(innerSelection)), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * The client's rate limit information.
 */
def rateLimit[A](dryRun : scala.Option[Boolean] = None)(innerSelection: SelectionBuilder[RateLimit, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("rateLimit", OptionOf(Obj(innerSelection)), arguments = List(Argument("dryRun", dryRun, "Boolean")(encoder0)))
  /**
 * Workaround for re-exposing the root query object. (Refer to
https://github.com/facebook/relay/issues/112 for more information.)
 */
def relay[A](innerSelection: SelectionBuilder[Query, A]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("relay", Obj(innerSelection))
  /**
 * Lookup a given repository by the owner and repository name.
 */
def repository[A](followRenames : scala.Option[Boolean] = None, name : String, owner : String)(innerSelection: SelectionBuilder[Repository, A])(implicit encoder0: ArgEncoder[scala.Option[Boolean]], encoder1: ArgEncoder[String], encoder2: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repository", OptionOf(Obj(innerSelection)), arguments = List(Argument("followRenames", followRenames, "Boolean")(encoder0), Argument("name", name, "String!")(encoder1), Argument("owner", owner, "String!")(encoder2)))
  /**
 * Lookup a repository owner (ie. either a User or an Organization) by login.
 */
def repositoryOwner[A](login : String)(onOrganization: SelectionBuilder[Organization, A], onUser: SelectionBuilder[User, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("repositoryOwner", OptionOf(ChoiceOf(Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser)))), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * Lookup a repository owner (ie. either a User or an Organization) by login.
 */
def repositoryOwnerOption[A](login : String)(onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None)(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("repositoryOwner", OptionOf(ChoiceOf(Map("Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * Lookup resource by a URL.
 */
def resource[A](url : URI)(onBot: SelectionBuilder[Bot, A], onCheckRun: SelectionBuilder[CheckRun, A], onClosedEvent: SelectionBuilder[ClosedEvent, A], onCommit: SelectionBuilder[Commit, A], onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A], onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A], onGist: SelectionBuilder[Gist, A], onIssue: SelectionBuilder[Issue, A], onMannequin: SelectionBuilder[Mannequin, A], onMergedEvent: SelectionBuilder[MergedEvent, A], onMilestone: SelectionBuilder[Milestone, A], onOrganization: SelectionBuilder[Organization, A], onPullRequest: SelectionBuilder[PullRequest, A], onPullRequestCommit: SelectionBuilder[PullRequestCommit, A], onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A], onRelease: SelectionBuilder[Release, A], onRepository: SelectionBuilder[Repository, A], onRepositoryTopic: SelectionBuilder[RepositoryTopic, A], onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A], onTeamDiscussion: SelectionBuilder[TeamDiscussion, A], onTeamDiscussionComment: SelectionBuilder[TeamDiscussionComment, A], onUser: SelectionBuilder[User, A], onWorkflow: SelectionBuilder[Workflow, A], onWorkflowRun: SelectionBuilder[WorkflowRun, A], onWorkflowRunFile: SelectionBuilder[WorkflowRunFile, A])(implicit encoder0: ArgEncoder[URI]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("resource", OptionOf(ChoiceOf(Map("Bot" -> Obj(onBot), "CheckRun" -> Obj(onCheckRun), "ClosedEvent" -> Obj(onClosedEvent), "Commit" -> Obj(onCommit), "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent), "CrossReferencedEvent" -> Obj(onCrossReferencedEvent), "Gist" -> Obj(onGist), "Issue" -> Obj(onIssue), "Mannequin" -> Obj(onMannequin), "MergedEvent" -> Obj(onMergedEvent), "Milestone" -> Obj(onMilestone), "Organization" -> Obj(onOrganization), "PullRequest" -> Obj(onPullRequest), "PullRequestCommit" -> Obj(onPullRequestCommit), "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent), "Release" -> Obj(onRelease), "Repository" -> Obj(onRepository), "RepositoryTopic" -> Obj(onRepositoryTopic), "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent), "TeamDiscussion" -> Obj(onTeamDiscussion), "TeamDiscussionComment" -> Obj(onTeamDiscussionComment), "User" -> Obj(onUser), "Workflow" -> Obj(onWorkflow), "WorkflowRun" -> Obj(onWorkflowRun), "WorkflowRunFile" -> Obj(onWorkflowRunFile)))), arguments = List(Argument("url", url, "URI!")(encoder0)))
  /**
 * Lookup resource by a URL.
 */
def resourceOption[A](url : URI)(onBot: scala.Option[SelectionBuilder[Bot, A]] = None, onCheckRun: scala.Option[SelectionBuilder[CheckRun, A]] = None, onClosedEvent: scala.Option[SelectionBuilder[ClosedEvent, A]] = None, onCommit: scala.Option[SelectionBuilder[Commit, A]] = None, onConvertToDraftEvent: scala.Option[SelectionBuilder[ConvertToDraftEvent, A]] = None, onCrossReferencedEvent: scala.Option[SelectionBuilder[CrossReferencedEvent, A]] = None, onGist: scala.Option[SelectionBuilder[Gist, A]] = None, onIssue: scala.Option[SelectionBuilder[Issue, A]] = None, onMannequin: scala.Option[SelectionBuilder[Mannequin, A]] = None, onMergedEvent: scala.Option[SelectionBuilder[MergedEvent, A]] = None, onMilestone: scala.Option[SelectionBuilder[Milestone, A]] = None, onOrganization: scala.Option[SelectionBuilder[Organization, A]] = None, onPullRequest: scala.Option[SelectionBuilder[PullRequest, A]] = None, onPullRequestCommit: scala.Option[SelectionBuilder[PullRequestCommit, A]] = None, onReadyForReviewEvent: scala.Option[SelectionBuilder[ReadyForReviewEvent, A]] = None, onRelease: scala.Option[SelectionBuilder[Release, A]] = None, onRepository: scala.Option[SelectionBuilder[Repository, A]] = None, onRepositoryTopic: scala.Option[SelectionBuilder[RepositoryTopic, A]] = None, onReviewDismissedEvent: scala.Option[SelectionBuilder[ReviewDismissedEvent, A]] = None, onTeamDiscussion: scala.Option[SelectionBuilder[TeamDiscussion, A]] = None, onTeamDiscussionComment: scala.Option[SelectionBuilder[TeamDiscussionComment, A]] = None, onUser: scala.Option[SelectionBuilder[User, A]] = None, onWorkflow: scala.Option[SelectionBuilder[Workflow, A]] = None, onWorkflowRun: scala.Option[SelectionBuilder[WorkflowRun, A]] = None, onWorkflowRunFile: scala.Option[SelectionBuilder[WorkflowRunFile, A]] = None)(implicit encoder0: ArgEncoder[URI]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[scala.Option[A]]] = _root_.caliban.client.SelectionBuilder.Field("resource", OptionOf(ChoiceOf(Map("Bot" -> onBot.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CheckRun" -> onCheckRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ClosedEvent" -> onClosedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Commit" -> onCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ConvertToDraftEvent" -> onConvertToDraftEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "CrossReferencedEvent" -> onCrossReferencedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Gist" -> onGist.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Issue" -> onIssue.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Mannequin" -> onMannequin.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "MergedEvent" -> onMergedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Milestone" -> onMilestone.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Organization" -> onOrganization.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequest" -> onPullRequest.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "PullRequestCommit" -> onPullRequestCommit.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReadyForReviewEvent" -> onReadyForReviewEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Release" -> onRelease.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Repository" -> onRepository.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "RepositoryTopic" -> onRepositoryTopic.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "ReviewDismissedEvent" -> onReviewDismissedEvent.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussion" -> onTeamDiscussion.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "TeamDiscussionComment" -> onTeamDiscussionComment.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "User" -> onUser.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "Workflow" -> onWorkflow.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRun" -> onWorkflowRun.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a))), "WorkflowRunFile" -> onWorkflowRunFile.fold[FieldBuilder[scala.Option[A]]](NullField)(a => OptionOf(Obj(a)))))), arguments = List(Argument("url", url, "URI!")(encoder0)))
  /**
 * Perform a search across resources, returning a maximum of 1,000 results.
 */
def search[A](after : scala.Option[String] = None, before : scala.Option[String] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, query : String, `type` : SearchType)(innerSelection: SelectionBuilder[SearchResultItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[Int]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[String], encoder5: ArgEncoder[SearchType]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("search", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("first", first, "Int")(encoder2), Argument("last", last, "Int")(encoder3), Argument("query", query, "String!")(encoder4), Argument("type", `type`, "SearchType!")(encoder5)))
  /**
 * GitHub Security Advisories
 */
def securityAdvisories[A](after : scala.Option[String] = None, before : scala.Option[String] = None, classifications : scala.Option[List[SecurityAdvisoryClassification]] = None, first : scala.Option[Int] = None, identifier : scala.Option[SecurityAdvisoryIdentifierFilter] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SecurityAdvisoryOrder] = None, publishedSince : scala.Option[DateTime] = None, updatedSince : scala.Option[DateTime] = None)(innerSelection: SelectionBuilder[SecurityAdvisoryConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[SecurityAdvisoryClassification]]], encoder3: ArgEncoder[scala.Option[Int]], encoder4: ArgEncoder[scala.Option[SecurityAdvisoryIdentifierFilter]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SecurityAdvisoryOrder]], encoder7: ArgEncoder[scala.Option[DateTime]], encoder8: ArgEncoder[scala.Option[DateTime]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("securityAdvisories", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("classifications", classifications, "[SecurityAdvisoryClassification!]")(encoder2), Argument("first", first, "Int")(encoder3), Argument("identifier", identifier, "SecurityAdvisoryIdentifierFilter")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SecurityAdvisoryOrder")(encoder6), Argument("publishedSince", publishedSince, "DateTime")(encoder7), Argument("updatedSince", updatedSince, "DateTime")(encoder8)))
  /**
 * Fetch a Security Advisory by its GHSA ID
 */
def securityAdvisory[A](ghsaId : String)(innerSelection: SelectionBuilder[SecurityAdvisory, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("securityAdvisory", OptionOf(Obj(innerSelection)), arguments = List(Argument("ghsaId", ghsaId, "String!")(encoder0)))
  /**
 * Software Vulnerabilities documented by GitHub Security Advisories
 */
def securityVulnerabilities[A](after : scala.Option[String] = None, before : scala.Option[String] = None, classifications : scala.Option[List[SecurityAdvisoryClassification]] = None, ecosystem : scala.Option[SecurityAdvisoryEcosystem] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, orderBy : scala.Option[SecurityVulnerabilityOrder] = None, `package` : scala.Option[String] = None, severities : scala.Option[List[SecurityAdvisorySeverity]] = None)(innerSelection: SelectionBuilder[SecurityVulnerabilityConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[List[SecurityAdvisoryClassification]]], encoder3: ArgEncoder[scala.Option[SecurityAdvisoryEcosystem]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[SecurityVulnerabilityOrder]], encoder7: ArgEncoder[scala.Option[String]], encoder8: ArgEncoder[scala.Option[List[SecurityAdvisorySeverity]]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("securityVulnerabilities", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("classifications", classifications, "[SecurityAdvisoryClassification!]")(encoder2), Argument("ecosystem", ecosystem, "SecurityAdvisoryEcosystem")(encoder3), Argument("first", first, "Int")(encoder4), Argument("last", last, "Int")(encoder5), Argument("orderBy", orderBy, "SecurityVulnerabilityOrder")(encoder6), Argument("package", `package`, "String")(encoder7), Argument("severities", severities, "[SecurityAdvisorySeverity!]")(encoder8)))
  /**
 * Users and organizations who can be sponsored via GitHub Sponsors.
 */
def sponsorables[A](after : scala.Option[String] = None, before : scala.Option[String] = None, dependencyEcosystem : scala.Option[SecurityAdvisoryEcosystem] = None, ecosystem : scala.Option[DependencyGraphEcosystem] = None, first : scala.Option[Int] = None, last : scala.Option[Int] = None, onlyDependencies : scala.Option[Boolean] = None, orderBy : scala.Option[SponsorableOrder] = None, orgLoginForDependencies : scala.Option[String] = None)(innerSelection: SelectionBuilder[SponsorableItemConnection, A])(implicit encoder0: ArgEncoder[scala.Option[String]], encoder1: ArgEncoder[scala.Option[String]], encoder2: ArgEncoder[scala.Option[SecurityAdvisoryEcosystem]], encoder3: ArgEncoder[scala.Option[DependencyGraphEcosystem]], encoder4: ArgEncoder[scala.Option[Int]], encoder5: ArgEncoder[scala.Option[Int]], encoder6: ArgEncoder[scala.Option[Boolean]], encoder7: ArgEncoder[scala.Option[SponsorableOrder]], encoder8: ArgEncoder[scala.Option[String]]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("sponsorables", Obj(innerSelection), arguments = List(Argument("after", after, "String")(encoder0), Argument("before", before, "String")(encoder1), Argument("dependencyEcosystem", dependencyEcosystem, "SecurityAdvisoryEcosystem")(encoder2), Argument("ecosystem", ecosystem, "DependencyGraphEcosystem")(encoder3), Argument("first", first, "Int")(encoder4), Argument("last", last, "Int")(encoder5), Argument("onlyDependencies", onlyDependencies, "Boolean")(encoder6), Argument("orderBy", orderBy, "SponsorableOrder")(encoder7), Argument("orgLoginForDependencies", orgLoginForDependencies, "String")(encoder8)))
  /**
 * Look up a topic by name.
 */
def topic[A](name : String)(innerSelection: SelectionBuilder[Topic, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("topic", OptionOf(Obj(innerSelection)), arguments = List(Argument("name", name, "String!")(encoder0)))
  /**
 * Lookup a user by login.
 */
def user[A](login : String)(innerSelection: SelectionBuilder[User, A])(implicit encoder0: ArgEncoder[String]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("user", OptionOf(Obj(innerSelection)), arguments = List(Argument("login", login, "String!")(encoder0)))
  /**
 * The currently authenticated user.
 */
def viewer[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[_root_.caliban.client.Operations.RootQuery, A] = _root_.caliban.client.SelectionBuilder.Field("viewer", Obj(innerSelection))
}


  type Mutation = _root_.caliban.client.Operations.RootMutation
object Mutation {
  /**
 * Clear all of a customer's queued migrations
 */
def abortQueuedMigrations[A](input : AbortQueuedMigrationsInput)(innerSelection: SelectionBuilder[AbortQueuedMigrationsPayload, A])(implicit encoder0: ArgEncoder[AbortQueuedMigrationsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("abortQueuedMigrations", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AbortQueuedMigrationsInput!")(encoder0)))
  /**
 * Accepts a pending invitation for a user to become an administrator of an enterprise.
 */
def acceptEnterpriseAdministratorInvitation[A](input : AcceptEnterpriseAdministratorInvitationInput)(innerSelection: SelectionBuilder[AcceptEnterpriseAdministratorInvitationPayload, A])(implicit encoder0: ArgEncoder[AcceptEnterpriseAdministratorInvitationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("acceptEnterpriseAdministratorInvitation", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AcceptEnterpriseAdministratorInvitationInput!")(encoder0)))
  /**
 * Applies a suggested topic to the repository.
 */
def acceptTopicSuggestion[A](input : AcceptTopicSuggestionInput)(innerSelection: SelectionBuilder[AcceptTopicSuggestionPayload, A])(implicit encoder0: ArgEncoder[AcceptTopicSuggestionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("acceptTopicSuggestion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AcceptTopicSuggestionInput!")(encoder0)))
  /**
 * Adds assignees to an assignable object.
 */
def addAssigneesToAssignable[A](input : AddAssigneesToAssignableInput)(innerSelection: SelectionBuilder[AddAssigneesToAssignablePayload, A])(implicit encoder0: ArgEncoder[AddAssigneesToAssignableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addAssigneesToAssignable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddAssigneesToAssignableInput!")(encoder0)))
  /**
 * Adds a comment to an Issue or Pull Request.
 */
def addComment[A](input : AddCommentInput)(innerSelection: SelectionBuilder[AddCommentPayload, A])(implicit encoder0: ArgEncoder[AddCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddCommentInput!")(encoder0)))
  /**
 * Adds a comment to a Discussion, possibly as a reply to another comment.
 */
def addDiscussionComment[A](input : AddDiscussionCommentInput)(innerSelection: SelectionBuilder[AddDiscussionCommentPayload, A])(implicit encoder0: ArgEncoder[AddDiscussionCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addDiscussionComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddDiscussionCommentInput!")(encoder0)))
  /**
 * Vote for an option in a discussion poll.
 */
def addDiscussionPollVote[A](input : AddDiscussionPollVoteInput)(innerSelection: SelectionBuilder[AddDiscussionPollVotePayload, A])(implicit encoder0: ArgEncoder[AddDiscussionPollVoteInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addDiscussionPollVote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddDiscussionPollVoteInput!")(encoder0)))
  /**
 * Adds enterprise members to an organization within the enterprise.
 */
def addEnterpriseOrganizationMember[A](input : AddEnterpriseOrganizationMemberInput)(innerSelection: SelectionBuilder[AddEnterpriseOrganizationMemberPayload, A])(implicit encoder0: ArgEncoder[AddEnterpriseOrganizationMemberInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addEnterpriseOrganizationMember", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddEnterpriseOrganizationMemberInput!")(encoder0)))
  /**
 * Adds a support entitlement to an enterprise member.
 */
def addEnterpriseSupportEntitlement[A](input : AddEnterpriseSupportEntitlementInput)(innerSelection: SelectionBuilder[AddEnterpriseSupportEntitlementPayload, A])(implicit encoder0: ArgEncoder[AddEnterpriseSupportEntitlementInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addEnterpriseSupportEntitlement", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddEnterpriseSupportEntitlementInput!")(encoder0)))
  /**
 * Adds labels to a labelable object.
 */
def addLabelsToLabelable[A](input : AddLabelsToLabelableInput)(innerSelection: SelectionBuilder[AddLabelsToLabelablePayload, A])(implicit encoder0: ArgEncoder[AddLabelsToLabelableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addLabelsToLabelable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddLabelsToLabelableInput!")(encoder0)))
  /**
 * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
 */
def addProjectCard[A](input : AddProjectCardInput)(innerSelection: SelectionBuilder[AddProjectCardPayload, A])(implicit encoder0: ArgEncoder[AddProjectCardInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addProjectCard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddProjectCardInput!")(encoder0)))
  /**
 * Adds a column to a Project.
 */
def addProjectColumn[A](input : AddProjectColumnInput)(innerSelection: SelectionBuilder[AddProjectColumnPayload, A])(implicit encoder0: ArgEncoder[AddProjectColumnInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addProjectColumn", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddProjectColumnInput!")(encoder0)))
  /**
 * Creates a new draft issue and add it to a Project.
 */
def addProjectV2DraftIssue[A](input : AddProjectV2DraftIssueInput)(innerSelection: SelectionBuilder[AddProjectV2DraftIssuePayload, A])(implicit encoder0: ArgEncoder[AddProjectV2DraftIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addProjectV2DraftIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddProjectV2DraftIssueInput!")(encoder0)))
  /**
 * Links an existing content instance to a Project.
 */
def addProjectV2ItemById[A](input : AddProjectV2ItemByIdInput)(innerSelection: SelectionBuilder[AddProjectV2ItemByIdPayload, A])(implicit encoder0: ArgEncoder[AddProjectV2ItemByIdInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addProjectV2ItemById", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddProjectV2ItemByIdInput!")(encoder0)))
  /**
 * Adds a review to a Pull Request.
 */
def addPullRequestReview[A](input : AddPullRequestReviewInput)(innerSelection: SelectionBuilder[AddPullRequestReviewPayload, A])(implicit encoder0: ArgEncoder[AddPullRequestReviewInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addPullRequestReview", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddPullRequestReviewInput!")(encoder0)))
  /**
 * Adds a comment to a review.
 */
def addPullRequestReviewComment[A](input : AddPullRequestReviewCommentInput)(innerSelection: SelectionBuilder[AddPullRequestReviewCommentPayload, A])(implicit encoder0: ArgEncoder[AddPullRequestReviewCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addPullRequestReviewComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddPullRequestReviewCommentInput!")(encoder0)))
  /**
 * Adds a new thread to a pending Pull Request Review.
 */
def addPullRequestReviewThread[A](input : AddPullRequestReviewThreadInput)(innerSelection: SelectionBuilder[AddPullRequestReviewThreadPayload, A])(implicit encoder0: ArgEncoder[AddPullRequestReviewThreadInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addPullRequestReviewThread", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddPullRequestReviewThreadInput!")(encoder0)))
  /**
 * Adds a reaction to a subject.
 */
def addReaction[A](input : AddReactionInput)(innerSelection: SelectionBuilder[AddReactionPayload, A])(implicit encoder0: ArgEncoder[AddReactionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addReaction", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddReactionInput!")(encoder0)))
  /**
 * Adds a star to a Starrable.
 */
def addStar[A](input : AddStarInput)(innerSelection: SelectionBuilder[AddStarPayload, A])(implicit encoder0: ArgEncoder[AddStarInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addStar", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddStarInput!")(encoder0)))
  /**
 * Add an upvote to a discussion or discussion comment.
 */
def addUpvote[A](input : AddUpvoteInput)(innerSelection: SelectionBuilder[AddUpvotePayload, A])(implicit encoder0: ArgEncoder[AddUpvoteInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addUpvote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddUpvoteInput!")(encoder0)))
  /**
 * Adds a verifiable domain to an owning account.
 */
def addVerifiableDomain[A](input : AddVerifiableDomainInput)(innerSelection: SelectionBuilder[AddVerifiableDomainPayload, A])(implicit encoder0: ArgEncoder[AddVerifiableDomainInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("addVerifiableDomain", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "AddVerifiableDomainInput!")(encoder0)))
  /**
 * Approve all pending deployments under one or more environments
 */
def approveDeployments[A](input : ApproveDeploymentsInput)(innerSelection: SelectionBuilder[ApproveDeploymentsPayload, A])(implicit encoder0: ArgEncoder[ApproveDeploymentsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("approveDeployments", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ApproveDeploymentsInput!")(encoder0)))
  /**
 * Approve a verifiable domain for notification delivery.
 */
def approveVerifiableDomain[A](input : ApproveVerifiableDomainInput)(innerSelection: SelectionBuilder[ApproveVerifiableDomainPayload, A])(implicit encoder0: ArgEncoder[ApproveVerifiableDomainInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("approveVerifiableDomain", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ApproveVerifiableDomainInput!")(encoder0)))
  /**
 * Archives a ProjectV2Item
 */
def archiveProjectV2Item[A](input : ArchiveProjectV2ItemInput)(innerSelection: SelectionBuilder[ArchiveProjectV2ItemPayload, A])(implicit encoder0: ArgEncoder[ArchiveProjectV2ItemInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("archiveProjectV2Item", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ArchiveProjectV2ItemInput!")(encoder0)))
  /**
 * Marks a repository as archived.
 */
def archiveRepository[A](input : ArchiveRepositoryInput)(innerSelection: SelectionBuilder[ArchiveRepositoryPayload, A])(implicit encoder0: ArgEncoder[ArchiveRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("archiveRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ArchiveRepositoryInput!")(encoder0)))
  /**
 * Cancels a pending invitation for an administrator to join an enterprise.
 */
def cancelEnterpriseAdminInvitation[A](input : CancelEnterpriseAdminInvitationInput)(innerSelection: SelectionBuilder[CancelEnterpriseAdminInvitationPayload, A])(implicit encoder0: ArgEncoder[CancelEnterpriseAdminInvitationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("cancelEnterpriseAdminInvitation", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CancelEnterpriseAdminInvitationInput!")(encoder0)))
  /**
 * Cancel an active sponsorship.
 */
def cancelSponsorship[A](input : CancelSponsorshipInput)(innerSelection: SelectionBuilder[CancelSponsorshipPayload, A])(implicit encoder0: ArgEncoder[CancelSponsorshipInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("cancelSponsorship", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CancelSponsorshipInput!")(encoder0)))
  /**
 * Update your status on GitHub.
 */
def changeUserStatus[A](input : ChangeUserStatusInput)(innerSelection: SelectionBuilder[ChangeUserStatusPayload, A])(implicit encoder0: ArgEncoder[ChangeUserStatusInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("changeUserStatus", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ChangeUserStatusInput!")(encoder0)))
  /**
 * Clears all labels from a labelable object.
 */
def clearLabelsFromLabelable[A](input : ClearLabelsFromLabelableInput)(innerSelection: SelectionBuilder[ClearLabelsFromLabelablePayload, A])(implicit encoder0: ArgEncoder[ClearLabelsFromLabelableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("clearLabelsFromLabelable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ClearLabelsFromLabelableInput!")(encoder0)))
  /**
 * This mutation clears the value of a field for an item in a Project. Currently
only text, number, date, assignees, labels, single-select, iteration and
milestone fields are supported.
 */
def clearProjectV2ItemFieldValue[A](input : ClearProjectV2ItemFieldValueInput)(innerSelection: SelectionBuilder[ClearProjectV2ItemFieldValuePayload, A])(implicit encoder0: ArgEncoder[ClearProjectV2ItemFieldValueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("clearProjectV2ItemFieldValue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ClearProjectV2ItemFieldValueInput!")(encoder0)))
  /**
 * Creates a new project by cloning configuration from an existing project.
 */
def cloneProject[A](input : CloneProjectInput)(innerSelection: SelectionBuilder[CloneProjectPayload, A])(implicit encoder0: ArgEncoder[CloneProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("cloneProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CloneProjectInput!")(encoder0)))
  /**
 * Create a new repository with the same files and directory structure as a template repository.
 */
def cloneTemplateRepository[A](input : CloneTemplateRepositoryInput)(innerSelection: SelectionBuilder[CloneTemplateRepositoryPayload, A])(implicit encoder0: ArgEncoder[CloneTemplateRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("cloneTemplateRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CloneTemplateRepositoryInput!")(encoder0)))
  /**
 * Close a discussion.
 */
def closeDiscussion[A](input : CloseDiscussionInput)(innerSelection: SelectionBuilder[CloseDiscussionPayload, A])(implicit encoder0: ArgEncoder[CloseDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closeDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CloseDiscussionInput!")(encoder0)))
  /**
 * Close an issue.
 */
def closeIssue[A](input : CloseIssueInput)(innerSelection: SelectionBuilder[CloseIssuePayload, A])(implicit encoder0: ArgEncoder[CloseIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closeIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CloseIssueInput!")(encoder0)))
  /**
 * Close a pull request.
 */
def closePullRequest[A](input : ClosePullRequestInput)(innerSelection: SelectionBuilder[ClosePullRequestPayload, A])(implicit encoder0: ArgEncoder[ClosePullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("closePullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ClosePullRequestInput!")(encoder0)))
  /**
 * Convert a project note card to one associated with a newly created issue.
 */
def convertProjectCardNoteToIssue[A](input : ConvertProjectCardNoteToIssueInput)(innerSelection: SelectionBuilder[ConvertProjectCardNoteToIssuePayload, A])(implicit encoder0: ArgEncoder[ConvertProjectCardNoteToIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("convertProjectCardNoteToIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ConvertProjectCardNoteToIssueInput!")(encoder0)))
  /**
 * Converts a pull request to draft
 */
def convertPullRequestToDraft[A](input : ConvertPullRequestToDraftInput)(innerSelection: SelectionBuilder[ConvertPullRequestToDraftPayload, A])(implicit encoder0: ArgEncoder[ConvertPullRequestToDraftInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("convertPullRequestToDraft", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ConvertPullRequestToDraftInput!")(encoder0)))
  /**
 * Copy a project.
 */
def copyProjectV2[A](input : CopyProjectV2Input)(innerSelection: SelectionBuilder[CopyProjectV2Payload, A])(implicit encoder0: ArgEncoder[CopyProjectV2Input]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("copyProjectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CopyProjectV2Input!")(encoder0)))
  /**
 * Invites a user to claim reattributable data
 */
def createAttributionInvitation[A](input : CreateAttributionInvitationInput)(innerSelection: SelectionBuilder[CreateAttributionInvitationPayload, A])(implicit encoder0: ArgEncoder[CreateAttributionInvitationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createAttributionInvitation", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateAttributionInvitationInput!")(encoder0)))
  /**
 * Create a new branch protection rule
 */
def createBranchProtectionRule[A](input : CreateBranchProtectionRuleInput)(innerSelection: SelectionBuilder[CreateBranchProtectionRulePayload, A])(implicit encoder0: ArgEncoder[CreateBranchProtectionRuleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createBranchProtectionRule", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateBranchProtectionRuleInput!")(encoder0)))
  /**
 * Create a check run.
 */
def createCheckRun[A](input : CreateCheckRunInput)(innerSelection: SelectionBuilder[CreateCheckRunPayload, A])(implicit encoder0: ArgEncoder[CreateCheckRunInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createCheckRun", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateCheckRunInput!")(encoder0)))
  /**
 * Create a check suite
 */
def createCheckSuite[A](input : CreateCheckSuiteInput)(innerSelection: SelectionBuilder[CreateCheckSuitePayload, A])(implicit encoder0: ArgEncoder[CreateCheckSuiteInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createCheckSuite", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateCheckSuiteInput!")(encoder0)))
  /**
 * Appends a commit to the given branch as the authenticated user.

This mutation creates a commit whose parent is the HEAD of the provided
branch and also updates that branch to point to the new commit.
It can be thought of as similar to `git commit`.

### Locating a Branch

Commits are appended to a `branch` of type `Ref`.
This must refer to a git branch (i.e.  the fully qualified path must
begin with `refs/heads/`, although including this prefix is optional.

Callers may specify the `branch` to commit to either by its global node
ID or by passing both of `repositoryNameWithOwner` and `refName`.  For
more details see the documentation for `CommittableBranch`.

### Describing Changes

`fileChanges` are specified as a `FilesChanges` object describing
`FileAdditions` and `FileDeletions`.

Please see the documentation for `FileChanges` for more information on
how to use this argument to describe any set of file changes.

### Authorship

Similar to the web commit interface, this mutation does not support
specifying the author or committer of the commit and will not add
support for this in the future.

A commit created by a successful execution of this mutation will be
authored by the owner of the credential which authenticates the API
request.  The committer will be identical to that of commits authored
using the web interface.

If you need full control over author and committer information, please
use the Git Database REST API instead.

### Commit Signing

Commits made using this mutation are automatically signed by GitHub if
supported and will be marked as verified in the user interface.
 */
def createCommitOnBranch[A](input : CreateCommitOnBranchInput)(innerSelection: SelectionBuilder[CreateCommitOnBranchPayload, A])(implicit encoder0: ArgEncoder[CreateCommitOnBranchInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createCommitOnBranch", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateCommitOnBranchInput!")(encoder0)))
  /**
 * Creates a new deployment event.
 */
def createDeployment[A](input : CreateDeploymentInput)(innerSelection: SelectionBuilder[CreateDeploymentPayload, A])(implicit encoder0: ArgEncoder[CreateDeploymentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createDeployment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateDeploymentInput!")(encoder0)))
  /**
 * Create a deployment status.
 */
def createDeploymentStatus[A](input : CreateDeploymentStatusInput)(innerSelection: SelectionBuilder[CreateDeploymentStatusPayload, A])(implicit encoder0: ArgEncoder[CreateDeploymentStatusInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createDeploymentStatus", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateDeploymentStatusInput!")(encoder0)))
  /**
 * Create a discussion.
 */
def createDiscussion[A](input : CreateDiscussionInput)(innerSelection: SelectionBuilder[CreateDiscussionPayload, A])(implicit encoder0: ArgEncoder[CreateDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateDiscussionInput!")(encoder0)))
  /**
 * Creates an organization as part of an enterprise account.
 */
def createEnterpriseOrganization[A](input : CreateEnterpriseOrganizationInput)(innerSelection: SelectionBuilder[CreateEnterpriseOrganizationPayload, A])(implicit encoder0: ArgEncoder[CreateEnterpriseOrganizationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createEnterpriseOrganization", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateEnterpriseOrganizationInput!")(encoder0)))
  /**
 * Creates an environment or simply returns it if already exists.
 */
def createEnvironment[A](input : CreateEnvironmentInput)(innerSelection: SelectionBuilder[CreateEnvironmentPayload, A])(implicit encoder0: ArgEncoder[CreateEnvironmentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createEnvironment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateEnvironmentInput!")(encoder0)))
  /**
 * Creates a new IP allow list entry.
 */
def createIpAllowListEntry[A](input : CreateIpAllowListEntryInput)(innerSelection: SelectionBuilder[CreateIpAllowListEntryPayload, A])(implicit encoder0: ArgEncoder[CreateIpAllowListEntryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createIpAllowListEntry", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateIpAllowListEntryInput!")(encoder0)))
  /**
 * Creates a new issue.
 */
def createIssue[A](input : CreateIssueInput)(innerSelection: SelectionBuilder[CreateIssuePayload, A])(implicit encoder0: ArgEncoder[CreateIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateIssueInput!")(encoder0)))
  /**
 * Creates a new label.
 */
def createLabel[A](input : CreateLabelInput)(innerSelection: SelectionBuilder[CreateLabelPayload, A])(implicit encoder0: ArgEncoder[CreateLabelInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createLabel", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateLabelInput!")(encoder0)))
  /**
 * Create a branch linked to an issue.
 */
def createLinkedBranch[A](input : CreateLinkedBranchInput)(innerSelection: SelectionBuilder[CreateLinkedBranchPayload, A])(implicit encoder0: ArgEncoder[CreateLinkedBranchInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createLinkedBranch", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateLinkedBranchInput!")(encoder0)))
  /**
 * Creates a GitHub Enterprise Importer (GEI) migration source.
 */
def createMigrationSource[A](input : CreateMigrationSourceInput)(innerSelection: SelectionBuilder[CreateMigrationSourcePayload, A])(implicit encoder0: ArgEncoder[CreateMigrationSourceInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createMigrationSource", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateMigrationSourceInput!")(encoder0)))
  /**
 * Creates a new project.
 */
def createProject[A](input : CreateProjectInput)(innerSelection: SelectionBuilder[CreateProjectPayload, A])(implicit encoder0: ArgEncoder[CreateProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateProjectInput!")(encoder0)))
  /**
 * Creates a new project.
 */
def createProjectV2[A](input : CreateProjectV2Input)(innerSelection: SelectionBuilder[CreateProjectV2Payload, A])(implicit encoder0: ArgEncoder[CreateProjectV2Input]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createProjectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateProjectV2Input!")(encoder0)))
  /**
 * Create a new project field.
 */
def createProjectV2Field[A](input : CreateProjectV2FieldInput)(innerSelection: SelectionBuilder[CreateProjectV2FieldPayload, A])(implicit encoder0: ArgEncoder[CreateProjectV2FieldInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createProjectV2Field", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateProjectV2FieldInput!")(encoder0)))
  /**
 * Create a new pull request
 */
def createPullRequest[A](input : CreatePullRequestInput)(innerSelection: SelectionBuilder[CreatePullRequestPayload, A])(implicit encoder0: ArgEncoder[CreatePullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createPullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreatePullRequestInput!")(encoder0)))
  /**
 * Create a new Git Ref.
 */
def createRef[A](input : CreateRefInput)(innerSelection: SelectionBuilder[CreateRefPayload, A])(implicit encoder0: ArgEncoder[CreateRefInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createRef", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateRefInput!")(encoder0)))
  /**
 * Create a new repository.
 */
def createRepository[A](input : CreateRepositoryInput)(innerSelection: SelectionBuilder[CreateRepositoryPayload, A])(implicit encoder0: ArgEncoder[CreateRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateRepositoryInput!")(encoder0)))
  /**
 * Create a repository ruleset
 */
def createRepositoryRuleset[A](input : CreateRepositoryRulesetInput)(innerSelection: SelectionBuilder[CreateRepositoryRulesetPayload, A])(implicit encoder0: ArgEncoder[CreateRepositoryRulesetInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createRepositoryRuleset", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateRepositoryRulesetInput!")(encoder0)))
  /**
 * Create a GitHub Sponsors profile to allow others to sponsor you or your organization.
 */
def createSponsorsListing[A](input : CreateSponsorsListingInput)(innerSelection: SelectionBuilder[CreateSponsorsListingPayload, A])(implicit encoder0: ArgEncoder[CreateSponsorsListingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createSponsorsListing", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateSponsorsListingInput!")(encoder0)))
  /**
 * Create a new payment tier for your GitHub Sponsors profile.
 */
def createSponsorsTier[A](input : CreateSponsorsTierInput)(innerSelection: SelectionBuilder[CreateSponsorsTierPayload, A])(implicit encoder0: ArgEncoder[CreateSponsorsTierInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createSponsorsTier", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateSponsorsTierInput!")(encoder0)))
  /**
 * Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship.
 */
def createSponsorship[A](input : CreateSponsorshipInput)(innerSelection: SelectionBuilder[CreateSponsorshipPayload, A])(implicit encoder0: ArgEncoder[CreateSponsorshipInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createSponsorship", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateSponsorshipInput!")(encoder0)))
  /**
 * Make many one-time sponsorships for different sponsorable users or
organizations at once. Can only sponsor those who have a public GitHub
Sponsors profile.
 */
def createSponsorships[A](input : CreateSponsorshipsInput)(innerSelection: SelectionBuilder[CreateSponsorshipsPayload, A])(implicit encoder0: ArgEncoder[CreateSponsorshipsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createSponsorships", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateSponsorshipsInput!")(encoder0)))
  /**
 * Creates a new team discussion.
 */
def createTeamDiscussion[A](input : CreateTeamDiscussionInput)(innerSelection: SelectionBuilder[CreateTeamDiscussionPayload, A])(implicit encoder0: ArgEncoder[CreateTeamDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createTeamDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateTeamDiscussionInput!")(encoder0)))
  /**
 * Creates a new team discussion comment.
 */
def createTeamDiscussionComment[A](input : CreateTeamDiscussionCommentInput)(innerSelection: SelectionBuilder[CreateTeamDiscussionCommentPayload, A])(implicit encoder0: ArgEncoder[CreateTeamDiscussionCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("createTeamDiscussionComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "CreateTeamDiscussionCommentInput!")(encoder0)))
  /**
 * Rejects a suggested topic for the repository.
 */
def declineTopicSuggestion[A](input : DeclineTopicSuggestionInput)(innerSelection: SelectionBuilder[DeclineTopicSuggestionPayload, A])(implicit encoder0: ArgEncoder[DeclineTopicSuggestionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("declineTopicSuggestion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeclineTopicSuggestionInput!")(encoder0)))
  /**
 * Delete a branch protection rule
 */
def deleteBranchProtectionRule[A](input : DeleteBranchProtectionRuleInput)(innerSelection: SelectionBuilder[DeleteBranchProtectionRulePayload, A])(implicit encoder0: ArgEncoder[DeleteBranchProtectionRuleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteBranchProtectionRule", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteBranchProtectionRuleInput!")(encoder0)))
  /**
 * Deletes a deployment.
 */
def deleteDeployment[A](input : DeleteDeploymentInput)(innerSelection: SelectionBuilder[DeleteDeploymentPayload, A])(implicit encoder0: ArgEncoder[DeleteDeploymentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteDeployment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteDeploymentInput!")(encoder0)))
  /**
 * Delete a discussion and all of its replies.
 */
def deleteDiscussion[A](input : DeleteDiscussionInput)(innerSelection: SelectionBuilder[DeleteDiscussionPayload, A])(implicit encoder0: ArgEncoder[DeleteDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteDiscussionInput!")(encoder0)))
  /**
 * Delete a discussion comment. If it has replies, wipe it instead.
 */
def deleteDiscussionComment[A](input : DeleteDiscussionCommentInput)(innerSelection: SelectionBuilder[DeleteDiscussionCommentPayload, A])(implicit encoder0: ArgEncoder[DeleteDiscussionCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteDiscussionComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteDiscussionCommentInput!")(encoder0)))
  /**
 * Deletes an environment
 */
def deleteEnvironment[A](input : DeleteEnvironmentInput)(innerSelection: SelectionBuilder[DeleteEnvironmentPayload, A])(implicit encoder0: ArgEncoder[DeleteEnvironmentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteEnvironment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteEnvironmentInput!")(encoder0)))
  /**
 * Deletes an IP allow list entry.
 */
def deleteIpAllowListEntry[A](input : DeleteIpAllowListEntryInput)(innerSelection: SelectionBuilder[DeleteIpAllowListEntryPayload, A])(implicit encoder0: ArgEncoder[DeleteIpAllowListEntryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteIpAllowListEntry", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteIpAllowListEntryInput!")(encoder0)))
  /**
 * Deletes an Issue object.
 */
def deleteIssue[A](input : DeleteIssueInput)(innerSelection: SelectionBuilder[DeleteIssuePayload, A])(implicit encoder0: ArgEncoder[DeleteIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteIssueInput!")(encoder0)))
  /**
 * Deletes an IssueComment object.
 */
def deleteIssueComment[A](input : DeleteIssueCommentInput)(innerSelection: SelectionBuilder[DeleteIssueCommentPayload, A])(implicit encoder0: ArgEncoder[DeleteIssueCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteIssueComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteIssueCommentInput!")(encoder0)))
  /**
 * Deletes a label.
 */
def deleteLabel[A](input : DeleteLabelInput)(innerSelection: SelectionBuilder[DeleteLabelPayload, A])(implicit encoder0: ArgEncoder[DeleteLabelInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteLabel", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteLabelInput!")(encoder0)))
  /**
 * Unlink a branch from an issue.
 */
def deleteLinkedBranch[A](input : DeleteLinkedBranchInput)(innerSelection: SelectionBuilder[DeleteLinkedBranchPayload, A])(implicit encoder0: ArgEncoder[DeleteLinkedBranchInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteLinkedBranch", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteLinkedBranchInput!")(encoder0)))
  /**
 * Delete a package version.
 */
def deletePackageVersion[A](input : DeletePackageVersionInput)(innerSelection: SelectionBuilder[DeletePackageVersionPayload, A])(implicit encoder0: ArgEncoder[DeletePackageVersionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletePackageVersion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeletePackageVersionInput!")(encoder0)))
  /**
 * Deletes a project.
 */
def deleteProject[A](input : DeleteProjectInput)(innerSelection: SelectionBuilder[DeleteProjectPayload, A])(implicit encoder0: ArgEncoder[DeleteProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectInput!")(encoder0)))
  /**
 * Deletes a project card.
 */
def deleteProjectCard[A](input : DeleteProjectCardInput)(innerSelection: SelectionBuilder[DeleteProjectCardPayload, A])(implicit encoder0: ArgEncoder[DeleteProjectCardInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProjectCard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectCardInput!")(encoder0)))
  /**
 * Deletes a project column.
 */
def deleteProjectColumn[A](input : DeleteProjectColumnInput)(innerSelection: SelectionBuilder[DeleteProjectColumnPayload, A])(implicit encoder0: ArgEncoder[DeleteProjectColumnInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProjectColumn", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectColumnInput!")(encoder0)))
  /**
 * Delete a project.
 */
def deleteProjectV2[A](input : DeleteProjectV2Input)(innerSelection: SelectionBuilder[DeleteProjectV2Payload, A])(implicit encoder0: ArgEncoder[DeleteProjectV2Input]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProjectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectV2Input!")(encoder0)))
  /**
 * Delete a project field.
 */
def deleteProjectV2Field[A](input : DeleteProjectV2FieldInput)(innerSelection: SelectionBuilder[DeleteProjectV2FieldPayload, A])(implicit encoder0: ArgEncoder[DeleteProjectV2FieldInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProjectV2Field", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectV2FieldInput!")(encoder0)))
  /**
 * Deletes an item from a Project.
 */
def deleteProjectV2Item[A](input : DeleteProjectV2ItemInput)(innerSelection: SelectionBuilder[DeleteProjectV2ItemPayload, A])(implicit encoder0: ArgEncoder[DeleteProjectV2ItemInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProjectV2Item", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectV2ItemInput!")(encoder0)))
  /**
 * Deletes a project workflow.
 */
def deleteProjectV2Workflow[A](input : DeleteProjectV2WorkflowInput)(innerSelection: SelectionBuilder[DeleteProjectV2WorkflowPayload, A])(implicit encoder0: ArgEncoder[DeleteProjectV2WorkflowInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteProjectV2Workflow", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteProjectV2WorkflowInput!")(encoder0)))
  /**
 * Deletes a pull request review.
 */
def deletePullRequestReview[A](input : DeletePullRequestReviewInput)(innerSelection: SelectionBuilder[DeletePullRequestReviewPayload, A])(implicit encoder0: ArgEncoder[DeletePullRequestReviewInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletePullRequestReview", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeletePullRequestReviewInput!")(encoder0)))
  /**
 * Deletes a pull request review comment.
 */
def deletePullRequestReviewComment[A](input : DeletePullRequestReviewCommentInput)(innerSelection: SelectionBuilder[DeletePullRequestReviewCommentPayload, A])(implicit encoder0: ArgEncoder[DeletePullRequestReviewCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deletePullRequestReviewComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeletePullRequestReviewCommentInput!")(encoder0)))
  /**
 * Delete a Git Ref.
 */
def deleteRef[A](input : DeleteRefInput)(innerSelection: SelectionBuilder[DeleteRefPayload, A])(implicit encoder0: ArgEncoder[DeleteRefInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteRef", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteRefInput!")(encoder0)))
  /**
 * Delete a repository ruleset
 */
def deleteRepositoryRuleset[A](input : DeleteRepositoryRulesetInput)(innerSelection: SelectionBuilder[DeleteRepositoryRulesetPayload, A])(implicit encoder0: ArgEncoder[DeleteRepositoryRulesetInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteRepositoryRuleset", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteRepositoryRulesetInput!")(encoder0)))
  /**
 * Deletes a team discussion.
 */
def deleteTeamDiscussion[A](input : DeleteTeamDiscussionInput)(innerSelection: SelectionBuilder[DeleteTeamDiscussionPayload, A])(implicit encoder0: ArgEncoder[DeleteTeamDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteTeamDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteTeamDiscussionInput!")(encoder0)))
  /**
 * Deletes a team discussion comment.
 */
def deleteTeamDiscussionComment[A](input : DeleteTeamDiscussionCommentInput)(innerSelection: SelectionBuilder[DeleteTeamDiscussionCommentPayload, A])(implicit encoder0: ArgEncoder[DeleteTeamDiscussionCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteTeamDiscussionComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteTeamDiscussionCommentInput!")(encoder0)))
  /**
 * Deletes a verifiable domain.
 */
def deleteVerifiableDomain[A](input : DeleteVerifiableDomainInput)(innerSelection: SelectionBuilder[DeleteVerifiableDomainPayload, A])(implicit encoder0: ArgEncoder[DeleteVerifiableDomainInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("deleteVerifiableDomain", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DeleteVerifiableDomainInput!")(encoder0)))
  /**
 * Remove a pull request from the merge queue.
 */
def dequeuePullRequest[A](input : DequeuePullRequestInput)(innerSelection: SelectionBuilder[DequeuePullRequestPayload, A])(implicit encoder0: ArgEncoder[DequeuePullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dequeuePullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DequeuePullRequestInput!")(encoder0)))
  /**
 * Disable auto merge on the given pull request
 */
def disablePullRequestAutoMerge[A](input : DisablePullRequestAutoMergeInput)(innerSelection: SelectionBuilder[DisablePullRequestAutoMergePayload, A])(implicit encoder0: ArgEncoder[DisablePullRequestAutoMergeInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("disablePullRequestAutoMerge", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DisablePullRequestAutoMergeInput!")(encoder0)))
  /**
 * Dismisses an approved or rejected pull request review.
 */
def dismissPullRequestReview[A](input : DismissPullRequestReviewInput)(innerSelection: SelectionBuilder[DismissPullRequestReviewPayload, A])(implicit encoder0: ArgEncoder[DismissPullRequestReviewInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dismissPullRequestReview", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DismissPullRequestReviewInput!")(encoder0)))
  /**
 * Dismisses the Dependabot alert.
 */
def dismissRepositoryVulnerabilityAlert[A](input : DismissRepositoryVulnerabilityAlertInput)(innerSelection: SelectionBuilder[DismissRepositoryVulnerabilityAlertPayload, A])(implicit encoder0: ArgEncoder[DismissRepositoryVulnerabilityAlertInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("dismissRepositoryVulnerabilityAlert", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "DismissRepositoryVulnerabilityAlertInput!")(encoder0)))
  /**
 * Enable the default auto-merge on a pull request.
 */
def enablePullRequestAutoMerge[A](input : EnablePullRequestAutoMergeInput)(innerSelection: SelectionBuilder[EnablePullRequestAutoMergePayload, A])(implicit encoder0: ArgEncoder[EnablePullRequestAutoMergeInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enablePullRequestAutoMerge", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "EnablePullRequestAutoMergeInput!")(encoder0)))
  /**
 * Add a pull request to the merge queue.
 */
def enqueuePullRequest[A](input : EnqueuePullRequestInput)(innerSelection: SelectionBuilder[EnqueuePullRequestPayload, A])(implicit encoder0: ArgEncoder[EnqueuePullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("enqueuePullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "EnqueuePullRequestInput!")(encoder0)))
  /**
 * Follow an organization.
 */
def followOrganization[A](input : FollowOrganizationInput)(innerSelection: SelectionBuilder[FollowOrganizationPayload, A])(implicit encoder0: ArgEncoder[FollowOrganizationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("followOrganization", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "FollowOrganizationInput!")(encoder0)))
  /**
 * Follow a user.
 */
def followUser[A](input : FollowUserInput)(innerSelection: SelectionBuilder[FollowUserPayload, A])(implicit encoder0: ArgEncoder[FollowUserInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("followUser", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "FollowUserInput!")(encoder0)))
  /**
 * Grant the migrator role to a user for all organizations under an enterprise account.
 */
def grantEnterpriseOrganizationsMigratorRole[A](input : GrantEnterpriseOrganizationsMigratorRoleInput)(innerSelection: SelectionBuilder[GrantEnterpriseOrganizationsMigratorRolePayload, A])(implicit encoder0: ArgEncoder[GrantEnterpriseOrganizationsMigratorRoleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("grantEnterpriseOrganizationsMigratorRole", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "GrantEnterpriseOrganizationsMigratorRoleInput!")(encoder0)))
  /**
 * Grant the migrator role to a user or a team.
 */
def grantMigratorRole[A](input : GrantMigratorRoleInput)(innerSelection: SelectionBuilder[GrantMigratorRolePayload, A])(implicit encoder0: ArgEncoder[GrantMigratorRoleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("grantMigratorRole", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "GrantMigratorRoleInput!")(encoder0)))
  /**
 * Creates a new project by importing columns and a list of issues/PRs.
 */
def importProject[A](input : ImportProjectInput)(innerSelection: SelectionBuilder[ImportProjectPayload, A])(implicit encoder0: ArgEncoder[ImportProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("importProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ImportProjectInput!")(encoder0)))
  /**
 * Invite someone to become an administrator of the enterprise.
 */
def inviteEnterpriseAdmin[A](input : InviteEnterpriseAdminInput)(innerSelection: SelectionBuilder[InviteEnterpriseAdminPayload, A])(implicit encoder0: ArgEncoder[InviteEnterpriseAdminInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("inviteEnterpriseAdmin", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "InviteEnterpriseAdminInput!")(encoder0)))
  /**
 * Links a project to a repository.
 */
def linkProjectV2ToRepository[A](input : LinkProjectV2ToRepositoryInput)(innerSelection: SelectionBuilder[LinkProjectV2ToRepositoryPayload, A])(implicit encoder0: ArgEncoder[LinkProjectV2ToRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("linkProjectV2ToRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "LinkProjectV2ToRepositoryInput!")(encoder0)))
  /**
 * Links a project to a team.
 */
def linkProjectV2ToTeam[A](input : LinkProjectV2ToTeamInput)(innerSelection: SelectionBuilder[LinkProjectV2ToTeamPayload, A])(implicit encoder0: ArgEncoder[LinkProjectV2ToTeamInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("linkProjectV2ToTeam", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "LinkProjectV2ToTeamInput!")(encoder0)))
  /**
 * Creates a repository link for a project.
 */
def linkRepositoryToProject[A](input : LinkRepositoryToProjectInput)(innerSelection: SelectionBuilder[LinkRepositoryToProjectPayload, A])(implicit encoder0: ArgEncoder[LinkRepositoryToProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("linkRepositoryToProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "LinkRepositoryToProjectInput!")(encoder0)))
  /**
 * Lock a lockable object
 */
def lockLockable[A](input : LockLockableInput)(innerSelection: SelectionBuilder[LockLockablePayload, A])(implicit encoder0: ArgEncoder[LockLockableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("lockLockable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "LockLockableInput!")(encoder0)))
  /**
 * Mark a discussion comment as the chosen answer for discussions in an answerable category.
 */
def markDiscussionCommentAsAnswer[A](input : MarkDiscussionCommentAsAnswerInput)(innerSelection: SelectionBuilder[MarkDiscussionCommentAsAnswerPayload, A])(implicit encoder0: ArgEncoder[MarkDiscussionCommentAsAnswerInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("markDiscussionCommentAsAnswer", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MarkDiscussionCommentAsAnswerInput!")(encoder0)))
  /**
 * Mark a pull request file as viewed
 */
def markFileAsViewed[A](input : MarkFileAsViewedInput)(innerSelection: SelectionBuilder[MarkFileAsViewedPayload, A])(implicit encoder0: ArgEncoder[MarkFileAsViewedInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("markFileAsViewed", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MarkFileAsViewedInput!")(encoder0)))
  /**
 * Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template.
 */
def markProjectV2AsTemplate[A](input : MarkProjectV2AsTemplateInput)(innerSelection: SelectionBuilder[MarkProjectV2AsTemplatePayload, A])(implicit encoder0: ArgEncoder[MarkProjectV2AsTemplateInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("markProjectV2AsTemplate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MarkProjectV2AsTemplateInput!")(encoder0)))
  /**
 * Marks a pull request ready for review.
 */
def markPullRequestReadyForReview[A](input : MarkPullRequestReadyForReviewInput)(innerSelection: SelectionBuilder[MarkPullRequestReadyForReviewPayload, A])(implicit encoder0: ArgEncoder[MarkPullRequestReadyForReviewInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("markPullRequestReadyForReview", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MarkPullRequestReadyForReviewInput!")(encoder0)))
  /**
 * Merge a head into a branch.
 */
def mergeBranch[A](input : MergeBranchInput)(innerSelection: SelectionBuilder[MergeBranchPayload, A])(implicit encoder0: ArgEncoder[MergeBranchInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergeBranch", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MergeBranchInput!")(encoder0)))
  /**
 * Merge a pull request.
 */
def mergePullRequest[A](input : MergePullRequestInput)(innerSelection: SelectionBuilder[MergePullRequestPayload, A])(implicit encoder0: ArgEncoder[MergePullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("mergePullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MergePullRequestInput!")(encoder0)))
  /**
 * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
 */
def minimizeComment[A](input : MinimizeCommentInput)(innerSelection: SelectionBuilder[MinimizeCommentPayload, A])(implicit encoder0: ArgEncoder[MinimizeCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("minimizeComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MinimizeCommentInput!")(encoder0)))
  /**
 * Moves a project card to another place.
 */
def moveProjectCard[A](input : MoveProjectCardInput)(innerSelection: SelectionBuilder[MoveProjectCardPayload, A])(implicit encoder0: ArgEncoder[MoveProjectCardInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("moveProjectCard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MoveProjectCardInput!")(encoder0)))
  /**
 * Moves a project column to another place.
 */
def moveProjectColumn[A](input : MoveProjectColumnInput)(innerSelection: SelectionBuilder[MoveProjectColumnPayload, A])(implicit encoder0: ArgEncoder[MoveProjectColumnInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("moveProjectColumn", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "MoveProjectColumnInput!")(encoder0)))
  /**
 * Pin an issue to a repository
 */
def pinIssue[A](input : PinIssueInput)(innerSelection: SelectionBuilder[PinIssuePayload, A])(implicit encoder0: ArgEncoder[PinIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("pinIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "PinIssueInput!")(encoder0)))
  /**
 * Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile.
 */
def publishSponsorsTier[A](input : PublishSponsorsTierInput)(innerSelection: SelectionBuilder[PublishSponsorsTierPayload, A])(implicit encoder0: ArgEncoder[PublishSponsorsTierInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("publishSponsorsTier", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "PublishSponsorsTierInput!")(encoder0)))
  /**
 * Regenerates the identity provider recovery codes for an enterprise
 */
def regenerateEnterpriseIdentityProviderRecoveryCodes[A](input : RegenerateEnterpriseIdentityProviderRecoveryCodesInput)(innerSelection: SelectionBuilder[RegenerateEnterpriseIdentityProviderRecoveryCodesPayload, A])(implicit encoder0: ArgEncoder[RegenerateEnterpriseIdentityProviderRecoveryCodesInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("regenerateEnterpriseIdentityProviderRecoveryCodes", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RegenerateEnterpriseIdentityProviderRecoveryCodesInput!")(encoder0)))
  /**
 * Regenerates a verifiable domain's verification token.
 */
def regenerateVerifiableDomainToken[A](input : RegenerateVerifiableDomainTokenInput)(innerSelection: SelectionBuilder[RegenerateVerifiableDomainTokenPayload, A])(implicit encoder0: ArgEncoder[RegenerateVerifiableDomainTokenInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("regenerateVerifiableDomainToken", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RegenerateVerifiableDomainTokenInput!")(encoder0)))
  /**
 * Reject all pending deployments under one or more environments
 */
def rejectDeployments[A](input : RejectDeploymentsInput)(innerSelection: SelectionBuilder[RejectDeploymentsPayload, A])(implicit encoder0: ArgEncoder[RejectDeploymentsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("rejectDeployments", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RejectDeploymentsInput!")(encoder0)))
  /**
 * Removes assignees from an assignable object.
 */
def removeAssigneesFromAssignable[A](input : RemoveAssigneesFromAssignableInput)(innerSelection: SelectionBuilder[RemoveAssigneesFromAssignablePayload, A])(implicit encoder0: ArgEncoder[RemoveAssigneesFromAssignableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeAssigneesFromAssignable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveAssigneesFromAssignableInput!")(encoder0)))
  /**
 * Removes an administrator from the enterprise.
 */
def removeEnterpriseAdmin[A](input : RemoveEnterpriseAdminInput)(innerSelection: SelectionBuilder[RemoveEnterpriseAdminPayload, A])(implicit encoder0: ArgEncoder[RemoveEnterpriseAdminInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeEnterpriseAdmin", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveEnterpriseAdminInput!")(encoder0)))
  /**
 * Removes the identity provider from an enterprise
 */
def removeEnterpriseIdentityProvider[A](input : RemoveEnterpriseIdentityProviderInput)(innerSelection: SelectionBuilder[RemoveEnterpriseIdentityProviderPayload, A])(implicit encoder0: ArgEncoder[RemoveEnterpriseIdentityProviderInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeEnterpriseIdentityProvider", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveEnterpriseIdentityProviderInput!")(encoder0)))
  /**
 * Removes a user from all organizations within the enterprise
 */
def removeEnterpriseMember[A](input : RemoveEnterpriseMemberInput)(innerSelection: SelectionBuilder[RemoveEnterpriseMemberPayload, A])(implicit encoder0: ArgEncoder[RemoveEnterpriseMemberInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeEnterpriseMember", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveEnterpriseMemberInput!")(encoder0)))
  /**
 * Removes an organization from the enterprise
 */
def removeEnterpriseOrganization[A](input : RemoveEnterpriseOrganizationInput)(innerSelection: SelectionBuilder[RemoveEnterpriseOrganizationPayload, A])(implicit encoder0: ArgEncoder[RemoveEnterpriseOrganizationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeEnterpriseOrganization", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveEnterpriseOrganizationInput!")(encoder0)))
  /**
 * Removes a support entitlement from an enterprise member.
 */
def removeEnterpriseSupportEntitlement[A](input : RemoveEnterpriseSupportEntitlementInput)(innerSelection: SelectionBuilder[RemoveEnterpriseSupportEntitlementPayload, A])(implicit encoder0: ArgEncoder[RemoveEnterpriseSupportEntitlementInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeEnterpriseSupportEntitlement", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveEnterpriseSupportEntitlementInput!")(encoder0)))
  /**
 * Removes labels from a Labelable object.
 */
def removeLabelsFromLabelable[A](input : RemoveLabelsFromLabelableInput)(innerSelection: SelectionBuilder[RemoveLabelsFromLabelablePayload, A])(implicit encoder0: ArgEncoder[RemoveLabelsFromLabelableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeLabelsFromLabelable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveLabelsFromLabelableInput!")(encoder0)))
  /**
 * Removes outside collaborator from all repositories in an organization.
 */
def removeOutsideCollaborator[A](input : RemoveOutsideCollaboratorInput)(innerSelection: SelectionBuilder[RemoveOutsideCollaboratorPayload, A])(implicit encoder0: ArgEncoder[RemoveOutsideCollaboratorInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeOutsideCollaborator", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveOutsideCollaboratorInput!")(encoder0)))
  /**
 * Removes a reaction from a subject.
 */
def removeReaction[A](input : RemoveReactionInput)(innerSelection: SelectionBuilder[RemoveReactionPayload, A])(implicit encoder0: ArgEncoder[RemoveReactionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeReaction", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveReactionInput!")(encoder0)))
  /**
 * Removes a star from a Starrable.
 */
def removeStar[A](input : RemoveStarInput)(innerSelection: SelectionBuilder[RemoveStarPayload, A])(implicit encoder0: ArgEncoder[RemoveStarInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeStar", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveStarInput!")(encoder0)))
  /**
 * Remove an upvote to a discussion or discussion comment.
 */
def removeUpvote[A](input : RemoveUpvoteInput)(innerSelection: SelectionBuilder[RemoveUpvotePayload, A])(implicit encoder0: ArgEncoder[RemoveUpvoteInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("removeUpvote", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RemoveUpvoteInput!")(encoder0)))
  /**
 * Reopen a discussion.
 */
def reopenDiscussion[A](input : ReopenDiscussionInput)(innerSelection: SelectionBuilder[ReopenDiscussionPayload, A])(implicit encoder0: ArgEncoder[ReopenDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reopenDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ReopenDiscussionInput!")(encoder0)))
  /**
 * Reopen a issue.
 */
def reopenIssue[A](input : ReopenIssueInput)(innerSelection: SelectionBuilder[ReopenIssuePayload, A])(implicit encoder0: ArgEncoder[ReopenIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reopenIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ReopenIssueInput!")(encoder0)))
  /**
 * Reopen a pull request.
 */
def reopenPullRequest[A](input : ReopenPullRequestInput)(innerSelection: SelectionBuilder[ReopenPullRequestPayload, A])(implicit encoder0: ArgEncoder[ReopenPullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("reopenPullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ReopenPullRequestInput!")(encoder0)))
  /**
 * Set review requests on a pull request.
 */
def requestReviews[A](input : RequestReviewsInput)(innerSelection: SelectionBuilder[RequestReviewsPayload, A])(implicit encoder0: ArgEncoder[RequestReviewsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("requestReviews", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RequestReviewsInput!")(encoder0)))
  /**
 * Rerequests an existing check suite.
 */
def rerequestCheckSuite[A](input : RerequestCheckSuiteInput)(innerSelection: SelectionBuilder[RerequestCheckSuitePayload, A])(implicit encoder0: ArgEncoder[RerequestCheckSuiteInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("rerequestCheckSuite", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RerequestCheckSuiteInput!")(encoder0)))
  /**
 * Marks a review thread as resolved.
 */
def resolveReviewThread[A](input : ResolveReviewThreadInput)(innerSelection: SelectionBuilder[ResolveReviewThreadPayload, A])(implicit encoder0: ArgEncoder[ResolveReviewThreadInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("resolveReviewThread", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "ResolveReviewThreadInput!")(encoder0)))
  /**
 * Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships.
 */
def retireSponsorsTier[A](input : RetireSponsorsTierInput)(innerSelection: SelectionBuilder[RetireSponsorsTierPayload, A])(implicit encoder0: ArgEncoder[RetireSponsorsTierInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("retireSponsorsTier", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RetireSponsorsTierInput!")(encoder0)))
  /**
 * Create a pull request that reverts the changes from a merged pull request.
 */
def revertPullRequest[A](input : RevertPullRequestInput)(innerSelection: SelectionBuilder[RevertPullRequestPayload, A])(implicit encoder0: ArgEncoder[RevertPullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("revertPullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RevertPullRequestInput!")(encoder0)))
  /**
 * Revoke the migrator role to a user for all organizations under an enterprise account.
 */
def revokeEnterpriseOrganizationsMigratorRole[A](input : RevokeEnterpriseOrganizationsMigratorRoleInput)(innerSelection: SelectionBuilder[RevokeEnterpriseOrganizationsMigratorRolePayload, A])(implicit encoder0: ArgEncoder[RevokeEnterpriseOrganizationsMigratorRoleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("revokeEnterpriseOrganizationsMigratorRole", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RevokeEnterpriseOrganizationsMigratorRoleInput!")(encoder0)))
  /**
 * Revoke the migrator role from a user or a team.
 */
def revokeMigratorRole[A](input : RevokeMigratorRoleInput)(innerSelection: SelectionBuilder[RevokeMigratorRolePayload, A])(implicit encoder0: ArgEncoder[RevokeMigratorRoleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("revokeMigratorRole", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "RevokeMigratorRoleInput!")(encoder0)))
  /**
 * Creates or updates the identity provider for an enterprise.
 */
def setEnterpriseIdentityProvider[A](input : SetEnterpriseIdentityProviderInput)(innerSelection: SelectionBuilder[SetEnterpriseIdentityProviderPayload, A])(implicit encoder0: ArgEncoder[SetEnterpriseIdentityProviderInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("setEnterpriseIdentityProvider", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "SetEnterpriseIdentityProviderInput!")(encoder0)))
  /**
 * Set an organization level interaction limit for an organization's public repositories.
 */
def setOrganizationInteractionLimit[A](input : SetOrganizationInteractionLimitInput)(innerSelection: SelectionBuilder[SetOrganizationInteractionLimitPayload, A])(implicit encoder0: ArgEncoder[SetOrganizationInteractionLimitInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("setOrganizationInteractionLimit", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "SetOrganizationInteractionLimitInput!")(encoder0)))
  /**
 * Sets an interaction limit setting for a repository.
 */
def setRepositoryInteractionLimit[A](input : SetRepositoryInteractionLimitInput)(innerSelection: SelectionBuilder[SetRepositoryInteractionLimitPayload, A])(implicit encoder0: ArgEncoder[SetRepositoryInteractionLimitInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("setRepositoryInteractionLimit", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "SetRepositoryInteractionLimitInput!")(encoder0)))
  /**
 * Set a user level interaction limit for an user's public repositories.
 */
def setUserInteractionLimit[A](input : SetUserInteractionLimitInput)(innerSelection: SelectionBuilder[SetUserInteractionLimitPayload, A])(implicit encoder0: ArgEncoder[SetUserInteractionLimitInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("setUserInteractionLimit", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "SetUserInteractionLimitInput!")(encoder0)))
  /**
 * Starts a GitHub Enterprise Importer organization migration.
 */
def startOrganizationMigration[A](input : StartOrganizationMigrationInput)(innerSelection: SelectionBuilder[StartOrganizationMigrationPayload, A])(implicit encoder0: ArgEncoder[StartOrganizationMigrationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("startOrganizationMigration", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "StartOrganizationMigrationInput!")(encoder0)))
  /**
 * Starts a GitHub Enterprise Importer (GEI) repository migration.
 */
def startRepositoryMigration[A](input : StartRepositoryMigrationInput)(innerSelection: SelectionBuilder[StartRepositoryMigrationPayload, A])(implicit encoder0: ArgEncoder[StartRepositoryMigrationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("startRepositoryMigration", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "StartRepositoryMigrationInput!")(encoder0)))
  /**
 * Submits a pending pull request review.
 */
def submitPullRequestReview[A](input : SubmitPullRequestReviewInput)(innerSelection: SelectionBuilder[SubmitPullRequestReviewPayload, A])(implicit encoder0: ArgEncoder[SubmitPullRequestReviewInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("submitPullRequestReview", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "SubmitPullRequestReviewInput!")(encoder0)))
  /**
 * Transfer an organization from one enterprise to another enterprise.
 */
def transferEnterpriseOrganization[A](input : TransferEnterpriseOrganizationInput)(innerSelection: SelectionBuilder[TransferEnterpriseOrganizationPayload, A])(implicit encoder0: ArgEncoder[TransferEnterpriseOrganizationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("transferEnterpriseOrganization", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "TransferEnterpriseOrganizationInput!")(encoder0)))
  /**
 * Transfer an issue to a different repository
 */
def transferIssue[A](input : TransferIssueInput)(innerSelection: SelectionBuilder[TransferIssuePayload, A])(implicit encoder0: ArgEncoder[TransferIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("transferIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "TransferIssueInput!")(encoder0)))
  /**
 * Unarchives a ProjectV2Item
 */
def unarchiveProjectV2Item[A](input : UnarchiveProjectV2ItemInput)(innerSelection: SelectionBuilder[UnarchiveProjectV2ItemPayload, A])(implicit encoder0: ArgEncoder[UnarchiveProjectV2ItemInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unarchiveProjectV2Item", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnarchiveProjectV2ItemInput!")(encoder0)))
  /**
 * Unarchives a repository.
 */
def unarchiveRepository[A](input : UnarchiveRepositoryInput)(innerSelection: SelectionBuilder[UnarchiveRepositoryPayload, A])(implicit encoder0: ArgEncoder[UnarchiveRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unarchiveRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnarchiveRepositoryInput!")(encoder0)))
  /**
 * Unfollow an organization.
 */
def unfollowOrganization[A](input : UnfollowOrganizationInput)(innerSelection: SelectionBuilder[UnfollowOrganizationPayload, A])(implicit encoder0: ArgEncoder[UnfollowOrganizationInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unfollowOrganization", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnfollowOrganizationInput!")(encoder0)))
  /**
 * Unfollow a user.
 */
def unfollowUser[A](input : UnfollowUserInput)(innerSelection: SelectionBuilder[UnfollowUserPayload, A])(implicit encoder0: ArgEncoder[UnfollowUserInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unfollowUser", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnfollowUserInput!")(encoder0)))
  /**
 * Unlinks a project from a repository.
 */
def unlinkProjectV2FromRepository[A](input : UnlinkProjectV2FromRepositoryInput)(innerSelection: SelectionBuilder[UnlinkProjectV2FromRepositoryPayload, A])(implicit encoder0: ArgEncoder[UnlinkProjectV2FromRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unlinkProjectV2FromRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnlinkProjectV2FromRepositoryInput!")(encoder0)))
  /**
 * Unlinks a project to a team.
 */
def unlinkProjectV2FromTeam[A](input : UnlinkProjectV2FromTeamInput)(innerSelection: SelectionBuilder[UnlinkProjectV2FromTeamPayload, A])(implicit encoder0: ArgEncoder[UnlinkProjectV2FromTeamInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unlinkProjectV2FromTeam", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnlinkProjectV2FromTeamInput!")(encoder0)))
  /**
 * Deletes a repository link from a project.
 */
def unlinkRepositoryFromProject[A](input : UnlinkRepositoryFromProjectInput)(innerSelection: SelectionBuilder[UnlinkRepositoryFromProjectPayload, A])(implicit encoder0: ArgEncoder[UnlinkRepositoryFromProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unlinkRepositoryFromProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnlinkRepositoryFromProjectInput!")(encoder0)))
  /**
 * Unlock a lockable object
 */
def unlockLockable[A](input : UnlockLockableInput)(innerSelection: SelectionBuilder[UnlockLockablePayload, A])(implicit encoder0: ArgEncoder[UnlockLockableInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unlockLockable", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnlockLockableInput!")(encoder0)))
  /**
 * Unmark a discussion comment as the chosen answer for discussions in an answerable category.
 */
def unmarkDiscussionCommentAsAnswer[A](input : UnmarkDiscussionCommentAsAnswerInput)(innerSelection: SelectionBuilder[UnmarkDiscussionCommentAsAnswerPayload, A])(implicit encoder0: ArgEncoder[UnmarkDiscussionCommentAsAnswerInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unmarkDiscussionCommentAsAnswer", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnmarkDiscussionCommentAsAnswerInput!")(encoder0)))
  /**
 * Unmark a pull request file as viewed
 */
def unmarkFileAsViewed[A](input : UnmarkFileAsViewedInput)(innerSelection: SelectionBuilder[UnmarkFileAsViewedPayload, A])(implicit encoder0: ArgEncoder[UnmarkFileAsViewedInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unmarkFileAsViewed", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnmarkFileAsViewedInput!")(encoder0)))
  /**
 * Unmark an issue as a duplicate of another issue.
 */
def unmarkIssueAsDuplicate[A](input : UnmarkIssueAsDuplicateInput)(innerSelection: SelectionBuilder[UnmarkIssueAsDuplicatePayload, A])(implicit encoder0: ArgEncoder[UnmarkIssueAsDuplicateInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unmarkIssueAsDuplicate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnmarkIssueAsDuplicateInput!")(encoder0)))
  /**
 * Unmark a project as a template.
 */
def unmarkProjectV2AsTemplate[A](input : UnmarkProjectV2AsTemplateInput)(innerSelection: SelectionBuilder[UnmarkProjectV2AsTemplatePayload, A])(implicit encoder0: ArgEncoder[UnmarkProjectV2AsTemplateInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unmarkProjectV2AsTemplate", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnmarkProjectV2AsTemplateInput!")(encoder0)))
  /**
 * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
 */
def unminimizeComment[A](input : UnminimizeCommentInput)(innerSelection: SelectionBuilder[UnminimizeCommentPayload, A])(implicit encoder0: ArgEncoder[UnminimizeCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unminimizeComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnminimizeCommentInput!")(encoder0)))
  /**
 * Unpin a pinned issue from a repository
 */
def unpinIssue[A](input : UnpinIssueInput)(innerSelection: SelectionBuilder[UnpinIssuePayload, A])(implicit encoder0: ArgEncoder[UnpinIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unpinIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnpinIssueInput!")(encoder0)))
  /**
 * Marks a review thread as unresolved.
 */
def unresolveReviewThread[A](input : UnresolveReviewThreadInput)(innerSelection: SelectionBuilder[UnresolveReviewThreadPayload, A])(implicit encoder0: ArgEncoder[UnresolveReviewThreadInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("unresolveReviewThread", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UnresolveReviewThreadInput!")(encoder0)))
  /**
 * Update a branch protection rule
 */
def updateBranchProtectionRule[A](input : UpdateBranchProtectionRuleInput)(innerSelection: SelectionBuilder[UpdateBranchProtectionRulePayload, A])(implicit encoder0: ArgEncoder[UpdateBranchProtectionRuleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateBranchProtectionRule", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateBranchProtectionRuleInput!")(encoder0)))
  /**
 * Update a check run
 */
def updateCheckRun[A](input : UpdateCheckRunInput)(innerSelection: SelectionBuilder[UpdateCheckRunPayload, A])(implicit encoder0: ArgEncoder[UpdateCheckRunInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateCheckRun", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateCheckRunInput!")(encoder0)))
  /**
 * Modifies the settings of an existing check suite
 */
def updateCheckSuitePreferences[A](input : UpdateCheckSuitePreferencesInput)(innerSelection: SelectionBuilder[UpdateCheckSuitePreferencesPayload, A])(implicit encoder0: ArgEncoder[UpdateCheckSuitePreferencesInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateCheckSuitePreferences", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateCheckSuitePreferencesInput!")(encoder0)))
  /**
 * Update a discussion
 */
def updateDiscussion[A](input : UpdateDiscussionInput)(innerSelection: SelectionBuilder[UpdateDiscussionPayload, A])(implicit encoder0: ArgEncoder[UpdateDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateDiscussionInput!")(encoder0)))
  /**
 * Update the contents of a comment on a Discussion
 */
def updateDiscussionComment[A](input : UpdateDiscussionCommentInput)(innerSelection: SelectionBuilder[UpdateDiscussionCommentPayload, A])(implicit encoder0: ArgEncoder[UpdateDiscussionCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateDiscussionComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateDiscussionCommentInput!")(encoder0)))
  /**
 * Updates the role of an enterprise administrator.
 */
def updateEnterpriseAdministratorRole[A](input : UpdateEnterpriseAdministratorRoleInput)(innerSelection: SelectionBuilder[UpdateEnterpriseAdministratorRolePayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseAdministratorRoleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseAdministratorRole", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseAdministratorRoleInput!")(encoder0)))
  /**
 * Sets whether private repository forks are enabled for an enterprise.
 */
def updateEnterpriseAllowPrivateRepositoryForkingSetting[A](input : UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseAllowPrivateRepositoryForkingSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput!")(encoder0)))
  /**
 * Sets the base repository permission for organizations in an enterprise.
 */
def updateEnterpriseDefaultRepositoryPermissionSetting[A](input : UpdateEnterpriseDefaultRepositoryPermissionSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseDefaultRepositoryPermissionSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseDefaultRepositoryPermissionSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseDefaultRepositoryPermissionSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseDefaultRepositoryPermissionSettingInput!")(encoder0)))
  /**
 * Sets whether organization members with admin permissions on a repository can change repository visibility.
 */
def updateEnterpriseMembersCanChangeRepositoryVisibilitySetting[A](input : UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanChangeRepositoryVisibilitySetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput!")(encoder0)))
  /**
 * Sets the members can create repositories setting for an enterprise.
 */
def updateEnterpriseMembersCanCreateRepositoriesSetting[A](input : UpdateEnterpriseMembersCanCreateRepositoriesSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanCreateRepositoriesSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanCreateRepositoriesSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanCreateRepositoriesSettingInput!")(encoder0)))
  /**
 * Sets the members can delete issues setting for an enterprise.
 */
def updateEnterpriseMembersCanDeleteIssuesSetting[A](input : UpdateEnterpriseMembersCanDeleteIssuesSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanDeleteIssuesSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanDeleteIssuesSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanDeleteIssuesSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanDeleteIssuesSettingInput!")(encoder0)))
  /**
 * Sets the members can delete repositories setting for an enterprise.
 */
def updateEnterpriseMembersCanDeleteRepositoriesSetting[A](input : UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanDeleteRepositoriesSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput!")(encoder0)))
  /**
 * Sets whether members can invite collaborators are enabled for an enterprise.
 */
def updateEnterpriseMembersCanInviteCollaboratorsSetting[A](input : UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanInviteCollaboratorsSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput!")(encoder0)))
  /**
 * Sets whether or not an organization admin can make purchases.
 */
def updateEnterpriseMembersCanMakePurchasesSetting[A](input : UpdateEnterpriseMembersCanMakePurchasesSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanMakePurchasesSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanMakePurchasesSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanMakePurchasesSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanMakePurchasesSettingInput!")(encoder0)))
  /**
 * Sets the members can update protected branches setting for an enterprise.
 */
def updateEnterpriseMembersCanUpdateProtectedBranchesSetting[A](input : UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanUpdateProtectedBranchesSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput!")(encoder0)))
  /**
 * Sets the members can view dependency insights for an enterprise.
 */
def updateEnterpriseMembersCanViewDependencyInsightsSetting[A](input : UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseMembersCanViewDependencyInsightsSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput!")(encoder0)))
  /**
 * Sets whether organization projects are enabled for an enterprise.
 */
def updateEnterpriseOrganizationProjectsSetting[A](input : UpdateEnterpriseOrganizationProjectsSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseOrganizationProjectsSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseOrganizationProjectsSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseOrganizationProjectsSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseOrganizationProjectsSettingInput!")(encoder0)))
  /**
 * Updates the role of an enterprise owner with an organization.
 */
def updateEnterpriseOwnerOrganizationRole[A](input : UpdateEnterpriseOwnerOrganizationRoleInput)(innerSelection: SelectionBuilder[UpdateEnterpriseOwnerOrganizationRolePayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseOwnerOrganizationRoleInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseOwnerOrganizationRole", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseOwnerOrganizationRoleInput!")(encoder0)))
  /**
 * Updates an enterprise's profile.
 */
def updateEnterpriseProfile[A](input : UpdateEnterpriseProfileInput)(innerSelection: SelectionBuilder[UpdateEnterpriseProfilePayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseProfileInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseProfile", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseProfileInput!")(encoder0)))
  /**
 * Sets whether repository projects are enabled for a enterprise.
 */
def updateEnterpriseRepositoryProjectsSetting[A](input : UpdateEnterpriseRepositoryProjectsSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseRepositoryProjectsSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseRepositoryProjectsSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseRepositoryProjectsSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseRepositoryProjectsSettingInput!")(encoder0)))
  /**
 * Sets whether team discussions are enabled for an enterprise.
 */
def updateEnterpriseTeamDiscussionsSetting[A](input : UpdateEnterpriseTeamDiscussionsSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseTeamDiscussionsSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseTeamDiscussionsSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseTeamDiscussionsSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseTeamDiscussionsSettingInput!")(encoder0)))
  /**
 * Sets whether two factor authentication is required for all users in an enterprise.
 */
def updateEnterpriseTwoFactorAuthenticationRequiredSetting[A](input : UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput)(innerSelection: SelectionBuilder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnterpriseTwoFactorAuthenticationRequiredSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput!")(encoder0)))
  /**
 * Updates an environment.
 */
def updateEnvironment[A](input : UpdateEnvironmentInput)(innerSelection: SelectionBuilder[UpdateEnvironmentPayload, A])(implicit encoder0: ArgEncoder[UpdateEnvironmentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateEnvironment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateEnvironmentInput!")(encoder0)))
  /**
 * Sets whether an IP allow list is enabled on an owner.
 */
def updateIpAllowListEnabledSetting[A](input : UpdateIpAllowListEnabledSettingInput)(innerSelection: SelectionBuilder[UpdateIpAllowListEnabledSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateIpAllowListEnabledSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateIpAllowListEnabledSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateIpAllowListEnabledSettingInput!")(encoder0)))
  /**
 * Updates an IP allow list entry.
 */
def updateIpAllowListEntry[A](input : UpdateIpAllowListEntryInput)(innerSelection: SelectionBuilder[UpdateIpAllowListEntryPayload, A])(implicit encoder0: ArgEncoder[UpdateIpAllowListEntryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateIpAllowListEntry", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateIpAllowListEntryInput!")(encoder0)))
  /**
 * Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner.
 */
def updateIpAllowListForInstalledAppsEnabledSetting[A](input : UpdateIpAllowListForInstalledAppsEnabledSettingInput)(innerSelection: SelectionBuilder[UpdateIpAllowListForInstalledAppsEnabledSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateIpAllowListForInstalledAppsEnabledSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateIpAllowListForInstalledAppsEnabledSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateIpAllowListForInstalledAppsEnabledSettingInput!")(encoder0)))
  /**
 * Updates an Issue.
 */
def updateIssue[A](input : UpdateIssueInput)(innerSelection: SelectionBuilder[UpdateIssuePayload, A])(implicit encoder0: ArgEncoder[UpdateIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateIssueInput!")(encoder0)))
  /**
 * Updates an IssueComment object.
 */
def updateIssueComment[A](input : UpdateIssueCommentInput)(innerSelection: SelectionBuilder[UpdateIssueCommentPayload, A])(implicit encoder0: ArgEncoder[UpdateIssueCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateIssueComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateIssueCommentInput!")(encoder0)))
  /**
 * Updates an existing label.
 */
def updateLabel[A](input : UpdateLabelInput)(innerSelection: SelectionBuilder[UpdateLabelPayload, A])(implicit encoder0: ArgEncoder[UpdateLabelInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateLabel", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateLabelInput!")(encoder0)))
  /**
 * Update the setting to restrict notifications to only verified or approved domains available to an owner.
 */
def updateNotificationRestrictionSetting[A](input : UpdateNotificationRestrictionSettingInput)(innerSelection: SelectionBuilder[UpdateNotificationRestrictionSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateNotificationRestrictionSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateNotificationRestrictionSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateNotificationRestrictionSettingInput!")(encoder0)))
  /**
 * Sets whether private repository forks are enabled for an organization.
 */
def updateOrganizationAllowPrivateRepositoryForkingSetting[A](input : UpdateOrganizationAllowPrivateRepositoryForkingSettingInput)(innerSelection: SelectionBuilder[UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateOrganizationAllowPrivateRepositoryForkingSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateOrganizationAllowPrivateRepositoryForkingSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateOrganizationAllowPrivateRepositoryForkingSettingInput!")(encoder0)))
  /**
 * Sets whether contributors are required to sign off on web-based commits for repositories in an organization.
 */
def updateOrganizationWebCommitSignoffSetting[A](input : UpdateOrganizationWebCommitSignoffSettingInput)(innerSelection: SelectionBuilder[UpdateOrganizationWebCommitSignoffSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateOrganizationWebCommitSignoffSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateOrganizationWebCommitSignoffSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateOrganizationWebCommitSignoffSettingInput!")(encoder0)))
  /**
 * Updates an existing project.
 */
def updateProject[A](input : UpdateProjectInput)(innerSelection: SelectionBuilder[UpdateProjectPayload, A])(implicit encoder0: ArgEncoder[UpdateProjectInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProject", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectInput!")(encoder0)))
  /**
 * Updates an existing project card.
 */
def updateProjectCard[A](input : UpdateProjectCardInput)(innerSelection: SelectionBuilder[UpdateProjectCardPayload, A])(implicit encoder0: ArgEncoder[UpdateProjectCardInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProjectCard", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectCardInput!")(encoder0)))
  /**
 * Updates an existing project column.
 */
def updateProjectColumn[A](input : UpdateProjectColumnInput)(innerSelection: SelectionBuilder[UpdateProjectColumnPayload, A])(implicit encoder0: ArgEncoder[UpdateProjectColumnInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProjectColumn", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectColumnInput!")(encoder0)))
  /**
 * Updates an existing project (beta).
 */
def updateProjectV2[A](input : UpdateProjectV2Input)(innerSelection: SelectionBuilder[UpdateProjectV2Payload, A])(implicit encoder0: ArgEncoder[UpdateProjectV2Input]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProjectV2", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectV2Input!")(encoder0)))
  /**
 * Updates a draft issue within a Project.
 */
def updateProjectV2DraftIssue[A](input : UpdateProjectV2DraftIssueInput)(innerSelection: SelectionBuilder[UpdateProjectV2DraftIssuePayload, A])(implicit encoder0: ArgEncoder[UpdateProjectV2DraftIssueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProjectV2DraftIssue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectV2DraftIssueInput!")(encoder0)))
  /**
 * This mutation updates the value of a field for an item in a Project. Currently
only single-select, text, number, date, and iteration fields are supported.
 */
def updateProjectV2ItemFieldValue[A](input : UpdateProjectV2ItemFieldValueInput)(innerSelection: SelectionBuilder[UpdateProjectV2ItemFieldValuePayload, A])(implicit encoder0: ArgEncoder[UpdateProjectV2ItemFieldValueInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProjectV2ItemFieldValue", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectV2ItemFieldValueInput!")(encoder0)))
  /**
 * This mutation updates the position of the item in the project, where the position represents the priority of an item.
 */
def updateProjectV2ItemPosition[A](input : UpdateProjectV2ItemPositionInput)(innerSelection: SelectionBuilder[UpdateProjectV2ItemPositionPayload, A])(implicit encoder0: ArgEncoder[UpdateProjectV2ItemPositionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateProjectV2ItemPosition", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateProjectV2ItemPositionInput!")(encoder0)))
  /**
 * Update a pull request
 */
def updatePullRequest[A](input : UpdatePullRequestInput)(innerSelection: SelectionBuilder[UpdatePullRequestPayload, A])(implicit encoder0: ArgEncoder[UpdatePullRequestInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updatePullRequest", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdatePullRequestInput!")(encoder0)))
  /**
 * Merge or Rebase HEAD from upstream branch into pull request branch
 */
def updatePullRequestBranch[A](input : UpdatePullRequestBranchInput)(innerSelection: SelectionBuilder[UpdatePullRequestBranchPayload, A])(implicit encoder0: ArgEncoder[UpdatePullRequestBranchInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updatePullRequestBranch", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdatePullRequestBranchInput!")(encoder0)))
  /**
 * Updates the body of a pull request review.
 */
def updatePullRequestReview[A](input : UpdatePullRequestReviewInput)(innerSelection: SelectionBuilder[UpdatePullRequestReviewPayload, A])(implicit encoder0: ArgEncoder[UpdatePullRequestReviewInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updatePullRequestReview", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdatePullRequestReviewInput!")(encoder0)))
  /**
 * Updates a pull request review comment.
 */
def updatePullRequestReviewComment[A](input : UpdatePullRequestReviewCommentInput)(innerSelection: SelectionBuilder[UpdatePullRequestReviewCommentPayload, A])(implicit encoder0: ArgEncoder[UpdatePullRequestReviewCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updatePullRequestReviewComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdatePullRequestReviewCommentInput!")(encoder0)))
  /**
 * Update a Git Ref.
 */
def updateRef[A](input : UpdateRefInput)(innerSelection: SelectionBuilder[UpdateRefPayload, A])(implicit encoder0: ArgEncoder[UpdateRefInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateRef", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateRefInput!")(encoder0)))
  /**
 * Creates, updates and/or deletes multiple refs in a repository.

This mutation takes a list of `RefUpdate`s and performs these updates
on the repository. All updates are performed atomically, meaning that
if one of them is rejected, no other ref will be modified.

`RefUpdate.beforeOid` specifies that the given reference needs to point
to the given value before performing any updates. A value of
`0000000000000000000000000000000000000000` can be used to verify that
the references should not exist.

`RefUpdate.afterOid` specifies the value that the given reference
will point to after performing all updates. A value of
`0000000000000000000000000000000000000000` can be used to delete a
reference.

If `RefUpdate.force` is set to `true`, a non-fast-forward updates
for the given reference will be allowed.
 */
def updateRefs[A](input : UpdateRefsInput)(innerSelection: SelectionBuilder[UpdateRefsPayload, A])(implicit encoder0: ArgEncoder[UpdateRefsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateRefs", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateRefsInput!")(encoder0)))
  /**
 * Update information about a repository.
 */
def updateRepository[A](input : UpdateRepositoryInput)(innerSelection: SelectionBuilder[UpdateRepositoryPayload, A])(implicit encoder0: ArgEncoder[UpdateRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateRepositoryInput!")(encoder0)))
  /**
 * Update a repository ruleset
 */
def updateRepositoryRuleset[A](input : UpdateRepositoryRulesetInput)(innerSelection: SelectionBuilder[UpdateRepositoryRulesetPayload, A])(implicit encoder0: ArgEncoder[UpdateRepositoryRulesetInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateRepositoryRuleset", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateRepositoryRulesetInput!")(encoder0)))
  /**
 * Sets whether contributors are required to sign off on web-based commits for a repository.
 */
def updateRepositoryWebCommitSignoffSetting[A](input : UpdateRepositoryWebCommitSignoffSettingInput)(innerSelection: SelectionBuilder[UpdateRepositoryWebCommitSignoffSettingPayload, A])(implicit encoder0: ArgEncoder[UpdateRepositoryWebCommitSignoffSettingInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateRepositoryWebCommitSignoffSetting", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateRepositoryWebCommitSignoffSettingInput!")(encoder0)))
  /**
 * Change visibility of your sponsorship and opt in or out of email updates from the maintainer.
 */
def updateSponsorshipPreferences[A](input : UpdateSponsorshipPreferencesInput)(innerSelection: SelectionBuilder[UpdateSponsorshipPreferencesPayload, A])(implicit encoder0: ArgEncoder[UpdateSponsorshipPreferencesInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateSponsorshipPreferences", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateSponsorshipPreferencesInput!")(encoder0)))
  /**
 * Updates the state for subscribable subjects.
 */
def updateSubscription[A](input : UpdateSubscriptionInput)(innerSelection: SelectionBuilder[UpdateSubscriptionPayload, A])(implicit encoder0: ArgEncoder[UpdateSubscriptionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateSubscription", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateSubscriptionInput!")(encoder0)))
  /**
 * Updates a team discussion.
 */
def updateTeamDiscussion[A](input : UpdateTeamDiscussionInput)(innerSelection: SelectionBuilder[UpdateTeamDiscussionPayload, A])(implicit encoder0: ArgEncoder[UpdateTeamDiscussionInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateTeamDiscussion", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateTeamDiscussionInput!")(encoder0)))
  /**
 * Updates a discussion comment.
 */
def updateTeamDiscussionComment[A](input : UpdateTeamDiscussionCommentInput)(innerSelection: SelectionBuilder[UpdateTeamDiscussionCommentPayload, A])(implicit encoder0: ArgEncoder[UpdateTeamDiscussionCommentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateTeamDiscussionComment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateTeamDiscussionCommentInput!")(encoder0)))
  /**
 * Updates team review assignment.
 */
def updateTeamReviewAssignment[A](input : UpdateTeamReviewAssignmentInput)(innerSelection: SelectionBuilder[UpdateTeamReviewAssignmentPayload, A])(implicit encoder0: ArgEncoder[UpdateTeamReviewAssignmentInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateTeamReviewAssignment", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateTeamReviewAssignmentInput!")(encoder0)))
  /**
 * Update team repository.
 */
def updateTeamsRepository[A](input : UpdateTeamsRepositoryInput)(innerSelection: SelectionBuilder[UpdateTeamsRepositoryPayload, A])(implicit encoder0: ArgEncoder[UpdateTeamsRepositoryInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateTeamsRepository", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateTeamsRepositoryInput!")(encoder0)))
  /**
 * Replaces the repository's topics with the given topics.
 */
def updateTopics[A](input : UpdateTopicsInput)(innerSelection: SelectionBuilder[UpdateTopicsPayload, A])(implicit encoder0: ArgEncoder[UpdateTopicsInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("updateTopics", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "UpdateTopicsInput!")(encoder0)))
  /**
 * Verify that a verifiable domain has the expected DNS record.
 */
def verifyVerifiableDomain[A](input : VerifyVerifiableDomainInput)(innerSelection: SelectionBuilder[VerifyVerifiableDomainPayload, A])(implicit encoder0: ArgEncoder[VerifyVerifiableDomainInput]): SelectionBuilder[_root_.caliban.client.Operations.RootMutation, scala.Option[A]] = _root_.caliban.client.SelectionBuilder.Field("verifyVerifiableDomain", OptionOf(Obj(innerSelection)), arguments = List(Argument("input", input, "VerifyVerifiableDomainInput!")(encoder0)))
}


  

}